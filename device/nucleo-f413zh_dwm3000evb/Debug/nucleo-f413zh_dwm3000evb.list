
nucleo-f413zh_dwm3000evb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019548  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  08019728  08019728  00029728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f84  08019f84  00030a50  2**0
                  CONTENTS
  4 .ARM          00000008  08019f84  08019f84  00029f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f8c  08019f8c  00030a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019f8c  08019f8c  00029f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f94  08019f94  00029f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  08019f98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  20000a50  0801a9e8  00030a50  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000127c  0801a9e8  0003127c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197e0  00000000  00000000  00030a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ba  00000000  00000000  0004a25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0004db18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00025ec6  00000000  00000000  0004f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b76d  00000000  00000000  00074ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d526f  00000000  00000000  0009063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000cf  00000000  00000000  001658aa  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001368  00000000  00000000  00165980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000709c  00000000  00000000  00166ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <dw3000_driver>:
 80001e0:	12 03 ca de 0f ff ff ff 78 99 01 08 80 99 01 08     ........x.......
 80001f0:	b4 98 01 08 78 98 01 08 07 00 06 00                 ....x.......

080001fc <dw3700_driver>:
 80001fc:	13 03 ca de 0f ff ff ff 78 99 01 08 80 99 01 08     ........x.......
 800020c:	f4 99 01 08 b8 99 01 08 07 00 06 00                 ............

08000218 <dw3720_driver>:
 8000218:	14 03 ca de 0f ff ff ff 78 99 01 08 80 99 01 08     ........x.......
 8000228:	04 9b 01 08 c8 9a 01 08 07 00 06 00                 ............

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000a50 	.word	0x20000a50
 8000250:	00000000 	.word	0x00000000
 8000254:	08019710 	.word	0x08019710

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000a54 	.word	0x20000a54
 8000270:	08019710 	.word	0x08019710
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2uiz>:
 8000c58:	004a      	lsls	r2, r1, #1
 8000c5a:	d211      	bcs.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d211      	bcs.n	8000c86 <__aeabi_d2uiz+0x2e>
 8000c62:	d50d      	bpl.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d40e      	bmi.n	8000c8c <__aeabi_d2uiz+0x34>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d102      	bne.n	8000c92 <__aeabi_d2uiz+0x3a>
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fmul>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d06f      	beq.n	8000fac <__aeabi_fmul+0xf8>
 8000ecc:	441a      	add	r2, r3
 8000ece:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	bf18      	it	ne
 8000ed6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eda:	d01e      	beq.n	8000f1a <__aeabi_fmul+0x66>
 8000edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ee0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ee4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ee8:	fba0 3101 	umull	r3, r1, r0, r1
 8000eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ef4:	bf3e      	ittt	cc
 8000ef6:	0049      	lslcc	r1, r1, #1
 8000ef8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	ea40 0001 	orr.w	r0, r0, r1
 8000f02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f06:	2afd      	cmp	r2, #253	; 0xfd
 8000f08:	d81d      	bhi.n	8000f46 <__aeabi_fmul+0x92>
 8000f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f12:	bf08      	it	eq
 8000f14:	f020 0001 	biceq.w	r0, r0, #1
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	0249      	lsleq	r1, r1, #9
 8000f26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f2e:	3a7f      	subs	r2, #127	; 0x7f
 8000f30:	bfc2      	ittt	gt
 8000f32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f3a:	4770      	bxgt	lr
 8000f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	3a01      	subs	r2, #1
 8000f46:	dc5d      	bgt.n	8001004 <__aeabi_fmul+0x150>
 8000f48:	f112 0f19 	cmn.w	r2, #25
 8000f4c:	bfdc      	itt	le
 8000f4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f52:	4770      	bxle	lr
 8000f54:	f1c2 0200 	rsb	r2, r2, #0
 8000f58:	0041      	lsls	r1, r0, #1
 8000f5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f5e:	f1c2 0220 	rsb	r2, r2, #32
 8000f62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f6a:	f140 0000 	adc.w	r0, r0, #0
 8000f6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f72:	bf08      	it	eq
 8000f74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f78:	4770      	bx	lr
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fmul+0xce>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fmul+0xe6>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e78f      	b.n	8000ecc <__aeabi_fmul+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	bf18      	it	ne
 8000fb6:	ea93 0f0c 	teqne	r3, ip
 8000fba:	d00a      	beq.n	8000fd2 <__aeabi_fmul+0x11e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1d8      	bne.n	8000f7a <__aeabi_fmul+0xc6>
 8000fc8:	ea80 0001 	eor.w	r0, r0, r1
 8000fcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fd0:	4770      	bx	lr
 8000fd2:	f090 0f00 	teq	r0, #0
 8000fd6:	bf17      	itett	ne
 8000fd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fdc:	4608      	moveq	r0, r1
 8000fde:	f091 0f00 	teqne	r1, #0
 8000fe2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fe6:	d014      	beq.n	8001012 <__aeabi_fmul+0x15e>
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_fmul+0x13e>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d10f      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8000ff2:	ea93 0f0c 	teq	r3, ip
 8000ff6:	d103      	bne.n	8001000 <__aeabi_fmul+0x14c>
 8000ff8:	024b      	lsls	r3, r1, #9
 8000ffa:	bf18      	it	ne
 8000ffc:	4608      	movne	r0, r1
 8000ffe:	d108      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8001000:	ea80 0001 	eor.w	r0, r0, r1
 8001004:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800100c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001010:	4770      	bx	lr
 8001012:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001016:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800101a:	4770      	bx	lr

0800101c <__aeabi_fdiv>:
 800101c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001020:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001024:	bf1e      	ittt	ne
 8001026:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800102a:	ea92 0f0c 	teqne	r2, ip
 800102e:	ea93 0f0c 	teqne	r3, ip
 8001032:	d069      	beq.n	8001108 <__aeabi_fdiv+0xec>
 8001034:	eba2 0203 	sub.w	r2, r2, r3
 8001038:	ea80 0c01 	eor.w	ip, r0, r1
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001042:	d037      	beq.n	80010b4 <__aeabi_fdiv+0x98>
 8001044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001048:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800104c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001050:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001054:	428b      	cmp	r3, r1
 8001056:	bf38      	it	cc
 8001058:	005b      	lslcc	r3, r3, #1
 800105a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800105e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001062:	428b      	cmp	r3, r1
 8001064:	bf24      	itt	cs
 8001066:	1a5b      	subcs	r3, r3, r1
 8001068:	ea40 000c 	orrcs.w	r0, r0, ip
 800106c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001070:	bf24      	itt	cs
 8001072:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001076:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800107a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800107e:	bf24      	itt	cs
 8001080:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001084:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001088:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800108c:	bf24      	itt	cs
 800108e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001092:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	bf18      	it	ne
 800109a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800109e:	d1e0      	bne.n	8001062 <__aeabi_fdiv+0x46>
 80010a0:	2afd      	cmp	r2, #253	; 0xfd
 80010a2:	f63f af50 	bhi.w	8000f46 <__aeabi_fmul+0x92>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010ac:	bf08      	it	eq
 80010ae:	f020 0001 	biceq.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010bc:	327f      	adds	r2, #127	; 0x7f
 80010be:	bfc2      	ittt	gt
 80010c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010c8:	4770      	bxgt	lr
 80010ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	3a01      	subs	r2, #1
 80010d4:	e737      	b.n	8000f46 <__aeabi_fmul+0x92>
 80010d6:	f092 0f00 	teq	r2, #0
 80010da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010de:	bf02      	ittt	eq
 80010e0:	0040      	lsleq	r0, r0, #1
 80010e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010e6:	3a01      	subeq	r2, #1
 80010e8:	d0f9      	beq.n	80010de <__aeabi_fdiv+0xc2>
 80010ea:	ea40 000c 	orr.w	r0, r0, ip
 80010ee:	f093 0f00 	teq	r3, #0
 80010f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010f6:	bf02      	ittt	eq
 80010f8:	0049      	lsleq	r1, r1, #1
 80010fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010fe:	3b01      	subeq	r3, #1
 8001100:	d0f9      	beq.n	80010f6 <__aeabi_fdiv+0xda>
 8001102:	ea41 010c 	orr.w	r1, r1, ip
 8001106:	e795      	b.n	8001034 <__aeabi_fdiv+0x18>
 8001108:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800110c:	ea92 0f0c 	teq	r2, ip
 8001110:	d108      	bne.n	8001124 <__aeabi_fdiv+0x108>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	f47f af7d 	bne.w	8001012 <__aeabi_fmul+0x15e>
 8001118:	ea93 0f0c 	teq	r3, ip
 800111c:	f47f af70 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001120:	4608      	mov	r0, r1
 8001122:	e776      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001124:	ea93 0f0c 	teq	r3, ip
 8001128:	d104      	bne.n	8001134 <__aeabi_fdiv+0x118>
 800112a:	024b      	lsls	r3, r1, #9
 800112c:	f43f af4c 	beq.w	8000fc8 <__aeabi_fmul+0x114>
 8001130:	4608      	mov	r0, r1
 8001132:	e76e      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001134:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001138:	bf18      	it	ne
 800113a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800113e:	d1ca      	bne.n	80010d6 <__aeabi_fdiv+0xba>
 8001140:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001144:	f47f af5c 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001148:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800114c:	f47f af3c 	bne.w	8000fc8 <__aeabi_fmul+0x114>
 8001150:	e75f      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001152:	bf00      	nop

08001154 <__aeabi_uldivmod>:
 8001154:	b953      	cbnz	r3, 800116c <__aeabi_uldivmod+0x18>
 8001156:	b94a      	cbnz	r2, 800116c <__aeabi_uldivmod+0x18>
 8001158:	2900      	cmp	r1, #0
 800115a:	bf08      	it	eq
 800115c:	2800      	cmpeq	r0, #0
 800115e:	bf1c      	itt	ne
 8001160:	f04f 31ff 	movne.w	r1, #4294967295
 8001164:	f04f 30ff 	movne.w	r0, #4294967295
 8001168:	f000 b974 	b.w	8001454 <__aeabi_idiv0>
 800116c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001174:	f000 f806 	bl	8001184 <__udivmoddi4>
 8001178:	f8dd e004 	ldr.w	lr, [sp, #4]
 800117c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <__udivmoddi4>:
 8001184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001188:	9d08      	ldr	r5, [sp, #32]
 800118a:	4604      	mov	r4, r0
 800118c:	468e      	mov	lr, r1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d14d      	bne.n	800122e <__udivmoddi4+0xaa>
 8001192:	428a      	cmp	r2, r1
 8001194:	4694      	mov	ip, r2
 8001196:	d969      	bls.n	800126c <__udivmoddi4+0xe8>
 8001198:	fab2 f282 	clz	r2, r2
 800119c:	b152      	cbz	r2, 80011b4 <__udivmoddi4+0x30>
 800119e:	fa01 f302 	lsl.w	r3, r1, r2
 80011a2:	f1c2 0120 	rsb	r1, r2, #32
 80011a6:	fa20 f101 	lsr.w	r1, r0, r1
 80011aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80011ae:	ea41 0e03 	orr.w	lr, r1, r3
 80011b2:	4094      	lsls	r4, r2
 80011b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b8:	0c21      	lsrs	r1, r4, #16
 80011ba:	fbbe f6f8 	udiv	r6, lr, r8
 80011be:	fa1f f78c 	uxth.w	r7, ip
 80011c2:	fb08 e316 	mls	r3, r8, r6, lr
 80011c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011ca:	fb06 f107 	mul.w	r1, r6, r7
 80011ce:	4299      	cmp	r1, r3
 80011d0:	d90a      	bls.n	80011e8 <__udivmoddi4+0x64>
 80011d2:	eb1c 0303 	adds.w	r3, ip, r3
 80011d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80011da:	f080 811f 	bcs.w	800141c <__udivmoddi4+0x298>
 80011de:	4299      	cmp	r1, r3
 80011e0:	f240 811c 	bls.w	800141c <__udivmoddi4+0x298>
 80011e4:	3e02      	subs	r6, #2
 80011e6:	4463      	add	r3, ip
 80011e8:	1a5b      	subs	r3, r3, r1
 80011ea:	b2a4      	uxth	r4, r4
 80011ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80011f0:	fb08 3310 	mls	r3, r8, r0, r3
 80011f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011f8:	fb00 f707 	mul.w	r7, r0, r7
 80011fc:	42a7      	cmp	r7, r4
 80011fe:	d90a      	bls.n	8001216 <__udivmoddi4+0x92>
 8001200:	eb1c 0404 	adds.w	r4, ip, r4
 8001204:	f100 33ff 	add.w	r3, r0, #4294967295
 8001208:	f080 810a 	bcs.w	8001420 <__udivmoddi4+0x29c>
 800120c:	42a7      	cmp	r7, r4
 800120e:	f240 8107 	bls.w	8001420 <__udivmoddi4+0x29c>
 8001212:	4464      	add	r4, ip
 8001214:	3802      	subs	r0, #2
 8001216:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121a:	1be4      	subs	r4, r4, r7
 800121c:	2600      	movs	r6, #0
 800121e:	b11d      	cbz	r5, 8001228 <__udivmoddi4+0xa4>
 8001220:	40d4      	lsrs	r4, r2
 8001222:	2300      	movs	r3, #0
 8001224:	e9c5 4300 	strd	r4, r3, [r5]
 8001228:	4631      	mov	r1, r6
 800122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122e:	428b      	cmp	r3, r1
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0xc2>
 8001232:	2d00      	cmp	r5, #0
 8001234:	f000 80ef 	beq.w	8001416 <__udivmoddi4+0x292>
 8001238:	2600      	movs	r6, #0
 800123a:	e9c5 0100 	strd	r0, r1, [r5]
 800123e:	4630      	mov	r0, r6
 8001240:	4631      	mov	r1, r6
 8001242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001246:	fab3 f683 	clz	r6, r3
 800124a:	2e00      	cmp	r6, #0
 800124c:	d14a      	bne.n	80012e4 <__udivmoddi4+0x160>
 800124e:	428b      	cmp	r3, r1
 8001250:	d302      	bcc.n	8001258 <__udivmoddi4+0xd4>
 8001252:	4282      	cmp	r2, r0
 8001254:	f200 80f9 	bhi.w	800144a <__udivmoddi4+0x2c6>
 8001258:	1a84      	subs	r4, r0, r2
 800125a:	eb61 0303 	sbc.w	r3, r1, r3
 800125e:	2001      	movs	r0, #1
 8001260:	469e      	mov	lr, r3
 8001262:	2d00      	cmp	r5, #0
 8001264:	d0e0      	beq.n	8001228 <__udivmoddi4+0xa4>
 8001266:	e9c5 4e00 	strd	r4, lr, [r5]
 800126a:	e7dd      	b.n	8001228 <__udivmoddi4+0xa4>
 800126c:	b902      	cbnz	r2, 8001270 <__udivmoddi4+0xec>
 800126e:	deff      	udf	#255	; 0xff
 8001270:	fab2 f282 	clz	r2, r2
 8001274:	2a00      	cmp	r2, #0
 8001276:	f040 8092 	bne.w	800139e <__udivmoddi4+0x21a>
 800127a:	eba1 010c 	sub.w	r1, r1, ip
 800127e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001282:	fa1f fe8c 	uxth.w	lr, ip
 8001286:	2601      	movs	r6, #1
 8001288:	0c20      	lsrs	r0, r4, #16
 800128a:	fbb1 f3f7 	udiv	r3, r1, r7
 800128e:	fb07 1113 	mls	r1, r7, r3, r1
 8001292:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001296:	fb0e f003 	mul.w	r0, lr, r3
 800129a:	4288      	cmp	r0, r1
 800129c:	d908      	bls.n	80012b0 <__udivmoddi4+0x12c>
 800129e:	eb1c 0101 	adds.w	r1, ip, r1
 80012a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80012a6:	d202      	bcs.n	80012ae <__udivmoddi4+0x12a>
 80012a8:	4288      	cmp	r0, r1
 80012aa:	f200 80cb 	bhi.w	8001444 <__udivmoddi4+0x2c0>
 80012ae:	4643      	mov	r3, r8
 80012b0:	1a09      	subs	r1, r1, r0
 80012b2:	b2a4      	uxth	r4, r4
 80012b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80012b8:	fb07 1110 	mls	r1, r7, r0, r1
 80012bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80012c0:	fb0e fe00 	mul.w	lr, lr, r0
 80012c4:	45a6      	cmp	lr, r4
 80012c6:	d908      	bls.n	80012da <__udivmoddi4+0x156>
 80012c8:	eb1c 0404 	adds.w	r4, ip, r4
 80012cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0x154>
 80012d2:	45a6      	cmp	lr, r4
 80012d4:	f200 80bb 	bhi.w	800144e <__udivmoddi4+0x2ca>
 80012d8:	4608      	mov	r0, r1
 80012da:	eba4 040e 	sub.w	r4, r4, lr
 80012de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012e2:	e79c      	b.n	800121e <__udivmoddi4+0x9a>
 80012e4:	f1c6 0720 	rsb	r7, r6, #32
 80012e8:	40b3      	lsls	r3, r6
 80012ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80012ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80012f2:	fa20 f407 	lsr.w	r4, r0, r7
 80012f6:	fa01 f306 	lsl.w	r3, r1, r6
 80012fa:	431c      	orrs	r4, r3
 80012fc:	40f9      	lsrs	r1, r7
 80012fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001302:	fa00 f306 	lsl.w	r3, r0, r6
 8001306:	fbb1 f8f9 	udiv	r8, r1, r9
 800130a:	0c20      	lsrs	r0, r4, #16
 800130c:	fa1f fe8c 	uxth.w	lr, ip
 8001310:	fb09 1118 	mls	r1, r9, r8, r1
 8001314:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001318:	fb08 f00e 	mul.w	r0, r8, lr
 800131c:	4288      	cmp	r0, r1
 800131e:	fa02 f206 	lsl.w	r2, r2, r6
 8001322:	d90b      	bls.n	800133c <__udivmoddi4+0x1b8>
 8001324:	eb1c 0101 	adds.w	r1, ip, r1
 8001328:	f108 3aff 	add.w	sl, r8, #4294967295
 800132c:	f080 8088 	bcs.w	8001440 <__udivmoddi4+0x2bc>
 8001330:	4288      	cmp	r0, r1
 8001332:	f240 8085 	bls.w	8001440 <__udivmoddi4+0x2bc>
 8001336:	f1a8 0802 	sub.w	r8, r8, #2
 800133a:	4461      	add	r1, ip
 800133c:	1a09      	subs	r1, r1, r0
 800133e:	b2a4      	uxth	r4, r4
 8001340:	fbb1 f0f9 	udiv	r0, r1, r9
 8001344:	fb09 1110 	mls	r1, r9, r0, r1
 8001348:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800134c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001350:	458e      	cmp	lr, r1
 8001352:	d908      	bls.n	8001366 <__udivmoddi4+0x1e2>
 8001354:	eb1c 0101 	adds.w	r1, ip, r1
 8001358:	f100 34ff 	add.w	r4, r0, #4294967295
 800135c:	d26c      	bcs.n	8001438 <__udivmoddi4+0x2b4>
 800135e:	458e      	cmp	lr, r1
 8001360:	d96a      	bls.n	8001438 <__udivmoddi4+0x2b4>
 8001362:	3802      	subs	r0, #2
 8001364:	4461      	add	r1, ip
 8001366:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800136a:	fba0 9402 	umull	r9, r4, r0, r2
 800136e:	eba1 010e 	sub.w	r1, r1, lr
 8001372:	42a1      	cmp	r1, r4
 8001374:	46c8      	mov	r8, r9
 8001376:	46a6      	mov	lr, r4
 8001378:	d356      	bcc.n	8001428 <__udivmoddi4+0x2a4>
 800137a:	d053      	beq.n	8001424 <__udivmoddi4+0x2a0>
 800137c:	b15d      	cbz	r5, 8001396 <__udivmoddi4+0x212>
 800137e:	ebb3 0208 	subs.w	r2, r3, r8
 8001382:	eb61 010e 	sbc.w	r1, r1, lr
 8001386:	fa01 f707 	lsl.w	r7, r1, r7
 800138a:	fa22 f306 	lsr.w	r3, r2, r6
 800138e:	40f1      	lsrs	r1, r6
 8001390:	431f      	orrs	r7, r3
 8001392:	e9c5 7100 	strd	r7, r1, [r5]
 8001396:	2600      	movs	r6, #0
 8001398:	4631      	mov	r1, r6
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	f1c2 0320 	rsb	r3, r2, #32
 80013a2:	40d8      	lsrs	r0, r3
 80013a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013a8:	fa21 f303 	lsr.w	r3, r1, r3
 80013ac:	4091      	lsls	r1, r2
 80013ae:	4301      	orrs	r1, r0
 80013b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b4:	fa1f fe8c 	uxth.w	lr, ip
 80013b8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013bc:	fb07 3610 	mls	r6, r7, r0, r3
 80013c0:	0c0b      	lsrs	r3, r1, #16
 80013c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80013c6:	fb00 f60e 	mul.w	r6, r0, lr
 80013ca:	429e      	cmp	r6, r3
 80013cc:	fa04 f402 	lsl.w	r4, r4, r2
 80013d0:	d908      	bls.n	80013e4 <__udivmoddi4+0x260>
 80013d2:	eb1c 0303 	adds.w	r3, ip, r3
 80013d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80013da:	d22f      	bcs.n	800143c <__udivmoddi4+0x2b8>
 80013dc:	429e      	cmp	r6, r3
 80013de:	d92d      	bls.n	800143c <__udivmoddi4+0x2b8>
 80013e0:	3802      	subs	r0, #2
 80013e2:	4463      	add	r3, ip
 80013e4:	1b9b      	subs	r3, r3, r6
 80013e6:	b289      	uxth	r1, r1
 80013e8:	fbb3 f6f7 	udiv	r6, r3, r7
 80013ec:	fb07 3316 	mls	r3, r7, r6, r3
 80013f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013f4:	fb06 f30e 	mul.w	r3, r6, lr
 80013f8:	428b      	cmp	r3, r1
 80013fa:	d908      	bls.n	800140e <__udivmoddi4+0x28a>
 80013fc:	eb1c 0101 	adds.w	r1, ip, r1
 8001400:	f106 38ff 	add.w	r8, r6, #4294967295
 8001404:	d216      	bcs.n	8001434 <__udivmoddi4+0x2b0>
 8001406:	428b      	cmp	r3, r1
 8001408:	d914      	bls.n	8001434 <__udivmoddi4+0x2b0>
 800140a:	3e02      	subs	r6, #2
 800140c:	4461      	add	r1, ip
 800140e:	1ac9      	subs	r1, r1, r3
 8001410:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001414:	e738      	b.n	8001288 <__udivmoddi4+0x104>
 8001416:	462e      	mov	r6, r5
 8001418:	4628      	mov	r0, r5
 800141a:	e705      	b.n	8001228 <__udivmoddi4+0xa4>
 800141c:	4606      	mov	r6, r0
 800141e:	e6e3      	b.n	80011e8 <__udivmoddi4+0x64>
 8001420:	4618      	mov	r0, r3
 8001422:	e6f8      	b.n	8001216 <__udivmoddi4+0x92>
 8001424:	454b      	cmp	r3, r9
 8001426:	d2a9      	bcs.n	800137c <__udivmoddi4+0x1f8>
 8001428:	ebb9 0802 	subs.w	r8, r9, r2
 800142c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001430:	3801      	subs	r0, #1
 8001432:	e7a3      	b.n	800137c <__udivmoddi4+0x1f8>
 8001434:	4646      	mov	r6, r8
 8001436:	e7ea      	b.n	800140e <__udivmoddi4+0x28a>
 8001438:	4620      	mov	r0, r4
 800143a:	e794      	b.n	8001366 <__udivmoddi4+0x1e2>
 800143c:	4640      	mov	r0, r8
 800143e:	e7d1      	b.n	80013e4 <__udivmoddi4+0x260>
 8001440:	46d0      	mov	r8, sl
 8001442:	e77b      	b.n	800133c <__udivmoddi4+0x1b8>
 8001444:	3b02      	subs	r3, #2
 8001446:	4461      	add	r1, ip
 8001448:	e732      	b.n	80012b0 <__udivmoddi4+0x12c>
 800144a:	4630      	mov	r0, r6
 800144c:	e709      	b.n	8001262 <__udivmoddi4+0xde>
 800144e:	4464      	add	r4, ip
 8001450:	3802      	subs	r0, #2
 8001452:	e742      	b.n	80012da <__udivmoddi4+0x156>

08001454 <__aeabi_idiv0>:
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800145e:	f000 fdd5 	bl	800200c <port_GetEXT_IRQStatus>
 8001462:	4603      	mov	r3, r0
 8001464:	607b      	str	r3, [r7, #4]

    if (s)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 800146c:	f000 fdaa 	bl	8001fc4 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
    if (s)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8001488:	f000 fdae 	bl	8001fe8 <port_EnableEXT_IRQ>
    }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fcb3 	bl	8001e08 <Sleep>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fc8c 	bl	8001dd0 <usleep>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4603      	mov	r3, r0
 80014cc:	81fb      	strh	r3, [r7, #14]
 80014ce:	4613      	mov	r3, r2
 80014d0:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 80014d2:	f7ff ffc1 	bl	8001458 <decamutexon>
 80014d6:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80014d8:	bf00      	nop
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <writetospiwithcrc+0x90>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 ff47 	bl	8005372 <HAL_SPI_GetState>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d1f7      	bne.n	80014da <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <writetospiwithcrc+0x94>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <writetospiwithcrc+0x98>)
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <writetospiwithcrc+0x9c>)
 80014f6:	f002 fccd 	bl	8003e94 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <writetospiwithcrc+0x90>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	89fa      	ldrh	r2, [r7, #14]
 8001500:	230a      	movs	r3, #10
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	f003 fdf9 	bl	80050fa <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <writetospiwithcrc+0x90>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	89ba      	ldrh	r2, [r7, #12]
 800150e:	230a      	movs	r3, #10
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	f003 fdf2 	bl	80050fa <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <writetospiwithcrc+0x90>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	230a      	movs	r3, #10
 800151c:	2201      	movs	r2, #1
 800151e:	f107 0120 	add.w	r1, r7, #32
 8001522:	f003 fdea 	bl	80050fa <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <writetospiwithcrc+0x94>)
 8001528:	8819      	ldrh	r1, [r3, #0]
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <writetospiwithcrc+0x98>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf0c      	ite	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	2300      	movne	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <writetospiwithcrc+0x9c>)
 800153c:	f002 fcaa 	bl	8003e94 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff ff9a 	bl	800147a <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 8001546:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000048 	.word	0x20000048
 8001554:	2000004c 	.word	0x2000004c
 8001558:	2000111c 	.word	0x2000111c
 800155c:	40020c00 	.word	0x40020c00

08001560 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4603      	mov	r3, r0
 800156c:	81fb      	strh	r3, [r7, #14]
 800156e:	4613      	mov	r3, r2
 8001570:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 8001572:	f7ff ff71 	bl	8001458 <decamutexon>
 8001576:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001578:	bf00      	nop
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <writetospi+0x8c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fef7 	bl	8005372 <HAL_SPI_GetState>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d1f7      	bne.n	800157a <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <writetospi+0x90>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <writetospi+0x94>)
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <writetospi+0x98>)
 8001596:	f002 fc7d 	bl	8003e94 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <writetospi+0x8c>)
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	89fa      	ldrh	r2, [r7, #14]
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	f003 fda8 	bl	80050fa <HAL_SPI_Transmit>

    if(bodyLength != 0)
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <writetospi+0x8c>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	89ba      	ldrh	r2, [r7, #12]
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f003 fd9d 	bl	80050fa <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <writetospi+0x90>)
 80015c2:	8819      	ldrh	r1, [r3, #0]
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <writetospi+0x94>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <writetospi+0x98>)
 80015d6:	f002 fc5d 	bl	8003e94 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff4d 	bl	800147a <decamutexoff>

    return 0;
 80015e0:	2300      	movs	r3, #0
} // end writetospi()
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000048 	.word	0x20000048
 80015f0:	2000004c 	.word	0x2000004c
 80015f4:	2000111c 	.word	0x2000111c
 80015f8:	40020c00 	.word	0x40020c00

080015fc <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4603      	mov	r3, r0
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	4613      	mov	r3, r2
 800160c:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 800160e:	f7ff ff23 	bl	8001458 <decamutexon>
 8001612:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001614:	bf00      	nop
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <readfromspi+0xd4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fea9 	bl	8005372 <HAL_SPI_GetState>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	d1f7      	bne.n	8001616 <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <readfromspi+0xd8>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <readfromspi+0xdc>)
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	482a      	ldr	r0, [pc, #168]	; (80016dc <readfromspi+0xe0>)
 8001632:	f002 fc2f 	bl	8003e94 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <readfromspi+0xd4>)
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	89fa      	ldrh	r2, [r7, #14]
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	f003 fd5a 	bl	80050fa <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 8001646:	bf00      	nop
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <readfromspi+0xd4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b02      	cmp	r3, #2
 8001656:	d1f7      	bne.n	8001648 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8001658:	e01f      	b.n	800169a <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 800165a:	bf00      	nop
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <readfromspi+0xd4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d1f7      	bne.n	800165c <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <readfromspi+0xd4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8001676:	bf00      	nop
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <readfromspi+0xd4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d1f7      	bne.n	8001678 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <readfromspi+0xd4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68d9      	ldr	r1, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	81ba      	strh	r2, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1da      	bne.n	800165a <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <readfromspi+0xd8>)
 80016a6:	8819      	ldrh	r1, [r3, #0]
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <readfromspi+0xdc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <readfromspi+0xe0>)
 80016ba:	f002 fbeb 	bl	8003e94 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff fedb 	bl	800147a <decamutexoff>

    return 0;
 80016c4:	2300      	movs	r3, #0
} // end readfromspi()
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000048 	.word	0x20000048
 80016d4:	2000004c 	.word	0x2000004c
 80016d8:	2000111c 	.word	0x2000111c
 80016dc:	40020c00 	.word	0x40020c00

080016e0 <test>:
extern int ds_twr_responder(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void test(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  port_DisableEXT_IRQ();
 80016e6:	f000 fc6d 	bl	8001fc4 <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 fbdc 	bl	8001ea8 <setup_DWICRSTnIRQ>
  port_set_dw_ic_spi_fastrate();
 80016f0:	f000 fc3c 	bl	8001f6c <port_set_dw_ic_spi_fastrate>
  reset_DWIC();
 80016f4:	f000 fbb4 	bl	8001e60 <reset_DWIC>
  Sleep(2);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 fb85 	bl	8001e08 <Sleep>

  dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 80016fe:	4809      	ldr	r0, [pc, #36]	; (8001724 <test+0x44>)
 8001700:	f005 fbee 	bl	8006ee0 <dwt_probe>
  uint32_t dev_id = dwt_readdevid();
 8001704:	f005 fc38 	bl	8006f78 <dwt_readdevid>
 8001708:	6078      	str	r0, [r7, #4]
  dwt_check_dev_id();
 800170a:	f005 fd69 	bl	80071e0 <dwt_check_dev_id>
  char message[128];
  snprintf(message, sizeof (message), "device id: 0x%lx", dev_id);
  userLog(message);
#endif

  port_EnableEXT_IRQ();
 800170e:	f000 fc6b 	bl	8001fe8 <port_EnableEXT_IRQ>
  Sleep(1000);
 8001712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001716:	f000 fb77 	bl	8001e08 <Sleep>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	0801973c 	.word	0x0801973c

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f001 fc07 	bl	8002f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 f83f 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 f9c3 	bl	8001ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 800173a:	f000 f9a7 	bl	8001a8c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800173e:	f000 f949 	bl	80019d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001742:	f000 f973 	bl	8001a2c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001746:	f000 f8c3 	bl	80018d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800174a:	f000 f8f7 	bl	800193c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800174e:	f000 f89b 	bl	8001888 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  test();
 8001752:	f7ff ffc5 	bl	80016e0 <test>
  userEnableLogging();
 8001756:	f001 fa47 	bl	8002be8 <userEnableLogging>

#ifdef ANCHOR
  char message[0x10];
  double distance = 0;
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9c7 2300 	strd	r2, r3, [r7]
  int antennaDelay = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]

  userConfigureDevice(USER_MODE_ANCHOR);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 ff40 	bl	80025f0 <userConfigureDevice>
  antennaDelay = userCalibrateDevice(0.3);
 8001770:	a10e      	add	r1, pc, #56	; (adr r1, 80017ac <main+0x84>)
 8001772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001776:	f001 f817 	bl	80027a8 <userCalibrateDevice>
 800177a:	61f8      	str	r0, [r7, #28]

  while (1)
  {
    userPoll(&distance);
 800177c:	463b      	mov	r3, r7
 800177e:	4618      	mov	r0, r3
 8001780:	f001 f9b6 	bl	8002af0 <userPoll>
    snprintf(message, 0x10 - 1, "%.3f", distance);
 8001784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001788:	f107 000c 	add.w	r0, r7, #12
 800178c:	e9cd 2300 	strd	r2, r3, [sp]
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <main+0x80>)
 8001792:	210f      	movs	r1, #15
 8001794:	f013 f934 	bl	8014a00 <snprintf>
    userLog(message);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fa4f 	bl	8002c40 <userLog>
    userPoll(&distance);
 80017a2:	e7eb      	b.n	800177c <main+0x54>
 80017a4:	f3af 8000 	nop.w
 80017a8:	08019748 	.word	0x08019748
 80017ac:	33333333 	.word	0x33333333
 80017b0:	3fd33333 	.word	0x3fd33333

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2234      	movs	r2, #52	; 0x34
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f013 f8f8 	bl	80149b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <SystemClock_Config+0xcc>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <SystemClock_Config+0xcc>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <SystemClock_Config+0xd0>)
 80017fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <SystemClock_Config+0xd0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001810:	2301      	movs	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001818:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181a:	2302      	movs	r3, #2
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800181e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001828:	2348      	movs	r3, #72	; 0x48
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001830:	2303      	movs	r3, #3
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001834:	2302      	movs	r3, #2
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4618      	mov	r0, r3
 800183e:	f003 f94f 	bl	8004ae0 <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001848:	f000 fa7a 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	230f      	movs	r3, #15
 800184e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	2302      	movs	r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	2102      	movs	r1, #2
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fc8d 	bl	8004188 <HAL_RCC_ClockConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001874:	f000 fa64 	bl	8001d40 <Error_Handler>
  }
}
 8001878:	bf00      	nop
 800187a:	3750      	adds	r7, #80	; 0x50
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	201c      	movs	r0, #28
 8001892:	f001 fcea 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001896:	201c      	movs	r0, #28
 8001898:	f001 fd03 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2028      	movs	r0, #40	; 0x28
 80018a2:	f001 fce2 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018a6:	2028      	movs	r0, #40	; 0x28
 80018a8:	f001 fcfb 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	200c      	movs	r0, #12
 80018b2:	f001 fcda 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018b6:	200c      	movs	r0, #12
 80018b8:	f001 fcf3 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	200e      	movs	r0, #14
 80018c2:	f001 fcd2 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018c6:	200e      	movs	r0, #14
 80018c8:	f001 fceb 	bl	80032a2 <HAL_NVIC_EnableIRQ>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_SPI1_Init+0x64>)
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <MX_SPI1_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_SPI1_Init+0x64>)
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_SPI1_Init+0x64>)
 8001904:	2220      	movs	r2, #32
 8001906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_SPI1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_SPI1_Init+0x64>)
 800191c:	220a      	movs	r2, #10
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_SPI1_Init+0x64>)
 8001922:	f003 fb61 	bl	8004fe8 <HAL_SPI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800192c:	f000 fa08 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000a6c 	.word	0x20000a6c
 8001938:	40013000 	.word	0x40013000

0800193c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_TIM2_Init+0x94>)
 800195a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001962:	2247      	movs	r2, #71	; 0x47
 8001964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_TIM2_Init+0x94>)
 800196e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_TIM2_Init+0x94>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_TIM2_Init+0x94>)
 8001982:	f003 fdcf 	bl	8005524 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800198c:	f000 f9d8 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM2_Init+0x94>)
 800199e:	f003 ff89 	bl	80058b4 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019a8:	f000 f9ca 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_TIM2_Init+0x94>)
 80019ba:	f004 f9a5 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019c4:	f000 f9bc 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000ac4 	.word	0x20000ac4

080019d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <MX_USART3_UART_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 8001a0c:	f004 fa0c 	bl	8005e28 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f000 f993 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  userDisableLogging();
 8001a1a:	f001 f8d5 	bl	8002bc8 <userDisableLogging>
  /* USER CODE END USART3_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000b0c 	.word	0x20000b0c
 8001a28:	40004800 	.word	0x40004800

08001a2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a3a:	2206      	movs	r2, #6
 8001a3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a76:	f002 fa3f 	bl	8003ef8 <HAL_PCD_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001a80:	f000 f95e 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000c10 	.word	0x20000c10

08001a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_DMA_Init+0x30>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <MX_DMA_Init+0x30>)
 8001a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_DMA_Init+0x30>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a91      	ldr	r2, [pc, #580]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	4b8b      	ldr	r3, [pc, #556]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a8a      	ldr	r2, [pc, #552]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a83      	ldr	r2, [pc, #524]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a7c      	ldr	r2, [pc, #496]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b7a      	ldr	r3, [pc, #488]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a75      	ldr	r2, [pc, #468]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b50:	f043 0320 	orr.w	r3, r3, #32
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a67      	ldr	r2, [pc, #412]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <MX_GPIO_Init+0x264>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8001bbc:	485a      	ldr	r0, [pc, #360]	; (8001d28 <MX_GPIO_Init+0x268>)
 8001bbe:	f002 f969 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc8:	4858      	ldr	r0, [pc, #352]	; (8001d2c <MX_GPIO_Init+0x26c>)
 8001bca:	f002 f963 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd4:	4856      	ldr	r0, [pc, #344]	; (8001d30 <MX_GPIO_Init+0x270>)
 8001bd6:	f002 f95d 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be0:	4854      	ldr	r0, [pc, #336]	; (8001d34 <MX_GPIO_Init+0x274>)
 8001be2:	f002 f957 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS1_WAKEUP_GPIO_Port, DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bec:	4851      	ldr	r0, [pc, #324]	; (8001d34 <MX_GPIO_Init+0x274>)
 8001bee:	f002 f951 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	4850      	ldr	r0, [pc, #320]	; (8001d38 <MX_GPIO_Init+0x278>)
 8001bf8:	f002 f94c 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	4619      	mov	r1, r3
 8001c12:	484a      	ldr	r0, [pc, #296]	; (8001d3c <MX_GPIO_Init+0x27c>)
 8001c14:	f001 feb6 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c18:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c22:	2302      	movs	r3, #2
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	483d      	ldr	r0, [pc, #244]	; (8001d28 <MX_GPIO_Init+0x268>)
 8001c32:	f001 fea7 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c42:	2302      	movs	r3, #2
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4837      	ldr	r0, [pc, #220]	; (8001d2c <MX_GPIO_Init+0x26c>)
 8001c4e:	f001 fe99 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c58:	2311      	movs	r3, #17
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c60:	2301      	movs	r3, #1
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4830      	ldr	r0, [pc, #192]	; (8001d2c <MX_GPIO_Init+0x26c>)
 8001c6c:	f001 fe8a 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQ2_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin;
 8001c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DW_IRQ2_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	482a      	ldr	r0, [pc, #168]	; (8001d30 <MX_GPIO_Init+0x270>)
 8001c88:	f001 fe7c 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 8001c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4822      	ldr	r0, [pc, #136]	; (8001d30 <MX_GPIO_Init+0x270>)
 8001ca6:	f001 fe6d 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8001caa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481c      	ldr	r0, [pc, #112]	; (8001d34 <MX_GPIO_Init+0x274>)
 8001cc4:	f001 fe5e 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_NSS1_WAKEUP_Pin;
 8001cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DW_NSS1_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4814      	ldr	r0, [pc, #80]	; (8001d34 <MX_GPIO_Init+0x274>)
 8001ce2:	f001 fe4f 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ce6:	2340      	movs	r3, #64	; 0x40
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <MX_GPIO_Init+0x278>)
 8001cfe:	f001 fe41 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4808      	ldr	r0, [pc, #32]	; (8001d38 <MX_GPIO_Init+0x278>)
 8001d16:	f001 fe35 	bl	8003984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3738      	adds	r7, #56	; 0x38
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40020800 	.word	0x40020800

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db12      	blt.n	8001dc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	490a      	ldr	r1, [pc, #40]	; (8001dcc <__NVIC_DisableIRQ+0x44>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	3320      	adds	r3, #32
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001db4:	f3bf 8f4f 	dsb	sy
}
 8001db8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dba:	f3bf 8f6f 	isb	sy
}
 8001dbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e003      	b.n	8001df2 <usleep+0x22>
    {
        __NOP();
 8001dea:	bf00      	nop
    for (i = 0; i < usec; i++)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f7      	bcc.n	8001dea <usleep+0x1a>
    }
    return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f001 f907 	bl	8003024 <HAL_Delay>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <EXTI_GetITEnStatus+0x3c>)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e6c:	2311      	movs	r3, #17
 8001e6e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <reset_DWIC+0x44>)
 8001e7a:	f001 fd83 	bl	8003984 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <reset_DWIC+0x44>)
 8001e86:	f002 f805 	bl	8003e94 <HAL_GPIO_WritePin>

    usleep(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff ffa0 	bl	8001dd0 <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 f809 	bl	8001ea8 <setup_DWICRSTnIRQ>
    Sleep(2);
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff ffb6 	bl	8001e08 <Sleep>
}
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021400 	.word	0x40021400

08001ea8 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <setup_DWICRSTnIRQ+0x3c>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ebc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4813      	ldr	r0, [pc, #76]	; (8001f1c <setup_DWICRSTnIRQ+0x74>)
 8001ece:	f001 fd59 	bl	8003984 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001ed2:	2006      	movs	r0, #6
 8001ed4:	f001 f9e5 	bl	80032a2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2105      	movs	r1, #5
 8001edc:	2006      	movs	r0, #6
 8001ede:	f001 f9c4 	bl	800326a <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8001ee2:	e017      	b.n	8001f14 <setup_DWICRSTnIRQ+0x6c>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001ee4:	2006      	movs	r0, #6
 8001ee6:	f001 f9ea 	bl	80032be <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eee:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ef0:	2311      	movs	r3, #17
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <setup_DWICRSTnIRQ+0x74>)
 8001f04:	f001 fd3e 	bl	8003984 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <setup_DWICRSTnIRQ+0x74>)
 8001f10:	f001 ffc0 	bl	8003e94 <HAL_GPIO_WritePin>
}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021400 	.word	0x40021400

08001f20 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <wakeup_device_with_io+0x28>)
 8001f2c:	f001 ffb2 	bl	8003e94 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff ff69 	bl	8001e08 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <wakeup_device_with_io+0x28>)
 8001f3e:	f001 ffa9 	bl	8003e94 <HAL_GPIO_WritePin>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40020c00 	.word	0x40020c00

08001f4c <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2218      	movs	r2, #24
 8001f56:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f843 	bl	8004fe8 <HAL_SPI_Init>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000048 	.word	0x20000048

08001f6c <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <port_set_dw_ic_spi_fastrate+0x1c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <port_set_dw_ic_spi_fastrate+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 f833 	bl	8004fe8 <HAL_SPI_Init>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000048 	.word	0x20000048

08001f8c <HAL_GPIO_EXTI_Callback>:
 * @brief      EXTI line detection callback from HAL layer
 * @param      GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 *             i.e. DW_RESET_Pin and DW_IRQn_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9c:	d009      	beq.n	8001fb2 <HAL_GPIO_EXTI_Callback+0x26>
 8001f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fa2:	dc0a      	bgt.n	8001fba <HAL_GPIO_EXTI_Callback+0x2e>
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x2c>
 8001faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fae:	d104      	bne.n	8001fba <HAL_GPIO_EXTI_Callback+0x2e>
	signalResetDone = 1;
	break;*/
      case DW_IRQn_Pin :
      case DW_IRQ2_Pin :
	//process_deca_irq();
	break;
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x2c>
      /*
       * START EDIT
       * Johannes Arenander
       */
      case USER_Btn_Pin:
	userButtonInterruptHandler();
 8001fb2:	f000 fee7 	bl	8002d84 <userButtonInterruptHandler>
	break;
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_EXTI_Callback+0x2e>
	break;
 8001fb8:	bf00      	nop
      /* END EDIT */
    }
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <port_DisableEXT_IRQ+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001fd0:	2028      	movs	r0, #40	; 0x28
 8001fd2:	f7ff fed9 	bl	8001d88 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8001fd6:	e002      	b.n	8001fde <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8001fd8:	2017      	movs	r0, #23
 8001fda:	f7ff fed5 	bl	8001d88 <__NVIC_DisableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000111d 	.word	0x2000111d

08001fe8 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <port_EnableEXT_IRQ+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001ff4:	2028      	movs	r0, #40	; 0x28
 8001ff6:	f7ff fea9 	bl	8001d4c <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8001ffa:	e002      	b.n	8002002 <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8001ffc:	2017      	movs	r0, #23
 8001ffe:	f7ff fea5 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000111d 	.word	0x2000111d

0800200c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <port_GetEXT_IRQStatus+0x30>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800201a:	2028      	movs	r0, #40	; 0x28
 800201c:	f7ff ff00 	bl	8001e20 <EXTI_GetITEnStatus>
 8002020:	4603      	mov	r3, r0
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	e004      	b.n	8002030 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8002026:	2017      	movs	r0, #23
 8002028:	f7ff fefa 	bl	8001e20 <EXTI_GetITEnStatus>
 800202c:	4603      	mov	r3, r0
 800202e:	607b      	str	r3, [r7, #4]
    }
    return status;
 8002030:	687b      	ldr	r3, [r7, #4]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000111d 	.word	0x2000111d

08002040 <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e010      	b.n	8002078 <resp_msg_get_ts+0x38>
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	440b      	add	r3, r1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	441a      	add	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	ddeb      	ble.n	8002056 <resp_msg_get_ts+0x16>
    }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d014      	beq.n	80020d2 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 80020a8:	e00a      	b.n	80020c0 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 80020b0:	f005 f8c8 	bl	8007244 <dwt_readsysstatushi>
 80020b4:	6138      	str	r0, [r7, #16]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d115      	bne.n	80020ec <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 80020c0:	f005 f8ae 	bl	8007220 <dwt_readsysstatuslo>
 80020c4:	6178      	str	r0, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ec      	beq.n	80020aa <waitforsysstatus+0x1e>
 80020d0:	e00d      	b.n	80020ee <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 80020d8:	bf00      	nop
 80020da:	f005 f8b3 	bl	8007244 <dwt_readsysstatushi>
 80020de:	6138      	str	r0, [r7, #16]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f7      	beq.n	80020da <waitforsysstatus+0x4e>
 80020ea:	e000      	b.n	80020ee <waitforsysstatus+0x62>
                    break;
 80020ec:	bf00      	nop
    }

    if (lo_result != NULL)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]
    }
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_MspInit+0x4c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_SPI_MspInit+0x84>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12b      	bne.n	80021da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021ba:	23e0      	movs	r3, #224	; 0xe0
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ca:	2305      	movs	r3, #5
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_SPI_MspInit+0x8c>)
 80021d6:	f001 fbd5 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013000 	.word	0x40013000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d10d      	bne.n	800221e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_TIM_Base_MspInit+0x3c>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_TIM_Base_MspInit+0x3c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_TIM_Base_MspInit+0x3c>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <HAL_UART_MspInit+0x140>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 8089 	bne.w	8002366 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_UART_MspInit+0x144>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a45      	ldr	r2, [pc, #276]	; (8002374 <HAL_UART_MspInit+0x144>)
 800225e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_UART_MspInit+0x144>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <HAL_UART_MspInit+0x144>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <HAL_UART_MspInit+0x144>)
 800227a:	f043 0308 	orr.w	r3, r3, #8
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <HAL_UART_MspInit+0x144>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800228c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800229e:	2307      	movs	r3, #7
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4833      	ldr	r0, [pc, #204]	; (8002378 <HAL_UART_MspInit+0x148>)
 80022aa:	f001 fb6b 	bl	8003984 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80022ae:	4b33      	ldr	r3, [pc, #204]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_UART_MspInit+0x150>)
 80022b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80022ee:	4823      	ldr	r0, [pc, #140]	; (800237c <HAL_UART_MspInit+0x14c>)
 80022f0:	f001 f800 	bl	80032f4 <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80022fa:	f7ff fd21 	bl	8001d40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_UART_MspInit+0x14c>)
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_UART_MspInit+0x14c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_UART_MspInit+0x154>)
 800230c:	4a1e      	ldr	r2, [pc, #120]	; (8002388 <HAL_UART_MspInit+0x158>)
 800230e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002316:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_UART_MspInit+0x154>)
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_UART_MspInit+0x154>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_UART_MspInit+0x154>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800234a:	480e      	ldr	r0, [pc, #56]	; (8002384 <HAL_UART_MspInit+0x154>)
 800234c:	f000 ffd2 	bl	80032f4 <HAL_DMA_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002356:	f7ff fcf3 	bl	8001d40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_UART_MspInit+0x154>)
 800235e:	635a      	str	r2, [r3, #52]	; 0x34
 8002360:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_UART_MspInit+0x154>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40004800 	.word	0x40004800
 8002374:	40023800 	.word	0x40023800
 8002378:	40020c00 	.word	0x40020c00
 800237c:	20000b50 	.word	0x20000b50
 8002380:	40026028 	.word	0x40026028
 8002384:	20000bb0 	.word	0x20000bb0
 8002388:	40026058 	.word	0x40026058

0800238c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <HAL_UART_MspDeInit+0x44>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d114      	bne.n	80023c8 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_UART_MspDeInit+0x48>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_UART_MspDeInit+0x48>)
 80023a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80023aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80023ae:	480a      	ldr	r0, [pc, #40]	; (80023d8 <HAL_UART_MspDeInit+0x4c>)
 80023b0:	f001 fc7c 	bl	8003cac <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	4618      	mov	r0, r3
 80023ba:	f001 f849 	bl	8003450 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 f844 	bl	8003450 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40004800 	.word	0x40004800
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020c00 	.word	0x40020c00

080023dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a0      	sub	sp, #128	; 0x80
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2258      	movs	r2, #88	; 0x58
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f012 fadb 	bl	80149b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240a:	d14d      	bne.n	80024a8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800240c:	2320      	movs	r3, #32
 800240e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002410:	2300      	movs	r3, #0
 8002412:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4618      	mov	r0, r3
 800241a:	f002 f8d5 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8002424:	f7ff fc8c 	bl	8001d40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002444:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002448:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002456:	230a      	movs	r3, #10
 8002458:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800245e:	4619      	mov	r1, r3
 8002460:	4814      	ldr	r0, [pc, #80]	; (80024b4 <HAL_PCD_MspInit+0xd8>)
 8002462:	f001 fa8f 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002478:	4619      	mov	r1, r3
 800247a:	480e      	ldr	r0, [pc, #56]	; (80024b4 <HAL_PCD_MspInit+0xd8>)
 800247c:	f001 fa82 	bl	8003984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 8002482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	6353      	str	r3, [r2, #52]	; 0x34
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 8002496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249a:	6453      	str	r3, [r2, #68]	; 0x44
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_PCD_MspInit+0xd4>)
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80024a8:	bf00      	nop
 80024aa:	3780      	adds	r7, #128	; 0x80
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 fd6e 	bl	8002fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <DMA1_Stream1_IRQHandler+0x10>)
 8002512:	f000 fffb 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000b50 	.word	0x20000b50

08002520 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA1_Stream3_IRQHandler+0x10>)
 8002526:	f000 fff1 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000bb0 	.word	0x20000bb0

08002534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM2_IRQHandler+0x10>)
 800253a:	f003 f8b3 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000ac4 	.word	0x20000ac4

08002548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 800254c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002550:	f001 fcba 	bl	8003ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002554:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002558:	f001 fcb6 	bl	8003ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <_sbrk+0x5c>)
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <_sbrk+0x60>)
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <_sbrk+0x64>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <_sbrk+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d207      	bcs.n	80025a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002590:	f011 ff94 	bl	80144bc <__errno>
 8002594:	4603      	mov	r3, r0
 8002596:	220c      	movs	r2, #12
 8002598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e009      	b.n	80025b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <_sbrk+0x64>)
 80025b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20050000 	.word	0x20050000
 80025c0:	00000400 	.word	0x00000400
 80025c4:	20001120 	.word	0x20001120
 80025c8:	20001280 	.word	0x20001280

080025cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SystemInit+0x20>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <SystemInit+0x20>)
 80025d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <userConfigureDevice>:
 * and some other things under the hood
 * which I have no clue about
 * (strictly following DecaWave's example code).
 */
int userConfigureDevice(int iNodeMode)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f004 fddf 	bl	80071bc <dwt_setleds>

  if (dwt_configure(&config) != DWT_SUCCESS)
 80025fe:	480f      	ldr	r0, [pc, #60]	; (800263c <userConfigureDevice+0x4c>)
 8002600:	f004 fcda 	bl	8006fb8 <dwt_configure>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <userConfigureDevice+0x20>
  {
    return -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e010      	b.n	8002632 <userConfigureDevice+0x42>
  }

  dwt_configuretxrf(&txconfig_options);
 8002610:	480b      	ldr	r0, [pc, #44]	; (8002640 <userConfigureDevice+0x50>)
 8002612:	f004 fcdd 	bl	8006fd0 <dwt_configuretxrf>
  dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 8002616:	2003      	movs	r0, #3
 8002618:	f004 fcc0 	bl	8006f9c <dwt_setlnapamode>

  if (iNodeMode == USER_MODE_ANCHOR)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <userConfigureDevice+0x40>
  {
    dwt_setrxaftertxdelay(240);
 8002622:	20f0      	movs	r0, #240	; 0xf0
 8002624:	f004 fd96 	bl	8007154 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(400);
 8002628:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800262c:	f004 fd6c 	bl	8007108 <dwt_setrxtimeout>
  else if (iNodeMode == USER_MODE_TAG)
  {
    ;
  }

  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000058 	.word	0x20000058
 8002640:	20000000 	.word	0x20000000

08002644 <dSampleMean>:

/*
 * Compute the sample mean.
 */
double dSampleMean(double *pdSample, unsigned uSampleSize)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  double dSum = 0.0;
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9c7 2304 	strd	r2, r3, [r7, #16]

  for (int i = 0; i < uSampleSize; i++)
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e010      	b.n	8002682 <dSampleMean+0x3e>
  {
    dSum += pdSample[i];
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002670:	f7fd fe64 	bl	800033c <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < uSampleSize; i++)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3301      	adds	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d8ea      	bhi.n	8002660 <dSampleMean+0x1c>
  }

  return dSum / uSampleSize;
 800268a:	6838      	ldr	r0, [r7, #0]
 800268c:	f7fd ff92 	bl	80005b4 <__aeabi_ui2d>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002698:	f7fe f930 	bl	80008fc <__aeabi_ddiv>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
}
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <dSampleStandardDeviation>:
 */
double dSampleStandardDeviation(
  double *pdSample,
  double dSampleMean,
  unsigned uSampleSize)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b08a      	sub	sp, #40	; 0x28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	e9c7 2300 	strd	r2, r3, [r7]
  double dDeviationSquareSum = 0.0;
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9c7 2308 	strd	r2, r3, [r7, #32]

  for (int i = 0; i < uSampleSize; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e020      	b.n	800270a <dSampleStandardDeviation+0x60>
  {
    double dDifference = pdSample[i] - dSampleMean;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026d8:	f7fd fe2e 	bl	8000338 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dDeviationSquareSum += dDifference * dDifference;
 80026e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026ec:	f7fd ffdc 	bl	80006a8 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026f8:	f7fd fe20 	bl	800033c <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (int i = 0; i < uSampleSize; i++)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270e:	429a      	cmp	r2, r3
 8002710:	d8da      	bhi.n	80026c8 <dSampleStandardDeviation+0x1e>
  }

  return sqrt(dDeviationSquareSum / (uSampleSize - 1));
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	3b01      	subs	r3, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff4c 	bl	80005b4 <__aeabi_ui2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002724:	f7fe f8ea 	bl	80008fc <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f016 fcae 	bl	8019090 <sqrt>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
}
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <dZScore>:
 */
double dZScore(
  double dSampleMean,
  double dPopulationMean,
  double dStandardDeviation)
{
 8002742:	b5b0      	push	{r4, r5, r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800274c:	e9c7 2300 	strd	r2, r3, [r7]
  double dValue = (dSampleMean - dPopulationMean) /
 8002750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002758:	f7fd fdee 	bl	8000338 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002768:	f7fe f8c8 	bl	80008fc <__aeabi_ddiv>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dStandardDeviation;

  return dValue < 0 ? dValue * -1.0 : dValue;
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002780:	f7fe fa04 	bl	8000b8c <__aeabi_dcmplt>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <dZScore+0x52>
 800278a:	693c      	ldr	r4, [r7, #16]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002792:	e001      	b.n	8002798 <dZScore+0x56>
 8002794:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002798:	4622      	mov	r2, r4
 800279a:	462b      	mov	r3, r5
}
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080027a8 <userCalibrateDevice>:
 * Calibrate the device with the given reference distance.
 *
 * Note: Automatically configures the antenna delays.
 */
int userCalibrateDevice(double dReferenceMeters)
{
 80027a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027ac:	b095      	sub	sp, #84	; 0x54
 80027ae:	af02      	add	r7, sp, #8
 80027b0:	e9c7 0100 	strd	r0, r1, [r7]
 80027b4:	466b      	mov	r3, sp
 80027b6:	461e      	mov	r6, r3
  unsigned uSampleSize = 100;
 80027b8:	2364      	movs	r3, #100	; 0x64
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  double pdSampleMeters[uSampleSize];
 80027bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027be:	460b      	mov	r3, r1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
 80027c4:	2300      	movs	r3, #0
 80027c6:	4688      	mov	r8, r1
 80027c8:	4699      	mov	r9, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027de:	2300      	movs	r3, #0
 80027e0:	460c      	mov	r4, r1
 80027e2:	461d      	mov	r5, r3
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	01ab      	lsls	r3, r5, #6
 80027ee:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80027f2:	01a2      	lsls	r2, r4, #6
 80027f4:	00cb      	lsls	r3, r1, #3
 80027f6:	3307      	adds	r3, #7
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	ebad 0d03 	sub.w	sp, sp, r3
 8002800:	ab02      	add	r3, sp, #8
 8002802:	3307      	adds	r3, #7
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  double dSampleMeanMeters = 0.0;
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double dSampleStandardDeviationMeters = 0.0;
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double dZ = 0.0;
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double dDifference = 0.0;
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9c7 2302 	strd	r2, r3, [r7, #8]
  uint16_t u16High = 0xFFFF;
 800283a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t u16Mid = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t u16Low = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (u16Low < u16High)
 800284c:	e0be      	b.n	80029cc <userCalibrateDevice+0x224>
  {
    unsigned uN = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	647b      	str	r3, [r7, #68]	; 0x44

    u16Mid = floor(0.5 * (u16Low + u16High));
 8002852:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002856:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002858:	4413      	add	r3, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd feba 	bl	80005d4 <__aeabi_i2d>
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <userCalibrateDevice+0x250>)
 8002866:	f7fd ff1f 	bl	80006a8 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f016 fb8d 	bl	8018f90 <floor>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f9eb 	bl	8000c58 <__aeabi_d2uiz>
 8002882:	4603      	mov	r3, r0
 8002884:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    dwt_settxantennadelay(u16Mid);
 8002888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800288c:	4618      	mov	r0, r3
 800288e:	f004 fbbd 	bl	800700c <dwt_settxantennadelay>
    dwt_setrxantennadelay(u16Mid);
 8002892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fba6 	bl	8006fe8 <dwt_setrxantennadelay>

    for (int i = 0; i < uSampleSize; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	e012      	b.n	80028c8 <userCalibrateDevice+0x120>
    {
      if (userPoll(&pdSampleMeters[uN]) == -1)
 80028a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a8:	4413      	add	r3, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f920 	bl	8002af0 <userPoll>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d003      	beq.n	80028c0 <userCalibrateDevice+0x118>
      {
        continue;
      }

      uN++;
 80028b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ba:	3301      	adds	r3, #1
 80028bc:	647b      	str	r3, [r7, #68]	; 0x44
 80028be:	e000      	b.n	80028c2 <userCalibrateDevice+0x11a>
        continue;
 80028c0:	bf00      	nop
    for (int i = 0; i < uSampleSize; i++)
 80028c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c4:	3301      	adds	r3, #1
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d8e8      	bhi.n	80028a2 <userCalibrateDevice+0xfa>
    }

    if (uN == 0)
 80028d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <userCalibrateDevice+0x134>
    {
      return -1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e07f      	b.n	80029dc <userCalibrateDevice+0x234>
    }

    dSampleMeanMeters = dSampleMean(pdSampleMeters, uN);
 80028dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80028de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028e0:	f7ff feb0 	bl	8002644 <dSampleMean>
 80028e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    dSampleStandardDeviationMeters = dSampleStandardDeviation(
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028f2:	f7ff feda 	bl	80026aa <dSampleStandardDeviation>
 80028f6:	e9c7 0106 	strd	r0, r1, [r7, #24]
      dSampleMeanMeters,
      uN);
    dZ = dZScore(
      dSampleMeanMeters,
      dReferenceMeters,
      dSampleStandardDeviationMeters / sqrt(uN));
 80028fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028fc:	f7fd fe5a 	bl	80005b4 <__aeabi_ui2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f016 fbc2 	bl	8019090 <sqrt>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
    dZ = dZScore(
 8002910:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002914:	f7fd fff2 	bl	80008fc <__aeabi_ddiv>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	e9cd 2300 	strd	r2, r3, [sp]
 8002920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002924:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002928:	f7ff ff0b 	bl	8002742 <dZScore>
 800292c:	e9c7 0104 	strd	r0, r1, [r7, #16]
    dDifference = dSampleMeanMeters - dReferenceMeters;
 8002930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002934:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002938:	f7fd fcfe 	bl	8000338 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // 99% significance level.
    if (dZ < 0 ? (-1.0 * dZ) < 2.576 : dZ < 2.576)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002950:	f7fe f91c 	bl	8000b8c <__aeabi_dcmplt>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00f      	beq.n	800297a <userCalibrateDevice+0x1d2>
 800295a:	2301      	movs	r3, #1
 800295c:	461c      	mov	r4, r3
 800295e:	a322      	add	r3, pc, #136	; (adr r3, 80029e8 <userCalibrateDevice+0x240>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002968:	f7fe f92e 	bl	8000bc8 <__aeabi_dcmpgt>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <userCalibrateDevice+0x1ce>
 8002972:	2300      	movs	r3, #0
 8002974:	461c      	mov	r4, r3
 8002976:	b2e3      	uxtb	r3, r4
 8002978:	e00e      	b.n	8002998 <userCalibrateDevice+0x1f0>
 800297a:	2301      	movs	r3, #1
 800297c:	461c      	mov	r4, r3
 800297e:	a31c      	add	r3, pc, #112	; (adr r3, 80029f0 <userCalibrateDevice+0x248>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002988:	f7fe f900 	bl	8000b8c <__aeabi_dcmplt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <userCalibrateDevice+0x1ee>
 8002992:	2300      	movs	r3, #0
 8002994:	461c      	mov	r4, r3
 8002996:	b2e3      	uxtb	r3, r4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <userCalibrateDevice+0x1fa>
    {
      return u16Mid;
 800299c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029a0:	e01c      	b.n	80029dc <userCalibrateDevice+0x234>
    }

    if (dDifference > 0)
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ae:	f7fe f90b 	bl	8000bc8 <__aeabi_dcmpgt>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <userCalibrateDevice+0x21c>
    {
      u16Low = u16Mid + 1;
 80029b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029bc:	3301      	adds	r3, #1
 80029be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029c2:	e003      	b.n	80029cc <userCalibrateDevice+0x224>
    }
    else
    {
      u16High = u16Mid - 1;
 80029c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029c8:	3b01      	subs	r3, #1
 80029ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (u16Low < u16High)
 80029cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80029d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f4ff af3b 	bcc.w	800284e <userCalibrateDevice+0xa6>
    }
  }

  return u16Mid;
 80029d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029dc:	46b5      	mov	sp, r6
}
 80029de:	4618      	mov	r0, r3
 80029e0:	374c      	adds	r7, #76	; 0x4c
 80029e2:	46bd      	mov	sp, r7
 80029e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029e8:	e353f7cf 	.word	0xe353f7cf
 80029ec:	c0049ba5 	.word	0xc0049ba5
 80029f0:	e353f7cf 	.word	0xe353f7cf
 80029f4:	40049ba5 	.word	0x40049ba5
 80029f8:	3fe00000 	.word	0x3fe00000
 80029fc:	00000000 	.word	0x00000000

08002a00 <userCalculateDistance>:

double userCalculateDistance()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
  uint8_t *pu8Frame = pu8Buffer;
 8002a06:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <userCalculateDistance+0xe8>)
 8002a08:	61fb      	str	r3, [r7, #28]
  uint32_t u32PollTXTime = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  uint32_t u32PollRXTime = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  uint32_t u32ResponseTXTime = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
  uint32_t u32ResponseRXTime = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  float fClockOffsetRatio = 0;
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
  double dTimeOfFlight = 0;
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9c7 2302 	strd	r2, r3, [r7, #8]

  u32PollTXTime = dwt_readtxtimestamplo32();
 8002a2c:	f004 fb2e 	bl	800708c <dwt_readtxtimestamplo32>
 8002a30:	61b8      	str	r0, [r7, #24]
  u32ResponseRXTime = dwt_readrxtimestamplo32();
 8002a32:	f004 fb3d 	bl	80070b0 <dwt_readrxtimestamplo32>
 8002a36:	6178      	str	r0, [r7, #20]
  fClockOffsetRatio =
    ((float)dwt_readclockoffset()) / (uint32_t)(1 << 26);
 8002a38:	f004 fbac 	bl	8007194 <dwt_readclockoffset>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fClockOffsetRatio =
 8002a46:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002aec <userCalculateDistance+0xec>
 8002a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a4e:	edc7 7a04 	vstr	s15, [r7, #16]
  resp_msg_get_ts(&pu8Frame[10], &u32PollRXTime);
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	330a      	adds	r3, #10
 8002a56:	1d3a      	adds	r2, r7, #4
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff faf0 	bl	8002040 <resp_msg_get_ts>
  resp_msg_get_ts(&pu8Frame[14], &u32ResponseTXTime);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	330e      	adds	r3, #14
 8002a64:	463a      	mov	r2, r7
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fae9 	bl	8002040 <resp_msg_get_ts>
  dTimeOfFlight = DWT_TIME_UNITS * 0.5 * (
    (u32ResponseRXTime - u32PollTXTime) -
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    (u32ResponseTXTime - u32PollRXTime) *
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
    (1 - fClockOffsetRatio));
 8002a8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a92:	ee76 7a67 	vsub.f32	s15, s12, s15
    (u32ResponseTXTime - u32PollRXTime) *
 8002a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
    (u32ResponseRXTime - u32PollTXTime) -
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9e:	ee17 0a90 	vmov	r0, s15
 8002aa2:	f7fd fda9 	bl	80005f8 <__aeabi_f2d>
  dTimeOfFlight = DWT_TIME_UNITS * 0.5 * (
 8002aa6:	a30c      	add	r3, pc, #48	; (adr r3, 8002ad8 <userCalculateDistance+0xd8>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fdfc 	bl	80006a8 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return dTimeOfFlight * SPEED_OF_LIGHT;
 8002ab8:	a309      	add	r3, pc, #36	; (adr r3, 8002ae0 <userCalculateDistance+0xe0>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac2:	f7fd fdf1 	bl	80006a8 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
}
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	f3af 8000 	nop.w
 8002ad8:	3bce48fa 	.word	0x3bce48fa
 8002adc:	3da13518 	.word	0x3da13518
 8002ae0:	13000000 	.word	0x13000000
 8002ae4:	41b1dd19 	.word	0x41b1dd19
 8002ae8:	20001130 	.word	0x20001130
 8002aec:	4c800000 	.word	0x4c800000

08002af0 <userPoll>:

/*
 * Start a ranging exchange.
 */
int userPoll(double *dDistance)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t u32Mask = DWT_INT_RXFCG_BIT_MASK |
 8002af8:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <userPoll+0xc4>)
 8002afa:	617b      	str	r3, [r7, #20]
    SYS_STATUS_ALL_RX_TO |
    SYS_STATUS_ALL_RX_ERR;
  uint32_t u32Mode = DWT_START_TX_IMMEDIATE |
 8002afc:	2302      	movs	r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
    DWT_RESPONSE_EXPECTED;
  uint32_t u32Status = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint16_t u16FrameLength = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	81fb      	strh	r3, [r7, #14]

  dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8002b08:	2080      	movs	r0, #128	; 0x80
 8002b0a:	f004 fb77 	bl	80071fc <dwt_writesysstatuslo>
  dwt_writetxdata(sizeof (pu8PollMessage), pu8PollMessage, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4929      	ldr	r1, [pc, #164]	; (8002bb8 <userPoll+0xc8>)
 8002b12:	200c      	movs	r0, #12
 8002b14:	f004 fa8c 	bl	8007030 <dwt_writetxdata>
  dwt_writetxfctrl(sizeof (pu8PollMessage), 0, 1);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	200c      	movs	r0, #12
 8002b1e:	f004 fa95 	bl	800704c <dwt_writetxfctrl>

  if (dwt_starttx(u32Mode) != DWT_SUCCESS)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 fa9e 	bl	8007068 <dwt_starttx>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <userPoll+0x48>
  {
    return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e038      	b.n	8002baa <userPoll+0xba>
  }

  waitforsysstatus(&u32Status, NULL, u32Mask, 0);
 8002b38:	f107 0008 	add.w	r0, r7, #8
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	2100      	movs	r1, #0
 8002b42:	f7ff faa3 	bl	800208c <waitforsysstatus>

  if (!(u32Status & DWT_INT_RXFCG_BIT_MASK))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <userPoll+0x6c>
  {
    dwt_writesysstatuslo(
 8002b50:	481a      	ldr	r0, [pc, #104]	; (8002bbc <userPoll+0xcc>)
 8002b52:	f004 fb53 	bl	80071fc <dwt_writesysstatuslo>
      SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
    return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e026      	b.n	8002baa <userPoll+0xba>
  }

  dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 8002b5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b60:	f004 fb4c 	bl	80071fc <dwt_writesysstatuslo>
  u16FrameLength = dwt_getframelength();
 8002b64:	f004 fb80 	bl	8007268 <dwt_getframelength>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	81fb      	strh	r3, [r7, #14]

  if (u16FrameLength > sizeof (pu8Buffer))
 8002b6c:	89fb      	ldrh	r3, [r7, #14]
 8002b6e:	2b14      	cmp	r3, #20
 8002b70:	d902      	bls.n	8002b78 <userPoll+0x88>
  {
    return -1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e018      	b.n	8002baa <userPoll+0xba>
  }

  dwt_readrxdata(pu8Buffer, u16FrameLength, 0);
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4810      	ldr	r0, [pc, #64]	; (8002bc0 <userPoll+0xd0>)
 8002b80:	f004 fafa 	bl	8007178 <dwt_readrxdata>

  if (iValidateFrame(pu8Buffer, pu8ResponseMessage) == -1)
 8002b84:	490f      	ldr	r1, [pc, #60]	; (8002bc4 <userPoll+0xd4>)
 8002b86:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <userPoll+0xd0>)
 8002b88:	f000 f990 	bl	8002eac <iValidateFrame>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d102      	bne.n	8002b9a <userPoll+0xaa>
  {
    return -1;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	e007      	b.n	8002baa <userPoll+0xba>
  }

  *dDistance = userCalculateDistance();
 8002b9a:	f7ff ff31 	bl	8002a00 <userCalculateDistance>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	e9c1 2300 	strd	r2, r3, [r1]
  return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	3427d000 	.word	0x3427d000
 8002bb8:	20000068 	.word	0x20000068
 8002bbc:	34279000 	.word	0x34279000
 8002bc0:	20001130 	.word	0x20001130
 8002bc4:	20000074 	.word	0x20000074

08002bc8 <userDisableLogging>:
  dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
  return 0;
}

void userDisableLogging(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  if (HAL_UART_DeInit(phCurrentUART) != HAL_OK)
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <userDisableLogging+0x1c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 f976 	bl	8005ec2 <HAL_UART_DeInit>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <userDisableLogging+0x18>
  {
    Error_Handler();
 8002bdc:	f7ff f8b0 	bl	8001d40 <Error_Handler>
  }
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000040 	.word	0x20000040

08002be8 <userEnableLogging>:

void userEnableLogging(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  char *pcz = USER_NEWLINE;
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <userEnableLogging+0x4c>)
 8002bf0:	603b      	str	r3, [r7, #0]
  uUserLogAppendixLength = 0;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <userEnableLogging+0x50>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
  for (char *pc = pcz; *pc; pc++) uUserLogAppendixLength++;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	e007      	b.n	8002c0e <userEnableLogging+0x26>
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <userEnableLogging+0x50>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <userEnableLogging+0x50>)
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f3      	bne.n	8002bfe <userEnableLogging+0x16>
  if (HAL_UART_Init(phCurrentUART) != HAL_OK) Error_Handler();
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <userEnableLogging+0x54>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 f904 	bl	8005e28 <HAL_UART_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <userEnableLogging+0x42>
 8002c26:	f7ff f88b 	bl	8001d40 <Error_Handler>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	0801976c 	.word	0x0801976c
 8002c38:	20001128 	.word	0x20001128
 8002c3c:	20000040 	.word	0x20000040

08002c40 <userLog>:

void userLog(char *pczMessage)
{
 8002c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c44:	b089      	sub	sp, #36	; 0x24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  char *pczAppendix = USER_NEWLINE;
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <userLog+0xdc>)
 8002c4c:	613b      	str	r3, [r7, #16]
  uint16_t u16Len = uUserLogAppendixLength;
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <userLog+0xe0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	82fb      	strh	r3, [r7, #22]
  for (char *pc = pczMessage; *pc; pc++) u16Len++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e005      	b.n	8002c66 <userLog+0x26>
 8002c5a:	8afb      	ldrh	r3, [r7, #22]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	82fb      	strh	r3, [r7, #22]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f5      	bne.n	8002c5a <userLog+0x1a>
  uint8_t pu8Data[u16Len];
 8002c6e:	8af9      	ldrh	r1, [r7, #22]
 8002c70:	466b      	mov	r3, sp
 8002c72:	461e      	mov	r6, r3
 8002c74:	460b      	mov	r3, r1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	b28b      	uxth	r3, r1
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4698      	mov	r8, r3
 8002c80:	4691      	mov	r9, r2
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c96:	b28b      	uxth	r3, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	4615      	mov	r5, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	00eb      	lsls	r3, r5, #3
 8002ca8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cac:	00e2      	lsls	r2, r4, #3
 8002cae:	460b      	mov	r3, r1
 8002cb0:	3307      	adds	r3, #7
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	ebad 0d03 	sub.w	sp, sp, r3
 8002cba:	466b      	mov	r3, sp
 8002cbc:	3300      	adds	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  uint8_t *pu8 = pu8Data;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]

  while (*pczMessage)
 8002cc4:	e009      	b.n	8002cda <userLog+0x9a>
  {
    *pu8 = *pczMessage;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	701a      	strb	r2, [r3, #0]
     pu8++;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
     pczMessage++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	607b      	str	r3, [r7, #4]
  while (*pczMessage)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f1      	bne.n	8002cc6 <userLog+0x86>
  }
  
  while (*pczAppendix)
 8002ce2:	e009      	b.n	8002cf8 <userLog+0xb8>
  {
    *pu8 = *pczAppendix;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	701a      	strb	r2, [r3, #0]
     pu8++;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
     pczAppendix++;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]
  while (*pczAppendix)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f1      	bne.n	8002ce4 <userLog+0xa4>
  }

  HAL_UART_Transmit(
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <userLog+0xe4>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	8afa      	ldrh	r2, [r7, #22]
 8002d06:	230a      	movs	r3, #10
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	f003 f909 	bl	8005f20 <HAL_UART_Transmit>
 8002d0e:	46b5      	mov	sp, r6
    phCurrentUART,
    pu8Data,
    u16Len,
    UART_TIMEOUT_MS);
}
 8002d10:	bf00      	nop
 8002d12:	3724      	adds	r7, #36	; 0x24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d1a:	bf00      	nop
 8002d1c:	0801976c 	.word	0x0801976c
 8002d20:	20001128 	.word	0x20001128
 8002d24:	20000040 	.word	0x20000040

08002d28 <userSetLed>:

void userSetLed(int iLed, int iState)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  GPIO_TypeDef *pPort = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint16_t u16Pin = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	81fb      	strh	r3, [r7, #14]
  GPIO_PinState eState = (iState == LED_ON) ?
      GPIO_PIN_SET : GPIO_PIN_RESET;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
  GPIO_PinState eState = (iState == LED_ON) ?
 8002d46:	75fb      	strb	r3, [r7, #23]
  if (iGetLed(iLed, &pPort, &u16Pin) == -1) return;
 8002d48:	f107 020e 	add.w	r2, r7, #14
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f868 	bl	8002e28 <iGetLed>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d006      	beq.n	8002d6e <userSetLed+0x46>
  HAL_GPIO_WritePin(pPort, u16Pin, eState);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	89f9      	ldrh	r1, [r7, #14]
 8002d64:	7dfa      	ldrb	r2, [r7, #23]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 f894 	bl	8003e94 <HAL_GPIO_WritePin>
 8002d6c:	e000      	b.n	8002d70 <userSetLed+0x48>
  if (iGetLed(iLed, &pPort, &u16Pin) == -1) return;
 8002d6e:	bf00      	nop
}
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <userDisableInterrupts>:
  if (iGetLed(iLed, &pPort, &u16Pin) == -1) return;
  HAL_GPIO_TogglePin(pPort, u16Pin);
}

void userDisableInterrupts(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002d7a:	2028      	movs	r0, #40	; 0x28
 8002d7c:	f000 fa9f 	bl	80032be <HAL_NVIC_DisableIRQ>
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <userButtonInterruptHandler>:

void userButtonInterruptHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  if (iUserButtonInterruptFlag == 0)
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <userButtonInterruptHandler+0x5c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d124      	bne.n	8002dda <userButtonInterruptHandler+0x56>
  {
    userSetLed(LED_GREEN, LED_ON);
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff ffc8 	bl	8002d28 <userSetLed>
    userSetLed(LED_EXT, LED_ON);
 8002d98:	2101      	movs	r1, #1
 8002d9a:	2004      	movs	r0, #4
 8002d9c:	f7ff ffc4 	bl	8002d28 <userSetLed>
    userEnableLogging();
 8002da0:	f7ff ff22 	bl	8002be8 <userEnableLogging>
    userDisableInterrupts();
 8002da4:	f7ff ffe7 	bl	8002d76 <userDisableInterrupts>

    if (HAL_TIM_Base_Start_IT(phCurrentTimer) != HAL_OK)
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <userButtonInterruptHandler+0x60>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fc09 	bl	80055c4 <HAL_TIM_Base_Start_IT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <userButtonInterruptHandler+0x50>
    {
      userSetLed(LED_GREEN, LED_OFF);
 8002db8:	2100      	movs	r1, #0
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7ff ffb4 	bl	8002d28 <userSetLed>
      userSetLed(LED_EXT, LED_OFF);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2004      	movs	r0, #4
 8002dc4:	f7ff ffb0 	bl	8002d28 <userSetLed>
      userSetLed(LED_RED, LED_ON);
 8002dc8:	2101      	movs	r1, #1
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f7ff ffac 	bl	8002d28 <userSetLed>
      Error_Handler();
 8002dd0:	f7fe ffb6 	bl	8001d40 <Error_Handler>
    }

    iUserButtonInterruptFlag = 1;
 8002dd4:	4b02      	ldr	r3, [pc, #8]	; (8002de0 <userButtonInterruptHandler+0x5c>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20001124 	.word	0x20001124
 8002de4:	20000044 	.word	0x20000044

08002de8 <userTimerInterruptHandler>:

void userTimerInterruptHandler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  elapsedTimeMilliseconds++;
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <userTimerInterruptHandler+0x18>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <userTimerInterruptHandler+0x18>)
 8002df4:	6013      	str	r3, [r2, #0]
  {
    userToggleLed(LED_BLUE);
    userToggleLed(LED_EXT);
  }
  */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	2000112c 	.word	0x2000112c

08002e04 <HAL_TIM_PeriodElapsedCallback>:

/*————————————————————————————————————————————————————————————*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *phTimer)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if (phTimer == phCurrentTimer) userTimerInterruptHandler();
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_PeriodElapsedCallback+0x16>
 8002e16:	f7ff ffe7 	bl	8002de8 <userTimerInterruptHandler>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000044 	.word	0x20000044

08002e28 <iGetLed>:

static int iGetLed(
    int iLed,
    GPIO_TypeDef **ppPort,
    uint16_t *pu16Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  switch (iLed)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d829      	bhi.n	8002e90 <iGetLed+0x68>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <iGetLed+0x1c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e63 	.word	0x08002e63
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e81 	.word	0x08002e81
  {
    case LED_GREEN:
      *ppPort = LD1_GPIO_Port;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <iGetLed+0x7c>)
 8002e58:	601a      	str	r2, [r3, #0]
      *pu16Pin = LD1_Pin;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	801a      	strh	r2, [r3, #0]
      break;
 8002e60:	e019      	b.n	8002e96 <iGetLed+0x6e>
    case LED_BLUE:
      *ppPort = LD2_GPIO_Port;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <iGetLed+0x7c>)
 8002e66:	601a      	str	r2, [r3, #0]
      *pu16Pin = LD2_Pin;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	801a      	strh	r2, [r3, #0]
      break;
 8002e6e:	e012      	b.n	8002e96 <iGetLed+0x6e>
    case LED_RED:
      *ppPort = LD3_GPIO_Port;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <iGetLed+0x7c>)
 8002e74:	601a      	str	r2, [r3, #0]
      *pu16Pin = LD3_Pin;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e7c:	801a      	strh	r2, [r3, #0]
      break;
 8002e7e:	e00a      	b.n	8002e96 <iGetLed+0x6e>
    case LED_EXT:
      *ppPort = EXT_LED_GPIO_Port;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <iGetLed+0x80>)
 8002e84:	601a      	str	r2, [r3, #0]
      *pu16Pin = EXT_LED_Pin;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8c:	801a      	strh	r2, [r3, #0]
      break;
 8002e8e:	e002      	b.n	8002e96 <iGetLed+0x6e>
    default:
      return -1;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e000      	b.n	8002e98 <iGetLed+0x70>
  }

  return 0;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40021000 	.word	0x40021000

08002eac <iValidateFrame>:

static int iValidateFrame(void *pFrame, void *pReference)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  //uint8_t *pu8Frame = (uint8_t *)pFrame;
  //uint8_t temp = pu8Frame[FRAME_COUNT_INDEX];
  int iResult = -1;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	60fb      	str	r3, [r7, #12]

  //pu8Frame[FRAME_COUNT_INDEX] = 0;
  iResult = memcmp(pFrame, pReference, 10) == 0 ? 0 : -1;
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	6839      	ldr	r1, [r7, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f011 fd69 	bl	8014998 <memcmp>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <iValidateFrame+0x24>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e001      	b.n	8002ed4 <iValidateFrame+0x28>
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	60fb      	str	r3, [r7, #12]
  //pu8Frame[FRAME_COUNT_INDEX] = temp;
  return iResult == 0 ? 0 : -1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <iValidateFrame+0x34>
 8002edc:	2300      	movs	r3, #0
 8002ede:	e001      	b.n	8002ee4 <iValidateFrame+0x38>
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <Reset_Handler>:
 8002eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f24 <LoopFillZerobss+0x12>
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <LoopFillZerobss+0x16>)
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <LoopFillZerobss+0x1a>)
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <LoopFillZerobss+0x1e>)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e002      	b.n	8002f00 <LoopCopyDataInit>

08002efa <CopyDataInit>:
 8002efa:	58d4      	ldr	r4, [r2, r3]
 8002efc:	50c4      	str	r4, [r0, r3]
 8002efe:	3304      	adds	r3, #4

08002f00 <LoopCopyDataInit>:
 8002f00:	18c4      	adds	r4, r0, r3
 8002f02:	428c      	cmp	r4, r1
 8002f04:	d3f9      	bcc.n	8002efa <CopyDataInit>
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <LoopFillZerobss+0x22>)
 8002f08:	4c0b      	ldr	r4, [pc, #44]	; (8002f38 <LoopFillZerobss+0x26>)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e001      	b.n	8002f12 <LoopFillZerobss>

08002f0e <FillZerobss>:
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	3204      	adds	r2, #4

08002f12 <LoopFillZerobss>:
 8002f12:	42a2      	cmp	r2, r4
 8002f14:	d3fb      	bcc.n	8002f0e <FillZerobss>
 8002f16:	f7ff fb59 	bl	80025cc <SystemInit>
 8002f1a:	f011 fad5 	bl	80144c8 <__libc_init_array>
 8002f1e:	f7fe fc03 	bl	8001728 <main>
 8002f22:	4770      	bx	lr
 8002f24:	20050000 	.word	0x20050000
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000a50 	.word	0x20000a50
 8002f30:	08019f98 	.word	0x08019f98
 8002f34:	20000a50 	.word	0x20000a50
 8002f38:	2000127c 	.word	0x2000127c

08002f3c <ADC_IRQHandler>:
 8002f3c:	e7fe      	b.n	8002f3c <ADC_IRQHandler>
	...

08002f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_Init+0x40>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <HAL_Init+0x40>)
 8002f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_Init+0x40>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <HAL_Init+0x40>)
 8002f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_Init+0x40>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_Init+0x40>)
 8002f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f68:	2003      	movs	r0, #3
 8002f6a:	f000 f973 	bl	8003254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f000 f808 	bl	8002f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f74:	f7ff f8cc 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023c00 	.word	0x40023c00

08002f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x54>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_InitTick+0x58>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4619      	mov	r1, r3
 8002f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f999 	bl	80032da <HAL_SYSTICK_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00e      	b.n	8002fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d80a      	bhi.n	8002fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	f000 f953 	bl	800326a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_InitTick+0x5c>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000050 	.word	0x20000050
 8002fdc:	20000094 	.word	0x20000094
 8002fe0:	20000090 	.word	0x20000090

08002fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x20>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_IncTick+0x24>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_IncTick+0x24>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000094 	.word	0x20000094
 8003008:	20001144 	.word	0x20001144

0800300c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_GetTick+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20001144 	.word	0x20001144

08003024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff ffee 	bl	800300c <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d005      	beq.n	800304a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_Delay+0x44>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800304a:	bf00      	nop
 800304c:	f7ff ffde 	bl	800300c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d8f7      	bhi.n	800304c <HAL_Delay+0x28>
  {
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000094 	.word	0x20000094

0800306c <__NVIC_SetPriorityGrouping>:
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003088:	4013      	ands	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_GetPriorityGrouping>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <__NVIC_GetPriorityGrouping+0x18>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 0307 	and.w	r3, r3, #7
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_EnableIRQ>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db0b      	blt.n	80030fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	4907      	ldr	r1, [pc, #28]	; (8003108 <__NVIC_EnableIRQ+0x38>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000e100 	.word	0xe000e100

0800310c <__NVIC_DisableIRQ>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db12      	blt.n	8003144 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	490a      	ldr	r1, [pc, #40]	; (8003150 <__NVIC_DisableIRQ+0x44>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	3320      	adds	r3, #32
 8003134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003138:	f3bf 8f4f 	dsb	sy
}
 800313c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800313e:	f3bf 8f6f 	isb	sy
}
 8003142:	bf00      	nop
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf28      	it	cs
 80031c6:	2304      	movcs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b03      	subs	r3, #3
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003220:	d301      	bcc.n	8003226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003222:	2301      	movs	r3, #1
 8003224:	e00f      	b.n	8003246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <SysTick_Config+0x40>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322e:	210f      	movs	r1, #15
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	f7ff ff8e 	bl	8003154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <SysTick_Config+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <SysTick_Config+0x40>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010

08003254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff05 	bl	800306c <__NVIC_SetPriorityGrouping>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800327c:	f7ff ff1a 	bl	80030b4 <__NVIC_GetPriorityGrouping>
 8003280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	6978      	ldr	r0, [r7, #20]
 8003288:	f7ff ff8e 	bl	80031a8 <NVIC_EncodePriority>
 800328c:	4602      	mov	r2, r0
 800328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff5d 	bl	8003154 <__NVIC_SetPriority>
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff0d 	bl	80030d0 <__NVIC_EnableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff1d 	bl	800310c <__NVIC_DisableIRQ>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff94 	bl	8003210 <SysTick_Config>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff fe84 	bl	800300c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e099      	b.n	8003444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003330:	e00f      	b.n	8003352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003332:	f7ff fe6b 	bl	800300c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b05      	cmp	r3, #5
 800333e:	d908      	bls.n	8003352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e078      	b.n	8003444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e8      	bne.n	8003332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_DMA_Init+0x158>)
 800336c:	4013      	ands	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	4313      	orrs	r3, r2
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0307 	bic.w	r3, r3, #7
 80033d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d117      	bne.n	8003416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fa47 	bl	800388c <DMA_CheckFifoParam>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2240      	movs	r2, #64	; 0x40
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003412:	2301      	movs	r3, #1
 8003414:	e016      	b.n	8003444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f9fe 	bl	8003820 <DMA_CalcBaseAndBitshift>
 8003424:	4603      	mov	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	e010803f 	.word	0xe010803f

08003450 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e050      	b.n	8003504 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d101      	bne.n	8003472 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e048      	b.n	8003504 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2221      	movs	r2, #33	; 0x21
 80034b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9b4 	bl	8003820 <DMA_CalcBaseAndBitshift>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	223f      	movs	r2, #63	; 0x3f
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <HAL_DMA_IRQHandler+0x248>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a8e      	ldr	r2, [pc, #568]	; (8003758 <HAL_DMA_IRQHandler+0x24c>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0a9b      	lsrs	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	2208      	movs	r2, #8
 8003538:	409a      	lsls	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01a      	beq.n	8003578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2208      	movs	r2, #8
 8003566:	409a      	lsls	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f043 0202 	orr.w	r2, r3, #2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2204      	movs	r2, #4
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d012      	beq.n	80035e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	2204      	movs	r2, #4
 80035d2:	409a      	lsls	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	2210      	movs	r2, #16
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d043      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d03c      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	2210      	movs	r2, #16
 8003608:	409a      	lsls	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d018      	beq.n	800364e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d024      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
 800363a:	e01f      	b.n	800367c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01b      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
 800364c:	e016      	b.n	800367c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0208 	bic.w	r2, r2, #8
 800366a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2220      	movs	r2, #32
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 808f 	beq.w	80037ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8087 	beq.w	80037ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2220      	movs	r2, #32
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d136      	bne.n	8003724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0216 	bic.w	r2, r2, #22
 80036c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x1da>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0208 	bic.w	r2, r2, #8
 80036f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	223f      	movs	r2, #63	; 0x3f
 80036fc:	409a      	lsls	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d07e      	beq.n	8003818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
        }
        return;
 8003722:	e079      	b.n	8003818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01d      	beq.n	800376e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	2b00      	cmp	r3, #0
 8003746:	d031      	beq.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e02c      	b.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
 8003752:	bf00      	nop
 8003754:	20000050 	.word	0x20000050
 8003758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e01e      	b.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10f      	bne.n	800379c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0210 	bic.w	r2, r2, #16
 800378a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d032      	beq.n	800381a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d022      	beq.n	8003806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2205      	movs	r2, #5
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3301      	adds	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d307      	bcc.n	80037f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f2      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x2cc>
 80037f2:	e000      	b.n	80037f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
 8003816:	e000      	b.n	800381a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003818:	bf00      	nop
    }
  }
}
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3b10      	subs	r3, #16
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <DMA_CalcBaseAndBitshift+0x64>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <DMA_CalcBaseAndBitshift+0x68>)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d909      	bls.n	8003862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	659a      	str	r2, [r3, #88]	; 0x58
 8003860:	e007      	b.n	8003872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	aaaaaaab 	.word	0xaaaaaaab
 8003888:	08019770 	.word	0x08019770

0800388c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11f      	bne.n	80038e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d856      	bhi.n	800395a <DMA_CheckFifoParam+0xce>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <DMA_CheckFifoParam+0x28>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d7 	.word	0x080038d7
 80038bc:	080038c5 	.word	0x080038c5
 80038c0:	0800395b 	.word	0x0800395b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d046      	beq.n	800395e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d4:	e043      	b.n	800395e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038de:	d140      	bne.n	8003962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e4:	e03d      	b.n	8003962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d121      	bne.n	8003934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d837      	bhi.n	8003966 <DMA_CheckFifoParam+0xda>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <DMA_CheckFifoParam+0x70>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	08003913 	.word	0x08003913
 8003904:	0800390d 	.word	0x0800390d
 8003908:	08003925 	.word	0x08003925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e030      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d025      	beq.n	800396a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e022      	b.n	800396a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800392c:	d11f      	bne.n	800396e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003932:	e01c      	b.n	800396e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d903      	bls.n	8003942 <DMA_CheckFifoParam+0xb6>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d003      	beq.n	8003948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003940:	e018      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      break;
 8003946:	e015      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e00b      	b.n	8003972 <DMA_CheckFifoParam+0xe6>
      break;
 800395a:	bf00      	nop
 800395c:	e00a      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 800395e:	bf00      	nop
 8003960:	e008      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
 8003964:	e006      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;   
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
    }
  } 
  
  return status; 
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e165      	b.n	8003c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f040 8154 	bne.w	8003c66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d005      	beq.n	80039d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d130      	bne.n	8003a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 0201 	and.w	r2, r3, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d017      	beq.n	8003a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d123      	bne.n	8003ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3208      	adds	r2, #8
 8003a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80ae 	beq.w	8003c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <HAL_GPIO_Init+0x300>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a5c      	ldr	r2, [pc, #368]	; (8003c84 <HAL_GPIO_Init+0x300>)
 8003b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <HAL_GPIO_Init+0x300>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b26:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4f      	ldr	r2, [pc, #316]	; (8003c8c <HAL_GPIO_Init+0x308>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d025      	beq.n	8003b9e <HAL_GPIO_Init+0x21a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4e      	ldr	r2, [pc, #312]	; (8003c90 <HAL_GPIO_Init+0x30c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01f      	beq.n	8003b9a <HAL_GPIO_Init+0x216>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a4d      	ldr	r2, [pc, #308]	; (8003c94 <HAL_GPIO_Init+0x310>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d019      	beq.n	8003b96 <HAL_GPIO_Init+0x212>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a4c      	ldr	r2, [pc, #304]	; (8003c98 <HAL_GPIO_Init+0x314>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_GPIO_Init+0x20e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a4b      	ldr	r2, [pc, #300]	; (8003c9c <HAL_GPIO_Init+0x318>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00d      	beq.n	8003b8e <HAL_GPIO_Init+0x20a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4a      	ldr	r2, [pc, #296]	; (8003ca0 <HAL_GPIO_Init+0x31c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <HAL_GPIO_Init+0x206>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a49      	ldr	r2, [pc, #292]	; (8003ca4 <HAL_GPIO_Init+0x320>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_GPIO_Init+0x202>
 8003b82:	2306      	movs	r3, #6
 8003b84:	e00c      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b86:	2307      	movs	r3, #7
 8003b88:	e00a      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b8a:	2305      	movs	r3, #5
 8003b8c:	e008      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b8e:	2304      	movs	r3, #4
 8003b90:	e006      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b92:	2303      	movs	r3, #3
 8003b94:	e004      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e002      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_GPIO_Init+0x21c>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f002 0203 	and.w	r2, r2, #3
 8003ba6:	0092      	lsls	r2, r2, #2
 8003ba8:	4093      	lsls	r3, r2
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb0:	4935      	ldr	r1, [pc, #212]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be8:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c0c:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c36:	4a1c      	ldr	r2, [pc, #112]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c60:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	f67f ae96 	bls.w	80039a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400
 8003c94:	40020800 	.word	0x40020800
 8003c98:	40020c00 	.word	0x40020c00
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40021400 	.word	0x40021400
 8003ca4:	40021800 	.word	0x40021800
 8003ca8:	40013c00 	.word	0x40013c00

08003cac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e0c7      	b.n	8003e58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	f040 80b7 	bne.w	8003e52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ce4:	4a62      	ldr	r2, [pc, #392]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a5a      	ldr	r2, [pc, #360]	; (8003e74 <HAL_GPIO_DeInit+0x1c8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d025      	beq.n	8003d5a <HAL_GPIO_DeInit+0xae>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a59      	ldr	r2, [pc, #356]	; (8003e78 <HAL_GPIO_DeInit+0x1cc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01f      	beq.n	8003d56 <HAL_GPIO_DeInit+0xaa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a58      	ldr	r2, [pc, #352]	; (8003e7c <HAL_GPIO_DeInit+0x1d0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d019      	beq.n	8003d52 <HAL_GPIO_DeInit+0xa6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_GPIO_DeInit+0x1d4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_GPIO_DeInit+0xa2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a56      	ldr	r2, [pc, #344]	; (8003e84 <HAL_GPIO_DeInit+0x1d8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00d      	beq.n	8003d4a <HAL_GPIO_DeInit+0x9e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a55      	ldr	r2, [pc, #340]	; (8003e88 <HAL_GPIO_DeInit+0x1dc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_DeInit+0x9a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a54      	ldr	r2, [pc, #336]	; (8003e8c <HAL_GPIO_DeInit+0x1e0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_GPIO_DeInit+0x96>
 8003d3e:	2306      	movs	r3, #6
 8003d40:	e00c      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d42:	2307      	movs	r3, #7
 8003d44:	e00a      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d46:	2305      	movs	r3, #5
 8003d48:	e008      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e004      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_GPIO_DeInit+0xb0>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	f002 0203 	and.w	r2, r2, #3
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	4093      	lsls	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d132      	bne.n	8003dd2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d6c:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	4946      	ldr	r1, [pc, #280]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d7a:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	493f      	ldr	r1, [pc, #252]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d96:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	493c      	ldr	r1, [pc, #240]	; (8003e90 <HAL_GPIO_DeInit+0x1e4>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003db4:	4a2e      	ldr	r2, [pc, #184]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	3302      	adds	r3, #2
 8003dbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	482a      	ldr	r0, [pc, #168]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	400a      	ands	r2, r1
 8003dcc:	3302      	adds	r3, #2
 8003dce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2103      	movs	r1, #3
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	08d2      	lsrs	r2, r2, #3
 8003e08:	4019      	ands	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2103      	movs	r1, #3
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	f67f af34 	bls.w	8003cc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40013800 	.word	0x40013800
 8003e74:	40020000 	.word	0x40020000
 8003e78:	40020400 	.word	0x40020400
 8003e7c:	40020800 	.word	0x40020800
 8003e80:	40020c00 	.word	0x40020c00
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40021400 	.word	0x40021400
 8003e8c:	40021800 	.word	0x40021800
 8003e90:	40013c00 	.word	0x40013c00

08003e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea4:	787b      	ldrb	r3, [r7, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eb0:	e003      	b.n	8003eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	041a      	lsls	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	619a      	str	r2, [r3, #24]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe f850 	bl	8001f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40013c00 	.word	0x40013c00

08003ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b08f      	sub	sp, #60	; 0x3c
 8003efc:	af0a      	add	r7, sp, #40	; 0x28
 8003efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e116      	b.n	8004138 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fe fa59 	bl	80023dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 fbce 	bl	80066ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	687e      	ldr	r6, [r7, #4]
 8003f56:	466d      	mov	r5, sp
 8003f58:	f106 0410 	add.w	r4, r6, #16
 8003f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f6c:	1d33      	adds	r3, r6, #4
 8003f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f70:	6838      	ldr	r0, [r7, #0]
 8003f72:	f002 fb59 	bl	8006628 <USB_CoreInit>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0d7      	b.n	8004138 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f002 fbbc 	bl	800670c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	e04a      	b.n	8004030 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	333d      	adds	r3, #61	; 0x3d
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	333c      	adds	r3, #60	; 0x3c
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	b298      	uxth	r0, r3
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3344      	adds	r3, #68	; 0x44
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3340      	adds	r3, #64	; 0x40
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3348      	adds	r3, #72	; 0x48
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334c      	adds	r3, #76	; 0x4c
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3354      	adds	r3, #84	; 0x54
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	3301      	adds	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	d3af      	bcc.n	8003f9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	e044      	b.n	80040ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	3301      	adds	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3b5      	bcc.n	8004040 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	687e      	ldr	r6, [r7, #4]
 80040dc:	466d      	mov	r5, sp
 80040de:	f106 0410 	add.w	r4, r6, #16
 80040e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80040f2:	1d33      	adds	r3, r6, #4
 80040f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040f6:	6838      	ldr	r0, [r7, #0]
 80040f8:	f002 fb54 	bl	80067a4 <USB_DevInit>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e014      	b.n	8004138 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f80a 	bl	8004140 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f002 fd12 	bl	8006b5a <USB_DevDisconnect>

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004140 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	f043 0303 	orr.w	r3, r3, #3
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cc      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b68      	ldr	r3, [pc, #416]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d90c      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0b8      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041dc:	4b59      	ldr	r3, [pc, #356]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a58      	ldr	r2, [pc, #352]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f4:	4b53      	ldr	r3, [pc, #332]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a52      	ldr	r2, [pc, #328]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b50      	ldr	r3, [pc, #320]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	494d      	ldr	r1, [pc, #308]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d044      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d119      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d003      	beq.n	8004246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	2b03      	cmp	r3, #3
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e06f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	4b3b      	ldr	r3, [pc, #236]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e067      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4934      	ldr	r1, [pc, #208]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fe fec8 	bl	800300c <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fe fec4 	bl	800300c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e04f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d20c      	bcs.n	80042d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e032      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4916      	ldr	r1, [pc, #88]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	490e      	ldr	r1, [pc, #56]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800430e:	f000 f821 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004312:	4602      	mov	r2, r0
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	490a      	ldr	r1, [pc, #40]	; (8004348 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	5ccb      	ldrb	r3, [r1, r3]
 8004322:	fa22 f303 	lsr.w	r3, r2, r3
 8004326:	4a09      	ldr	r2, [pc, #36]	; (800434c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fe28 	bl	8002f84 <HAL_InitTick>

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023c00 	.word	0x40023c00
 8004344:	40023800 	.word	0x40023800
 8004348:	08019750 	.word	0x08019750
 800434c:	20000050 	.word	0x20000050
 8004350:	20000090 	.word	0x20000090

08004354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004358:	b094      	sub	sp, #80	; 0x50
 800435a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	647b      	str	r3, [r7, #68]	; 0x44
 8004360:	2300      	movs	r3, #0
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004364:	2300      	movs	r3, #0
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800436c:	4b79      	ldr	r3, [pc, #484]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b08      	cmp	r3, #8
 8004376:	d00d      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x40>
 8004378:	2b08      	cmp	r3, #8
 800437a:	f200 80e1 	bhi.w	8004540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x34>
 8004382:	2b04      	cmp	r3, #4
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x3a>
 8004386:	e0db      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b73      	ldr	r3, [pc, #460]	; (8004558 <HAL_RCC_GetSysClockFreq+0x204>)
 800438a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800438c:	e0db      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_GetSysClockFreq+0x208>)
 8004390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004392:	e0d8      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004394:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439e:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d063      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	2200      	movs	r2, #0
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
 80043c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043c6:	4622      	mov	r2, r4
 80043c8:	462b      	mov	r3, r5
 80043ca:	f04f 0000 	mov.w	r0, #0
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d8:	0150      	lsls	r0, r2, #5
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4621      	mov	r1, r4
 80043e0:	1a51      	subs	r1, r2, r1
 80043e2:	6139      	str	r1, [r7, #16]
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f8:	4659      	mov	r1, fp
 80043fa:	018b      	lsls	r3, r1, #6
 80043fc:	4651      	mov	r1, sl
 80043fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004402:	4651      	mov	r1, sl
 8004404:	018a      	lsls	r2, r1, #6
 8004406:	4651      	mov	r1, sl
 8004408:	ebb2 0801 	subs.w	r8, r2, r1
 800440c:	4659      	mov	r1, fp
 800440e:	eb63 0901 	sbc.w	r9, r3, r1
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004426:	4690      	mov	r8, r2
 8004428:	4699      	mov	r9, r3
 800442a:	4623      	mov	r3, r4
 800442c:	eb18 0303 	adds.w	r3, r8, r3
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	462b      	mov	r3, r5
 8004434:	eb49 0303 	adc.w	r3, r9, r3
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004446:	4629      	mov	r1, r5
 8004448:	024b      	lsls	r3, r1, #9
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004450:	4621      	mov	r1, r4
 8004452:	024a      	lsls	r2, r1, #9
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445a:	2200      	movs	r2, #0
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
 800445e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004464:	f7fc fe76 	bl	8001154 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	e058      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004472:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	2200      	movs	r2, #0
 800447a:	4618      	mov	r0, r3
 800447c:	4611      	mov	r1, r2
 800447e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
 8004488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800448c:	4642      	mov	r2, r8
 800448e:	464b      	mov	r3, r9
 8004490:	f04f 0000 	mov.w	r0, #0
 8004494:	f04f 0100 	mov.w	r1, #0
 8004498:	0159      	lsls	r1, r3, #5
 800449a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449e:	0150      	lsls	r0, r2, #5
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4641      	mov	r1, r8
 80044a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c4:	ebb2 040a 	subs.w	r4, r2, sl
 80044c8:	eb63 050b 	sbc.w	r5, r3, fp
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	00eb      	lsls	r3, r5, #3
 80044d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044da:	00e2      	lsls	r2, r4, #3
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
 80044e0:	4643      	mov	r3, r8
 80044e2:	18e3      	adds	r3, r4, r3
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	464b      	mov	r3, r9
 80044e8:	eb45 0303 	adc.w	r3, r5, r3
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fa:	4629      	mov	r1, r5
 80044fc:	028b      	lsls	r3, r1, #10
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004504:	4621      	mov	r1, r4
 8004506:	028a      	lsls	r2, r1, #10
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	2200      	movs	r2, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	61fa      	str	r2, [r7, #28]
 8004514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004518:	f7fc fe1c 	bl	8001154 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800453e:	e002      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004548:	4618      	mov	r0, r3
 800454a:	3750      	adds	r7, #80	; 0x50
 800454c:	46bd      	mov	sp, r7
 800454e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	00f42400 	.word	0x00f42400
 800455c:	007a1200 	.word	0x007a1200

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000050 	.word	0x20000050

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	; (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	08019760 	.word	0x08019760

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	08019760 	.word	0x08019760

080045c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80045ec:	4b7a      	ldr	r3, [pc, #488]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4977      	ldr	r1, [pc, #476]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800460a:	2301      	movs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800461a:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004620:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	496b      	ldr	r1, [pc, #428]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004638:	2301      	movs	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d022      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004648:	4b63      	ldr	r3, [pc, #396]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800464a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	4960      	ldr	r1, [pc, #384]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004672:	d10c      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004674:	4b58      	ldr	r3, [pc, #352]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	3b01      	subs	r3, #1
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	4954      	ldr	r1, [pc, #336]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d022      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800469a:	4b4f      	ldr	r3, [pc, #316]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	494b      	ldr	r1, [pc, #300]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80046b8:	2301      	movs	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80046c6:	4b44      	ldr	r3, [pc, #272]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	493f      	ldr	r1, [pc, #252]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 808a 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6413      	str	r3, [r2, #64]	; 0x40
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800470a:	4b34      	ldr	r3, [pc, #208]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004716:	f7fe fc79 	bl	800300c <HAL_GetTick>
 800471a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fe fc75 	bl	800300c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1d1      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800473c:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02f      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d028      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d114      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004782:	f7fe fc43 	bl	800300c <HAL_GetTick>
 8004786:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fe fc3f 	bl	800300c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e199      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b8:	d114      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	4902      	ldr	r1, [pc, #8]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]
 80047d4:	e00c      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470e40 	.word	0x42470e40
 80047e4:	4b89      	ldr	r3, [pc, #548]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a88      	ldr	r2, [pc, #544]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ee:	6093      	str	r3, [r2, #8]
 80047f0:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	4983      	ldr	r1, [pc, #524]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004814:	4b7e      	ldr	r3, [pc, #504]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004816:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004824:	4b79      	ldr	r3, [pc, #484]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	4976      	ldr	r1, [pc, #472]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004846:	4b71      	ldr	r3, [pc, #452]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	496d      	ldr	r1, [pc, #436]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004864:	d101      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004866:	2301      	movs	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004876:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	4961      	ldr	r1, [pc, #388]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d004      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	f040 80c6 	bne.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800489c:	4b5d      	ldr	r3, [pc, #372]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a2:	f7fe fbb3 	bl	800300c <HAL_GetTick>
 80048a6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048aa:	f7fe fbaf 	bl	800300c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e10b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80048c8:	4a53      	ldr	r2, [pc, #332]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d019      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800490c:	d00e      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d115      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492a:	d110      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	4931      	ldr	r1, [pc, #196]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800496a:	2b00      	cmp	r3, #0
 800496c:	d026      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d122      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004976:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	019b      	lsls	r3, r3, #6
 800498e:	431a      	orrs	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	071b      	lsls	r3, r3, #28
 800499c:	491b      	ldr	r1, [pc, #108]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049aa:	f023 021f 	bic.w	r2, r3, #31
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	4915      	ldr	r1, [pc, #84]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fe fb0c 	bl	800300c <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f6:	e011      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049f8:	f7fe fb08 	bl	800300c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d90a      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e064      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	424711e0 	.word	0x424711e0
 8004a14:	42470068 	.word	0x42470068
 8004a18:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1c:	4b2f      	ldr	r3, [pc, #188]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0e7      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a34:	4b29      	ldr	r3, [pc, #164]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	4926      	ldr	r1, [pc, #152]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a56:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	491d      	ldr	r1, [pc, #116]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004a78:	4b18      	ldr	r3, [pc, #96]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	4915      	ldr	r1, [pc, #84]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	490c      	ldr	r1, [pc, #48]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	4904      	ldr	r1, [pc, #16]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40023800 	.word	0x40023800

08004ae0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e273      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d075      	beq.n	8004bea <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004afe:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d00c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b85      	ldr	r3, [pc, #532]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d112      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b16:	4b82      	ldr	r3, [pc, #520]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	4b7e      	ldr	r3, [pc, #504]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d05b      	beq.n	8004be8 <HAL_RCC_OscConfig+0x108>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d157      	bne.n	8004be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e24e      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x74>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e01d      	b.n	8004b90 <HAL_RCC_OscConfig+0xb0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x98>
 8004b5e:	4b70      	ldr	r3, [pc, #448]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6f      	ldr	r2, [pc, #444]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6c      	ldr	r2, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0xb0>
 8004b78:	4b69      	ldr	r3, [pc, #420]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a68      	ldr	r2, [pc, #416]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	4b66      	ldr	r3, [pc, #408]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a65      	ldr	r2, [pc, #404]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe fa38 	bl	800300c <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fe fa34 	bl	800300c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e213      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xc0>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fa24 	bl	800300c <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc8:	f7fe fa20 	bl	800300c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e1ff      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0xe8>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d063      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d11c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0e:	4b44      	ldr	r3, [pc, #272]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_RCC_OscConfig+0x152>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e1d3      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4937      	ldr	r1, [pc, #220]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	e03a      	b.n	8004cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCC_OscConfig+0x244>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fe f9d9 	bl	800300c <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5e:	f7fe f9d5 	bl	800300c <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e1b4      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4925      	ldr	r1, [pc, #148]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCC_OscConfig+0x244>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe f9b8 	bl	800300c <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fe f9b4 	bl	800300c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e193      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d036      	beq.n	8004d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_RCC_OscConfig+0x248>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fe f998 	bl	800300c <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fe f994 	bl	800300c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e173      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x200>
 8004cfe:	e01b      	b.n	8004d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_OscConfig+0x248>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe f981 	bl	800300c <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	e00e      	b.n	8004d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fe f97d 	bl	800300c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d907      	bls.n	8004d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e15c      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	42470000 	.word	0x42470000
 8004d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ea      	bne.n	8004d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8097 	beq.w	8004e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b83      	ldr	r3, [pc, #524]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b7f      	ldr	r3, [pc, #508]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a7e      	ldr	r2, [pc, #504]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b79      	ldr	r3, [pc, #484]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d118      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a75      	ldr	r2, [pc, #468]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7fe f93d 	bl	800300c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7fe f939 	bl	800300c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e118      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <HAL_RCC_OscConfig+0x47c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <HAL_RCC_OscConfig+0x2ea>
 8004dbc:	4b66      	ldr	r3, [pc, #408]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a65      	ldr	r2, [pc, #404]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCC_OscConfig+0x324>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x30c>
 8004dd2:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a60      	ldr	r2, [pc, #384]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a5d      	ldr	r2, [pc, #372]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0x324>
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a59      	ldr	r2, [pc, #356]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	4a56      	ldr	r2, [pc, #344]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004dfe:	f023 0304 	bic.w	r3, r3, #4
 8004e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fe f8fe 	bl	800300c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fe f8fa 	bl	800300c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0d7      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0ee      	beq.n	8004e14 <HAL_RCC_OscConfig+0x334>
 8004e36:	e014      	b.n	8004e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fe f8e8 	bl	800300c <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fe f8e4 	bl	800300c <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0c1      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e56:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ee      	bne.n	8004e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	4a3a      	ldr	r2, [pc, #232]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80ad 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e7e:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d060      	beq.n	8004f4c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d145      	bne.n	8004f1e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <HAL_RCC_OscConfig+0x480>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe f8b8 	bl	800300c <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fe f8b4 	bl	800300c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e093      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCC_OscConfig+0x480>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7fe f889 	bl	800300c <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fe f885 	bl	800300c <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e064      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x41e>
 8004f1c:	e05c      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_RCC_OscConfig+0x480>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fe f872 	bl	800300c <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe f86e 	bl	800300c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04d      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x44c>
 8004f4a:	e045      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e040      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x504>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d030      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d129      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d122      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d119      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	3b01      	subs	r3, #1
 8004fae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e07b      	b.n	80050f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d108      	bne.n	8005014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500a:	d009      	beq.n	8005020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	61da      	str	r2, [r3, #28]
 8005012:	e005      	b.n	8005020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fd f890 	bl	8002160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	ea42 0103 	orr.w	r1, r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	f003 0104 	and.w	r1, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0210 	and.w	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b088      	sub	sp, #32
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_SPI_Transmit+0x22>
 8005118:	2302      	movs	r3, #2
 800511a:	e126      	b.n	800536a <HAL_SPI_Transmit+0x270>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005124:	f7fd ff72 	bl	800300c <HAL_GetTick>
 8005128:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d002      	beq.n	8005140 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800513a:	2302      	movs	r3, #2
 800513c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800513e:	e10b      	b.n	8005358 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_Transmit+0x52>
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005150:	e102      	b.n	8005358 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2203      	movs	r2, #3
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005198:	d10f      	bne.n	80051ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d007      	beq.n	80051d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e0:	d14b      	bne.n	800527a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_SPI_Transmit+0xf6>
 80051ea:	8afb      	ldrh	r3, [r7, #22]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d13e      	bne.n	800526e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005214:	e02b      	b.n	800526e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d112      	bne.n	800524a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	881a      	ldrh	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	1c9a      	adds	r2, r3, #2
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	86da      	strh	r2, [r3, #54]	; 0x36
 8005248:	e011      	b.n	800526e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800524a:	f7fd fedf 	bl	800300c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d803      	bhi.n	8005262 <HAL_SPI_Transmit+0x168>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d102      	bne.n	8005268 <HAL_SPI_Transmit+0x16e>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800526c:	e074      	b.n	8005358 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ce      	bne.n	8005216 <HAL_SPI_Transmit+0x11c>
 8005278:	e04c      	b.n	8005314 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_SPI_Transmit+0x18e>
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d140      	bne.n	800530a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052ae:	e02c      	b.n	800530a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d113      	bne.n	80052e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	7812      	ldrb	r2, [r2, #0]
 80052ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80052e4:	e011      	b.n	800530a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e6:	f7fd fe91 	bl	800300c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <HAL_SPI_Transmit+0x204>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_Transmit+0x20a>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005308:	e026      	b.n	8005358 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1cd      	bne.n	80052b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f8c1 	bl	80054a0 <SPI_EndRxTxTransaction>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e000      	b.n	8005358 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005368:	7ffb      	ldrb	r3, [r7, #31]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005380:	b2db      	uxtb	r3, r3
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a0:	f7fd fe34 	bl	800300c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b0:	f7fd fe2c 	bl	800300c <HAL_GetTick>
 80053b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	015b      	lsls	r3, r3, #5
 80053bc:	0d1b      	lsrs	r3, r3, #20
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c6:	e054      	b.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d050      	beq.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d0:	f7fd fe1c 	bl	800300c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d902      	bls.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d13d      	bne.n	8005462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fe:	d111      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005408:	d004      	beq.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005412:	d107      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542c:	d10f      	bne.n	800544e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e017      	b.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	3b01      	subs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d19b      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000050 	.word	0x20000050

080054a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <SPI_EndRxTxTransaction+0x7c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <SPI_EndRxTxTransaction+0x80>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0d5b      	lsrs	r3, r3, #21
 80054b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ca:	d112      	bne.n	80054f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff ff5a 	bl	8005390 <SPI_WaitFlagStateUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00f      	b.n	8005512 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d0f2      	beq.n	80054f2 <SPI_EndRxTxTransaction+0x52>
 800550c:	e000      	b.n	8005510 <SPI_EndRxTxTransaction+0x70>
        break;
 800550e:	bf00      	nop
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000050 	.word	0x20000050
 8005520:	165e9f81 	.word	0x165e9f81

08005524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fe50 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 fa96 	bl	8005a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e04e      	b.n	800567a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a23      	ldr	r2, [pc, #140]	; (8005688 <HAL_TIM_Base_Start_IT+0xc4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d022      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d01d      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1f      	ldr	r2, [pc, #124]	; (800568c <HAL_TIM_Base_Start_IT+0xc8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d018      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <HAL_TIM_Base_Start_IT+0xcc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <HAL_TIM_Base_Start_IT+0xd0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_TIM_Base_Start_IT+0xd4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a19      	ldr	r2, [pc, #100]	; (800569c <HAL_TIM_Base_Start_IT+0xd8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d111      	bne.n	8005668 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b06      	cmp	r3, #6
 8005654:	d010      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	e007      	b.n	8005678 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40001800 	.word	0x40001800

080056a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d122      	bne.n	8005700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d11b      	bne.n	8005700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0202 	mvn.w	r2, #2
 80056d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9b5 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 80056ec:	e005      	b.n	80056fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9a7 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9b8 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b04      	cmp	r3, #4
 800570c:	d122      	bne.n	8005754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b04      	cmp	r3, #4
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0204 	mvn.w	r2, #4
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f98b 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f97d 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f98e 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b08      	cmp	r3, #8
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b08      	cmp	r3, #8
 800576e:	d11b      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0208 	mvn.w	r2, #8
 8005778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2204      	movs	r2, #4
 800577e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f961 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f953 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f964 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d122      	bne.n	80057fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0210 	mvn.w	r2, #16
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2208      	movs	r2, #8
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f937 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f929 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f93a 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b01      	cmp	r3, #1
 8005808:	d10e      	bne.n	8005828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d107      	bne.n	8005828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0201 	mvn.w	r2, #1
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fd faee 	bl	8002e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fae0 	bl	8005e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d107      	bne.n	8005880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8ff 	bl	8005a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b20      	cmp	r3, #32
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b20      	cmp	r3, #32
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0220 	mvn.w	r2, #32
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 faaa 	bl	8005e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIM_ConfigClockSource+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e0b4      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x186>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005908:	d03e      	beq.n	8005988 <HAL_TIM_ConfigClockSource+0xd4>
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	f200 8087 	bhi.w	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	f000 8086 	beq.w	8005a26 <HAL_TIM_ConfigClockSource+0x172>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	d87f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b70      	cmp	r3, #112	; 0x70
 8005922:	d01a      	beq.n	800595a <HAL_TIM_ConfigClockSource+0xa6>
 8005924:	2b70      	cmp	r3, #112	; 0x70
 8005926:	d87b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b60      	cmp	r3, #96	; 0x60
 800592a:	d050      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x11a>
 800592c:	2b60      	cmp	r3, #96	; 0x60
 800592e:	d877      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b50      	cmp	r3, #80	; 0x50
 8005932:	d03c      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xfa>
 8005934:	2b50      	cmp	r3, #80	; 0x50
 8005936:	d873      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d058      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x13a>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d86f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b30      	cmp	r3, #48	; 0x30
 8005942:	d064      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b30      	cmp	r3, #48	; 0x30
 8005946:	d86b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d060      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	2b20      	cmp	r3, #32
 800594e:	d867      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05c      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005954:	2b10      	cmp	r3, #16
 8005956:	d05a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005958:	e062      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6899      	ldr	r1, [r3, #8]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f000 f9ad 	bl	8005cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800597c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
      break;
 8005986:	e04f      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6899      	ldr	r1, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f000 f996 	bl	8005cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059aa:	609a      	str	r2, [r3, #8]
      break;
 80059ac:	e03c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 f90a 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2150      	movs	r1, #80	; 0x50
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f963 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80059cc:	e02c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 f929 	bl	8005c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2160      	movs	r1, #96	; 0x60
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f953 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80059ec:	e01c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f000 f8ea 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f943 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 f93a 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005a1e:	e003      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e000      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a40      	ldr	r2, [pc, #256]	; (8005ba8 <TIM_Base_SetConfig+0x114>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3d      	ldr	r2, [pc, #244]	; (8005bac <TIM_Base_SetConfig+0x118>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3c      	ldr	r2, [pc, #240]	; (8005bb0 <TIM_Base_SetConfig+0x11c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <TIM_Base_SetConfig+0x120>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <TIM_Base_SetConfig+0x124>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d108      	bne.n	8005ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2f      	ldr	r2, [pc, #188]	; (8005ba8 <TIM_Base_SetConfig+0x114>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02b      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af4:	d027      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <TIM_Base_SetConfig+0x118>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d023      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <TIM_Base_SetConfig+0x11c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <TIM_Base_SetConfig+0x120>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01b      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <TIM_Base_SetConfig+0x124>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d017      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a28      	ldr	r2, [pc, #160]	; (8005bbc <TIM_Base_SetConfig+0x128>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <TIM_Base_SetConfig+0x12c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a26      	ldr	r2, [pc, #152]	; (8005bc4 <TIM_Base_SetConfig+0x130>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <TIM_Base_SetConfig+0x134>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <TIM_Base_SetConfig+0x138>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <TIM_Base_SetConfig+0x13c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d108      	bne.n	8005b58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ba8 <TIM_Base_SetConfig+0x114>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0xf8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <TIM_Base_SetConfig+0x124>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d103      	bne.n	8005b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	615a      	str	r2, [r3, #20]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40010400 	.word	0x40010400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	40001800 	.word	0x40001800
 8005bcc:	40001c00 	.word	0x40001c00
 8005bd0:	40002000 	.word	0x40002000

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0210 	bic.w	r2, r3, #16
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e05a      	b.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d022      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d01d      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d018      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1a      	ldr	r2, [pc, #104]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d10c      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40010400 	.word	0x40010400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40001800 	.word	0x40001800

08005e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e03f      	b.n	8005eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc f9ee 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2224      	movs	r2, #36	; 0x24
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f957 	bl	8006120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e021      	b.n	8005f18 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eea:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fc fa4d 	bl	800238c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d17c      	bne.n	800603a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_UART_Transmit+0x2c>
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e075      	b.n	800603c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Transmit+0x3e>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e06e      	b.n	800603c <HAL_UART_Transmit+0x11c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2221      	movs	r2, #33	; 0x21
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f74:	f7fd f84a 	bl	800300c <HAL_GetTick>
 8005f78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d108      	bne.n	8005fa2 <HAL_UART_Transmit+0x82>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e003      	b.n	8005faa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fb2:	e02a      	b.n	800600a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2180      	movs	r1, #128	; 0x80
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f840 	bl	8006044 <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e036      	b.n	800603c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3302      	adds	r3, #2
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e007      	b.n	8005ffc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1cf      	bne.n	8005fb4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	2140      	movs	r1, #64	; 0x40
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f810 	bl	8006044 <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e006      	b.n	800603c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b090      	sub	sp, #64	; 0x40
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006054:	e050      	b.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d04c      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800605e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <UART_WaitOnFlagUntilTimeout+0x30>
 8006064:	f7fc ffd2 	bl	800300c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006070:	429a      	cmp	r2, r3
 8006072:	d241      	bcs.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006094:	637a      	str	r2, [r7, #52]	; 0x34
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800609a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	613b      	str	r3, [r7, #16]
   return(result);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f023 0301 	bic.w	r3, r3, #1
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c8:	623a      	str	r2, [r7, #32]
 80060ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	69f9      	ldr	r1, [r7, #28]
 80060ce:	6a3a      	ldr	r2, [r7, #32]
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e00f      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	bf0c      	ite	eq
 8006108:	2301      	moveq	r3, #1
 800610a:	2300      	movne	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	429a      	cmp	r2, r3
 8006114:	d09f      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3740      	adds	r7, #64	; 0x40
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006124:	b0c0      	sub	sp, #256	; 0x100
 8006126:	af00      	add	r7, sp, #0
 8006128:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	68d9      	ldr	r1, [r3, #12]
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	ea40 0301 	orr.w	r3, r0, r1
 8006148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	431a      	orrs	r2, r3
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006178:	f021 010c 	bic.w	r1, r1, #12
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006186:	430b      	orrs	r3, r1
 8006188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619a:	6999      	ldr	r1, [r3, #24]
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	ea40 0301 	orr.w	r3, r0, r1
 80061a6:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b95      	ldr	r3, [pc, #596]	; (8006404 <UART_SetConfig+0x2e4>)
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d011      	beq.n	80061d8 <UART_SetConfig+0xb8>
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b93      	ldr	r3, [pc, #588]	; (8006408 <UART_SetConfig+0x2e8>)
 80061bc:	429a      	cmp	r2, r3
 80061be:	d00b      	beq.n	80061d8 <UART_SetConfig+0xb8>
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b91      	ldr	r3, [pc, #580]	; (800640c <UART_SetConfig+0x2ec>)
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d005      	beq.n	80061d8 <UART_SetConfig+0xb8>
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b8f      	ldr	r3, [pc, #572]	; (8006410 <UART_SetConfig+0x2f0>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d104      	bne.n	80061e2 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061d8:	f7fe f9e2 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 80061dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061e0:	e003      	b.n	80061ea <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e2:	f7fe f9c9 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 80061e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	f040 8110 	bne.w	8006418 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800620a:	4622      	mov	r2, r4
 800620c:	462b      	mov	r3, r5
 800620e:	1891      	adds	r1, r2, r2
 8006210:	65b9      	str	r1, [r7, #88]	; 0x58
 8006212:	415b      	adcs	r3, r3
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800621a:	4621      	mov	r1, r4
 800621c:	eb12 0801 	adds.w	r8, r2, r1
 8006220:	4629      	mov	r1, r5
 8006222:	eb43 0901 	adc.w	r9, r3, r1
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623a:	4690      	mov	r8, r2
 800623c:	4699      	mov	r9, r3
 800623e:	4623      	mov	r3, r4
 8006240:	eb18 0303 	adds.w	r3, r8, r3
 8006244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006248:	462b      	mov	r3, r5
 800624a:	eb49 0303 	adc.w	r3, r9, r3
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800625e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006266:	460b      	mov	r3, r1
 8006268:	18db      	adds	r3, r3, r3
 800626a:	653b      	str	r3, [r7, #80]	; 0x50
 800626c:	4613      	mov	r3, r2
 800626e:	eb42 0303 	adc.w	r3, r2, r3
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
 8006274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800627c:	f7fa ff6a 	bl	8001154 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4b63      	ldr	r3, [pc, #396]	; (8006414 <UART_SetConfig+0x2f4>)
 8006286:	fba3 2302 	umull	r2, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	011c      	lsls	r4, r3, #4
 800628e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006292:	2200      	movs	r2, #0
 8006294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800629c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80062a8:	415b      	adcs	r3, r3
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062b0:	4641      	mov	r1, r8
 80062b2:	eb12 0a01 	adds.w	sl, r2, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	eb43 0b01 	adc.w	fp, r3, r1
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d0:	4692      	mov	sl, r2
 80062d2:	469b      	mov	fp, r3
 80062d4:	4643      	mov	r3, r8
 80062d6:	eb1a 0303 	adds.w	r3, sl, r3
 80062da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062de:	464b      	mov	r3, r9
 80062e0:	eb4b 0303 	adc.w	r3, fp, r3
 80062e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062fc:	460b      	mov	r3, r1
 80062fe:	18db      	adds	r3, r3, r3
 8006300:	643b      	str	r3, [r7, #64]	; 0x40
 8006302:	4613      	mov	r3, r2
 8006304:	eb42 0303 	adc.w	r3, r2, r3
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
 800630a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800630e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006312:	f7fa ff1f 	bl	8001154 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4611      	mov	r1, r2
 800631c:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <UART_SetConfig+0x2f4>)
 800631e:	fba3 2301 	umull	r2, r3, r3, r1
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2264      	movs	r2, #100	; 0x64
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006332:	4b38      	ldr	r3, [pc, #224]	; (8006414 <UART_SetConfig+0x2f4>)
 8006334:	fba3 2302 	umull	r2, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006340:	441c      	add	r4, r3
 8006342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800634c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	1891      	adds	r1, r2, r2
 800635a:	63b9      	str	r1, [r7, #56]	; 0x38
 800635c:	415b      	adcs	r3, r3
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006364:	4641      	mov	r1, r8
 8006366:	1851      	adds	r1, r2, r1
 8006368:	6339      	str	r1, [r7, #48]	; 0x30
 800636a:	4649      	mov	r1, r9
 800636c:	414b      	adcs	r3, r1
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800637c:	4659      	mov	r1, fp
 800637e:	00cb      	lsls	r3, r1, #3
 8006380:	4651      	mov	r1, sl
 8006382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006386:	4651      	mov	r1, sl
 8006388:	00ca      	lsls	r2, r1, #3
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	4603      	mov	r3, r0
 8006390:	4642      	mov	r2, r8
 8006392:	189b      	adds	r3, r3, r2
 8006394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006398:	464b      	mov	r3, r9
 800639a:	460a      	mov	r2, r1
 800639c:	eb42 0303 	adc.w	r3, r2, r3
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063b8:	460b      	mov	r3, r1
 80063ba:	18db      	adds	r3, r3, r3
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	4613      	mov	r3, r2
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063ce:	f7fa fec1 	bl	8001154 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <UART_SetConfig+0x2f4>)
 80063d8:	fba3 1302 	umull	r1, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2164      	movs	r1, #100	; 0x64
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <UART_SetConfig+0x2f4>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f003 0207 	and.w	r2, r3, #7
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4422      	add	r2, r4
 80063fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006400:	e109      	b.n	8006616 <UART_SetConfig+0x4f6>
 8006402:	bf00      	nop
 8006404:	40011000 	.word	0x40011000
 8006408:	40011400 	.word	0x40011400
 800640c:	40011800 	.word	0x40011800
 8006410:	40011c00 	.word	0x40011c00
 8006414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006422:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800642a:	4642      	mov	r2, r8
 800642c:	464b      	mov	r3, r9
 800642e:	1891      	adds	r1, r2, r2
 8006430:	6239      	str	r1, [r7, #32]
 8006432:	415b      	adcs	r3, r3
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
 8006436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800643a:	4641      	mov	r1, r8
 800643c:	1854      	adds	r4, r2, r1
 800643e:	4649      	mov	r1, r9
 8006440:	eb43 0501 	adc.w	r5, r3, r1
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	00eb      	lsls	r3, r5, #3
 800644e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006452:	00e2      	lsls	r2, r4, #3
 8006454:	4614      	mov	r4, r2
 8006456:	461d      	mov	r5, r3
 8006458:	4643      	mov	r3, r8
 800645a:	18e3      	adds	r3, r4, r3
 800645c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006460:	464b      	mov	r3, r9
 8006462:	eb45 0303 	adc.w	r3, r5, r3
 8006466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800646a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006486:	4629      	mov	r1, r5
 8006488:	008b      	lsls	r3, r1, #2
 800648a:	4621      	mov	r1, r4
 800648c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006490:	4621      	mov	r1, r4
 8006492:	008a      	lsls	r2, r1, #2
 8006494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006498:	f7fa fe5c 	bl	8001154 <__aeabi_uldivmod>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4b60      	ldr	r3, [pc, #384]	; (8006624 <UART_SetConfig+0x504>)
 80064a2:	fba3 2302 	umull	r2, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	011c      	lsls	r4, r3, #4
 80064aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	1891      	adds	r1, r2, r2
 80064c2:	61b9      	str	r1, [r7, #24]
 80064c4:	415b      	adcs	r3, r3
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064cc:	4641      	mov	r1, r8
 80064ce:	1851      	adds	r1, r2, r1
 80064d0:	6139      	str	r1, [r7, #16]
 80064d2:	4649      	mov	r1, r9
 80064d4:	414b      	adcs	r3, r1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064e4:	4659      	mov	r1, fp
 80064e6:	00cb      	lsls	r3, r1, #3
 80064e8:	4651      	mov	r1, sl
 80064ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ee:	4651      	mov	r1, sl
 80064f0:	00ca      	lsls	r2, r1, #3
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	4642      	mov	r2, r8
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006500:	464b      	mov	r3, r9
 8006502:	460a      	mov	r2, r1
 8006504:	eb42 0303 	adc.w	r3, r2, r3
 8006508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	67bb      	str	r3, [r7, #120]	; 0x78
 8006516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006524:	4649      	mov	r1, r9
 8006526:	008b      	lsls	r3, r1, #2
 8006528:	4641      	mov	r1, r8
 800652a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800652e:	4641      	mov	r1, r8
 8006530:	008a      	lsls	r2, r1, #2
 8006532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006536:	f7fa fe0d 	bl	8001154 <__aeabi_uldivmod>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4b39      	ldr	r3, [pc, #228]	; (8006624 <UART_SetConfig+0x504>)
 8006540:	fba3 1302 	umull	r1, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	2164      	movs	r1, #100	; 0x64
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	3332      	adds	r3, #50	; 0x32
 8006552:	4a34      	ldr	r2, [pc, #208]	; (8006624 <UART_SetConfig+0x504>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800655e:	441c      	add	r4, r3
 8006560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006564:	2200      	movs	r2, #0
 8006566:	673b      	str	r3, [r7, #112]	; 0x70
 8006568:	677a      	str	r2, [r7, #116]	; 0x74
 800656a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	1891      	adds	r1, r2, r2
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	415b      	adcs	r3, r3
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800657e:	4641      	mov	r1, r8
 8006580:	1851      	adds	r1, r2, r1
 8006582:	6039      	str	r1, [r7, #0]
 8006584:	4649      	mov	r1, r9
 8006586:	414b      	adcs	r3, r1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006596:	4659      	mov	r1, fp
 8006598:	00cb      	lsls	r3, r1, #3
 800659a:	4651      	mov	r1, sl
 800659c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a0:	4651      	mov	r1, sl
 80065a2:	00ca      	lsls	r2, r1, #3
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	4603      	mov	r3, r0
 80065aa:	4642      	mov	r2, r8
 80065ac:	189b      	adds	r3, r3, r2
 80065ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80065b0:	464b      	mov	r3, r9
 80065b2:	460a      	mov	r2, r1
 80065b4:	eb42 0303 	adc.w	r3, r2, r3
 80065b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	663b      	str	r3, [r7, #96]	; 0x60
 80065c4:	667a      	str	r2, [r7, #100]	; 0x64
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065d2:	4649      	mov	r1, r9
 80065d4:	008b      	lsls	r3, r1, #2
 80065d6:	4641      	mov	r1, r8
 80065d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065dc:	4641      	mov	r1, r8
 80065de:	008a      	lsls	r2, r1, #2
 80065e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065e4:	f7fa fdb6 	bl	8001154 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <UART_SetConfig+0x504>)
 80065ee:	fba3 1302 	umull	r1, r3, r3, r2
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	2164      	movs	r1, #100	; 0x64
 80065f6:	fb01 f303 	mul.w	r3, r1, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	3332      	adds	r3, #50	; 0x32
 8006600:	4a08      	ldr	r2, [pc, #32]	; (8006624 <UART_SetConfig+0x504>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	f003 020f 	and.w	r2, r3, #15
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4422      	add	r2, r4
 8006614:	609a      	str	r2, [r3, #8]
}
 8006616:	bf00      	nop
 8006618:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	51eb851f 	.word	0x51eb851f

08006628 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006628:	b084      	sub	sp, #16
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	f107 001c 	add.w	r0, r7, #28
 8006636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b01      	cmp	r3, #1
 800663e:	d122      	bne.n	8006686 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666a:	2b01      	cmp	r3, #1
 800666c:	d105      	bne.n	800667a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa9c 	bl	8006bb8 <USB_CoreReset>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
 8006684:	e01a      	b.n	80066bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa90 	bl	8006bb8 <USB_CoreReset>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
 80066ae:	e005      	b.n	80066bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10b      	bne.n	80066da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f043 0206 	orr.w	r2, r3, #6
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f043 0220 	orr.w	r2, r3, #32
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066e6:	b004      	add	sp, #16
 80066e8:	4770      	bx	lr

080066ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f023 0201 	bic.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d115      	bne.n	800675a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800673a:	2001      	movs	r0, #1
 800673c:	f7fc fc72 	bl	8003024 <HAL_Delay>
      ms++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa28 	bl	8006b9c <USB_GetMode>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d01e      	beq.n	8006790 <USB_SetCurrentMode+0x84>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b31      	cmp	r3, #49	; 0x31
 8006756:	d9f0      	bls.n	800673a <USB_SetCurrentMode+0x2e>
 8006758:	e01a      	b.n	8006790 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d115      	bne.n	800678c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800676c:	2001      	movs	r0, #1
 800676e:	f7fc fc59 	bl	8003024 <HAL_Delay>
      ms++;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa0f 	bl	8006b9c <USB_GetMode>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <USB_SetCurrentMode+0x84>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b31      	cmp	r3, #49	; 0x31
 8006788:	d9f0      	bls.n	800676c <USB_SetCurrentMode+0x60>
 800678a:	e001      	b.n	8006790 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e005      	b.n	800679c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b32      	cmp	r3, #50	; 0x32
 8006794:	d101      	bne.n	800679a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a4:	b084      	sub	sp, #16
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	e009      	b.n	80067d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3340      	adds	r3, #64	; 0x40
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b0e      	cmp	r3, #14
 80067dc:	d9f2      	bls.n	80067c4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11c      	bne.n	800681e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f2:	f043 0302 	orr.w	r3, r3, #2
 80067f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e005      	b.n	800682a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	4619      	mov	r1, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	461a      	mov	r2, r3
 8006846:	680b      	ldr	r3, [r1, #0]
 8006848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10c      	bne.n	800686a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f965 	bl	8006b28 <USB_SetDevSpeed>
 800685e:	e008      	b.n	8006872 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f960 	bl	8006b28 <USB_SetDevSpeed>
 8006868:	e003      	b.n	8006872 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800686a:	2103      	movs	r1, #3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f95b 	bl	8006b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006872:	2110      	movs	r1, #16
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8f3 	bl	8006a60 <USB_FlushTxFifo>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f91f 	bl	8006ac8 <USB_FlushRxFifo>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	461a      	mov	r2, r3
 800689c:	2300      	movs	r3, #0
 800689e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a6:	461a      	mov	r2, r3
 80068a8:	2300      	movs	r3, #0
 80068aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	461a      	mov	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068b8:	2300      	movs	r3, #0
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	e043      	b.n	8006946 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d4:	d118      	bne.n	8006908 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	461a      	mov	r2, r3
 80068ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e013      	b.n	800691a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	461a      	mov	r2, r3
 8006900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e008      	b.n	800691a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	461a      	mov	r2, r3
 8006916:	2300      	movs	r3, #0
 8006918:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006926:	461a      	mov	r2, r3
 8006928:	2300      	movs	r3, #0
 800692a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	461a      	mov	r2, r3
 800693a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800693e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	d3b7      	bcc.n	80068be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	e043      	b.n	80069dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696a:	d118      	bne.n	800699e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697e:	461a      	mov	r2, r3
 8006980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e013      	b.n	80069b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	461a      	mov	r2, r3
 8006996:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e008      	b.n	80069b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	461a      	mov	r2, r3
 80069ac:	2300      	movs	r3, #0
 80069ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069bc:	461a      	mov	r2, r3
 80069be:	2300      	movs	r3, #0
 80069c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	461a      	mov	r2, r3
 80069d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3301      	adds	r3, #1
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d3b7      	bcc.n	8006954 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d105      	bne.n	8006a18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f043 0210 	orr.w	r2, r3, #16
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <USB_DevInit+0x2b8>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f043 0208 	orr.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d107      	bne.n	8006a4c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a44:	f043 0304 	orr.w	r3, r3, #4
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a58:	b004      	add	sp, #16
 8006a5a:	4770      	bx	lr
 8006a5c:	803c3800 	.word	0x803c3800

08006a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <USB_FlushTxFifo+0x64>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d901      	bls.n	8006a80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e01b      	b.n	8006ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	daf2      	bge.n	8006a6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	019b      	lsls	r3, r3, #6
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <USB_FlushTxFifo+0x64>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e006      	b.n	8006ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d0f0      	beq.n	8006a98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	00030d40 	.word	0x00030d40

08006ac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a11      	ldr	r2, [pc, #68]	; (8006b24 <USB_FlushRxFifo+0x5c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e018      	b.n	8006b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	daf2      	bge.n	8006ad4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2210      	movs	r2, #16
 8006af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <USB_FlushRxFifo+0x5c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e006      	b.n	8006b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0310 	and.w	r3, r3, #16
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d0f0      	beq.n	8006af8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	00030d40 	.word	0x00030d40

08006b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	68f9      	ldr	r1, [r7, #12]
 8006b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b74:	f023 0303 	bic.w	r3, r3, #3
 8006b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <USB_CoreReset+0x64>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e01b      	b.n	8006c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	daf2      	bge.n	8006bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f043 0201 	orr.w	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <USB_CoreReset+0x64>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d901      	bls.n	8006c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e006      	b.n	8006c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d0f0      	beq.n	8006bee <USB_CoreReset+0x36>

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	00030d40 	.word	0x00030d40

08006c20 <interface_tx_frame>:
 8006c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c24:	b085      	sub	sp, #20
 8006c26:	4605      	mov	r5, r0
 8006c28:	461c      	mov	r4, r3
 8006c2a:	6883      	ldr	r3, [r0, #8]
 8006c2c:	695e      	ldr	r6, [r3, #20]
 8006c2e:	b1e2      	cbz	r2, 8006c6a <interface_tx_frame+0x4a>
 8006c30:	9102      	str	r1, [sp, #8]
 8006c32:	fa1f f882 	uxth.w	r8, r2
 8006c36:	f8ad 800c 	strh.w	r8, [sp, #12]
 8006c3a:	f04f 0900 	mov.w	r9, #0
 8006c3e:	f8ad 900e 	strh.w	r9, [sp, #14]
 8006c42:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8006c44:	ab02      	add	r3, sp, #8
 8006c46:	464a      	mov	r2, r9
 8006c48:	2120      	movs	r1, #32
 8006c4a:	47b8      	blx	r7
 8006c4c:	f8ad 8000 	strh.w	r8, [sp]
 8006c50:	f8ad 9002 	strh.w	r9, [sp, #2]
 8006c54:	68e3      	ldr	r3, [r4, #12]
 8006c56:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c5a:	f88d 3004 	strb.w	r3, [sp, #4]
 8006c5e:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8006c60:	466b      	mov	r3, sp
 8006c62:	464a      	mov	r2, r9
 8006c64:	2137      	movs	r1, #55	; 0x37
 8006c66:	4628      	mov	r0, r5
 8006c68:	47b8      	blx	r7
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	f013 0f1d 	tst.w	r3, #29
 8006c70:	d005      	beq.n	8006c7e <interface_tx_frame+0x5e>
 8006c72:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8006c74:	4623      	mov	r3, r4
 8006c76:	2200      	movs	r2, #0
 8006c78:	2105      	movs	r1, #5
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	db0c      	blt.n	8006c9e <interface_tx_frame+0x7e>
 8006c84:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8006c86:	1d23      	adds	r3, r4, #4
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2110      	movs	r1, #16
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b8      	blx	r7
 8006c90:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8006c92:	f104 0308 	add.w	r3, r4, #8
 8006c96:	2200      	movs	r2, #0
 8006c98:	2151      	movs	r1, #81	; 0x51
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b8      	blx	r7
 8006c9e:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8006ca0:	f104 030c 	add.w	r3, r4, #12
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b0      	blx	r6
 8006cac:	b005      	add	sp, #20
 8006cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006cb2 <interface_get_timestamp>:
 8006cb2:	b530      	push	{r4, r5, lr}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	ab02      	add	r3, sp, #8
 8006cb8:	2400      	movs	r4, #0
 8006cba:	2500      	movs	r5, #0
 8006cbc:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8006cc0:	6882      	ldr	r2, [r0, #8]
 8006cc2:	6952      	ldr	r2, [r2, #20]
 8006cc4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	215f      	movs	r1, #95	; 0x5f
 8006cca:	47a0      	blx	r4
 8006ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cd0:	b003      	add	sp, #12
 8006cd2:	bd30      	pop	{r4, r5, pc}

08006cd4 <interface_rx_disable>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	6883      	ldr	r3, [r0, #8]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006cdc:	2300      	movs	r3, #0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	47a0      	blx	r4
 8006ce4:	bd10      	pop	{r4, pc}
	...

08006ce8 <interface_rx_enable>:
 8006ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	4604      	mov	r4, r0
 8006cf0:	6883      	ldr	r3, [r0, #8]
 8006cf2:	695d      	ldr	r5, [r3, #20]
 8006cf4:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8006cf8:	680b      	ldr	r3, [r1, #0]
 8006cfa:	9303      	str	r3, [sp, #12]
 8006cfc:	684a      	ldr	r2, [r1, #4]
 8006cfe:	ab04      	add	r3, sp, #16
 8006d00:	f843 2d08 	str.w	r2, [r3, #-8]!
 8006d04:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8006d06:	2200      	movs	r2, #0
 8006d08:	214f      	movs	r1, #79	; 0x4f
 8006d0a:	47b8      	blx	r7
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	b118      	cbz	r0, 8006d18 <interface_rx_enable+0x30>
 8006d10:	4638      	mov	r0, r7
 8006d12:	b004      	add	sp, #16
 8006d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d18:	68a3      	ldr	r3, [r4, #8]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db3c      	blt.n	8006d9e <interface_rx_enable+0xb6>
 8006d24:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8006d26:	ab01      	add	r3, sp, #4
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2157      	movs	r1, #87	; 0x57
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	47b8      	blx	r7
 8006d30:	bba8      	cbnz	r0, 8006d9e <interface_rx_enable+0xb6>
 8006d32:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006d36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d40:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006d4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d4e:	f1ba 0f00 	cmp.w	sl, #0
 8006d52:	d131      	bne.n	8006db8 <interface_rx_enable+0xd0>
 8006d54:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 8006d58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d5c:	9303      	str	r3, [sp, #12]
 8006d5e:	f04f 0a01 	mov.w	sl, #1
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	695f      	ldr	r7, [r3, #20]
 8006d66:	f10d 0302 	add.w	r3, sp, #2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	217b      	movs	r1, #123	; 0x7b
 8006d6e:	4620      	mov	r0, r4
 8006d70:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8006d72:	47b0      	blx	r6
 8006d74:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d04e      	beq.n	8006e1a <interface_rx_enable+0x132>
 8006d7c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8006d80:	2201      	movs	r2, #1
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006d8a:	ea22 0203 	bic.w	r2, r2, r3
 8006d8e:	ab04      	add	r3, sp, #16
 8006d90:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8006d94:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8006d96:	2200      	movs	r2, #0
 8006d98:	216b      	movs	r1, #107	; 0x6b
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	47b8      	blx	r7
 8006d9e:	f1ba 0f00 	cmp.w	sl, #0
 8006da2:	d14a      	bne.n	8006e3a <interface_rx_enable+0x152>
 8006da4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8006da6:	2300      	movs	r3, #0
 8006da8:	461a      	mov	r2, r3
 8006daa:	211f      	movs	r1, #31
 8006dac:	4620      	mov	r0, r4
 8006dae:	47a8      	blx	r5
 8006db0:	4607      	mov	r7, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d150      	bne.n	8006e58 <interface_rx_enable+0x170>
 8006db6:	e7ab      	b.n	8006d10 <interface_rx_enable+0x28>
 8006db8:	9a03      	ldr	r2, [sp, #12]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	4698      	mov	r8, r3
 8006dbe:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006dc2:	ea4f 1249 	mov.w	r2, r9, lsl #5
 8006dc6:	0158      	lsls	r0, r3, #5
 8006dc8:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 8006dcc:	1ac0      	subs	r0, r0, r3
 8006dce:	eb61 0109 	sbc.w	r1, r1, r9
 8006dd2:	024b      	lsls	r3, r1, #9
 8006dd4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8006dd8:	0242      	lsls	r2, r0, #9
 8006dda:	eb12 0008 	adds.w	r0, r2, r8
 8006dde:	eb43 0109 	adc.w	r1, r3, r9
 8006de2:	018b      	lsls	r3, r1, #6
 8006de4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006de8:	0182      	lsls	r2, r0, #6
 8006dea:	1a12      	subs	r2, r2, r0
 8006dec:	eb63 0301 	sbc.w	r3, r3, r1
 8006df0:	4616      	mov	r6, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	4a31      	ldr	r2, [pc, #196]	; (8006ebc <interface_rx_enable+0x1d4>)
 8006df6:	2300      	movs	r3, #0
 8006df8:	eb16 0008 	adds.w	r0, r6, r8
 8006dfc:	eb47 0109 	adc.w	r1, r7, r9
 8006e00:	f7fa f9a8 	bl	8001154 <__aeabi_uldivmod>
 8006e04:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 8006e08:	ddab      	ble.n	8006d62 <interface_rx_enable+0x7a>
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	695f      	ldr	r7, [r3, #20]
 8006e0e:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 8006e12:	d0a8      	beq.n	8006d66 <interface_rx_enable+0x7e>
 8006e14:	f7fa fb49 	bl	80014aa <deca_usleep>
 8006e18:	e7a5      	b.n	8006d66 <interface_rx_enable+0x7e>
 8006e1a:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8006e1e:	2201      	movs	r2, #1
 8006e20:	409a      	lsls	r2, r3
 8006e22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	ab04      	add	r3, sp, #16
 8006e2a:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8006e2e:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8006e30:	2200      	movs	r2, #0
 8006e32:	216b      	movs	r1, #107	; 0x6b
 8006e34:	4620      	mov	r0, r4
 8006e36:	47b8      	blx	r7
 8006e38:	e7b1      	b.n	8006d9e <interface_rx_enable+0xb6>
 8006e3a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8006e3c:	ab03      	add	r3, sp, #12
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2105      	movs	r1, #5
 8006e42:	4620      	mov	r0, r4
 8006e44:	47b0      	blx	r6
 8006e46:	4607      	mov	r7, r0
 8006e48:	b930      	cbnz	r0, 8006e58 <interface_rx_enable+0x170>
 8006e4a:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2201      	movs	r2, #1
 8006e50:	211f      	movs	r1, #31
 8006e52:	4620      	mov	r0, r4
 8006e54:	47a8      	blx	r5
 8006e56:	4607      	mov	r7, r0
 8006e58:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f6ff af57 	blt.w	8006d10 <interface_rx_enable+0x28>
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	695d      	ldr	r5, [r3, #20]
 8006e66:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8006e68:	ab01      	add	r3, sp, #4
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	217b      	movs	r1, #123	; 0x7b
 8006e6e:	4620      	mov	r0, r4
 8006e70:	47b0      	blx	r6
 8006e72:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8006e76:	b18b      	cbz	r3, 8006e9c <interface_rx_enable+0x1b4>
 8006e78:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006e86:	ea22 0203 	bic.w	r2, r2, r3
 8006e8a:	ab04      	add	r3, sp, #16
 8006e8c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8006e90:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8006e92:	2200      	movs	r2, #0
 8006e94:	216b      	movs	r1, #107	; 0x6b
 8006e96:	4620      	mov	r0, r4
 8006e98:	47a8      	blx	r5
 8006e9a:	e739      	b.n	8006d10 <interface_rx_enable+0x28>
 8006e9c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	ab04      	add	r3, sp, #16
 8006eac:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8006eb0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	216b      	movs	r1, #107	; 0x6b
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	47a8      	blx	r5
 8006eba:	e729      	b.n	8006d10 <interface_rx_enable+0x28>
 8006ebc:	0ee09800 	.word	0x0ee09800

08006ec0 <interface_read_rx_frame>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	9100      	str	r1, [sp, #0]
 8006ec6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8006ed0:	6883      	ldr	r3, [r0, #8]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006ed6:	466b      	mov	r3, sp
 8006ed8:	2121      	movs	r1, #33	; 0x21
 8006eda:	47a0      	blx	r4
 8006edc:	b002      	add	sp, #8
 8006ede:	bd10      	pop	{r4, pc}

08006ee0 <dwt_probe>:
 8006ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	6803      	ldr	r3, [r0, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d037      	beq.n	8006f5a <dwt_probe+0x7a>
 8006eea:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <dwt_probe+0x88>)
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b1e      	ldr	r3, [pc, #120]	; (8006f68 <dwt_probe+0x88>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6842      	ldr	r2, [r0, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	6882      	ldr	r2, [r0, #8]
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f88d 2003 	strb.w	r2, [sp, #3]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681c      	ldr	r4, [r3, #0]
 8006f04:	ab01      	add	r3, sp, #4
 8006f06:	2204      	movs	r2, #4
 8006f08:	f10d 0103 	add.w	r1, sp, #3
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	47a0      	blx	r4
 8006f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f14:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006f18:	0409      	lsls	r1, r1, #16
 8006f1a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8006f1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f22:	4319      	orrs	r1, r3
 8006f24:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006f28:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8006f2c:	4a0f      	ldr	r2, [pc, #60]	; (8006f6c <dwt_probe+0x8c>)
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <dwt_probe+0x90>)
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d216      	bcs.n	8006f62 <dwt_probe+0x82>
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <dwt_probe+0x88>)
 8006f36:	681f      	ldr	r7, [r3, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	2600      	movs	r6, #0
 8006f40:	4d0b      	ldr	r5, [pc, #44]	; (8006f70 <dwt_probe+0x90>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	404a      	eors	r2, r1
 8006f46:	685c      	ldr	r4, [r3, #4]
 8006f48:	4222      	tst	r2, r4
 8006f4a:	bf04      	itt	eq
 8006f4c:	60bb      	streq	r3, [r7, #8]
 8006f4e:	4630      	moveq	r0, r6
 8006f50:	331c      	adds	r3, #28
 8006f52:	42ab      	cmp	r3, r5
 8006f54:	d3f5      	bcc.n	8006f42 <dwt_probe+0x62>
 8006f56:	b003      	add	sp, #12
 8006f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5a:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <dwt_probe+0x88>)
 8006f5c:	4a05      	ldr	r2, [pc, #20]	; (8006f74 <dwt_probe+0x94>)
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e7c5      	b.n	8006eee <dwt_probe+0xe>
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	e7f6      	b.n	8006f56 <dwt_probe+0x76>
 8006f68:	20001148 	.word	0x20001148
 8006f6c:	080001e0 	.word	0x080001e0
 8006f70:	08000234 	.word	0x08000234
 8006f74:	2000114c 	.word	0x2000114c

08006f78 <dwt_readdevid>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	ab02      	add	r3, sp, #8
 8006f80:	f843 1d04 	str.w	r1, [r3, #-4]!
 8006f84:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <dwt_readdevid+0x20>)
 8006f86:	6810      	ldr	r0, [r2, #0]
 8006f88:	6882      	ldr	r2, [r0, #8]
 8006f8a:	6912      	ldr	r2, [r2, #16]
 8006f8c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006f8e:	460a      	mov	r2, r1
 8006f90:	47a0      	blx	r4
 8006f92:	9801      	ldr	r0, [sp, #4]
 8006f94:	b002      	add	sp, #8
 8006f96:	bd10      	pop	{r4, pc}
 8006f98:	20001148 	.word	0x20001148

08006f9c <dwt_setlnapamode>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <dwt_setlnapamode+0x18>)
 8006fa0:	681c      	ldr	r4, [r3, #0]
 8006fa2:	68a3      	ldr	r3, [r4, #8]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4602      	mov	r2, r0
 8006fac:	2113      	movs	r1, #19
 8006fae:	4620      	mov	r0, r4
 8006fb0:	47a8      	blx	r5
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20001148 	.word	0x20001148

08006fb8 <dwt_configure>:
 8006fb8:	b508      	push	{r3, lr}
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <dwt_configure+0x14>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	6912      	ldr	r2, [r2, #16]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	4790      	blx	r2
 8006fca:	bd08      	pop	{r3, pc}
 8006fcc:	20001148 	.word	0x20001148

08006fd0 <dwt_configuretxrf>:
 8006fd0:	b508      	push	{r3, lr}
 8006fd2:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <dwt_configuretxrf+0x14>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	6912      	ldr	r2, [r2, #16]
 8006fda:	6992      	ldr	r2, [r2, #24]
 8006fdc:	4601      	mov	r1, r0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	4790      	blx	r2
 8006fe2:	bd08      	pop	{r3, pc}
 8006fe4:	20001148 	.word	0x20001148

08006fe8 <dwt_setrxantennadelay>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	ab02      	add	r3, sp, #8
 8006fee:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8006ff2:	4a05      	ldr	r2, [pc, #20]	; (8007008 <dwt_setrxantennadelay+0x20>)
 8006ff4:	6810      	ldr	r0, [r2, #0]
 8006ff6:	6882      	ldr	r2, [r0, #8]
 8006ff8:	6912      	ldr	r2, [r2, #16]
 8006ffa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	211b      	movs	r1, #27
 8007000:	47a0      	blx	r4
 8007002:	b002      	add	sp, #8
 8007004:	bd10      	pop	{r4, pc}
 8007006:	bf00      	nop
 8007008:	20001148 	.word	0x20001148

0800700c <dwt_settxantennadelay>:
 800700c:	b510      	push	{r4, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	ab02      	add	r3, sp, #8
 8007012:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8007016:	4a05      	ldr	r2, [pc, #20]	; (800702c <dwt_settxantennadelay+0x20>)
 8007018:	6810      	ldr	r0, [r2, #0]
 800701a:	6882      	ldr	r2, [r0, #8]
 800701c:	6912      	ldr	r2, [r2, #16]
 800701e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007020:	2200      	movs	r2, #0
 8007022:	211d      	movs	r1, #29
 8007024:	47a0      	blx	r4
 8007026:	b002      	add	sp, #8
 8007028:	bd10      	pop	{r4, pc}
 800702a:	bf00      	nop
 800702c:	20001148 	.word	0x20001148

08007030 <dwt_writetxdata>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <dwt_writetxdata+0x18>)
 8007034:	681c      	ldr	r4, [r3, #0]
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	685d      	ldr	r5, [r3, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	460a      	mov	r2, r1
 8007040:	4601      	mov	r1, r0
 8007042:	4620      	mov	r0, r4
 8007044:	47a8      	blx	r5
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20001148 	.word	0x20001148

0800704c <dwt_writetxfctrl>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <dwt_writetxfctrl+0x18>)
 8007050:	681c      	ldr	r4, [r3, #0]
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	689d      	ldr	r5, [r3, #8]
 8007058:	4613      	mov	r3, r2
 800705a:	460a      	mov	r2, r1
 800705c:	4601      	mov	r1, r0
 800705e:	4620      	mov	r0, r4
 8007060:	47a8      	blx	r5
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20001148 	.word	0x20001148

08007068 <dwt_starttx>:
 8007068:	b510      	push	{r4, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	ab02      	add	r3, sp, #8
 800706e:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8007072:	4a05      	ldr	r2, [pc, #20]	; (8007088 <dwt_starttx+0x20>)
 8007074:	6810      	ldr	r0, [r2, #0]
 8007076:	6882      	ldr	r2, [r0, #8]
 8007078:	6912      	ldr	r2, [r2, #16]
 800707a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800707c:	2200      	movs	r2, #0
 800707e:	2104      	movs	r1, #4
 8007080:	47a0      	blx	r4
 8007082:	b002      	add	sp, #8
 8007084:	bd10      	pop	{r4, pc}
 8007086:	bf00      	nop
 8007088:	20001148 	.word	0x20001148

0800708c <dwt_readtxtimestamplo32>:
 800708c:	b510      	push	{r4, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	2200      	movs	r2, #0
 8007092:	ab02      	add	r3, sp, #8
 8007094:	f843 2d04 	str.w	r2, [r3, #-4]!
 8007098:	4904      	ldr	r1, [pc, #16]	; (80070ac <dwt_readtxtimestamplo32+0x20>)
 800709a:	6808      	ldr	r0, [r1, #0]
 800709c:	6881      	ldr	r1, [r0, #8]
 800709e:	6909      	ldr	r1, [r1, #16]
 80070a0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80070a2:	2131      	movs	r1, #49	; 0x31
 80070a4:	47a0      	blx	r4
 80070a6:	9801      	ldr	r0, [sp, #4]
 80070a8:	b002      	add	sp, #8
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	20001148 	.word	0x20001148

080070b0 <dwt_readrxtimestamplo32>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	2200      	movs	r2, #0
 80070b6:	ab02      	add	r3, sp, #8
 80070b8:	f843 2d04 	str.w	r2, [r3, #-4]!
 80070bc:	4904      	ldr	r1, [pc, #16]	; (80070d0 <dwt_readrxtimestamplo32+0x20>)
 80070be:	6808      	ldr	r0, [r1, #0]
 80070c0:	6881      	ldr	r1, [r0, #8]
 80070c2:	6909      	ldr	r1, [r1, #16]
 80070c4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80070c6:	2163      	movs	r1, #99	; 0x63
 80070c8:	47a0      	blx	r4
 80070ca:	9801      	ldr	r0, [sp, #4]
 80070cc:	b002      	add	sp, #8
 80070ce:	bd10      	pop	{r4, pc}
 80070d0:	20001148 	.word	0x20001148

080070d4 <dwt_forcetrxoff>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <dwt_forcetrxoff+0x18>)
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	6883      	ldr	r3, [r0, #8]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80070e0:	2300      	movs	r3, #0
 80070e2:	461a      	mov	r2, r3
 80070e4:	2103      	movs	r1, #3
 80070e6:	47a0      	blx	r4
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	bf00      	nop
 80070ec:	20001148 	.word	0x20001148

080070f0 <dwt_rxenable>:
 80070f0:	b508      	push	{r3, lr}
 80070f2:	4b04      	ldr	r3, [pc, #16]	; (8007104 <dwt_rxenable+0x14>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	6912      	ldr	r2, [r2, #16]
 80070fa:	6a12      	ldr	r2, [r2, #32]
 80070fc:	4601      	mov	r1, r0
 80070fe:	4618      	mov	r0, r3
 8007100:	4790      	blx	r2
 8007102:	bd08      	pop	{r3, pc}
 8007104:	20001148 	.word	0x20001148

08007108 <dwt_setrxtimeout>:
 8007108:	b510      	push	{r4, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	ab02      	add	r3, sp, #8
 800710e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007112:	4a05      	ldr	r2, [pc, #20]	; (8007128 <dwt_setrxtimeout+0x20>)
 8007114:	6810      	ldr	r0, [r2, #0]
 8007116:	6882      	ldr	r2, [r0, #8]
 8007118:	6912      	ldr	r2, [r2, #16]
 800711a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800711c:	2200      	movs	r2, #0
 800711e:	2151      	movs	r1, #81	; 0x51
 8007120:	47a0      	blx	r4
 8007122:	b002      	add	sp, #8
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	20001148 	.word	0x20001148

0800712c <dwt_generatecrc8>:
 800712c:	2900      	cmp	r1, #0
 800712e:	dd0c      	ble.n	800714a <dwt_generatecrc8+0x1e>
 8007130:	b410      	push	{r4}
 8007132:	1e43      	subs	r3, r0, #1
 8007134:	4419      	add	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	4c05      	ldr	r4, [pc, #20]	; (8007150 <dwt_generatecrc8+0x24>)
 800713a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800713e:	4050      	eors	r0, r2
 8007140:	5c20      	ldrb	r0, [r4, r0]
 8007142:	428b      	cmp	r3, r1
 8007144:	d1f9      	bne.n	800713a <dwt_generatecrc8+0xe>
 8007146:	bc10      	pop	{r4}
 8007148:	4770      	bx	lr
 800714a:	4610      	mov	r0, r2
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	08019778 	.word	0x08019778

08007154 <dwt_setrxaftertxdelay>:
 8007154:	b510      	push	{r4, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	ab02      	add	r3, sp, #8
 800715a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800715e:	4a05      	ldr	r2, [pc, #20]	; (8007174 <dwt_setrxaftertxdelay+0x20>)
 8007160:	6810      	ldr	r0, [r2, #0]
 8007162:	6882      	ldr	r2, [r0, #8]
 8007164:	6912      	ldr	r2, [r2, #16]
 8007166:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007168:	2200      	movs	r2, #0
 800716a:	2110      	movs	r1, #16
 800716c:	47a0      	blx	r4
 800716e:	b002      	add	sp, #8
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	20001148 	.word	0x20001148

08007178 <dwt_readrxdata>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <dwt_readrxdata+0x18>)
 800717c:	681c      	ldr	r4, [r3, #0]
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	68dd      	ldr	r5, [r3, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	460a      	mov	r2, r1
 8007188:	4601      	mov	r1, r0
 800718a:	4620      	mov	r0, r4
 800718c:	47a8      	blx	r5
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	20001148 	.word	0x20001148

08007194 <dwt_readclockoffset>:
 8007194:	b510      	push	{r4, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	2200      	movs	r2, #0
 800719a:	ab02      	add	r3, sp, #8
 800719c:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80071a0:	4905      	ldr	r1, [pc, #20]	; (80071b8 <dwt_readclockoffset+0x24>)
 80071a2:	6808      	ldr	r0, [r1, #0]
 80071a4:	6881      	ldr	r1, [r0, #8]
 80071a6:	6909      	ldr	r1, [r1, #16]
 80071a8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80071aa:	212c      	movs	r1, #44	; 0x2c
 80071ac:	47a0      	blx	r4
 80071ae:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80071b2:	b002      	add	sp, #8
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	bf00      	nop
 80071b8:	20001148 	.word	0x20001148

080071bc <dwt_setleds>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	ab02      	add	r3, sp, #8
 80071c2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80071c6:	4a05      	ldr	r2, [pc, #20]	; (80071dc <dwt_setleds+0x20>)
 80071c8:	6810      	ldr	r0, [r2, #0]
 80071ca:	6882      	ldr	r2, [r0, #8]
 80071cc:	6912      	ldr	r2, [r2, #16]
 80071ce:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80071d0:	2200      	movs	r2, #0
 80071d2:	2155      	movs	r1, #85	; 0x55
 80071d4:	47a0      	blx	r4
 80071d6:	b002      	add	sp, #8
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	bf00      	nop
 80071dc:	20001148 	.word	0x20001148

080071e0 <dwt_check_dev_id>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <dwt_check_dev_id+0x18>)
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	6883      	ldr	r3, [r0, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80071ec:	2300      	movs	r3, #0
 80071ee:	461a      	mov	r2, r3
 80071f0:	2126      	movs	r1, #38	; 0x26
 80071f2:	47a0      	blx	r4
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	bf00      	nop
 80071f8:	20001148 	.word	0x20001148

080071fc <dwt_writesysstatuslo>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	ab02      	add	r3, sp, #8
 8007202:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007206:	4a05      	ldr	r2, [pc, #20]	; (800721c <dwt_writesysstatuslo+0x20>)
 8007208:	6810      	ldr	r0, [r2, #0]
 800720a:	6882      	ldr	r2, [r0, #8]
 800720c:	6912      	ldr	r2, [r2, #16]
 800720e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007210:	2200      	movs	r2, #0
 8007212:	2174      	movs	r1, #116	; 0x74
 8007214:	47a0      	blx	r4
 8007216:	b002      	add	sp, #8
 8007218:	bd10      	pop	{r4, pc}
 800721a:	bf00      	nop
 800721c:	20001148 	.word	0x20001148

08007220 <dwt_readsysstatuslo>:
 8007220:	b510      	push	{r4, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	2200      	movs	r2, #0
 8007226:	ab02      	add	r3, sp, #8
 8007228:	f843 2d04 	str.w	r2, [r3, #-4]!
 800722c:	4904      	ldr	r1, [pc, #16]	; (8007240 <dwt_readsysstatuslo+0x20>)
 800722e:	6808      	ldr	r0, [r1, #0]
 8007230:	6881      	ldr	r1, [r0, #8]
 8007232:	6909      	ldr	r1, [r1, #16]
 8007234:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8007236:	2176      	movs	r1, #118	; 0x76
 8007238:	47a0      	blx	r4
 800723a:	9801      	ldr	r0, [sp, #4]
 800723c:	b002      	add	sp, #8
 800723e:	bd10      	pop	{r4, pc}
 8007240:	20001148 	.word	0x20001148

08007244 <dwt_readsysstatushi>:
 8007244:	b510      	push	{r4, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	2200      	movs	r2, #0
 800724a:	ab02      	add	r3, sp, #8
 800724c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8007250:	4904      	ldr	r1, [pc, #16]	; (8007264 <dwt_readsysstatushi+0x20>)
 8007252:	6808      	ldr	r0, [r1, #0]
 8007254:	6881      	ldr	r1, [r0, #8]
 8007256:	6909      	ldr	r1, [r1, #16]
 8007258:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800725a:	2177      	movs	r1, #119	; 0x77
 800725c:	47a0      	blx	r4
 800725e:	9801      	ldr	r0, [sp, #4]
 8007260:	b002      	add	sp, #8
 8007262:	bd10      	pop	{r4, pc}
 8007264:	20001148 	.word	0x20001148

08007268 <dwt_getframelength>:
 8007268:	b510      	push	{r4, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	2200      	movs	r2, #0
 800726e:	ab02      	add	r3, sp, #8
 8007270:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8007274:	4905      	ldr	r1, [pc, #20]	; (800728c <dwt_getframelength+0x24>)
 8007276:	6808      	ldr	r0, [r1, #0]
 8007278:	6881      	ldr	r1, [r0, #8]
 800727a:	6909      	ldr	r1, [r1, #16]
 800727c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800727e:	217a      	movs	r1, #122	; 0x7a
 8007280:	47a0      	blx	r4
 8007282:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007286:	b002      	add	sp, #8
 8007288:	bd10      	pop	{r4, pc}
 800728a:	bf00      	nop
 800728c:	20001148 	.word	0x20001148

08007290 <dwt_dbg_fn>:
 8007290:	2998      	cmp	r1, #152	; 0x98
 8007292:	4802      	ldr	r0, [pc, #8]	; (800729c <dwt_dbg_fn+0xc>)
 8007294:	bf18      	it	ne
 8007296:	2000      	movne	r0, #0
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	08019970 	.word	0x08019970

080072a0 <_deinit>:
 80072a0:	4770      	bx	lr

080072a2 <dwt_xfer3xxx>:
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	4605      	mov	r5, r0
 80072aa:	460e      	mov	r6, r1
 80072ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80072b0:	1990      	adds	r0, r2, r6
 80072b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80072b6:	4432      	add	r2, r6
 80072b8:	f3c2 4204 	ubfx	r2, r2, #16, #5
 80072bc:	0084      	lsls	r4, r0, #2
 80072be:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 80072c2:	ea41 0204 	orr.w	r2, r1, r4
 80072c6:	0a12      	lsrs	r2, r2, #8
 80072c8:	f88d 200c 	strb.w	r2, [sp, #12]
 80072cc:	f001 0703 	and.w	r7, r1, #3
 80072d0:	433c      	orrs	r4, r7
 80072d2:	f88d 400d 	strb.w	r4, [sp, #13]
 80072d6:	461f      	mov	r7, r3
 80072d8:	b973      	cbnz	r3, 80072f8 <dwt_xfer3xxx+0x56>
 80072da:	2900      	cmp	r1, #0
 80072dc:	d05c      	beq.n	8007398 <dwt_xfer3xxx+0xf6>
 80072de:	0073      	lsls	r3, r6, #1
 80072e0:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80072e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80072e8:	2401      	movs	r4, #1
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d02f      	beq.n	800734e <dwt_xfer3xxx+0xac>
 80072ee:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80072f2:	2903      	cmp	r1, #3
 80072f4:	d90a      	bls.n	800730c <dwt_xfer3xxx+0x6a>
 80072f6:	e7fe      	b.n	80072f6 <dwt_xfer3xxx+0x54>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d14f      	bne.n	800739c <dwt_xfer3xxx+0xfa>
 80072fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007300:	d003      	beq.n	800730a <dwt_xfer3xxx+0x68>
 8007302:	2900      	cmp	r1, #0
 8007304:	d14a      	bne.n	800739c <dwt_xfer3xxx+0xfa>
 8007306:	2401      	movs	r4, #1
 8007308:	e021      	b.n	800734e <dwt_xfer3xxx+0xac>
 800730a:	2401      	movs	r4, #1
 800730c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800730e:	7d9b      	ldrb	r3, [r3, #22]
 8007310:	b94b      	cbnz	r3, 8007326 <dwt_xfer3xxx+0x84>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	685d      	ldr	r5, [r3, #4]
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	463a      	mov	r2, r7
 800731a:	a903      	add	r1, sp, #12
 800731c:	4620      	mov	r0, r4
 800731e:	47a8      	blx	r5
 8007320:	b004      	add	sp, #16
 8007322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007326:	2200      	movs	r2, #0
 8007328:	4621      	mov	r1, r4
 800732a:	a803      	add	r0, sp, #12
 800732c:	f7ff fefe 	bl	800712c <dwt_generatecrc8>
 8007330:	4602      	mov	r2, r0
 8007332:	4639      	mov	r1, r7
 8007334:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007336:	f7ff fef9 	bl	800712c <dwt_generatecrc8>
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	9000      	str	r0, [sp, #0]
 800733e:	689d      	ldr	r5, [r3, #8]
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	463a      	mov	r2, r7
 8007344:	a903      	add	r1, sp, #12
 8007346:	4620      	mov	r0, r4
 8007348:	47a8      	blx	r5
 800734a:	e7e9      	b.n	8007320 <dwt_xfer3xxx+0x7e>
 800734c:	2401      	movs	r4, #1
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	f8d3 8000 	ldr.w	r8, [r3]
 8007354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007356:	463a      	mov	r2, r7
 8007358:	a903      	add	r1, sp, #12
 800735a:	4620      	mov	r0, r4
 800735c:	47c0      	blx	r8
 800735e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007360:	7d9b      	ldrb	r3, [r3, #22]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d1dc      	bne.n	8007320 <dwt_xfer3xxx+0x7e>
 8007366:	2e18      	cmp	r6, #24
 8007368:	d0da      	beq.n	8007320 <dwt_xfer3xxx+0x7e>
 800736a:	2200      	movs	r2, #0
 800736c:	4621      	mov	r1, r4
 800736e:	a803      	add	r0, sp, #12
 8007370:	f7ff fedc 	bl	800712c <dwt_generatecrc8>
 8007374:	4602      	mov	r2, r0
 8007376:	4639      	mov	r1, r7
 8007378:	980a      	ldr	r0, [sp, #40]	; 0x28
 800737a:	f7ff fed7 	bl	800712c <dwt_generatecrc8>
 800737e:	4604      	mov	r4, r0
 8007380:	2200      	movs	r2, #0
 8007382:	2118      	movs	r1, #24
 8007384:	4628      	mov	r0, r5
 8007386:	f000 f841 	bl	800740c <dwt_read8bitoffsetreg>
 800738a:	4284      	cmp	r4, r0
 800738c:	d0c8      	beq.n	8007320 <dwt_xfer3xxx+0x7e>
 800738e:	68eb      	ldr	r3, [r5, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0c5      	beq.n	8007320 <dwt_xfer3xxx+0x7e>
 8007394:	4798      	blx	r3
 8007396:	e7c3      	b.n	8007320 <dwt_xfer3xxx+0x7e>
 8007398:	2800      	cmp	r0, #0
 800739a:	d0d7      	beq.n	800734c <dwt_xfer3xxx+0xaa>
 800739c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a0:	f88d 200c 	strb.w	r2, [sp, #12]
 80073a4:	2402      	movs	r4, #2
 80073a6:	e7a0      	b.n	80072ea <dwt_xfer3xxx+0x48>

080073a8 <dwt_readfromdevice>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	2400      	movs	r4, #0
 80073ae:	9401      	str	r4, [sp, #4]
 80073b0:	9c04      	ldr	r4, [sp, #16]
 80073b2:	9400      	str	r4, [sp, #0]
 80073b4:	f7ff ff75 	bl	80072a2 <dwt_xfer3xxx>
 80073b8:	b002      	add	sp, #8
 80073ba:	bd10      	pop	{r4, pc}

080073bc <dwt_read32bitoffsetreg>:
 80073bc:	b500      	push	{lr}
 80073be:	b085      	sub	sp, #20
 80073c0:	ab03      	add	r3, sp, #12
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2304      	movs	r3, #4
 80073c6:	b292      	uxth	r2, r2
 80073c8:	f7ff ffee 	bl	80073a8 <dwt_readfromdevice>
 80073cc:	f10d 030f 	add.w	r3, sp, #15
 80073d0:	f10d 010b 	add.w	r1, sp, #11
 80073d4:	2000      	movs	r0, #0
 80073d6:	f813 2901 	ldrb.w	r2, [r3], #-1
 80073da:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80073de:	428b      	cmp	r3, r1
 80073e0:	d1f9      	bne.n	80073d6 <dwt_read32bitoffsetreg+0x1a>
 80073e2:	b005      	add	sp, #20
 80073e4:	f85d fb04 	ldr.w	pc, [sp], #4

080073e8 <dwt_read16bitoffsetreg>:
 80073e8:	b500      	push	{lr}
 80073ea:	b085      	sub	sp, #20
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	2302      	movs	r3, #2
 80073f2:	b292      	uxth	r2, r2
 80073f4:	f7ff ffd8 	bl	80073a8 <dwt_readfromdevice>
 80073f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80073fc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8007400:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8007404:	b280      	uxth	r0, r0
 8007406:	b005      	add	sp, #20
 8007408:	f85d fb04 	ldr.w	pc, [sp], #4

0800740c <dwt_read8bitoffsetreg>:
 800740c:	b500      	push	{lr}
 800740e:	b085      	sub	sp, #20
 8007410:	f10d 030f 	add.w	r3, sp, #15
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	2301      	movs	r3, #1
 8007418:	b292      	uxth	r2, r2
 800741a:	f7ff ffc5 	bl	80073a8 <dwt_readfromdevice>
 800741e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8007422:	b005      	add	sp, #20
 8007424:	f85d fb04 	ldr.w	pc, [sp], #4

08007428 <ull_readdiagnostics>:
 8007428:	b530      	push	{r4, r5, lr}
 800742a:	b0bd      	sub	sp, #244	; 0xf4
 800742c:	4605      	mov	r5, r0
 800742e:	460c      	mov	r4, r1
 8007430:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007432:	7bda      	ldrb	r2, [r3, #15]
 8007434:	2a01      	cmp	r2, #1
 8007436:	d01c      	beq.n	8007472 <ull_readdiagnostics+0x4a>
 8007438:	2a03      	cmp	r2, #3
 800743a:	f040 81d4 	bne.w	80077e6 <ull_readdiagnostics+0x3be>
 800743e:	7e1b      	ldrb	r3, [r3, #24]
 8007440:	f013 0f08 	tst.w	r3, #8
 8007444:	d10c      	bne.n	8007460 <ull_readdiagnostics+0x38>
 8007446:	f013 0f04 	tst.w	r3, #4
 800744a:	ab02      	add	r3, sp, #8
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	bf14      	ite	ne
 8007450:	2338      	movne	r3, #56	; 0x38
 8007452:	2320      	moveq	r3, #32
 8007454:	2200      	movs	r2, #0
 8007456:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800745a:	f7ff ffa5 	bl	80073a8 <dwt_readfromdevice>
 800745e:	e019      	b.n	8007494 <ull_readdiagnostics+0x6c>
 8007460:	ab02      	add	r3, sp, #8
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	23e8      	movs	r3, #232	; 0xe8
 8007466:	2200      	movs	r2, #0
 8007468:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800746c:	f7ff ff9c 	bl	80073a8 <dwt_readfromdevice>
 8007470:	e010      	b.n	8007494 <ull_readdiagnostics+0x6c>
 8007472:	7e1b      	ldrb	r3, [r3, #24]
 8007474:	f013 0f08 	tst.w	r3, #8
 8007478:	f040 81ac 	bne.w	80077d4 <ull_readdiagnostics+0x3ac>
 800747c:	f013 0f04 	tst.w	r3, #4
 8007480:	ab02      	add	r3, sp, #8
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	bf14      	ite	ne
 8007486:	2338      	movne	r3, #56	; 0x38
 8007488:	2320      	moveq	r3, #32
 800748a:	2200      	movs	r2, #0
 800748c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8007490:	f7ff ff8a 	bl	80073a8 <dwt_readfromdevice>
 8007494:	f10d 0217 	add.w	r2, sp, #23
 8007498:	f104 031a 	add.w	r3, r4, #26
 800749c:	f104 0020 	add.w	r0, r4, #32
 80074a0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80074a4:	f803 1b01 	strb.w	r1, [r3], #1
 80074a8:	4283      	cmp	r3, r0
 80074aa:	d1f9      	bne.n	80074a0 <ull_readdiagnostics+0x78>
 80074ac:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80074b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80074b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074bc:	8463      	strh	r3, [r4, #34]	; 0x22
 80074be:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80074c2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80074c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80074ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80074d2:	bf1c      	itt	ne
 80074d4:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80074d8:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80074dc:	8423      	strh	r3, [r4, #32]
 80074de:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80074e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80074e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80074f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80074f2:	7e1b      	ldrb	r3, [r3, #24]
 80074f4:	f013 0f02 	tst.w	r3, #2
 80074f8:	f040 816a 	bne.w	80077d0 <ull_readdiagnostics+0x3a8>
 80074fc:	aa0a      	add	r2, sp, #40	; 0x28
 80074fe:	1e63      	subs	r3, r4, #1
 8007500:	1d20      	adds	r0, r4, #4
 8007502:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007506:	f803 1f01 	strb.w	r1, [r3, #1]!
 800750a:	79d1      	ldrb	r1, [r2, #7]
 800750c:	7219      	strb	r1, [r3, #8]
 800750e:	7bd1      	ldrb	r1, [r2, #15]
 8007510:	7459      	strb	r1, [r3, #17]
 8007512:	4283      	cmp	r3, r0
 8007514:	d1f5      	bne.n	8007502 <ull_readdiagnostics+0xda>
 8007516:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800751a:	7163      	strb	r3, [r4, #5]
 800751c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8007520:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8007524:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007528:	80e3      	strh	r3, [r4, #6]
 800752a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800752e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8007532:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007536:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800753a:	f8a4 300d 	strh.w	r3, [r4, #13]
 800753e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007542:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007546:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800754a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800754e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8007552:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8007556:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800755a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800755e:	82e3      	strh	r3, [r4, #22]
 8007560:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8007564:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8007568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800756c:	8323      	strh	r3, [r4, #24]
 800756e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007570:	7e1b      	ldrb	r3, [r3, #24]
 8007572:	f013 0f04 	tst.w	r3, #4
 8007576:	f040 812b 	bne.w	80077d0 <ull_readdiagnostics+0x3a8>
 800757a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800757e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8007582:	041b      	lsls	r3, r3, #16
 8007584:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007588:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800758c:	4313      	orrs	r3, r2
 800758e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8007592:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007596:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800759a:	6263      	str	r3, [r4, #36]	; 0x24
 800759c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 80075a0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075aa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80075b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80075b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075be:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 80075c2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075cc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80075d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80075da:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80075de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075e0:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 80075e4:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80075e8:	041b      	lsls	r3, r3, #16
 80075ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075ee:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 80075f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80075fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007600:	6323      	str	r3, [r4, #48]	; 0x30
 8007602:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8007606:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007610:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007614:	4313      	orrs	r3, r2
 8007616:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800761a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800761e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007622:	6363      	str	r3, [r4, #52]	; 0x34
 8007624:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8007628:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800762c:	041b      	lsls	r3, r3, #16
 800762e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007632:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8007636:	4313      	orrs	r3, r2
 8007638:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007644:	63a3      	str	r3, [r4, #56]	; 0x38
 8007646:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800764a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800764e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007652:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8007654:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8007658:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007662:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8007666:	4313      	orrs	r3, r2
 8007668:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800766c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007670:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007674:	6423      	str	r3, [r4, #64]	; 0x40
 8007676:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800767a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800767e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007682:	6463      	str	r3, [r4, #68]	; 0x44
 8007684:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8007688:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007692:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8007696:	4313      	orrs	r3, r2
 8007698:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800769c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80076a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80076a6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 80076aa:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80076b4:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 80076b8:	4313      	orrs	r3, r2
 80076ba:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 80076be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80076c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80076c8:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 80076cc:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80076d6:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 80076da:	4313      	orrs	r3, r2
 80076dc:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80076e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80076e8:	6523      	str	r3, [r4, #80]	; 0x50
 80076ea:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 80076ee:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80076f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80076fa:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80076fe:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8007702:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8007706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800770e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8007712:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8007716:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007720:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8007724:	4313      	orrs	r3, r2
 8007726:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800772a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800772e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007732:	65a3      	str	r3, [r4, #88]	; 0x58
 8007734:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8007738:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800773c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007740:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007742:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8007746:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007750:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8007754:	4313      	orrs	r3, r2
 8007756:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800775a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800775e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007762:	6623      	str	r3, [r4, #96]	; 0x60
 8007764:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8007768:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007772:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8007776:	4313      	orrs	r3, r2
 8007778:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800777c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007780:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007784:	6663      	str	r3, [r4, #100]	; 0x64
 8007786:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800778a:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007794:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8007798:	4313      	orrs	r3, r2
 800779a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800779e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80077a6:	66a3      	str	r3, [r4, #104]	; 0x68
 80077a8:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 80077ac:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80077b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80077b8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 80077bc:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 80077c0:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80077c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077cc:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80077d0:	b03d      	add	sp, #244	; 0xf4
 80077d2:	bd30      	pop	{r4, r5, pc}
 80077d4:	ab02      	add	r3, sp, #8
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	23e8      	movs	r3, #232	; 0xe8
 80077da:	2200      	movs	r2, #0
 80077dc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80077e0:	f7ff fde2 	bl	80073a8 <dwt_readfromdevice>
 80077e4:	e656      	b.n	8007494 <ull_readdiagnostics+0x6c>
 80077e6:	7e1b      	ldrb	r3, [r3, #24]
 80077e8:	f013 0f01 	tst.w	r3, #1
 80077ec:	f000 819f 	beq.w	8007b2e <ull_readdiagnostics+0x706>
 80077f0:	ab02      	add	r3, sp, #8
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	236c      	movs	r3, #108	; 0x6c
 80077f6:	2200      	movs	r2, #0
 80077f8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80077fc:	f7ff fdd4 	bl	80073a8 <dwt_readfromdevice>
 8007800:	ab1d      	add	r3, sp, #116	; 0x74
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	236c      	movs	r3, #108	; 0x6c
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800780c:	4628      	mov	r0, r5
 800780e:	f7ff fdcb 	bl	80073a8 <dwt_readfromdevice>
 8007812:	aa02      	add	r2, sp, #8
 8007814:	1e63      	subs	r3, r4, #1
 8007816:	1d20      	adds	r0, r4, #4
 8007818:	f812 1b01 	ldrb.w	r1, [r2], #1
 800781c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8007820:	79d1      	ldrb	r1, [r2, #7]
 8007822:	7219      	strb	r1, [r3, #8]
 8007824:	7bd1      	ldrb	r1, [r2, #15]
 8007826:	7459      	strb	r1, [r3, #17]
 8007828:	7dd1      	ldrb	r1, [r2, #23]
 800782a:	7699      	strb	r1, [r3, #26]
 800782c:	4283      	cmp	r3, r0
 800782e:	d1f3      	bne.n	8007818 <ull_readdiagnostics+0x3f0>
 8007830:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8007834:	77e3      	strb	r3, [r4, #31]
 8007836:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800783a:	7163      	strb	r3, [r4, #5]
 800783c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8007840:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007848:	80e3      	strh	r3, [r4, #6]
 800784a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800784e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007852:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8007856:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800785a:	f8a4 200d 	strh.w	r2, [r4, #13]
 800785e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007862:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007866:	f8a4 200f 	strh.w	r2, [r4, #15]
 800786a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800786e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007872:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8007876:	82e3      	strh	r3, [r4, #22]
 8007878:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800787c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8007880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007884:	8323      	strh	r3, [r4, #24]
 8007886:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800788a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800788e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007892:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007896:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800789a:	bf1c      	itt	ne
 800789c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80078a0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80078a4:	8423      	strh	r3, [r4, #32]
 80078a6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80078aa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80078ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078b6:	8463      	strh	r3, [r4, #34]	; 0x22
 80078b8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80078bc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078c6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80078d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078d4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80078d8:	6263      	str	r3, [r4, #36]	; 0x24
 80078da:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80078dc:	7e1b      	ldrb	r3, [r3, #24]
 80078de:	f013 0f01 	tst.w	r3, #1
 80078e2:	f43f af75 	beq.w	80077d0 <ull_readdiagnostics+0x3a8>
 80078e6:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80078ea:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078f4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80078fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007906:	62a3      	str	r3, [r4, #40]	; 0x28
 8007908:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800790c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007916:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800791a:	4313      	orrs	r3, r2
 800791c:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8007920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007924:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800792a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800792e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8007932:	041b      	lsls	r3, r3, #16
 8007934:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007938:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800793c:	4313      	orrs	r3, r2
 800793e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8007942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007946:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800794a:	6323      	str	r3, [r4, #48]	; 0x30
 800794c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8007950:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8007954:	041b      	lsls	r3, r3, #16
 8007956:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800795a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800795e:	4313      	orrs	r3, r2
 8007960:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8007964:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007968:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800796c:	6363      	str	r3, [r4, #52]	; 0x34
 800796e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8007972:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8007976:	041b      	lsls	r3, r3, #16
 8007978:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800797c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8007980:	4313      	orrs	r3, r2
 8007982:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8007986:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800798a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800798e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007990:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8007994:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8007998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800799c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800799e:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80079a2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80079a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80079b0:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80079b4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80079b8:	041b      	lsls	r3, r3, #16
 80079ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80079be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80079c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80079d0:	6423      	str	r3, [r4, #64]	; 0x40
 80079d2:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80079d6:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80079da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079de:	6463      	str	r3, [r4, #68]	; 0x44
 80079e0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 80079e4:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80079ee:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 80079f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a00:	64a3      	str	r3, [r4, #72]	; 0x48
 8007a02:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8007a06:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8007a0a:	041b      	lsls	r3, r3, #16
 8007a0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007a10:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8007a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a1e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a22:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a24:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8007a28:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8007a2c:	041b      	lsls	r3, r3, #16
 8007a2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007a32:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8007a3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a44:	6523      	str	r3, [r4, #80]	; 0x50
 8007a46:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8007a4a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8007a4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007a56:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8007a5a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8007a5e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8007a62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a6a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8007a6e:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8007a72:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007a7c:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8007a86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007a8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a90:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8007a94:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8007a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a9c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007a9e:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8007aa2:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007aac:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8007ab6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007aba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007abe:	6623      	str	r3, [r4, #96]	; 0x60
 8007ac0:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8007ac4:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8007ac8:	041b      	lsls	r3, r3, #16
 8007aca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007ace:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8007ad8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007adc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007ae0:	6663      	str	r3, [r4, #100]	; 0x64
 8007ae2:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8007ae6:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007af0:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8007afa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007afe:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007b02:	66a3      	str	r3, [r4, #104]	; 0x68
 8007b04:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8007b08:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8007b0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007b14:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8007b18:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8007b1c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8007b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b28:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8007b2c:	e650      	b.n	80077d0 <ull_readdiagnostics+0x3a8>
 8007b2e:	ab02      	add	r3, sp, #8
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	2328      	movs	r3, #40	; 0x28
 8007b34:	2200      	movs	r2, #0
 8007b36:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8007b3a:	f7ff fc35 	bl	80073a8 <dwt_readfromdevice>
 8007b3e:	e668      	b.n	8007812 <ull_readdiagnostics+0x3ea>

08007b40 <ull_readrxtimestamp>:
 8007b40:	b500      	push	{lr}
 8007b42:	b083      	sub	sp, #12
 8007b44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b46:	7bdb      	ldrb	r3, [r3, #15]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d00b      	beq.n	8007b64 <ull_readrxtimestamp+0x24>
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d110      	bne.n	8007b72 <ull_readrxtimestamp+0x32>
 8007b50:	9100      	str	r1, [sp, #0]
 8007b52:	2305      	movs	r3, #5
 8007b54:	2204      	movs	r2, #4
 8007b56:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007b5a:	f7ff fc25 	bl	80073a8 <dwt_readfromdevice>
 8007b5e:	b003      	add	sp, #12
 8007b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b64:	9100      	str	r1, [sp, #0]
 8007b66:	2305      	movs	r3, #5
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4905      	ldr	r1, [pc, #20]	; (8007b80 <ull_readrxtimestamp+0x40>)
 8007b6c:	f7ff fc1c 	bl	80073a8 <dwt_readfromdevice>
 8007b70:	e7f5      	b.n	8007b5e <ull_readrxtimestamp+0x1e>
 8007b72:	9100      	str	r1, [sp, #0]
 8007b74:	2305      	movs	r3, #5
 8007b76:	2200      	movs	r2, #0
 8007b78:	2164      	movs	r1, #100	; 0x64
 8007b7a:	f7ff fc15 	bl	80073a8 <dwt_readfromdevice>
 8007b7e:	e7ee      	b.n	8007b5e <ull_readrxtimestamp+0x1e>
 8007b80:	00180004 	.word	0x00180004

08007b84 <dwt_writetodevice>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8007b8c:	9401      	str	r4, [sp, #4]
 8007b8e:	9c04      	ldr	r4, [sp, #16]
 8007b90:	9400      	str	r4, [sp, #0]
 8007b92:	f7ff fb86 	bl	80072a2 <dwt_xfer3xxx>
 8007b96:	b002      	add	sp, #8
 8007b98:	bd10      	pop	{r4, pc}

08007b9a <dwt_write8bitoffsetreg>:
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	ac04      	add	r4, sp, #16
 8007ba0:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8007ba4:	9400      	str	r4, [sp, #0]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	f7ff ffeb 	bl	8007b84 <dwt_writetodevice>
 8007bae:	b004      	add	sp, #16
 8007bb0:	bd10      	pop	{r4, pc}
	...

08007bb4 <ull_getframelength>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007bba:	7bdb      	ldrb	r3, [r3, #15]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d013      	beq.n	8007be8 <ull_getframelength+0x34>
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d11d      	bne.n	8007c00 <ull_getframelength+0x4c>
 8007bc4:	23f0      	movs	r3, #240	; 0xf0
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4912      	ldr	r1, [pc, #72]	; (8007c14 <ull_getframelength+0x60>)
 8007bca:	f7ff ffe6 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7ff fc07 	bl	80073e8 <dwt_read16bitoffsetreg>
 8007bda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007bdc:	7b1a      	ldrb	r2, [r3, #12]
 8007bde:	b1a2      	cbz	r2, 8007c0a <ull_getframelength+0x56>
 8007be0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007be4:	8458      	strh	r0, [r3, #34]	; 0x22
 8007be6:	bd10      	pop	{r4, pc}
 8007be8:	230f      	movs	r3, #15
 8007bea:	2200      	movs	r2, #0
 8007bec:	4909      	ldr	r1, [pc, #36]	; (8007c14 <ull_getframelength+0x60>)
 8007bee:	f7ff ffd4 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f7ff fbf5 	bl	80073e8 <dwt_read16bitoffsetreg>
 8007bfe:	e7ec      	b.n	8007bda <ull_getframelength+0x26>
 8007c00:	2200      	movs	r2, #0
 8007c02:	214c      	movs	r1, #76	; 0x4c
 8007c04:	f7ff fbf0 	bl	80073e8 <dwt_read16bitoffsetreg>
 8007c08:	e7e7      	b.n	8007bda <ull_getframelength+0x26>
 8007c0a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007c0e:	8458      	strh	r0, [r3, #34]	; 0x22
 8007c10:	e7e9      	b.n	8007be6 <ull_getframelength+0x32>
 8007c12:	bf00      	nop
 8007c14:	00010024 	.word	0x00010024

08007c18 <ull_configeventcounters>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	2302      	movs	r3, #2
 8007c20:	2200      	movs	r2, #0
 8007c22:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007c26:	f7ff ffb8 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007c2a:	b904      	cbnz	r4, 8007c2e <ull_configeventcounters+0x16>
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	2301      	movs	r3, #1
 8007c30:	2200      	movs	r2, #0
 8007c32:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7ff ffaf 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007c3c:	e7f6      	b.n	8007c2c <ull_configeventcounters+0x14>

08007c3e <dwt_write16bitoffsetreg>:
 8007c3e:	b500      	push	{lr}
 8007c40:	b085      	sub	sp, #20
 8007c42:	f88d 300c 	strb.w	r3, [sp, #12]
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	f88d 300d 	strb.w	r3, [sp, #13]
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	2302      	movs	r3, #2
 8007c52:	b292      	uxth	r2, r2
 8007c54:	f7ff ff96 	bl	8007b84 <dwt_writetodevice>
 8007c58:	b005      	add	sp, #20
 8007c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007c60 <ull_clearaonconfig>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4604      	mov	r4, r0
 8007c64:	2300      	movs	r3, #0
 8007c66:	461a      	mov	r2, r3
 8007c68:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8007c6c:	f7ff ffe7 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007c70:	2300      	movs	r3, #0
 8007c72:	461a      	mov	r2, r3
 8007c74:	4908      	ldr	r1, [pc, #32]	; (8007c98 <ull_clearaonconfig+0x38>)
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff ff8f 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007c7c:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <ull_clearaonconfig+0x3c>)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	461a      	mov	r2, r3
 8007c82:	4629      	mov	r1, r5
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7ff ff88 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4620      	mov	r0, r4
 8007c92:	f7ff ff82 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	000a0014 	.word	0x000a0014
 8007c9c:	000a0004 	.word	0x000a0004

08007ca0 <ull_force_clocks>:
 8007ca0:	b508      	push	{r3, lr}
 8007ca2:	2901      	cmp	r1, #1
 8007ca4:	d002      	beq.n	8007cac <ull_force_clocks+0xc>
 8007ca6:	2905      	cmp	r1, #5
 8007ca8:	d007      	beq.n	8007cba <ull_force_clocks+0x1a>
 8007caa:	bd08      	pop	{r3, pc}
 8007cac:	f641 0322 	movw	r3, #6178	; 0x1822
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4905      	ldr	r1, [pc, #20]	; (8007cc8 <ull_force_clocks+0x28>)
 8007cb4:	f7ff ffc3 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007cb8:	e7f7      	b.n	8007caa <ull_force_clocks+0xa>
 8007cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4901      	ldr	r1, [pc, #4]	; (8007cc8 <ull_force_clocks+0x28>)
 8007cc2:	f7ff ffbc 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007cc6:	e7f0      	b.n	8007caa <ull_force_clocks+0xa>
 8007cc8:	00110004 	.word	0x00110004

08007ccc <__dwt_otp_write_wdata_id_reg>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4605      	mov	r5, r0
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8007cde:	f7ff ffae 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007ce2:	b2a3      	uxth	r3, r4
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7ff ffa7 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007cf0:	bd38      	pop	{r3, r4, r5, pc}
	...

08007cf4 <_dwt_otpread>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	4d0c      	ldr	r5, [pc, #48]	; (8007d2c <_dwt_otpread+0x38>)
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7ff ff9c 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007d06:	4633      	mov	r3, r6
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4909      	ldr	r1, [pc, #36]	; (8007d30 <_dwt_otpread+0x3c>)
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f7ff ff96 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007d12:	2302      	movs	r3, #2
 8007d14:	2200      	movs	r2, #0
 8007d16:	4629      	mov	r1, r5
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f7ff ff90 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4904      	ldr	r1, [pc, #16]	; (8007d34 <_dwt_otpread+0x40>)
 8007d22:	4620      	mov	r0, r4
 8007d24:	f7ff fb4a 	bl	80073bc <dwt_read32bitoffsetreg>
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	bf00      	nop
 8007d2c:	000b0008 	.word	0x000b0008
 8007d30:	000b0004 	.word	0x000b0004
 8007d34:	000b0010 	.word	0x000b0010

08007d38 <ull_aon_read>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	2200      	movs	r2, #0
 8007d40:	490a      	ldr	r1, [pc, #40]	; (8007d6c <ull_aon_read+0x34>)
 8007d42:	f7ff ff7c 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007d46:	4d0a      	ldr	r5, [pc, #40]	; (8007d70 <ull_aon_read+0x38>)
 8007d48:	2388      	movs	r3, #136	; 0x88
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f7ff ff23 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007d54:	2300      	movs	r3, #0
 8007d56:	461a      	mov	r2, r3
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff ff1d 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007d60:	2200      	movs	r2, #0
 8007d62:	4904      	ldr	r1, [pc, #16]	; (8007d74 <ull_aon_read+0x3c>)
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7ff fb51 	bl	800740c <dwt_read8bitoffsetreg>
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	000a000c 	.word	0x000a000c
 8007d70:	000a0004 	.word	0x000a0004
 8007d74:	000a0008 	.word	0x000a0008

08007d78 <ull_aon_write>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4615      	mov	r5, r2
 8007d80:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007d84:	bf34      	ite	cc
 8007d86:	2600      	movcc	r6, #0
 8007d88:	2620      	movcs	r6, #32
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	490b      	ldr	r1, [pc, #44]	; (8007dbc <ull_aon_write+0x44>)
 8007d8e:	f7ff ff56 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007d92:	462b      	mov	r3, r5
 8007d94:	2200      	movs	r2, #0
 8007d96:	490a      	ldr	r1, [pc, #40]	; (8007dc0 <ull_aon_write+0x48>)
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff fefe 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007d9e:	4d09      	ldr	r5, [pc, #36]	; (8007dc4 <ull_aon_write+0x4c>)
 8007da0:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8007da4:	2200      	movs	r2, #0
 8007da6:	4629      	mov	r1, r5
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7ff fef6 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007dae:	2300      	movs	r3, #0
 8007db0:	461a      	mov	r2, r3
 8007db2:	4629      	mov	r1, r5
 8007db4:	4620      	mov	r0, r4
 8007db6:	f7ff fef0 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	000a000c 	.word	0x000a000c
 8007dc0:	000a0010 	.word	0x000a0010
 8007dc4:	000a0004 	.word	0x000a0004

08007dc8 <ull_configuresleep>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460d      	mov	r5, r1
 8007dce:	4616      	mov	r6, r2
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f240 110b 	movw	r1, #267	; 0x10b
 8007dd6:	f7ff ffcf 	bl	8007d78 <ull_aon_write>
 8007dda:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007dde:	4620      	mov	r0, r4
 8007de0:	f7ff ffaa 	bl	8007d38 <ull_aon_read>
 8007de4:	f000 021f 	and.w	r2, r0, #31
 8007de8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff ffc3 	bl	8007d78 <ull_aon_write>
 8007df2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007df4:	8a5a      	ldrh	r2, [r3, #18]
 8007df6:	4315      	orrs	r5, r2
 8007df8:	825d      	strh	r5, [r3, #18]
 8007dfa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007dfc:	8a5b      	ldrh	r3, [r3, #18]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff ff1a 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007e0a:	4633      	mov	r3, r6
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4902      	ldr	r1, [pc, #8]	; (8007e18 <ull_configuresleep+0x50>)
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff fec2 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	000a0014 	.word	0x000a0014

08007e1c <ull_signal_rx_buff_free>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	4604      	mov	r4, r0
 8007e22:	2200      	movs	r2, #0
 8007e24:	9200      	str	r2, [sp, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	2113      	movs	r1, #19
 8007e2a:	f7ff feab 	bl	8007b84 <dwt_writetodevice>
 8007e2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e30:	7bda      	ldrb	r2, [r3, #15]
 8007e32:	2a03      	cmp	r2, #3
 8007e34:	bf0c      	ite	eq
 8007e36:	2201      	moveq	r2, #1
 8007e38:	2203      	movne	r2, #3
 8007e3a:	73da      	strb	r2, [r3, #15]
 8007e3c:	b002      	add	sp, #8
 8007e3e:	bd10      	pop	{r4, pc}

08007e40 <dwt_write32bitoffsetreg>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	f88d 300c 	strb.w	r3, [sp, #12]
 8007e48:	0a1c      	lsrs	r4, r3, #8
 8007e4a:	f88d 400d 	strb.w	r4, [sp, #13]
 8007e4e:	0c1c      	lsrs	r4, r3, #16
 8007e50:	f88d 400e 	strb.w	r4, [sp, #14]
 8007e54:	0e1b      	lsrs	r3, r3, #24
 8007e56:	f88d 300f 	strb.w	r3, [sp, #15]
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	2304      	movs	r3, #4
 8007e60:	b292      	uxth	r2, r2
 8007e62:	f7ff fe8f 	bl	8007b84 <dwt_writetodevice>
 8007e66:	b004      	add	sp, #16
 8007e68:	bd10      	pop	{r4, pc}
	...

08007e6c <ull_isr>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	2200      	movs	r2, #0
 8007e72:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8007e76:	f7ff fac9 	bl	800740c <dwt_read8bitoffsetreg>
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2144      	movs	r1, #68	; 0x44
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7ff fa9b 	bl	80073bc <dwt_read32bitoffsetreg>
 8007e86:	4606      	mov	r6, r0
 8007e88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	845a      	strh	r2, [r3, #34]	; 0x22
 8007e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007e92:	61da      	str	r2, [r3, #28]
 8007e94:	841a      	strh	r2, [r3, #32]
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28
 8007e98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e9a:	629c      	str	r4, [r3, #40]	; 0x28
 8007e9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e9e:	61d8      	str	r0, [r3, #28]
 8007ea0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007ea2:	7dd3      	ldrb	r3, [r2, #23]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d079      	beq.n	8007fa0 <ull_isr+0x134>
 8007eac:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8007eb0:	d005      	beq.n	8007ebe <ull_isr+0x52>
 8007eb2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007eb6:	f043 0304 	orr.w	r3, r3, #4
 8007eba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007ebe:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007ec2:	d174      	bne.n	8007fae <ull_isr+0x142>
 8007ec4:	f015 0f01 	tst.w	r5, #1
 8007ec8:	f040 80a3 	bne.w	8008012 <ull_isr+0x1a6>
 8007ecc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ed0:	d00b      	beq.n	8007eea <ull_isr+0x7e>
 8007ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed4:	b113      	cbz	r3, 8007edc <ull_isr+0x70>
 8007ed6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007ed8:	301c      	adds	r0, #28
 8007eda:	4798      	blx	r3
 8007edc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	2144      	movs	r1, #68	; 0x44
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7ff feaa 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007eea:	f015 0f08 	tst.w	r5, #8
 8007eee:	f000 80ea 	beq.w	80080c6 <ull_isr+0x25a>
 8007ef2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007efa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007efc:	7bdb      	ldrb	r3, [r3, #15]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f040 8095 	bne.w	800802e <ull_isr+0x1c2>
 8007f04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007f06:	61de      	str	r6, [r3, #28]
 8007f08:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8007f0c:	f000 80a9 	beq.w	8008062 <ull_isr+0x1f6>
 8007f10:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007f12:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007f16:	f043 0308 	orr.w	r3, r3, #8
 8007f1a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007f1e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8007f22:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8007f26:	d008      	beq.n	8007f3a <ull_isr+0xce>
 8007f28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007f2a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007f2e:	f043 0310 	orr.w	r3, r3, #16
 8007f32:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007f36:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8007f3a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8007f3e:	d006      	beq.n	8007f4e <ull_isr+0xe2>
 8007f40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007f42:	7dd3      	ldrb	r3, [r2, #23]
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	f000 8096 	beq.w	800807a <ull_isr+0x20e>
 8007f4e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007f52:	f040 809e 	bne.w	8008092 <ull_isr+0x226>
 8007f56:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2144      	movs	r1, #68	; 0x44
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7ff ff6e 	bl	8007e40 <dwt_write32bitoffsetreg>
 8007f64:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007f66:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 80a1 	bne.w	80080b0 <ull_isr+0x244>
 8007f6e:	7dc3      	ldrb	r3, [r0, #23]
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f000 809b 	beq.w	80080b0 <ull_isr+0x244>
 8007f7a:	69c3      	ldr	r3, [r0, #28]
 8007f7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007f80:	61c3      	str	r3, [r0, #28]
 8007f82:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007f84:	69d3      	ldr	r3, [r2, #28]
 8007f86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f8a:	61d3      	str	r3, [r2, #28]
 8007f8c:	69e3      	ldr	r3, [r4, #28]
 8007f8e:	b113      	cbz	r3, 8007f96 <ull_isr+0x12a>
 8007f90:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007f92:	301c      	adds	r0, #28
 8007f94:	4798      	blx	r3
 8007f96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007f9e:	e08b      	b.n	80080b8 <ull_isr+0x24c>
 8007fa0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007fa4:	bf1c      	itt	ne
 8007fa6:	f045 0508 	orrne.w	r5, r5, #8
 8007faa:	b2ed      	uxtbne	r5, r5
 8007fac:	e77e      	b.n	8007eac <ull_isr+0x40>
 8007fae:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2148      	movs	r1, #72	; 0x48
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7ff fa17 	bl	80073e8 <dwt_read16bitoffsetreg>
 8007fba:	8438      	strh	r0, [r7, #32]
 8007fbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007fbe:	7d9a      	ldrb	r2, [r3, #22]
 8007fc0:	b11a      	cbz	r2, 8007fca <ull_isr+0x15e>
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	f012 0f04 	tst.w	r2, #4
 8007fc8:	d103      	bne.n	8007fd2 <ull_isr+0x166>
 8007fca:	8c1b      	ldrh	r3, [r3, #32]
 8007fcc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007fd0:	b18b      	cbz	r3, 8007ff6 <ull_isr+0x18a>
 8007fd2:	2304      	movs	r3, #4
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2144      	movs	r1, #68	; 0x44
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f7ff fdde 	bl	8007b9a <dwt_write8bitoffsetreg>
 8007fde:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2148      	movs	r1, #72	; 0x48
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff fe29 	bl	8007c3e <dwt_write16bitoffsetreg>
 8007fec:	6a23      	ldr	r3, [r4, #32]
 8007fee:	b113      	cbz	r3, 8007ff6 <ull_isr+0x18a>
 8007ff0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007ff2:	301c      	adds	r0, #28
 8007ff4:	4798      	blx	r3
 8007ff6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007ff8:	8c1b      	ldrh	r3, [r3, #32]
 8007ffa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007ffe:	f43f af61 	beq.w	8007ec4 <ull_isr+0x58>
 8008002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008006:	2200      	movs	r2, #0
 8008008:	2148      	movs	r1, #72	; 0x48
 800800a:	4620      	mov	r0, r4
 800800c:	f7ff fe17 	bl	8007c3e <dwt_write16bitoffsetreg>
 8008010:	e758      	b.n	8007ec4 <ull_isr+0x58>
 8008012:	23f8      	movs	r3, #248	; 0xf8
 8008014:	2200      	movs	r2, #0
 8008016:	2144      	movs	r1, #68	; 0x44
 8008018:	4620      	mov	r0, r4
 800801a:	f7ff fdbe 	bl	8007b9a <dwt_write8bitoffsetreg>
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f43f af53 	beq.w	8007ecc <ull_isr+0x60>
 8008026:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008028:	301c      	adds	r0, #28
 800802a:	4798      	blx	r3
 800802c:	e74e      	b.n	8007ecc <ull_isr+0x60>
 800802e:	493b      	ldr	r1, [pc, #236]	; (800811c <ull_isr+0x2b0>)
 8008030:	4620      	mov	r0, r4
 8008032:	f7ff f9eb 	bl	800740c <dwt_read8bitoffsetreg>
 8008036:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008038:	7bdb      	ldrb	r3, [r3, #15]
 800803a:	2b03      	cmp	r3, #3
 800803c:	bf08      	it	eq
 800803e:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 8008042:	f010 0f01 	tst.w	r0, #1
 8008046:	bf18      	it	ne
 8008048:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800804c:	f010 0f02 	tst.w	r0, #2
 8008050:	bf18      	it	ne
 8008052:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8008056:	f010 0f04 	tst.w	r0, #4
 800805a:	bf18      	it	ne
 800805c:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8008060:	e750      	b.n	8007f04 <ull_isr+0x98>
 8008062:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8008066:	bf1f      	itttt	ne
 8008068:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800806a:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 800806e:	f043 0304 	orrne.w	r3, r3, #4
 8008072:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 8008076:	2700      	movs	r7, #0
 8008078:	e753      	b.n	8007f22 <ull_isr+0xb6>
 800807a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8008086:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008088:	2200      	movs	r2, #0
 800808a:	845a      	strh	r2, [r3, #34]	; 0x22
 800808c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8008090:	e761      	b.n	8007f56 <ull_isr+0xea>
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff fd8e 	bl	8007bb4 <ull_getframelength>
 8008098:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800809c:	f43f af5b 	beq.w	8007f56 <ull_isr+0xea>
 80080a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80080a2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80080ae:	e752      	b.n	8007f56 <ull_isr+0xea>
 80080b0:	6963      	ldr	r3, [r4, #20]
 80080b2:	b10b      	cbz	r3, 80080b8 <ull_isr+0x24c>
 80080b4:	301c      	adds	r0, #28
 80080b6:	4798      	blx	r3
 80080b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80080ba:	7bdb      	ldrb	r3, [r3, #15]
 80080bc:	b953      	cbnz	r3, 80080d4 <ull_isr+0x268>
 80080be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80080c6:	f015 0f10 	tst.w	r5, #16
 80080ca:	d107      	bne.n	80080dc <ull_isr+0x270>
 80080cc:	f015 0f20 	tst.w	r5, #32
 80080d0:	d114      	bne.n	80080fc <ull_isr+0x290>
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	4620      	mov	r0, r4
 80080d6:	f7ff fea1 	bl	8007e1c <ull_signal_rx_buff_free>
 80080da:	e7f0      	b.n	80080be <ull_isr+0x252>
 80080dc:	4b10      	ldr	r3, [pc, #64]	; (8008120 <ull_isr+0x2b4>)
 80080de:	2200      	movs	r2, #0
 80080e0:	2144      	movs	r1, #68	; 0x44
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff feac 	bl	8007e40 <dwt_write32bitoffsetreg>
 80080e8:	69e3      	ldr	r3, [r4, #28]
 80080ea:	b113      	cbz	r3, 80080f2 <ull_isr+0x286>
 80080ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80080ee:	301c      	adds	r0, #28
 80080f0:	4798      	blx	r3
 80080f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80080fa:	e7e7      	b.n	80080cc <ull_isr+0x260>
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <ull_isr+0x2b8>)
 80080fe:	2200      	movs	r2, #0
 8008100:	2144      	movs	r1, #68	; 0x44
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff fe9c 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008108:	69a3      	ldr	r3, [r4, #24]
 800810a:	b113      	cbz	r3, 8008112 <ull_isr+0x2a6>
 800810c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800810e:	301c      	adds	r0, #28
 8008110:	4798      	blx	r3
 8008112:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800811a:	e7da      	b.n	80080d2 <ull_isr+0x266>
 800811c:	00010024 	.word	0x00010024
 8008120:	34059400 	.word	0x34059400
 8008124:	10220400 	.word	0x10220400

08008128 <_dwt_adjust_delaytime>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4604      	mov	r4, r0
 800812c:	b989      	cbnz	r1, 8008152 <_dwt_adjust_delaytime+0x2a>
 800812e:	2200      	movs	r2, #0
 8008130:	212c      	movs	r1, #44	; 0x2c
 8008132:	f7ff f943 	bl	80073bc <dwt_read32bitoffsetreg>
 8008136:	4605      	mov	r5, r0
 8008138:	2201      	movs	r2, #1
 800813a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800813e:	4620      	mov	r0, r4
 8008140:	f7ff f964 	bl	800740c <dwt_read8bitoffsetreg>
 8008144:	1a2b      	subs	r3, r5, r0
 8008146:	2200      	movs	r2, #0
 8008148:	212c      	movs	r1, #44	; 0x2c
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff fe78 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008150:	bd38      	pop	{r3, r4, r5, pc}
 8008152:	2200      	movs	r2, #0
 8008154:	212c      	movs	r1, #44	; 0x2c
 8008156:	f7ff f931 	bl	80073bc <dwt_read32bitoffsetreg>
 800815a:	4605      	mov	r5, r0
 800815c:	2201      	movs	r2, #1
 800815e:	4905      	ldr	r1, [pc, #20]	; (8008174 <_dwt_adjust_delaytime+0x4c>)
 8008160:	4620      	mov	r0, r4
 8008162:	f7ff f953 	bl	800740c <dwt_read8bitoffsetreg>
 8008166:	1a2b      	subs	r3, r5, r0
 8008168:	2200      	movs	r2, #0
 800816a:	212c      	movs	r1, #44	; 0x2c
 800816c:	4620      	mov	r0, r4
 800816e:	f7ff fe67 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008172:	e7ed      	b.n	8008150 <_dwt_adjust_delaytime+0x28>
 8008174:	00010004 	.word	0x00010004

08008178 <ull_setrxaftertxdelay>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	4606      	mov	r6, r0
 800817c:	460c      	mov	r4, r1
 800817e:	4d08      	ldr	r5, [pc, #32]	; (80081a0 <ull_setrxaftertxdelay+0x28>)
 8008180:	2200      	movs	r2, #0
 8008182:	4629      	mov	r1, r5
 8008184:	f7ff f91a 	bl	80073bc <dwt_read32bitoffsetreg>
 8008188:	0d00      	lsrs	r0, r0, #20
 800818a:	0500      	lsls	r0, r0, #20
 800818c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008190:	4303      	orrs	r3, r0
 8008192:	2200      	movs	r2, #0
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff fe52 	bl	8007e40 <dwt_write32bitoffsetreg>
 800819c:	bd70      	pop	{r4, r5, r6, pc}
 800819e:	bf00      	nop
 80081a0:	00010008 	.word	0x00010008

080081a4 <ull_setlnapamode>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4605      	mov	r5, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	2200      	movs	r2, #0
 80081ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80081b0:	f7ff f904 	bl	80073bc <dwt_read32bitoffsetreg>
 80081b4:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <ull_setlnapamode+0x40>)
 80081b6:	4003      	ands	r3, r0
 80081b8:	f014 0f01 	tst.w	r4, #1
 80081bc:	bf18      	it	ne
 80081be:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 80081c2:	f014 0f02 	tst.w	r4, #2
 80081c6:	bf18      	it	ne
 80081c8:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 80081cc:	f014 0f04 	tst.w	r4, #4
 80081d0:	bf18      	it	ne
 80081d2:	f043 0312 	orrne.w	r3, r3, #18
 80081d6:	2200      	movs	r2, #0
 80081d8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80081dc:	4628      	mov	r0, r5
 80081de:	f7ff fe2f 	bl	8007e40 <dwt_write32bitoffsetreg>
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	ffe00fc0 	.word	0xffe00fc0

080081e8 <ull_configurestskey>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4605      	mov	r5, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	680b      	ldr	r3, [r1, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	490b      	ldr	r1, [pc, #44]	; (8008220 <ull_configurestskey+0x38>)
 80081f4:	f7ff fe24 	bl	8007e40 <dwt_write32bitoffsetreg>
 80081f8:	6863      	ldr	r3, [r4, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	4909      	ldr	r1, [pc, #36]	; (8008224 <ull_configurestskey+0x3c>)
 80081fe:	4628      	mov	r0, r5
 8008200:	f7ff fe1e 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008204:	68a3      	ldr	r3, [r4, #8]
 8008206:	2200      	movs	r2, #0
 8008208:	4907      	ldr	r1, [pc, #28]	; (8008228 <ull_configurestskey+0x40>)
 800820a:	4628      	mov	r0, r5
 800820c:	f7ff fe18 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008210:	68e3      	ldr	r3, [r4, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	4905      	ldr	r1, [pc, #20]	; (800822c <ull_configurestskey+0x44>)
 8008216:	4628      	mov	r0, r5
 8008218:	f7ff fe12 	bl	8007e40 <dwt_write32bitoffsetreg>
 800821c:	bd38      	pop	{r3, r4, r5, pc}
 800821e:	bf00      	nop
 8008220:	0002000c 	.word	0x0002000c
 8008224:	00020010 	.word	0x00020010
 8008228:	00020014 	.word	0x00020014
 800822c:	00020018 	.word	0x00020018

08008230 <ull_configurestsiv>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	460c      	mov	r4, r1
 8008236:	680b      	ldr	r3, [r1, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	490b      	ldr	r1, [pc, #44]	; (8008268 <ull_configurestsiv+0x38>)
 800823c:	f7ff fe00 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008240:	6863      	ldr	r3, [r4, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	4909      	ldr	r1, [pc, #36]	; (800826c <ull_configurestsiv+0x3c>)
 8008246:	4628      	mov	r0, r5
 8008248:	f7ff fdfa 	bl	8007e40 <dwt_write32bitoffsetreg>
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	4907      	ldr	r1, [pc, #28]	; (8008270 <ull_configurestsiv+0x40>)
 8008252:	4628      	mov	r0, r5
 8008254:	f7ff fdf4 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008258:	68e3      	ldr	r3, [r4, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	4905      	ldr	r1, [pc, #20]	; (8008274 <ull_configurestsiv+0x44>)
 800825e:	4628      	mov	r0, r5
 8008260:	f7ff fdee 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	bf00      	nop
 8008268:	0002001c 	.word	0x0002001c
 800826c:	00020020 	.word	0x00020020
 8008270:	00020024 	.word	0x00020024
 8008274:	00020028 	.word	0x00020028

08008278 <ull_configmrxlut>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	4604      	mov	r4, r0
 800827e:	2905      	cmp	r1, #5
 8008280:	d040      	beq.n	8008304 <ull_configmrxlut+0x8c>
 8008282:	4d26      	ldr	r5, [pc, #152]	; (800831c <ull_configmrxlut+0xa4>)
 8008284:	462e      	mov	r6, r5
 8008286:	4f26      	ldr	r7, [pc, #152]	; (8008320 <ull_configmrxlut+0xa8>)
 8008288:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8008364 <ull_configmrxlut+0xec>
 800828c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8008368 <ull_configmrxlut+0xf0>
 8008290:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800836c <ull_configmrxlut+0xf4>
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <ull_configmrxlut+0xac>)
 8008296:	2200      	movs	r2, #0
 8008298:	4923      	ldr	r1, [pc, #140]	; (8008328 <ull_configmrxlut+0xb0>)
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff fdd0 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082a0:	4653      	mov	r3, sl
 80082a2:	2200      	movs	r2, #0
 80082a4:	4921      	ldr	r1, [pc, #132]	; (800832c <ull_configmrxlut+0xb4>)
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7ff fdca 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082ac:	464b      	mov	r3, r9
 80082ae:	2200      	movs	r2, #0
 80082b0:	491f      	ldr	r1, [pc, #124]	; (8008330 <ull_configmrxlut+0xb8>)
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fdc4 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082b8:	4643      	mov	r3, r8
 80082ba:	2200      	movs	r2, #0
 80082bc:	491d      	ldr	r1, [pc, #116]	; (8008334 <ull_configmrxlut+0xbc>)
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff fdbe 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082c4:	463b      	mov	r3, r7
 80082c6:	2200      	movs	r2, #0
 80082c8:	491b      	ldr	r1, [pc, #108]	; (8008338 <ull_configmrxlut+0xc0>)
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff fdb8 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082d0:	4633      	mov	r3, r6
 80082d2:	2200      	movs	r2, #0
 80082d4:	4919      	ldr	r1, [pc, #100]	; (800833c <ull_configmrxlut+0xc4>)
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7ff fdb2 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082dc:	462b      	mov	r3, r5
 80082de:	2200      	movs	r2, #0
 80082e0:	4917      	ldr	r1, [pc, #92]	; (8008340 <ull_configmrxlut+0xc8>)
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff fdac 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082e8:	4b16      	ldr	r3, [pc, #88]	; (8008344 <ull_configmrxlut+0xcc>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	4916      	ldr	r1, [pc, #88]	; (8008348 <ull_configmrxlut+0xd0>)
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff fda6 	bl	8007e40 <dwt_write32bitoffsetreg>
 80082f4:	4b15      	ldr	r3, [pc, #84]	; (800834c <ull_configmrxlut+0xd4>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	4915      	ldr	r1, [pc, #84]	; (8008350 <ull_configmrxlut+0xd8>)
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff fda0 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	4d13      	ldr	r5, [pc, #76]	; (8008354 <ull_configmrxlut+0xdc>)
 8008306:	4e14      	ldr	r6, [pc, #80]	; (8008358 <ull_configmrxlut+0xe0>)
 8008308:	4f14      	ldr	r7, [pc, #80]	; (800835c <ull_configmrxlut+0xe4>)
 800830a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8008370 <ull_configmrxlut+0xf8>
 800830e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8008374 <ull_configmrxlut+0xfc>
 8008312:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008378 <ull_configmrxlut+0x100>
 8008316:	4b12      	ldr	r3, [pc, #72]	; (8008360 <ull_configmrxlut+0xe8>)
 8008318:	e7bd      	b.n	8008296 <ull_configmrxlut+0x1e>
 800831a:	bf00      	nop
 800831c:	0002afb5 	.word	0x0002afb5
 8008320:	0002af7d 	.word	0x0002af7d
 8008324:	0002a8fe 	.word	0x0002a8fe
 8008328:	00030038 	.word	0x00030038
 800832c:	0003003c 	.word	0x0003003c
 8008330:	00030040 	.word	0x00030040
 8008334:	00030044 	.word	0x00030044
 8008338:	00030048 	.word	0x00030048
 800833c:	0003004c 	.word	0x0003004c
 8008340:	00030050 	.word	0x00030050
 8008344:	10000240 	.word	0x10000240
 8008348:	0003001c 	.word	0x0003001c
 800834c:	1b6da489 	.word	0x1b6da489
 8008350:	00030020 	.word	0x00030020
 8008354:	0001cff5 	.word	0x0001cff5
 8008358:	0001cfb5 	.word	0x0001cfb5
 800835c:	0001cf36 	.word	0x0001cf36
 8008360:	0001c0fd 	.word	0x0001c0fd
 8008364:	0002af3e 	.word	0x0002af3e
 8008368:	0002a5fe 	.word	0x0002a5fe
 800836c:	0002ac36 	.word	0x0002ac36
 8008370:	0001c77e 	.word	0x0001c77e
 8008374:	0001c6be 	.word	0x0001c6be
 8008378:	0001c43e 	.word	0x0001c43e

0800837c <ull_disable_rftx_blocks>:
 800837c:	b508      	push	{r3, lr}
 800837e:	2300      	movs	r3, #0
 8008380:	461a      	mov	r2, r3
 8008382:	4902      	ldr	r1, [pc, #8]	; (800838c <ull_disable_rftx_blocks+0x10>)
 8008384:	f7ff fd5c 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008388:	bd08      	pop	{r3, pc}
 800838a:	bf00      	nop
 800838c:	00070004 	.word	0x00070004

08008390 <ull_disable_rf_tx>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4604      	mov	r4, r0
 8008394:	460d      	mov	r5, r1
 8008396:	2300      	movs	r3, #0
 8008398:	461a      	mov	r2, r3
 800839a:	490a      	ldr	r1, [pc, #40]	; (80083c4 <ull_disable_rf_tx+0x34>)
 800839c:	f7ff fd50 	bl	8007e40 <dwt_write32bitoffsetreg>
 80083a0:	2300      	movs	r3, #0
 80083a2:	461a      	mov	r2, r3
 80083a4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff fd49 	bl	8007e40 <dwt_write32bitoffsetreg>
 80083ae:	b905      	cbnz	r5, 80083b2 <ull_disable_rf_tx+0x22>
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80083b6:	2200      	movs	r2, #0
 80083b8:	4903      	ldr	r1, [pc, #12]	; (80083c8 <ull_disable_rf_tx+0x38>)
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff fd40 	bl	8007e40 <dwt_write32bitoffsetreg>
 80083c0:	e7f6      	b.n	80083b0 <ull_disable_rf_tx+0x20>
 80083c2:	bf00      	nop
 80083c4:	00070048 	.word	0x00070048
 80083c8:	00070014 	.word	0x00070014

080083cc <ull_readrxdata>:
 80083cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ce:	b083      	sub	sp, #12
 80083d0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80083d2:	7be4      	ldrb	r4, [r4, #15]
 80083d4:	2c03      	cmp	r4, #3
 80083d6:	bf0c      	ite	eq
 80083d8:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 80083dc:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 80083e0:	189c      	adds	r4, r3, r2
 80083e2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80083e6:	da19      	bge.n	800841c <ull_readrxdata+0x50>
 80083e8:	461d      	mov	r5, r3
 80083ea:	4616      	mov	r6, r2
 80083ec:	460f      	mov	r7, r1
 80083ee:	4604      	mov	r4, r0
 80083f0:	2b7f      	cmp	r3, #127	; 0x7f
 80083f2:	d915      	bls.n	8008420 <ull_readrxdata+0x54>
 80083f4:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80083f8:	2200      	movs	r2, #0
 80083fa:	490d      	ldr	r1, [pc, #52]	; (8008430 <ull_readrxdata+0x64>)
 80083fc:	f7ff fd20 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008400:	462b      	mov	r3, r5
 8008402:	2200      	movs	r2, #0
 8008404:	490b      	ldr	r1, [pc, #44]	; (8008434 <ull_readrxdata+0x68>)
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff fd1a 	bl	8007e40 <dwt_write32bitoffsetreg>
 800840c:	9700      	str	r7, [sp, #0]
 800840e:	4633      	mov	r3, r6
 8008410:	2200      	movs	r2, #0
 8008412:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8008416:	4620      	mov	r0, r4
 8008418:	f7fe ffc6 	bl	80073a8 <dwt_readfromdevice>
 800841c:	b003      	add	sp, #12
 800841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008420:	9100      	str	r1, [sp, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	462a      	mov	r2, r5
 8008426:	4661      	mov	r1, ip
 8008428:	f7fe ffbe 	bl	80073a8 <dwt_readfromdevice>
 800842c:	e7f6      	b.n	800841c <ull_readrxdata+0x50>
 800842e:	bf00      	nop
 8008430:	001f0004 	.word	0x001f0004
 8008434:	001f0008 	.word	0x001f0008

08008438 <ull_rxenable>:
 8008438:	b530      	push	{r4, r5, lr}
 800843a:	b083      	sub	sp, #12
 800843c:	4605      	mov	r5, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b171      	cbz	r1, 8008460 <ull_rxenable+0x28>
 8008442:	f021 0302 	bic.w	r3, r1, #2
 8008446:	3b01      	subs	r3, #1
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d856      	bhi.n	80084fa <ull_rxenable+0xc2>
 800844c:	e8df f003 	tbb	[pc, r3]
 8008450:	21555510 	.word	0x21555510
 8008454:	28555555 	.word	0x28555555
 8008458:	55555555 	.word	0x55555555
 800845c:	33555555 	.word	0x33555555
 8008460:	2200      	movs	r2, #0
 8008462:	9200      	str	r2, [sp, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	2102      	movs	r1, #2
 8008468:	f7ff fb8c 	bl	8007b84 <dwt_writetodevice>
 800846c:	4620      	mov	r0, r4
 800846e:	e00e      	b.n	800848e <ull_rxenable+0x56>
 8008470:	2200      	movs	r2, #0
 8008472:	9200      	str	r2, [sp, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	2104      	movs	r1, #4
 8008478:	f7ff fb84 	bl	8007b84 <dwt_writetodevice>
 800847c:	2203      	movs	r2, #3
 800847e:	2144      	movs	r1, #68	; 0x44
 8008480:	4628      	mov	r0, r5
 8008482:	f7fe ffc3 	bl	800740c <dwt_read8bitoffsetreg>
 8008486:	f010 0f08 	tst.w	r0, #8
 800848a:	d11f      	bne.n	80084cc <ull_rxenable+0x94>
 800848c:	2000      	movs	r0, #0
 800848e:	b003      	add	sp, #12
 8008490:	bd30      	pop	{r4, r5, pc}
 8008492:	2200      	movs	r2, #0
 8008494:	9200      	str	r2, [sp, #0]
 8008496:	4613      	mov	r3, r2
 8008498:	210a      	movs	r1, #10
 800849a:	f7ff fb73 	bl	8007b84 <dwt_writetodevice>
 800849e:	e7ed      	b.n	800847c <ull_rxenable+0x44>
 80084a0:	2100      	movs	r1, #0
 80084a2:	f7ff fe41 	bl	8008128 <_dwt_adjust_delaytime>
 80084a6:	2200      	movs	r2, #0
 80084a8:	9200      	str	r2, [sp, #0]
 80084aa:	4613      	mov	r3, r2
 80084ac:	2108      	movs	r1, #8
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7ff fb68 	bl	8007b84 <dwt_writetodevice>
 80084b4:	e7e2      	b.n	800847c <ull_rxenable+0x44>
 80084b6:	2101      	movs	r1, #1
 80084b8:	f7ff fe36 	bl	8008128 <_dwt_adjust_delaytime>
 80084bc:	2200      	movs	r2, #0
 80084be:	9200      	str	r2, [sp, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	2106      	movs	r1, #6
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7ff fb5d 	bl	8007b84 <dwt_writetodevice>
 80084ca:	e7d7      	b.n	800847c <ull_rxenable+0x44>
 80084cc:	2100      	movs	r1, #0
 80084ce:	9100      	str	r1, [sp, #0]
 80084d0:	460b      	mov	r3, r1
 80084d2:	460a      	mov	r2, r1
 80084d4:	4628      	mov	r0, r5
 80084d6:	f7ff fb55 	bl	8007b84 <dwt_writetodevice>
 80084da:	f014 0f02 	tst.w	r4, #2
 80084de:	d002      	beq.n	80084e6 <ull_rxenable+0xae>
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	e7d3      	b.n	800848e <ull_rxenable+0x56>
 80084e6:	2200      	movs	r2, #0
 80084e8:	9200      	str	r2, [sp, #0]
 80084ea:	4613      	mov	r3, r2
 80084ec:	2102      	movs	r1, #2
 80084ee:	4628      	mov	r0, r5
 80084f0:	f7ff fb48 	bl	8007b84 <dwt_writetodevice>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e7c9      	b.n	800848e <ull_rxenable+0x56>
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	e7c6      	b.n	800848e <ull_rxenable+0x56>

08008500 <ull_writetxdata>:
 8008500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008502:	b083      	sub	sp, #12
 8008504:	185c      	adds	r4, r3, r1
 8008506:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800850a:	da24      	bge.n	8008556 <ull_writetxdata+0x56>
 800850c:	461c      	mov	r4, r3
 800850e:	4617      	mov	r7, r2
 8008510:	460e      	mov	r6, r1
 8008512:	4605      	mov	r5, r0
 8008514:	2b7f      	cmp	r3, #127	; 0x7f
 8008516:	d915      	bls.n	8008544 <ull_writetxdata+0x44>
 8008518:	2314      	movs	r3, #20
 800851a:	2200      	movs	r2, #0
 800851c:	490f      	ldr	r1, [pc, #60]	; (800855c <ull_writetxdata+0x5c>)
 800851e:	f7ff fc8f 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008522:	4623      	mov	r3, r4
 8008524:	2200      	movs	r2, #0
 8008526:	490e      	ldr	r1, [pc, #56]	; (8008560 <ull_writetxdata+0x60>)
 8008528:	4628      	mov	r0, r5
 800852a:	f7ff fc89 	bl	8007e40 <dwt_write32bitoffsetreg>
 800852e:	9700      	str	r7, [sp, #0]
 8008530:	4633      	mov	r3, r6
 8008532:	2200      	movs	r2, #0
 8008534:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8008538:	4628      	mov	r0, r5
 800853a:	f7ff fb23 	bl	8007b84 <dwt_writetodevice>
 800853e:	2000      	movs	r0, #0
 8008540:	b003      	add	sp, #12
 8008542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008544:	9200      	str	r2, [sp, #0]
 8008546:	460b      	mov	r3, r1
 8008548:	4622      	mov	r2, r4
 800854a:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800854e:	f7ff fb19 	bl	8007b84 <dwt_writetodevice>
 8008552:	2000      	movs	r0, #0
 8008554:	e7f4      	b.n	8008540 <ull_writetxdata+0x40>
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	e7f1      	b.n	8008540 <ull_writetxdata+0x40>
 800855c:	001f0004 	.word	0x001f0004
 8008560:	001f0008 	.word	0x001f0008

08008564 <dwt_modify32bitoffsetreg>:
 8008564:	b530      	push	{r4, r5, lr}
 8008566:	b085      	sub	sp, #20
 8008568:	9c08      	ldr	r4, [sp, #32]
 800856a:	f88d 3008 	strb.w	r3, [sp, #8]
 800856e:	0a1d      	lsrs	r5, r3, #8
 8008570:	f88d 5009 	strb.w	r5, [sp, #9]
 8008574:	0c1d      	lsrs	r5, r3, #16
 8008576:	f88d 500a 	strb.w	r5, [sp, #10]
 800857a:	0e1b      	lsrs	r3, r3, #24
 800857c:	f88d 300b 	strb.w	r3, [sp, #11]
 8008580:	f88d 400c 	strb.w	r4, [sp, #12]
 8008584:	0a23      	lsrs	r3, r4, #8
 8008586:	f88d 300d 	strb.w	r3, [sp, #13]
 800858a:	0c23      	lsrs	r3, r4, #16
 800858c:	f88d 300e 	strb.w	r3, [sp, #14]
 8008590:	0e24      	lsrs	r4, r4, #24
 8008592:	f88d 400f 	strb.w	r4, [sp, #15]
 8008596:	f248 0303 	movw	r3, #32771	; 0x8003
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	ab02      	add	r3, sp, #8
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	2308      	movs	r3, #8
 80085a2:	b292      	uxth	r2, r2
 80085a4:	f7fe fe7d 	bl	80072a2 <dwt_xfer3xxx>
 80085a8:	b005      	add	sp, #20
 80085aa:	bd30      	pop	{r4, r5, pc}

080085ac <_dwt_kick_dgc_on_wakeup>:
 80085ac:	b500      	push	{lr}
 80085ae:	b083      	sub	sp, #12
 80085b0:	2905      	cmp	r1, #5
 80085b2:	d004      	beq.n	80085be <_dwt_kick_dgc_on_wakeup+0x12>
 80085b4:	2909      	cmp	r1, #9
 80085b6:	d00b      	beq.n	80085d0 <_dwt_kick_dgc_on_wakeup+0x24>
 80085b8:	b003      	add	sp, #12
 80085ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 80085c6:	2200      	movs	r2, #0
 80085c8:	4906      	ldr	r1, [pc, #24]	; (80085e4 <_dwt_kick_dgc_on_wakeup+0x38>)
 80085ca:	f7ff ffcb 	bl	8008564 <dwt_modify32bitoffsetreg>
 80085ce:	e7f3      	b.n	80085b8 <_dwt_kick_dgc_on_wakeup+0xc>
 80085d0:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 80085da:	2200      	movs	r2, #0
 80085dc:	4901      	ldr	r1, [pc, #4]	; (80085e4 <_dwt_kick_dgc_on_wakeup+0x38>)
 80085de:	f7ff ffc1 	bl	8008564 <dwt_modify32bitoffsetreg>
 80085e2:	e7e9      	b.n	80085b8 <_dwt_kick_dgc_on_wakeup+0xc>
 80085e4:	000b0008 	.word	0x000b0008

080085e8 <ull_enable_rf_tx>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	4604      	mov	r4, r0
 80085ee:	460e      	mov	r6, r1
 80085f0:	4d13      	ldr	r5, [pc, #76]	; (8008640 <ull_enable_rf_tx+0x58>)
 80085f2:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	2200      	movs	r2, #0
 80085fe:	4629      	mov	r1, r5
 8008600:	f7ff ffb0 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008604:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
 800860e:	2200      	movs	r2, #0
 8008610:	4629      	mov	r1, r5
 8008612:	4620      	mov	r0, r4
 8008614:	f7ff ffa6 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <ull_enable_rf_tx+0x5c>)
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	f04f 33ff 	mov.w	r3, #4294967295
 8008620:	2200      	movs	r2, #0
 8008622:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff ff9c 	bl	8008564 <dwt_modify32bitoffsetreg>
 800862c:	b90e      	cbnz	r6, 8008632 <ull_enable_rf_tx+0x4a>
 800862e:	b002      	add	sp, #8
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <ull_enable_rf_tx+0x60>)
 8008634:	2200      	movs	r2, #0
 8008636:	4905      	ldr	r1, [pc, #20]	; (800864c <ull_enable_rf_tx+0x64>)
 8008638:	4620      	mov	r0, r4
 800863a:	f7ff fc01 	bl	8007e40 <dwt_write32bitoffsetreg>
 800863e:	e7f6      	b.n	800862e <ull_enable_rf_tx+0x46>
 8008640:	00070048 	.word	0x00070048
 8008644:	02003c00 	.word	0x02003c00
 8008648:	01011100 	.word	0x01011100
 800864c:	00070014 	.word	0x00070014

08008650 <ull_enable_rftx_blocks>:
 8008650:	b500      	push	{lr}
 8008652:	b083      	sub	sp, #12
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <ull_enable_rftx_blocks+0x1c>)
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	f04f 33ff 	mov.w	r3, #4294967295
 800865c:	2200      	movs	r2, #0
 800865e:	4904      	ldr	r1, [pc, #16]	; (8008670 <ull_enable_rftx_blocks+0x20>)
 8008660:	f7ff ff80 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008664:	b003      	add	sp, #12
 8008666:	f85d fb04 	ldr.w	pc, [sp], #4
 800866a:	bf00      	nop
 800866c:	02003c00 	.word	0x02003c00
 8008670:	00070004 	.word	0x00070004

08008674 <_dwt_otpprogword32>:
 8008674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008678:	b083      	sub	sp, #12
 800867a:	4604      	mov	r4, r0
 800867c:	460d      	mov	r5, r1
 800867e:	4617      	mov	r7, r2
 8008680:	4e56      	ldr	r6, [pc, #344]	; (80087dc <_dwt_otpprogword32+0x168>)
 8008682:	2200      	movs	r2, #0
 8008684:	4631      	mov	r1, r6
 8008686:	f7fe fe99 	bl	80073bc <dwt_read32bitoffsetreg>
 800868a:	4681      	mov	r9, r0
 800868c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	2200      	movs	r2, #0
 8008698:	4631      	mov	r1, r6
 800869a:	4620      	mov	r0, r4
 800869c:	f7ff ff62 	bl	8008564 <dwt_modify32bitoffsetreg>
 80086a0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80087e0 <_dwt_otpprogword32+0x16c>
 80086a4:	2318      	movs	r3, #24
 80086a6:	2200      	movs	r2, #0
 80086a8:	4641      	mov	r1, r8
 80086aa:	4620      	mov	r0, r4
 80086ac:	f7ff fac7 	bl	8007c3e <dwt_write16bitoffsetreg>
 80086b0:	2125      	movs	r1, #37	; 0x25
 80086b2:	4620      	mov	r0, r4
 80086b4:	f7ff fb0a 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086b8:	2102      	movs	r1, #2
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff fb06 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086c0:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7ff fb01 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086ca:	b2f9      	uxtb	r1, r7
 80086cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fafb 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086da:	4620      	mov	r0, r4
 80086dc:	f7ff faf6 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086e0:	2100      	movs	r1, #0
 80086e2:	4620      	mov	r0, r4
 80086e4:	f7ff faf2 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086e8:	2102      	movs	r1, #2
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff faee 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086f0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7ff fae9 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80086fa:	b2e9      	uxtb	r1, r5
 80086fc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fae3 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008706:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800870a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800870e:	4620      	mov	r0, r4
 8008710:	f7ff fadc 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008714:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8008718:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800871c:	4620      	mov	r0, r4
 800871e:	f7ff fad5 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008722:	0e29      	lsrs	r1, r5, #24
 8008724:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008728:	4620      	mov	r0, r4
 800872a:	f7ff facf 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 800872e:	2100      	movs	r1, #0
 8008730:	4620      	mov	r0, r4
 8008732:	f7ff facb 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008736:	213a      	movs	r1, #58	; 0x3a
 8008738:	4620      	mov	r0, r4
 800873a:	f7ff fac7 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 800873e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008742:	4620      	mov	r0, r4
 8008744:	f7ff fac2 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008748:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800874c:	4620      	mov	r0, r4
 800874e:	f7ff fabd 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008752:	2100      	movs	r1, #0
 8008754:	4620      	mov	r0, r4
 8008756:	f7ff fab9 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 800875a:	213a      	movs	r1, #58	; 0x3a
 800875c:	4620      	mov	r0, r4
 800875e:	f7ff fab5 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008762:	f240 1101 	movw	r1, #257	; 0x101
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff fab0 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 800876c:	2302      	movs	r3, #2
 800876e:	2200      	movs	r2, #0
 8008770:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8008774:	4620      	mov	r0, r4
 8008776:	f7ff fa62 	bl	8007c3e <dwt_write16bitoffsetreg>
 800877a:	2300      	movs	r3, #0
 800877c:	461a      	mov	r2, r3
 800877e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8008782:	4620      	mov	r0, r4
 8008784:	f7ff fa5b 	bl	8007c3e <dwt_write16bitoffsetreg>
 8008788:	2002      	movs	r0, #2
 800878a:	f7f8 fe83 	bl	8001494 <deca_sleep>
 800878e:	213a      	movs	r1, #58	; 0x3a
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fa9b 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 8008796:	f44f 7181 	mov.w	r1, #258	; 0x102
 800879a:	4620      	mov	r0, r4
 800879c:	f7ff fa96 	bl	8007ccc <__dwt_otp_write_wdata_id_reg>
 80087a0:	2302      	movs	r3, #2
 80087a2:	2200      	movs	r2, #0
 80087a4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7ff fa48 	bl	8007c3e <dwt_write16bitoffsetreg>
 80087ae:	2300      	movs	r3, #0
 80087b0:	461a      	mov	r2, r3
 80087b2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7ff fa41 	bl	8007c3e <dwt_write16bitoffsetreg>
 80087bc:	2300      	movs	r3, #0
 80087be:	461a      	mov	r2, r3
 80087c0:	4641      	mov	r1, r8
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fa3b 	bl	8007c3e <dwt_write16bitoffsetreg>
 80087c8:	464b      	mov	r3, r9
 80087ca:	2200      	movs	r2, #0
 80087cc:	4631      	mov	r1, r6
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff fb36 	bl	8007e40 <dwt_write32bitoffsetreg>
 80087d4:	b003      	add	sp, #12
 80087d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087da:	bf00      	nop
 80087dc:	00070044 	.word	0x00070044
 80087e0:	000b0008 	.word	0x000b0008

080087e4 <ull_setgpiomode>:
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	b083      	sub	sp, #12
 80087e8:	2400      	movs	r4, #0
 80087ea:	4623      	mov	r3, r4
 80087ec:	2601      	movs	r6, #1
 80087ee:	2707      	movs	r7, #7
 80087f0:	e002      	b.n	80087f8 <ull_setgpiomode+0x14>
 80087f2:	3401      	adds	r4, #1
 80087f4:	2c09      	cmp	r4, #9
 80087f6:	d009      	beq.n	800880c <ull_setgpiomode+0x28>
 80087f8:	fa06 f504 	lsl.w	r5, r6, r4
 80087fc:	420d      	tst	r5, r1
 80087fe:	d0f8      	beq.n	80087f2 <ull_setgpiomode+0xe>
 8008800:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8008804:	fa07 f505 	lsl.w	r5, r7, r5
 8008808:	432b      	orrs	r3, r5
 800880a:	e7f2      	b.n	80087f2 <ull_setgpiomode+0xe>
 800880c:	401a      	ands	r2, r3
 800880e:	9200      	str	r2, [sp, #0]
 8008810:	43db      	mvns	r3, r3
 8008812:	2200      	movs	r2, #0
 8008814:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008818:	f7ff fea4 	bl	8008564 <dwt_modify32bitoffsetreg>
 800881c:	b003      	add	sp, #12
 800881e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008820 <ull_setinterrupt>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	4604      	mov	r4, r0
 8008828:	4688      	mov	r8, r1
 800882a:	4617      	mov	r7, r2
 800882c:	461d      	mov	r5, r3
 800882e:	f7f8 fe13 	bl	8001458 <decamutexon>
 8008832:	4606      	mov	r6, r0
 8008834:	2d02      	cmp	r5, #2
 8008836:	d02d      	beq.n	8008894 <ull_setinterrupt+0x74>
 8008838:	2d01      	cmp	r5, #1
 800883a:	d038      	beq.n	80088ae <ull_setinterrupt+0x8e>
 800883c:	2500      	movs	r5, #0
 800883e:	9500      	str	r5, [sp, #0]
 8008840:	ea6f 0308 	mvn.w	r3, r8
 8008844:	462a      	mov	r2, r5
 8008846:	213c      	movs	r1, #60	; 0x3c
 8008848:	4620      	mov	r0, r4
 800884a:	f7ff fe8b 	bl	8008564 <dwt_modify32bitoffsetreg>
 800884e:	9500      	str	r5, [sp, #0]
 8008850:	43fb      	mvns	r3, r7
 8008852:	462a      	mov	r2, r5
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	4620      	mov	r0, r4
 8008858:	f7ff fe84 	bl	8008564 <dwt_modify32bitoffsetreg>
 800885c:	2200      	movs	r2, #0
 800885e:	213c      	movs	r1, #60	; 0x3c
 8008860:	4620      	mov	r0, r4
 8008862:	f7fe fdab 	bl	80073bc <dwt_read32bitoffsetreg>
 8008866:	4603      	mov	r3, r0
 8008868:	2200      	movs	r2, #0
 800886a:	2144      	movs	r1, #68	; 0x44
 800886c:	4620      	mov	r0, r4
 800886e:	f7ff fae7 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008872:	2200      	movs	r2, #0
 8008874:	2140      	movs	r1, #64	; 0x40
 8008876:	4620      	mov	r0, r4
 8008878:	f7fe fda0 	bl	80073bc <dwt_read32bitoffsetreg>
 800887c:	4603      	mov	r3, r0
 800887e:	2200      	movs	r2, #0
 8008880:	2148      	movs	r1, #72	; 0x48
 8008882:	4620      	mov	r0, r4
 8008884:	f7ff fadc 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008888:	4630      	mov	r0, r6
 800888a:	f7f8 fdf6 	bl	800147a <decamutexoff>
 800888e:	b002      	add	sp, #8
 8008890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008894:	4643      	mov	r3, r8
 8008896:	2200      	movs	r2, #0
 8008898:	213c      	movs	r1, #60	; 0x3c
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff fad0 	bl	8007e40 <dwt_write32bitoffsetreg>
 80088a0:	463b      	mov	r3, r7
 80088a2:	2200      	movs	r2, #0
 80088a4:	2140      	movs	r1, #64	; 0x40
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff faca 	bl	8007e40 <dwt_write32bitoffsetreg>
 80088ac:	e7d6      	b.n	800885c <ull_setinterrupt+0x3c>
 80088ae:	f8cd 8000 	str.w	r8, [sp]
 80088b2:	f04f 33ff 	mov.w	r3, #4294967295
 80088b6:	2200      	movs	r2, #0
 80088b8:	213c      	movs	r1, #60	; 0x3c
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff fe52 	bl	8008564 <dwt_modify32bitoffsetreg>
 80088c0:	9700      	str	r7, [sp, #0]
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	2200      	movs	r2, #0
 80088c8:	2140      	movs	r1, #64	; 0x40
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fe4a 	bl	8008564 <dwt_modify32bitoffsetreg>
 80088d0:	e7c4      	b.n	800885c <ull_setinterrupt+0x3c>
	...

080088d4 <ull_writetxfctrl>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	4604      	mov	r4, r0
 80088da:	2a7f      	cmp	r2, #127	; 0x7f
 80088dc:	d912      	bls.n	8008904 <ull_writetxfctrl+0x30>
 80088de:	3280      	adds	r2, #128	; 0x80
 80088e0:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 80088e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088e8:	9100      	str	r1, [sp, #0]
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <ull_writetxfctrl+0x48>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	2124      	movs	r1, #36	; 0x24
 80088f0:	f7ff fe38 	bl	8008564 <dwt_modify32bitoffsetreg>
 80088f4:	2200      	movs	r2, #0
 80088f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7fe fd86 	bl	800740c <dwt_read8bitoffsetreg>
 8008900:	b002      	add	sp, #8
 8008902:	bd10      	pop	{r4, pc}
 8008904:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8008908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800890c:	9100      	str	r1, [sp, #0]
 800890e:	4b03      	ldr	r3, [pc, #12]	; (800891c <ull_writetxfctrl+0x48>)
 8008910:	2200      	movs	r2, #0
 8008912:	2124      	movs	r1, #36	; 0x24
 8008914:	f7ff fe26 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008918:	e7f2      	b.n	8008900 <ull_writetxfctrl+0x2c>
 800891a:	bf00      	nop
 800891c:	fc00f400 	.word	0xfc00f400

08008920 <prs_sys_status_and_or>:
 8008920:	b500      	push	{lr}
 8008922:	b083      	sub	sp, #12
 8008924:	9200      	str	r2, [sp, #0]
 8008926:	460b      	mov	r3, r1
 8008928:	2200      	movs	r2, #0
 800892a:	2144      	movs	r1, #68	; 0x44
 800892c:	f7ff fe1a 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008930:	2000      	movs	r0, #0
 8008932:	b003      	add	sp, #12
 8008934:	f85d fb04 	ldr.w	pc, [sp], #4

08008938 <dwt_modify8bitoffsetreg>:
 8008938:	b500      	push	{lr}
 800893a:	b085      	sub	sp, #20
 800893c:	f88d 300c 	strb.w	r3, [sp, #12]
 8008940:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008944:	f88d 300d 	strb.w	r3, [sp, #13]
 8008948:	f248 0301 	movw	r3, #32769	; 0x8001
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	ab03      	add	r3, sp, #12
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	2302      	movs	r3, #2
 8008954:	b292      	uxth	r2, r2
 8008956:	f7fe fca4 	bl	80072a2 <dwt_xfer3xxx>
 800895a:	b005      	add	sp, #20
 800895c:	f85d fb04 	ldr.w	pc, [sp], #4

08008960 <ull_configciadiag>:
 8008960:	b530      	push	{r4, r5, lr}
 8008962:	b083      	sub	sp, #12
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	f011 0f01 	tst.w	r1, #1
 800896c:	d015      	beq.n	800899a <ull_configciadiag+0x3a>
 800896e:	2300      	movs	r3, #0
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	23ef      	movs	r3, #239	; 0xef
 8008974:	2202      	movs	r2, #2
 8008976:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800897a:	f7ff ffdd 	bl	8008938 <dwt_modify8bitoffsetreg>
 800897e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008980:	761d      	strb	r5, [r3, #24]
 8008982:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008984:	7e1b      	ldrb	r3, [r3, #24]
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	d010      	beq.n	80089ac <ull_configciadiag+0x4c>
 800898a:	086b      	lsrs	r3, r5, #1
 800898c:	2200      	movs	r2, #0
 800898e:	490e      	ldr	r1, [pc, #56]	; (80089c8 <ull_configciadiag+0x68>)
 8008990:	4620      	mov	r0, r4
 8008992:	f7ff f902 	bl	8007b9a <dwt_write8bitoffsetreg>
 8008996:	b003      	add	sp, #12
 8008998:	bd30      	pop	{r4, r5, pc}
 800899a:	2310      	movs	r3, #16
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	23ff      	movs	r3, #255	; 0xff
 80089a0:	2202      	movs	r2, #2
 80089a2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80089a6:	f7ff ffc7 	bl	8008938 <dwt_modify8bitoffsetreg>
 80089aa:	e7e8      	b.n	800897e <ull_configciadiag+0x1e>
 80089ac:	2301      	movs	r3, #1
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	23ff      	movs	r3, #255	; 0xff
 80089b2:	2200      	movs	r2, #0
 80089b4:	4904      	ldr	r1, [pc, #16]	; (80089c8 <ull_configciadiag+0x68>)
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7ff ffbe 	bl	8008938 <dwt_modify8bitoffsetreg>
 80089bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80089be:	7e13      	ldrb	r3, [r2, #24]
 80089c0:	f043 0302 	orr.w	r3, r3, #2
 80089c4:	7613      	strb	r3, [r2, #24]
 80089c6:	e7e6      	b.n	8008996 <ull_configciadiag+0x36>
 80089c8:	00010028 	.word	0x00010028

080089cc <ull_calcbandwidthadj>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	2101      	movs	r1, #1
 80089d6:	f7ff f963 	bl	8007ca0 <ull_force_clocks>
 80089da:	2100      	movs	r1, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	f7ff fe03 	bl	80085e8 <ull_enable_rf_tx>
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7ff fe34 	bl	8008650 <ull_enable_rftx_blocks>
 80089e8:	f3c5 030b 	ubfx	r3, r5, #0, #12
 80089ec:	2200      	movs	r2, #0
 80089ee:	4915      	ldr	r1, [pc, #84]	; (8008a44 <ull_calcbandwidthadj+0x78>)
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7ff f924 	bl	8007c3e <dwt_write16bitoffsetreg>
 80089f6:	2303      	movs	r3, #3
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	23ff      	movs	r3, #255	; 0xff
 80089fc:	2200      	movs	r2, #0
 80089fe:	4912      	ldr	r1, [pc, #72]	; (8008a48 <ull_calcbandwidthadj+0x7c>)
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7ff ff99 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008a06:	4e10      	ldr	r6, [pc, #64]	; (8008a48 <ull_calcbandwidthadj+0x7c>)
 8008a08:	2500      	movs	r5, #0
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7fe fcfc 	bl	800740c <dwt_read8bitoffsetreg>
 8008a14:	f010 0f01 	tst.w	r0, #1
 8008a18:	d1f7      	bne.n	8008a0a <ull_calcbandwidthadj+0x3e>
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7ff fcae 	bl	800837c <ull_disable_rftx_blocks>
 8008a20:	2100      	movs	r1, #0
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff fcb4 	bl	8008390 <ull_disable_rf_tx>
 8008a28:	2105      	movs	r1, #5
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7ff f938 	bl	8007ca0 <ull_force_clocks>
 8008a30:	2200      	movs	r2, #0
 8008a32:	4906      	ldr	r1, [pc, #24]	; (8008a4c <ull_calcbandwidthadj+0x80>)
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7fe fce9 	bl	800740c <dwt_read8bitoffsetreg>
 8008a3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008a3e:	b002      	add	sp, #8
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	bf00      	nop
 8008a44:	0008001c 	.word	0x0008001c
 8008a48:	00080010 	.word	0x00080010
 8008a4c:	0007001c 	.word	0x0007001c

08008a50 <ull_configuretxrf>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4605      	mov	r5, r0
 8008a54:	460c      	mov	r4, r1
 8008a56:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8008a5a:	b149      	cbz	r1, 8008a70 <ull_configuretxrf+0x20>
 8008a5c:	f7ff ffb6 	bl	80089cc <ull_calcbandwidthadj>
 8008a60:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8008a64:	2200      	movs	r2, #0
 8008a66:	4905      	ldr	r1, [pc, #20]	; (8008a7c <ull_configuretxrf+0x2c>)
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f7ff f9e9 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	7823      	ldrb	r3, [r4, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	4902      	ldr	r1, [pc, #8]	; (8008a80 <ull_configuretxrf+0x30>)
 8008a76:	f7ff f890 	bl	8007b9a <dwt_write8bitoffsetreg>
 8008a7a:	e7f1      	b.n	8008a60 <ull_configuretxrf+0x10>
 8008a7c:	0001000c 	.word	0x0001000c
 8008a80:	0007001c 	.word	0x0007001c

08008a84 <ull_repeated_frames>:
 8008a84:	b530      	push	{r4, r5, lr}
 8008a86:	b083      	sub	sp, #12
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	23ff      	movs	r3, #255	; 0xff
 8008a92:	2200      	movs	r2, #0
 8008a94:	4906      	ldr	r1, [pc, #24]	; (8008ab0 <ull_repeated_frames+0x2c>)
 8008a96:	f7ff ff4f 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	2d02      	cmp	r5, #2
 8008a9e:	bf38      	it	cc
 8008aa0:	2302      	movcc	r3, #2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	212c      	movs	r1, #44	; 0x2c
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff f9ca 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008aac:	b003      	add	sp, #12
 8008aae:	bd30      	pop	{r4, r5, pc}
 8008ab0:	000f0024 	.word	0x000f0024

08008ab4 <ull_setdwstate>:
 8008ab4:	b530      	push	{r4, r5, lr}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	4604      	mov	r4, r0
 8008aba:	2901      	cmp	r1, #1
 8008abc:	d01d      	beq.n	8008afa <ull_setdwstate+0x46>
 8008abe:	2902      	cmp	r1, #2
 8008ac0:	d030      	beq.n	8008b24 <ull_setdwstate+0x70>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	23ff      	movs	r3, #255	; 0xff
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4926      	ldr	r1, [pc, #152]	; (8008b64 <ull_setdwstate+0xb0>)
 8008acc:	f7ff ff34 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008ad0:	4d25      	ldr	r5, [pc, #148]	; (8008b68 <ull_setdwstate+0xb4>)
 8008ad2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8008adc:	2200      	movs	r2, #0
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7ff fd3f 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	237f      	movs	r3, #127	; 0x7f
 8008aec:	2202      	movs	r2, #2
 8008aee:	4629      	mov	r1, r5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7ff ff21 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008af6:	b003      	add	sp, #12
 8008af8:	bd30      	pop	{r4, r5, pc}
 8008afa:	2105      	movs	r1, #5
 8008afc:	f7ff f8d0 	bl	8007ca0 <ull_force_clocks>
 8008b00:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4917      	ldr	r1, [pc, #92]	; (8008b6c <ull_setdwstate+0xb8>)
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff fd28 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008b14:	2201      	movs	r2, #1
 8008b16:	9200      	str	r2, [sp, #0]
 8008b18:	23ff      	movs	r3, #255	; 0xff
 8008b1a:	4913      	ldr	r1, [pc, #76]	; (8008b68 <ull_setdwstate+0xb4>)
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7ff ff0b 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008b22:	e7e8      	b.n	8008af6 <ull_setdwstate+0x42>
 8008b24:	2303      	movs	r3, #3
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	23ff      	movs	r3, #255	; 0xff
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	490d      	ldr	r1, [pc, #52]	; (8008b64 <ull_setdwstate+0xb0>)
 8008b2e:	f7ff ff03 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008b32:	4d0d      	ldr	r5, [pc, #52]	; (8008b68 <ull_setdwstate+0xb4>)
 8008b34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4629      	mov	r1, r5
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff fd0e 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	237f      	movs	r3, #127	; 0x7f
 8008b4e:	2202      	movs	r2, #2
 8008b50:	4629      	mov	r1, r5
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff fef0 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008b58:	2105      	movs	r1, #5
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7ff f8a0 	bl	8007ca0 <ull_force_clocks>
 8008b60:	e7c9      	b.n	8008af6 <ull_setdwstate+0x42>
 8008b62:	bf00      	nop
 8008b64:	00110004 	.word	0x00110004
 8008b68:	00110008 	.word	0x00110008
 8008b6c:	00090008 	.word	0x00090008

08008b70 <ull_configureframefilter>:
 8008b70:	b530      	push	{r4, r5, lr}
 8008b72:	b083      	sub	sp, #12
 8008b74:	4605      	mov	r5, r0
 8008b76:	2902      	cmp	r1, #2
 8008b78:	d00e      	beq.n	8008b98 <ull_configureframefilter+0x28>
 8008b7a:	2400      	movs	r4, #0
 8008b7c:	9400      	str	r4, [sp, #0]
 8008b7e:	23fe      	movs	r3, #254	; 0xfe
 8008b80:	4622      	mov	r2, r4
 8008b82:	2110      	movs	r1, #16
 8008b84:	f7ff fed8 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008b88:	4623      	mov	r3, r4
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	2114      	movs	r1, #20
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f7ff f855 	bl	8007c3e <dwt_write16bitoffsetreg>
 8008b94:	b003      	add	sp, #12
 8008b96:	bd30      	pop	{r4, r5, pc}
 8008b98:	4614      	mov	r4, r2
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	23ff      	movs	r3, #255	; 0xff
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	f7ff fec8 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008ba8:	4623      	mov	r3, r4
 8008baa:	2200      	movs	r2, #0
 8008bac:	2114      	movs	r1, #20
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f7ff f845 	bl	8007c3e <dwt_write16bitoffsetreg>
 8008bb4:	e7ee      	b.n	8008b94 <ull_configureframefilter+0x24>
	...

08008bb8 <ull_run_pgfcal>:
 8008bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	4c29      	ldr	r4, [pc, #164]	; (8008c68 <ull_run_pgfcal+0xb0>)
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	; (8008c6c <ull_run_pgfcal+0xb4>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	f7ff f93a 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	23ff      	movs	r3, #255	; 0xff
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f7ff feae 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008bdc:	2403      	movs	r4, #3
 8008bde:	f04f 0814 	mov.w	r8, #20
 8008be2:	4f23      	ldr	r7, [pc, #140]	; (8008c70 <ull_run_pgfcal+0xb8>)
 8008be4:	2600      	movs	r6, #0
 8008be6:	4640      	mov	r0, r8
 8008be8:	f7f8 fc5f 	bl	80014aa <deca_usleep>
 8008bec:	4632      	mov	r2, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7fe fc0b 	bl	800740c <dwt_read8bitoffsetreg>
 8008bf6:	2801      	cmp	r0, #1
 8008bf8:	d034      	beq.n	8008c64 <ull_run_pgfcal+0xac>
 8008bfa:	1e63      	subs	r3, r4, #1
 8008bfc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8008c00:	d1f1      	bne.n	8008be6 <ull_run_pgfcal+0x2e>
 8008c02:	f06f 0402 	mvn.w	r4, #2
 8008c06:	4e18      	ldr	r6, [pc, #96]	; (8008c68 <ull_run_pgfcal+0xb0>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7fe ffc3 	bl	8007b9a <dwt_write8bitoffsetreg>
 8008c14:	2301      	movs	r3, #1
 8008c16:	2200      	movs	r2, #0
 8008c18:	4915      	ldr	r1, [pc, #84]	; (8008c70 <ull_run_pgfcal+0xb8>)
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f7fe ffbd 	bl	8007b9a <dwt_write8bitoffsetreg>
 8008c20:	2301      	movs	r3, #1
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	23ff      	movs	r3, #255	; 0xff
 8008c26:	2202      	movs	r2, #2
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f7ff fe84 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008c30:	2200      	movs	r2, #0
 8008c32:	4910      	ldr	r1, [pc, #64]	; (8008c74 <ull_run_pgfcal+0xbc>)
 8008c34:	4628      	mov	r0, r5
 8008c36:	f7fe fbc1 	bl	80073bc <dwt_read32bitoffsetreg>
 8008c3a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008c3e:	4298      	cmp	r0, r3
 8008c40:	bf08      	it	eq
 8008c42:	f06f 0403 	mvneq.w	r4, #3
 8008c46:	2200      	movs	r2, #0
 8008c48:	490b      	ldr	r1, [pc, #44]	; (8008c78 <ull_run_pgfcal+0xc0>)
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7fe fbb6 	bl	80073bc <dwt_read32bitoffsetreg>
 8008c50:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008c54:	4298      	cmp	r0, r3
 8008c56:	bf14      	ite	ne
 8008c58:	4620      	movne	r0, r4
 8008c5a:	f06f 0004 	mvneq.w	r0, #4
 8008c5e:	b002      	add	sp, #8
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	2400      	movs	r4, #0
 8008c66:	e7ce      	b.n	8008c06 <ull_run_pgfcal+0x4e>
 8008c68:	0004000c 	.word	0x0004000c
 8008c6c:	00020001 	.word	0x00020001
 8008c70:	00040020 	.word	0x00040020
 8008c74:	00040014 	.word	0x00040014
 8008c78:	0004001c 	.word	0x0004001c

08008c7c <prs_ack_enable>:
 8008c7c:	b500      	push	{lr}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	2900      	cmp	r1, #0
 8008c82:	bf0b      	itete	eq
 8008c84:	23ff      	moveq	r3, #255	; 0xff
 8008c86:	23f7      	movne	r3, #247	; 0xf7
 8008c88:	2200      	moveq	r2, #0
 8008c8a:	2208      	movne	r2, #8
 8008c8c:	9200      	str	r2, [sp, #0]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	2110      	movs	r1, #16
 8008c92:	f7ff fe51 	bl	8008938 <dwt_modify8bitoffsetreg>
 8008c96:	b003      	add	sp, #12
 8008c98:	f85d fb04 	ldr.w	pc, [sp], #4

08008c9c <dwt_modify16bitoffsetreg>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8008ca4:	f88d 300c 	strb.w	r3, [sp, #12]
 8008ca8:	0a1b      	lsrs	r3, r3, #8
 8008caa:	f88d 300d 	strb.w	r3, [sp, #13]
 8008cae:	f88d 400e 	strb.w	r4, [sp, #14]
 8008cb2:	0a24      	lsrs	r4, r4, #8
 8008cb4:	f88d 400f 	strb.w	r4, [sp, #15]
 8008cb8:	f248 0302 	movw	r3, #32770	; 0x8002
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	ab03      	add	r3, sp, #12
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	f7fe faec 	bl	80072a2 <dwt_xfer3xxx>
 8008cca:	b004      	add	sp, #16
 8008ccc:	bd10      	pop	{r4, pc}
	...

08008cd0 <_dwt_prog_ldo_and_bias_tune>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4907      	ldr	r1, [pc, #28]	; (8008d00 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8008ce4:	f7ff ffda 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008ce8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008cea:	7a1b      	ldrb	r3, [r3, #8]
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4903      	ldr	r1, [pc, #12]	; (8008d04 <_dwt_prog_ldo_and_bias_tune+0x34>)
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f7ff ffd0 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd10      	pop	{r4, pc}
 8008d00:	000b0008 	.word	0x000b0008
 8008d04:	0011001f 	.word	0x0011001f

08008d08 <ull_setleds>:
 8008d08:	b530      	push	{r4, r5, lr}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	f011 0f01 	tst.w	r1, #1
 8008d12:	d01f      	beq.n	8008d54 <ull_setleds+0x4c>
 8008d14:	460d      	mov	r5, r1
 8008d16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008d26:	f7ff fc1d 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008d2a:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	2200      	movs	r2, #0
 8008d36:	4918      	ldr	r1, [pc, #96]	; (8008d98 <ull_setleds+0x90>)
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7ff fc13 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008d3e:	f015 0f02 	tst.w	r5, #2
 8008d42:	d11a      	bne.n	8008d7a <ull_setleds+0x72>
 8008d44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4914      	ldr	r1, [pc, #80]	; (8008d9c <ull_setleds+0x94>)
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f7ff f877 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008d52:	e010      	b.n	8008d76 <ull_setleds+0x6e>
 8008d54:	2500      	movs	r5, #0
 8008d56:	9500      	str	r5, [sp, #0]
 8008d58:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008d62:	f7ff fbff 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008d66:	9500      	str	r5, [sp, #0]
 8008d68:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	490b      	ldr	r1, [pc, #44]	; (8008d9c <ull_setleds+0x94>)
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7ff ff93 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008d76:	b003      	add	sp, #12
 8008d78:	bd30      	pop	{r4, r5, pc}
 8008d7a:	4d08      	ldr	r5, [pc, #32]	; (8008d9c <ull_setleds+0x94>)
 8008d7c:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <ull_setleds+0x98>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4629      	mov	r1, r5
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7ff f85c 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008d88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7ff f855 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008d96:	e7ee      	b.n	8008d76 <ull_setleds+0x6e>
 8008d98:	00110004 	.word	0x00110004
 8008d9c:	00110016 	.word	0x00110016
 8008da0:	000f0110 	.word	0x000f0110

08008da4 <ull_pgf_cal>:
 8008da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da6:	b083      	sub	sp, #12
 8008da8:	4604      	mov	r4, r0
 8008daa:	2901      	cmp	r1, #1
 8008dac:	d009      	beq.n	8008dc2 <ull_pgf_cal+0x1e>
 8008dae:	2014      	movs	r0, #20
 8008db0:	f7f8 fb7b 	bl	80014aa <deca_usleep>
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7ff feff 	bl	8008bb8 <ull_run_pgfcal>
 8008dba:	4605      	mov	r5, r0
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	b003      	add	sp, #12
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc2:	4e0f      	ldr	r6, [pc, #60]	; (8008e00 <ull_pgf_cal+0x5c>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	f7fe fb0e 	bl	80073e8 <dwt_read16bitoffsetreg>
 8008dcc:	4607      	mov	r7, r0
 8008dce:	f240 1305 	movw	r3, #261	; 0x105
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f7ff ff5d 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008de2:	2014      	movs	r0, #20
 8008de4:	f7f8 fb61 	bl	80014aa <deca_usleep>
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff fee5 	bl	8008bb8 <ull_run_pgfcal>
 8008dee:	4605      	mov	r5, r0
 8008df0:	2200      	movs	r2, #0
 8008df2:	9200      	str	r2, [sp, #0]
 8008df4:	463b      	mov	r3, r7
 8008df6:	4631      	mov	r1, r6
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f7ff ff4f 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008dfe:	e7dd      	b.n	8008dbc <ull_pgf_cal+0x18>
 8008e00:	00070048 	.word	0x00070048

08008e04 <ull_setgpiovalue>:
 8008e04:	b500      	push	{lr}
 8008e06:	b083      	sub	sp, #12
 8008e08:	2a01      	cmp	r2, #1
 8008e0a:	d009      	beq.n	8008e20 <ull_setgpiovalue+0x1c>
 8008e0c:	43cb      	mvns	r3, r1
 8008e0e:	2200      	movs	r2, #0
 8008e10:	9200      	str	r2, [sp, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4906      	ldr	r1, [pc, #24]	; (8008e30 <ull_setgpiovalue+0x2c>)
 8008e16:	f7ff ff41 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008e1a:	b003      	add	sp, #12
 8008e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e20:	9100      	str	r1, [sp, #0]
 8008e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e26:	2200      	movs	r2, #0
 8008e28:	4901      	ldr	r1, [pc, #4]	; (8008e30 <ull_setgpiovalue+0x2c>)
 8008e2a:	f7ff ff37 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008e2e:	e7f4      	b.n	8008e1a <ull_setgpiovalue+0x16>
 8008e30:	0005000c 	.word	0x0005000c

08008e34 <ull_readaccdata>:
 8008e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e36:	b083      	sub	sp, #12
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	461d      	mov	r5, r3
 8008e40:	f248 0340 	movw	r3, #32832	; 0x8040
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4918      	ldr	r1, [pc, #96]	; (8008eb0 <ull_readaccdata+0x7c>)
 8008e4e:	f7ff ff25 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008e52:	19aa      	adds	r2, r5, r6
 8008e54:	f243 0301 	movw	r3, #12289	; 0x3001
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	dc15      	bgt.n	8008e88 <ull_readaccdata+0x54>
 8008e5c:	2d7f      	cmp	r5, #127	; 0x7f
 8008e5e:	d91d      	bls.n	8008e9c <ull_readaccdata+0x68>
 8008e60:	2315      	movs	r3, #21
 8008e62:	2200      	movs	r2, #0
 8008e64:	4913      	ldr	r1, [pc, #76]	; (8008eb4 <ull_readaccdata+0x80>)
 8008e66:	4620      	mov	r0, r4
 8008e68:	f7fe ffea 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4911      	ldr	r1, [pc, #68]	; (8008eb8 <ull_readaccdata+0x84>)
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7fe ffe4 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008e78:	9700      	str	r7, [sp, #0]
 8008e7a:	4633      	mov	r3, r6
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7fe fa90 	bl	80073a8 <dwt_readfromdevice>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	9200      	str	r2, [sp, #0]
 8008e8c:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8008e90:	4907      	ldr	r1, [pc, #28]	; (8008eb0 <ull_readaccdata+0x7c>)
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff ff02 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	9700      	str	r7, [sp, #0]
 8008e9e:	4633      	mov	r3, r6
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f7fe fa7e 	bl	80073a8 <dwt_readfromdevice>
 8008eac:	e7ec      	b.n	8008e88 <ull_readaccdata+0x54>
 8008eae:	bf00      	nop
 8008eb0:	00110004 	.word	0x00110004
 8008eb4:	001f0004 	.word	0x001f0004
 8008eb8:	001f0008 	.word	0x001f0008

08008ebc <ull_repeated_cw>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	4615      	mov	r5, r2
 8008ec4:	4b0e      	ldr	r3, [pc, #56]	; (8008f00 <ull_repeated_cw+0x44>)
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	490e      	ldr	r1, [pc, #56]	; (8008f04 <ull_repeated_cw+0x48>)
 8008eca:	f7fe ffb9 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008ece:	2d0f      	cmp	r5, #15
 8008ed0:	bfa8      	it	ge
 8008ed2:	250f      	movge	r5, #15
 8008ed4:	1e63      	subs	r3, r4, #1
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	bf28      	it	cs
 8008eda:	2404      	movcs	r4, #4
 8008edc:	2310      	movs	r3, #16
 8008ede:	4123      	asrs	r3, r4
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4909      	ldr	r1, [pc, #36]	; (8008f08 <ull_repeated_cw+0x4c>)
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7fe ffab 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008eea:	1e63      	subs	r3, r4, #1
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	fa05 f303 	lsl.w	r3, r5, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4905      	ldr	r1, [pc, #20]	; (8008f0c <ull_repeated_cw+0x50>)
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7fe ffa2 	bl	8007e40 <dwt_write32bitoffsetreg>
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	bf00      	nop
 8008f00:	00d20874 	.word	0x00d20874
 8008f04:	00110010 	.word	0x00110010
 8008f08:	00070028 	.word	0x00070028
 8008f0c:	00080018 	.word	0x00080018

08008f10 <ull_configure>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	b083      	sub	sp, #12
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	f891 9000 	ldrb.w	r9, [r1]
 8008f1e:	790b      	ldrb	r3, [r1, #4]
 8008f20:	2b18      	cmp	r3, #24
 8008f22:	d814      	bhi.n	8008f4e <ull_configure+0x3e>
 8008f24:	78cf      	ldrb	r7, [r1, #3]
 8008f26:	2f18      	cmp	r7, #24
 8008f28:	bf94      	ite	ls
 8008f2a:	2700      	movls	r7, #0
 8008f2c:	2701      	movhi	r7, #1
 8008f2e:	b2ff      	uxtb	r7, r7
 8008f30:	79eb      	ldrb	r3, [r5, #7]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	bf0c      	ite	eq
 8008f36:	2110      	moveq	r1, #16
 8008f38:	2100      	movne	r1, #0
 8008f3a:	786b      	ldrb	r3, [r5, #1]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	2b06      	cmp	r3, #6
 8008f40:	d810      	bhi.n	8008f64 <ull_configure+0x54>
 8008f42:	e8df f003 	tbb	[pc, r3]
 8008f46:	0f06      	.short	0x0f06
 8008f48:	0f0c120f 	.word	0x0f0c120f
 8008f4c:	09          	.byte	0x09
 8008f4d:	00          	.byte	0x00
 8008f4e:	2701      	movs	r7, #1
 8008f50:	e7ed      	b.n	8008f2e <ull_configure+0x1e>
 8008f52:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8008f56:	e00a      	b.n	8008f6e <ull_configure+0x5e>
 8008f58:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8008f5c:	e007      	b.n	8008f6e <ull_configure+0x5e>
 8008f5e:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8008f62:	e004      	b.n	8008f6e <ull_configure+0x5e>
 8008f64:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8008f68:	e001      	b.n	8008f6e <ull_configure+0x5e>
 8008f6a:	f04f 0a20 	mov.w	sl, #32
 8008f6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008f70:	8a53      	ldrh	r3, [r2, #18]
 8008f72:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008f76:	8253      	strh	r3, [r2, #18]
 8008f78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f7a:	79ea      	ldrb	r2, [r5, #7]
 8008f7c:	731a      	strb	r2, [r3, #12]
 8008f7e:	7b2e      	ldrb	r6, [r5, #12]
 8008f80:	1cb3      	adds	r3, r6, #2
 8008f82:	2601      	movs	r6, #1
 8008f84:	409e      	lsls	r6, r3
 8008f86:	fa1f f886 	uxth.w	r8, r6
 8008f8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008f8c:	4bc7      	ldr	r3, [pc, #796]	; (80092ac <ull_configure+0x39c>)
 8008f8e:	fb03 f308 	mul.w	r3, r3, r8
 8008f92:	0bdb      	lsrs	r3, r3, #15
 8008f94:	8293      	strh	r3, [r2, #20]
 8008f96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f98:	7aea      	ldrb	r2, [r5, #11]
 8008f9a:	75da      	strb	r2, [r3, #23]
 8008f9c:	7a2b      	ldrb	r3, [r5, #8]
 8008f9e:	015b      	lsls	r3, r3, #5
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	7b6a      	ldrb	r2, [r5, #13]
 8008fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008faa:	7aea      	ldrb	r2, [r5, #11]
 8008fac:	0312      	lsls	r2, r2, #12
 8008fae:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4bbd      	ldr	r3, [pc, #756]	; (80092b0 <ull_configure+0x3a0>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2110      	movs	r1, #16
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f7ff fad0 	bl	8008564 <dwt_modify32bitoffsetreg>
 8008fc4:	2f00      	cmp	r7, #0
 8008fc6:	f040 80f6 	bne.w	80091b6 <ull_configure+0x2a6>
 8008fca:	7aeb      	ldrb	r3, [r5, #11]
 8008fcc:	b1f3      	cbz	r3, 800900c <ull_configure+0xfc>
 8008fce:	7b6b      	ldrb	r3, [r5, #13]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	f240 811c 	bls.w	800920e <ull_configure+0x2fe>
 8008fd6:	7b2a      	ldrb	r2, [r5, #12]
 8008fd8:	4bb6      	ldr	r3, [pc, #728]	; (80092b4 <ull_configure+0x3a4>)
 8008fda:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008fde:	0112      	lsls	r2, r2, #4
 8008fe0:	0ad3      	lsrs	r3, r2, #11
 8008fe2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fea:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008fee:	bf28      	it	cs
 8008ff0:	3301      	addcs	r3, #1
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8008ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009002:	2202      	movs	r2, #2
 8009004:	49ac      	ldr	r1, [pc, #688]	; (80092b8 <ull_configure+0x3a8>)
 8009006:	4620      	mov	r0, r4
 8009008:	f7ff fe48 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800900c:	2394      	movs	r3, #148	; 0x94
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4baa      	ldr	r3, [pc, #680]	; (80092bc <ull_configure+0x3ac>)
 8009012:	2200      	movs	r2, #0
 8009014:	49aa      	ldr	r1, [pc, #680]	; (80092c0 <ull_configure+0x3b0>)
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff faa4 	bl	8008564 <dwt_modify32bitoffsetreg>
 800901c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009020:	f340 8108 	ble.w	8009234 <ull_configure+0x324>
 8009024:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009026:	8a53      	ldrh	r3, [r2, #18]
 8009028:	f043 0320 	orr.w	r3, r3, #32
 800902c:	8253      	strh	r3, [r2, #18]
 800902e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8009038:	2200      	movs	r2, #0
 800903a:	49a2      	ldr	r1, [pc, #648]	; (80092c4 <ull_configure+0x3b4>)
 800903c:	4620      	mov	r0, r4
 800903e:	f7ff fe2d 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8009042:	7b6b      	ldrb	r3, [r5, #13]
 8009044:	2b01      	cmp	r3, #1
 8009046:	f000 8100 	beq.w	800924a <ull_configure+0x33a>
 800904a:	78ab      	ldrb	r3, [r5, #2]
 800904c:	f043 0310 	orr.w	r3, r3, #16
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	23fc      	movs	r3, #252	; 0xfc
 8009054:	2200      	movs	r2, #0
 8009056:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff fc6c 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009060:	1e73      	subs	r3, r6, #1
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2200      	movs	r2, #0
 8009066:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800906a:	4620      	mov	r0, r4
 800906c:	f7fe fd95 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009070:	786b      	ldrb	r3, [r5, #1]
 8009072:	2b07      	cmp	r3, #7
 8009074:	bf0c      	ite	eq
 8009076:	2308      	moveq	r3, #8
 8009078:	2300      	movne	r3, #0
 800907a:	2201      	movs	r2, #1
 800907c:	2128      	movs	r1, #40	; 0x28
 800907e:	4620      	mov	r0, r4
 8009080:	f7fe fd8b 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009084:	4b90      	ldr	r3, [pc, #576]	; (80092c8 <ull_configure+0x3b8>)
 8009086:	2200      	movs	r2, #0
 8009088:	4990      	ldr	r1, [pc, #576]	; (80092cc <ull_configure+0x3bc>)
 800908a:	4620      	mov	r0, r4
 800908c:	f7fe fed8 	bl	8007e40 <dwt_write32bitoffsetreg>
 8009090:	2200      	movs	r2, #0
 8009092:	498f      	ldr	r1, [pc, #572]	; (80092d0 <ull_configure+0x3c0>)
 8009094:	4620      	mov	r0, r4
 8009096:	f7fe f991 	bl	80073bc <dwt_read32bitoffsetreg>
 800909a:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800909e:	f020 001f 	bic.w	r0, r0, #31
 80090a2:	f1b9 0f09 	cmp.w	r9, #9
 80090a6:	bf08      	it	eq
 80090a8:	f040 0001 	orreq.w	r0, r0, #1
 80090ac:	792a      	ldrb	r2, [r5, #4]
 80090ae:	0212      	lsls	r2, r2, #8
 80090b0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80090b4:	78eb      	ldrb	r3, [r5, #3]
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	431a      	orrs	r2, r3
 80090bc:	796b      	ldrb	r3, [r5, #5]
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	f003 0306 	and.w	r3, r3, #6
 80090c4:	4313      	orrs	r3, r2
 80090c6:	4303      	orrs	r3, r0
 80090c8:	2200      	movs	r2, #0
 80090ca:	4981      	ldr	r1, [pc, #516]	; (80092d0 <ull_configure+0x3c0>)
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7fe feb7 	bl	8007e40 <dwt_write32bitoffsetreg>
 80090d2:	79aa      	ldrb	r2, [r5, #6]
 80090d4:	786b      	ldrb	r3, [r5, #1]
 80090d6:	031b      	lsls	r3, r3, #12
 80090d8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80090e2:	2200      	movs	r2, #0
 80090e4:	2124      	movs	r1, #36	; 0x24
 80090e6:	4620      	mov	r0, r4
 80090e8:	f7ff fa3c 	bl	8008564 <dwt_modify32bitoffsetreg>
 80090ec:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80090f0:	b923      	cbnz	r3, 80090fc <ull_configure+0x1ec>
 80090f2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80090f6:	726b      	strb	r3, [r5, #9]
 80090f8:	2300      	movs	r3, #0
 80090fa:	72ab      	strb	r3, [r5, #10]
 80090fc:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8009100:	2202      	movs	r2, #2
 8009102:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8009106:	4620      	mov	r0, r4
 8009108:	f7fe fd99 	bl	8007c3e <dwt_write16bitoffsetreg>
 800910c:	2202      	movs	r2, #2
 800910e:	4971      	ldr	r1, [pc, #452]	; (80092d4 <ull_configure+0x3c4>)
 8009110:	4620      	mov	r0, r4
 8009112:	f7fe f97b 	bl	800740c <dwt_read8bitoffsetreg>
 8009116:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009118:	7c1b      	ldrb	r3, [r3, #16]
 800911a:	454b      	cmp	r3, r9
 800911c:	f000 809f 	beq.w	800925e <ull_configure+0x34e>
 8009120:	2803      	cmp	r0, #3
 8009122:	f000 80a0 	beq.w	8009266 <ull_configure+0x356>
 8009126:	f1b9 0f09 	cmp.w	r9, #9
 800912a:	f000 80a1 	beq.w	8009270 <ull_configure+0x360>
 800912e:	4b6a      	ldr	r3, [pc, #424]	; (80092d8 <ull_configure+0x3c8>)
 8009130:	2200      	movs	r2, #0
 8009132:	496a      	ldr	r1, [pc, #424]	; (80092dc <ull_configure+0x3cc>)
 8009134:	4620      	mov	r0, r4
 8009136:	f7fe fe83 	bl	8007e40 <dwt_write32bitoffsetreg>
 800913a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800913e:	2200      	movs	r2, #0
 8009140:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8009144:	4620      	mov	r0, r4
 8009146:	f7fe fd7a 	bl	8007c3e <dwt_write16bitoffsetreg>
 800914a:	2314      	movs	r3, #20
 800914c:	2201      	movs	r2, #1
 800914e:	4964      	ldr	r1, [pc, #400]	; (80092e0 <ull_configure+0x3d0>)
 8009150:	4620      	mov	r0, r4
 8009152:	f7fe fd22 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009156:	230e      	movs	r3, #14
 8009158:	2202      	movs	r2, #2
 800915a:	4962      	ldr	r1, [pc, #392]	; (80092e4 <ull_configure+0x3d4>)
 800915c:	4620      	mov	r0, r4
 800915e:	f7fe fd1c 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009162:	2381      	movs	r3, #129	; 0x81
 8009164:	2200      	movs	r2, #0
 8009166:	4960      	ldr	r1, [pc, #384]	; (80092e8 <ull_configure+0x3d8>)
 8009168:	4620      	mov	r0, r4
 800916a:	f7fe fd16 	bl	8007b9a <dwt_write8bitoffsetreg>
 800916e:	2302      	movs	r3, #2
 8009170:	2200      	movs	r2, #0
 8009172:	2144      	movs	r1, #68	; 0x44
 8009174:	4620      	mov	r0, r4
 8009176:	f7fe fd10 	bl	8007b9a <dwt_write8bitoffsetreg>
 800917a:	2101      	movs	r1, #1
 800917c:	4620      	mov	r0, r4
 800917e:	f7ff fc99 	bl	8008ab4 <ull_setdwstate>
 8009182:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8009186:	f04f 0814 	mov.w	r8, #20
 800918a:	2700      	movs	r7, #0
 800918c:	2644      	movs	r6, #68	; 0x44
 800918e:	4640      	mov	r0, r8
 8009190:	f7f8 f98b 	bl	80014aa <deca_usleep>
 8009194:	463a      	mov	r2, r7
 8009196:	4631      	mov	r1, r6
 8009198:	4620      	mov	r0, r4
 800919a:	f7fe f937 	bl	800740c <dwt_read8bitoffsetreg>
 800919e:	f010 0f02 	tst.w	r0, #2
 80091a2:	f040 80ab 	bne.w	80092fc <ull_configure+0x3ec>
 80091a6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80091aa:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80091ae:	d1ee      	bne.n	800918e <ull_configure+0x27e>
 80091b0:	f06f 0001 	mvn.w	r0, #1
 80091b4:	e0cf      	b.n	8009356 <ull_configure+0x446>
 80091b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80091b8:	8a53      	ldrh	r3, [r2, #18]
 80091ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80091be:	8253      	strh	r3, [r2, #18]
 80091c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80091ca:	2200      	movs	r2, #0
 80091cc:	493d      	ldr	r1, [pc, #244]	; (80092c4 <ull_configure+0x3b4>)
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7ff f9c8 	bl	8008564 <dwt_modify32bitoffsetreg>
 80091d4:	f240 3306 	movw	r3, #774	; 0x306
 80091d8:	2200      	movs	r2, #0
 80091da:	4944      	ldr	r1, [pc, #272]	; (80092ec <ull_configure+0x3dc>)
 80091dc:	4620      	mov	r0, r4
 80091de:	f7fe fe2f 	bl	8007e40 <dwt_write32bitoffsetreg>
 80091e2:	2300      	movs	r3, #0
 80091e4:	461a      	mov	r2, r3
 80091e6:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 80091ea:	4620      	mov	r0, r4
 80091ec:	f7fe fe28 	bl	8007e40 <dwt_write32bitoffsetreg>
 80091f0:	4b3f      	ldr	r3, [pc, #252]	; (80092f0 <ull_configure+0x3e0>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	4930      	ldr	r1, [pc, #192]	; (80092b8 <ull_configure+0x3a8>)
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7fe fe22 	bl	8007e40 <dwt_write32bitoffsetreg>
 80091fc:	239d      	movs	r3, #157	; 0x9d
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4b2e      	ldr	r3, [pc, #184]	; (80092bc <ull_configure+0x3ac>)
 8009202:	2200      	movs	r2, #0
 8009204:	492e      	ldr	r1, [pc, #184]	; (80092c0 <ull_configure+0x3b0>)
 8009206:	4620      	mov	r0, r4
 8009208:	f7ff f9ac 	bl	8008564 <dwt_modify32bitoffsetreg>
 800920c:	e719      	b.n	8009042 <ull_configure+0x132>
 800920e:	7b2a      	ldrb	r2, [r5, #12]
 8009210:	4b28      	ldr	r3, [pc, #160]	; (80092b4 <ull_configure+0x3a4>)
 8009212:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009216:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800921a:	fb02 f203 	mul.w	r2, r2, r3
 800921e:	0c93      	lsrs	r3, r2, #18
 8009220:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8009224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009228:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800922c:	bf28      	it	cs
 800922e:	3301      	addcs	r3, #1
 8009230:	b29b      	uxth	r3, r3
 8009232:	e6df      	b.n	8008ff4 <ull_configure+0xe4>
 8009234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800923e:	2200      	movs	r2, #0
 8009240:	4920      	ldr	r1, [pc, #128]	; (80092c4 <ull_configure+0x3b4>)
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff fd2a 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8009248:	e6fb      	b.n	8009042 <ull_configure+0x132>
 800924a:	78ab      	ldrb	r3, [r5, #2]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	23ec      	movs	r3, #236	; 0xec
 8009250:	2200      	movs	r2, #0
 8009252:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fb6e 	bl	8008938 <dwt_modify8bitoffsetreg>
 800925c:	e700      	b.n	8009060 <ull_configure+0x150>
 800925e:	2803      	cmp	r0, #3
 8009260:	f47f af61 	bne.w	8009126 <ull_configure+0x216>
 8009264:	e04d      	b.n	8009302 <ull_configure+0x3f2>
 8009266:	2102      	movs	r1, #2
 8009268:	4620      	mov	r0, r4
 800926a:	f7ff fc23 	bl	8008ab4 <ull_setdwstate>
 800926e:	e75a      	b.n	8009126 <ull_configure+0x216>
 8009270:	4b20      	ldr	r3, [pc, #128]	; (80092f4 <ull_configure+0x3e4>)
 8009272:	2200      	movs	r2, #0
 8009274:	4919      	ldr	r1, [pc, #100]	; (80092dc <ull_configure+0x3cc>)
 8009276:	4620      	mov	r0, r4
 8009278:	f7fe fde2 	bl	8007e40 <dwt_write32bitoffsetreg>
 800927c:	f640 733c 	movw	r3, #3900	; 0xf3c
 8009280:	2200      	movs	r2, #0
 8009282:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8009286:	4620      	mov	r0, r4
 8009288:	f7fe fcd9 	bl	8007c3e <dwt_write16bitoffsetreg>
 800928c:	e75d      	b.n	800914a <ull_configure+0x23a>
 800928e:	fa4f f189 	sxtb.w	r1, r9
 8009292:	4620      	mov	r0, r4
 8009294:	f7ff f98a 	bl	80085ac <_dwt_kick_dgc_on_wakeup>
 8009298:	e040      	b.n	800931c <ull_configure+0x40c>
 800929a:	2200      	movs	r2, #0
 800929c:	9200      	str	r2, [sp, #0]
 800929e:	23fe      	movs	r3, #254	; 0xfe
 80092a0:	4915      	ldr	r1, [pc, #84]	; (80092f8 <ull_configure+0x3e8>)
 80092a2:	4620      	mov	r0, r4
 80092a4:	f7ff fb48 	bl	8008938 <dwt_modify8bitoffsetreg>
 80092a8:	e042      	b.n	8009330 <ull_configure+0x420>
 80092aa:	bf00      	nop
 80092ac:	00026668 	.word	0x00026668
 80092b0:	fffc4fcf 	.word	0xfffc4fcf
 80092b4:	080199a8 	.word	0x080199a8
 80092b8:	000e0012 	.word	0x000e0012
 80092bc:	bfffff00 	.word	0xbfffff00
 80092c0:	000e0016 	.word	0x000e0016
 80092c4:	000b0008 	.word	0x000b0008
 80092c8:	af5f35cc 	.word	0xaf5f35cc
 80092cc:	0006000c 	.word	0x0006000c
 80092d0:	00010014 	.word	0x00010014
 80092d4:	000f0030 	.word	0x000f0030
 80092d8:	1c071134 	.word	0x1c071134
 80092dc:	0007001c 	.word	0x0007001c
 80092e0:	00070050 	.word	0x00070050
 80092e4:	00070018 	.word	0x00070018
 80092e8:	00090008 	.word	0x00090008
 80092ec:	000e000c 	.word	0x000e000c
 80092f0:	000c5a0a 	.word	0x000c5a0a
 80092f4:	1c010034 	.word	0x1c010034
 80092f8:	00030018 	.word	0x00030018
 80092fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80092fe:	f883 9010 	strb.w	r9, [r3, #16]
 8009302:	792b      	ldrb	r3, [r5, #4]
 8009304:	3b09      	subs	r3, #9
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b0f      	cmp	r3, #15
 800930a:	d8c6      	bhi.n	800929a <ull_configure+0x38a>
 800930c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800930e:	7a5b      	ldrb	r3, [r3, #9]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d0bc      	beq.n	800928e <ull_configure+0x37e>
 8009314:	4649      	mov	r1, r9
 8009316:	4620      	mov	r0, r4
 8009318:	f7fe ffae 	bl	8008278 <ull_configmrxlut>
 800931c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8009326:	2200      	movs	r2, #0
 8009328:	490c      	ldr	r1, [pc, #48]	; (800935c <ull_configure+0x44c>)
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff fcb6 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8009330:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8009334:	bfcc      	ite	gt
 8009336:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800933a:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009344:	2200      	movs	r2, #0
 8009346:	4906      	ldr	r1, [pc, #24]	; (8009360 <ull_configure+0x450>)
 8009348:	4620      	mov	r0, r4
 800934a:	f7ff f90b 	bl	8008564 <dwt_modify32bitoffsetreg>
 800934e:	2101      	movs	r1, #1
 8009350:	4620      	mov	r0, r4
 8009352:	f7ff fd27 	bl	8008da4 <ull_pgf_cal>
 8009356:	b003      	add	sp, #12
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	00030018 	.word	0x00030018
 8009360:	00060010 	.word	0x00060010

08009364 <dwt_ioctl>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	b091      	sub	sp, #68	; 0x44
 800936a:	4606      	mov	r6, r0
 800936c:	4615      	mov	r5, r2
 800936e:	461c      	mov	r4, r3
 8009370:	299c      	cmp	r1, #156	; 0x9c
 8009372:	f200 809f 	bhi.w	80094b4 <dwt_ioctl+0x150>
 8009376:	e8df f011 	tbh	[pc, r1, lsl #1]
 800937a:	0a65      	.short	0x0a65
 800937c:	00a30a70 	.word	0x00a30a70
 8009380:	00be00a7 	.word	0x00be00a7
 8009384:	018e0148 	.word	0x018e0148
 8009388:	0152016b 	.word	0x0152016b
 800938c:	01a9019e 	.word	0x01a9019e
 8009390:	01b901b1 	.word	0x01b901b1
 8009394:	01c901c1 	.word	0x01c901c1
 8009398:	01d501d1 	.word	0x01d501d1
 800939c:	026e01dd 	.word	0x026e01dd
 80093a0:	0281027c 	.word	0x0281027c
 80093a4:	0290028b 	.word	0x0290028b
 80093a8:	029e0295 	.word	0x029e0295
 80093ac:	030902a3 	.word	0x030902a3
 80093b0:	0326031b 	.word	0x0326031b
 80093b4:	033b0331 	.word	0x033b0331
 80093b8:	03690373 	.word	0x03690373
 80093bc:	0345035f 	.word	0x0345035f
 80093c0:	03c10352 	.word	0x03c10352
 80093c4:	022b01f8 	.word	0x022b01f8
 80093c8:	02410239 	.word	0x02410239
 80093cc:	098e0255 	.word	0x098e0255
 80093d0:	03820993 	.word	0x03820993
 80093d4:	03e303df 	.word	0x03e303df
 80093d8:	03f103ec 	.word	0x03f103ec
 80093dc:	040503fb 	.word	0x040503fb
 80093e0:	0437040d 	.word	0x0437040d
 80093e4:	044e0443 	.word	0x044e0443
 80093e8:	04590378 	.word	0x04590378
 80093ec:	04740462 	.word	0x04740462
 80093f0:	049e048d 	.word	0x049e048d
 80093f4:	04ea04e0 	.word	0x04ea04e0
 80093f8:	051a050b 	.word	0x051a050b
 80093fc:	05230535 	.word	0x05230535
 8009400:	05970551 	.word	0x05970551
 8009404:	05c405aa 	.word	0x05c405aa
 8009408:	05ed05d9 	.word	0x05ed05d9
 800940c:	061205f6 	.word	0x061205f6
 8009410:	076b05ff 	.word	0x076b05ff
 8009414:	07e50797 	.word	0x07e50797
 8009418:	07f607eb 	.word	0x07f607eb
 800941c:	082f080f 	.word	0x082f080f
 8009420:	08430839 	.word	0x08430839
 8009424:	087a0871 	.word	0x087a0871
 8009428:	08890880 	.word	0x08890880
 800942c:	08a30896 	.word	0x08a30896
 8009430:	08b608ad 	.word	0x08b608ad
 8009434:	08ca08bf 	.word	0x08ca08bf
 8009438:	08db08d5 	.word	0x08db08d5
 800943c:	090908fe 	.word	0x090908fe
 8009440:	093d0914 	.word	0x093d0914
 8009444:	096a095f 	.word	0x096a095f
 8009448:	09990983 	.word	0x09990983
 800944c:	0a180a0e 	.word	0x0a180a0e
 8009450:	0a780a23 	.word	0x0a780a23
 8009454:	0a5a0a2d 	.word	0x0a5a0a2d
 8009458:	09d70789 	.word	0x09d70789
 800945c:	0ae609f8 	.word	0x0ae609f8
 8009460:	0a850adb 	.word	0x0a850adb
 8009464:	0a9b0a90 	.word	0x0a9b0a90
 8009468:	0ab10aa6 	.word	0x0ab10aa6
 800946c:	0ac70abc 	.word	0x0ac70abc
 8009470:	0bd00ad0 	.word	0x0bd00ad0
 8009474:	0c450c0a 	.word	0x0c450c0a
 8009478:	0d210c68 	.word	0x0d210c68
 800947c:	0b110d36 	.word	0x0b110d36
 8009480:	009d009d 	.word	0x009d009d
 8009484:	009d009d 	.word	0x009d009d
 8009488:	009d009d 	.word	0x009d009d
 800948c:	009d009d 	.word	0x009d009d
 8009490:	009d009d 	.word	0x009d009d
 8009494:	009d009d 	.word	0x009d009d
 8009498:	009d009d 	.word	0x009d009d
 800949c:	009d009d 	.word	0x009d009d
 80094a0:	009d009d 	.word	0x009d009d
 80094a4:	0c7f009d 	.word	0x0c7f009d
 80094a8:	0dc60c9d 	.word	0x0dc60c9d
 80094ac:	0cdc0ce7 	.word	0x0cdc0ce7
 80094b0:	0cf20cfb 	.word	0x0cf20cfb
 80094b4:	f04f 35ff 	mov.w	r5, #4294967295
 80094b8:	4628      	mov	r0, r5
 80094ba:	b011      	add	sp, #68	; 0x44
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c0:	6843      	ldr	r3, [r0, #4]
 80094c2:	4798      	blx	r3
 80094c4:	2500      	movs	r5, #0
 80094c6:	e7f7      	b.n	80094b8 <dwt_ioctl+0x154>
 80094c8:	2202      	movs	r2, #2
 80094ca:	49b7      	ldr	r1, [pc, #732]	; (80097a8 <dwt_ioctl+0x444>)
 80094cc:	f7fd ff9e 	bl	800740c <dwt_read8bitoffsetreg>
 80094d0:	2803      	cmp	r0, #3
 80094d2:	d801      	bhi.n	80094d8 <dwt_ioctl+0x174>
 80094d4:	2500      	movs	r5, #0
 80094d6:	e7ef      	b.n	80094b8 <dwt_ioctl+0x154>
 80094d8:	f7f7 ffbe 	bl	8001458 <decamutexon>
 80094dc:	4604      	mov	r4, r0
 80094de:	2500      	movs	r5, #0
 80094e0:	9500      	str	r5, [sp, #0]
 80094e2:	462b      	mov	r3, r5
 80094e4:	462a      	mov	r2, r5
 80094e6:	4629      	mov	r1, r5
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7fe fb4b 	bl	8007b84 <dwt_writetodevice>
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7f7 ffc3 	bl	800147a <decamutexoff>
 80094f4:	e7e0      	b.n	80094b8 <dwt_ioctl+0x154>
 80094f6:	2c00      	cmp	r4, #0
 80094f8:	f001 8508 	beq.w	800af0c <dwt_ioctl+0x1ba8>
 80094fc:	7824      	ldrb	r4, [r4, #0]
 80094fe:	f014 0f1d 	tst.w	r4, #29
 8009502:	d065      	beq.n	80095d0 <dwt_ioctl+0x26c>
 8009504:	f014 0f01 	tst.w	r4, #1
 8009508:	d026      	beq.n	8009558 <dwt_ioctl+0x1f4>
 800950a:	f014 0f02 	tst.w	r4, #2
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	9200      	str	r2, [sp, #0]
 8009514:	4613      	mov	r3, r2
 8009516:	bf14      	ite	ne
 8009518:	210d      	movne	r1, #13
 800951a:	2103      	moveq	r1, #3
 800951c:	f7fe fb32 	bl	8007b84 <dwt_writetodevice>
 8009520:	2203      	movs	r2, #3
 8009522:	2144      	movs	r1, #68	; 0x44
 8009524:	4630      	mov	r0, r6
 8009526:	f7fd ff71 	bl	800740c <dwt_read8bitoffsetreg>
 800952a:	f010 0f08 	tst.w	r0, #8
 800952e:	d145      	bne.n	80095bc <dwt_ioctl+0x258>
 8009530:	2200      	movs	r2, #0
 8009532:	499d      	ldr	r1, [pc, #628]	; (80097a8 <dwt_ioctl+0x444>)
 8009534:	4630      	mov	r0, r6
 8009536:	f7fd ff41 	bl	80073bc <dwt_read32bitoffsetreg>
 800953a:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 800953e:	bf18      	it	ne
 8009540:	2500      	movne	r5, #0
 8009542:	d1b9      	bne.n	80094b8 <dwt_ioctl+0x154>
 8009544:	2100      	movs	r1, #0
 8009546:	9100      	str	r1, [sp, #0]
 8009548:	460b      	mov	r3, r1
 800954a:	460a      	mov	r2, r1
 800954c:	4630      	mov	r0, r6
 800954e:	f7fe fb19 	bl	8007b84 <dwt_writetodevice>
 8009552:	f04f 35ff 	mov.w	r5, #4294967295
 8009556:	e7af      	b.n	80094b8 <dwt_ioctl+0x154>
 8009558:	f014 0f08 	tst.w	r4, #8
 800955c:	d10e      	bne.n	800957c <dwt_ioctl+0x218>
 800955e:	f014 0f10 	tst.w	r4, #16
 8009562:	d11b      	bne.n	800959c <dwt_ioctl+0x238>
 8009564:	f014 0f02 	tst.w	r4, #2
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	9200      	str	r2, [sp, #0]
 800956e:	4613      	mov	r3, r2
 8009570:	bf14      	ite	ne
 8009572:	2110      	movne	r1, #16
 8009574:	2109      	moveq	r1, #9
 8009576:	f7fe fb05 	bl	8007b84 <dwt_writetodevice>
 800957a:	e7d1      	b.n	8009520 <dwt_ioctl+0x1bc>
 800957c:	2100      	movs	r1, #0
 800957e:	f7fe fdd3 	bl	8008128 <_dwt_adjust_delaytime>
 8009582:	f014 0f02 	tst.w	r4, #2
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	9200      	str	r2, [sp, #0]
 800958c:	4613      	mov	r3, r2
 800958e:	bf14      	ite	ne
 8009590:	210f      	movne	r1, #15
 8009592:	2107      	moveq	r1, #7
 8009594:	4630      	mov	r0, r6
 8009596:	f7fe faf5 	bl	8007b84 <dwt_writetodevice>
 800959a:	e7c1      	b.n	8009520 <dwt_ioctl+0x1bc>
 800959c:	2101      	movs	r1, #1
 800959e:	f7fe fdc3 	bl	8008128 <_dwt_adjust_delaytime>
 80095a2:	f014 0f02 	tst.w	r4, #2
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	9200      	str	r2, [sp, #0]
 80095ac:	4613      	mov	r3, r2
 80095ae:	bf14      	ite	ne
 80095b0:	210e      	movne	r1, #14
 80095b2:	2105      	moveq	r1, #5
 80095b4:	4630      	mov	r0, r6
 80095b6:	f7fe fae5 	bl	8007b84 <dwt_writetodevice>
 80095ba:	e7b1      	b.n	8009520 <dwt_ioctl+0x1bc>
 80095bc:	2100      	movs	r1, #0
 80095be:	9100      	str	r1, [sp, #0]
 80095c0:	460b      	mov	r3, r1
 80095c2:	460a      	mov	r2, r1
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7fe fadd 	bl	8007b84 <dwt_writetodevice>
 80095ca:	f04f 35ff 	mov.w	r5, #4294967295
 80095ce:	e773      	b.n	80094b8 <dwt_ioctl+0x154>
 80095d0:	f014 0f20 	tst.w	r4, #32
 80095d4:	d00c      	beq.n	80095f0 <dwt_ioctl+0x28c>
 80095d6:	f014 0f02 	tst.w	r4, #2
 80095da:	f04f 0500 	mov.w	r5, #0
 80095de:	9500      	str	r5, [sp, #0]
 80095e0:	462b      	mov	r3, r5
 80095e2:	462a      	mov	r2, r5
 80095e4:	bf14      	ite	ne
 80095e6:	2111      	movne	r1, #17
 80095e8:	210b      	moveq	r1, #11
 80095ea:	f7fe facb 	bl	8007b84 <dwt_writetodevice>
 80095ee:	e763      	b.n	80094b8 <dwt_ioctl+0x154>
 80095f0:	f014 0f02 	tst.w	r4, #2
 80095f4:	f04f 0500 	mov.w	r5, #0
 80095f8:	9500      	str	r5, [sp, #0]
 80095fa:	462b      	mov	r3, r5
 80095fc:	462a      	mov	r2, r5
 80095fe:	bf14      	ite	ne
 8009600:	210c      	movne	r1, #12
 8009602:	2101      	moveq	r1, #1
 8009604:	f7fe fabe 	bl	8007b84 <dwt_writetodevice>
 8009608:	e756      	b.n	80094b8 <dwt_ioctl+0x154>
 800960a:	2c00      	cmp	r4, #0
 800960c:	f001 8481 	beq.w	800af12 <dwt_ioctl+0x1bae>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	212c      	movs	r1, #44	; 0x2c
 8009616:	f7fe fc13 	bl	8007e40 <dwt_write32bitoffsetreg>
 800961a:	2500      	movs	r5, #0
 800961c:	e74c      	b.n	80094b8 <dwt_ioctl+0x154>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	2200      	movs	r2, #0
 8009622:	4962      	ldr	r1, [pc, #392]	; (80097ac <dwt_ioctl+0x448>)
 8009624:	f7fe fc0c 	bl	8007e40 <dwt_write32bitoffsetreg>
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	4960      	ldr	r1, [pc, #384]	; (80097b0 <dwt_ioctl+0x44c>)
 800962e:	4630      	mov	r0, r6
 8009630:	f7fe fc06 	bl	8007e40 <dwt_write32bitoffsetreg>
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	2200      	movs	r2, #0
 8009638:	495e      	ldr	r1, [pc, #376]	; (80097b4 <dwt_ioctl+0x450>)
 800963a:	4630      	mov	r0, r6
 800963c:	f7fe fc00 	bl	8007e40 <dwt_write32bitoffsetreg>
 8009640:	68e3      	ldr	r3, [r4, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	495c      	ldr	r1, [pc, #368]	; (80097b8 <dwt_ioctl+0x454>)
 8009646:	4630      	mov	r0, r6
 8009648:	f7fe fbfa 	bl	8007e40 <dwt_write32bitoffsetreg>
 800964c:	2500      	movs	r5, #0
 800964e:	e733      	b.n	80094b8 <dwt_ioctl+0x154>
 8009650:	2c00      	cmp	r4, #0
 8009652:	f001 8461 	beq.w	800af18 <dwt_ioctl+0x1bb4>
 8009656:	8823      	ldrh	r3, [r4, #0]
 8009658:	6865      	ldr	r5, [r4, #4]
 800965a:	2d03      	cmp	r5, #3
 800965c:	f201 845f 	bhi.w	800af1e <dwt_ioctl+0x1bba>
 8009660:	e8df f005 	tbb	[pc, r5]
 8009664:	130d0702 	.word	0x130d0702
 8009668:	2200      	movs	r2, #0
 800966a:	4954      	ldr	r1, [pc, #336]	; (80097bc <dwt_ioctl+0x458>)
 800966c:	f7fe fae7 	bl	8007c3e <dwt_write16bitoffsetreg>
 8009670:	e722      	b.n	80094b8 <dwt_ioctl+0x154>
 8009672:	2202      	movs	r2, #2
 8009674:	4951      	ldr	r1, [pc, #324]	; (80097bc <dwt_ioctl+0x458>)
 8009676:	f7fe fae2 	bl	8007c3e <dwt_write16bitoffsetreg>
 800967a:	2500      	movs	r5, #0
 800967c:	e71c      	b.n	80094b8 <dwt_ioctl+0x154>
 800967e:	2200      	movs	r2, #0
 8009680:	494f      	ldr	r1, [pc, #316]	; (80097c0 <dwt_ioctl+0x45c>)
 8009682:	f7fe fadc 	bl	8007c3e <dwt_write16bitoffsetreg>
 8009686:	2500      	movs	r5, #0
 8009688:	e716      	b.n	80094b8 <dwt_ioctl+0x154>
 800968a:	2202      	movs	r2, #2
 800968c:	494c      	ldr	r1, [pc, #304]	; (80097c0 <dwt_ioctl+0x45c>)
 800968e:	f7fe fad6 	bl	8007c3e <dwt_write16bitoffsetreg>
 8009692:	2500      	movs	r5, #0
 8009694:	e710      	b.n	80094b8 <dwt_ioctl+0x154>
 8009696:	2c00      	cmp	r4, #0
 8009698:	f001 8444 	beq.w	800af24 <dwt_ioctl+0x1bc0>
 800969c:	7823      	ldrb	r3, [r4, #0]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	f003 0306 	and.w	r3, r3, #6
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	f06f 0306 	mvn.w	r3, #6
 80096aa:	2200      	movs	r2, #0
 80096ac:	4945      	ldr	r1, [pc, #276]	; (80097c4 <dwt_ioctl+0x460>)
 80096ae:	f7fe ff59 	bl	8008564 <dwt_modify32bitoffsetreg>
 80096b2:	2500      	movs	r5, #0
 80096b4:	e700      	b.n	80094b8 <dwt_ioctl+0x154>
 80096b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	f04f 33ff 	mov.w	r3, #4294967295
 80096c0:	2200      	movs	r2, #0
 80096c2:	4941      	ldr	r1, [pc, #260]	; (80097c8 <dwt_ioctl+0x464>)
 80096c4:	f7fe ff4e 	bl	8008564 <dwt_modify32bitoffsetreg>
 80096c8:	2500      	movs	r5, #0
 80096ca:	e6f5      	b.n	80094b8 <dwt_ioctl+0x154>
 80096cc:	2c00      	cmp	r4, #0
 80096ce:	f001 842c 	beq.w	800af2a <dwt_ioctl+0x1bc6>
 80096d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80096d4:	7b5b      	ldrb	r3, [r3, #13]
 80096d6:	7023      	strb	r3, [r4, #0]
 80096d8:	2500      	movs	r5, #0
 80096da:	e6ed      	b.n	80094b8 <dwt_ioctl+0x154>
 80096dc:	2c00      	cmp	r4, #0
 80096de:	f001 8427 	beq.w	800af30 <dwt_ioctl+0x1bcc>
 80096e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80096e4:	7a9b      	ldrb	r3, [r3, #10]
 80096e6:	7023      	strb	r3, [r4, #0]
 80096e8:	2500      	movs	r5, #0
 80096ea:	e6e5      	b.n	80094b8 <dwt_ioctl+0x154>
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	f001 8422 	beq.w	800af36 <dwt_ioctl+0x1bd2>
 80096f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80096f4:	7adb      	ldrb	r3, [r3, #11]
 80096f6:	7023      	strb	r3, [r4, #0]
 80096f8:	2500      	movs	r5, #0
 80096fa:	e6dd      	b.n	80094b8 <dwt_ioctl+0x154>
 80096fc:	2c00      	cmp	r4, #0
 80096fe:	f001 841d 	beq.w	800af3c <dwt_ioctl+0x1bd8>
 8009702:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	2500      	movs	r5, #0
 800970a:	e6d5      	b.n	80094b8 <dwt_ioctl+0x154>
 800970c:	2c00      	cmp	r4, #0
 800970e:	f001 8418 	beq.w	800af42 <dwt_ioctl+0x1bde>
 8009712:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	2500      	movs	r5, #0
 800971a:	e6cd      	b.n	80094b8 <dwt_ioctl+0x154>
 800971c:	f7fe fb7e 	bl	8007e1c <ull_signal_rx_buff_free>
 8009720:	2500      	movs	r5, #0
 8009722:	e6c9      	b.n	80094b8 <dwt_ioctl+0x154>
 8009724:	2c00      	cmp	r4, #0
 8009726:	f001 840f 	beq.w	800af48 <dwt_ioctl+0x1be4>
 800972a:	6821      	ldr	r1, [r4, #0]
 800972c:	f7fe fd24 	bl	8008178 <ull_setrxaftertxdelay>
 8009730:	2500      	movs	r5, #0
 8009732:	e6c1      	b.n	80094b8 <dwt_ioctl+0x154>
 8009734:	2c00      	cmp	r4, #0
 8009736:	f001 840a 	beq.w	800af4e <dwt_ioctl+0x1bea>
 800973a:	7825      	ldrb	r5, [r4, #0]
 800973c:	b15d      	cbz	r5, 8009756 <dwt_ioctl+0x3f2>
 800973e:	6864      	ldr	r4, [r4, #4]
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	23ff      	movs	r3, #255	; 0xff
 8009746:	2200      	movs	r2, #0
 8009748:	2110      	movs	r1, #16
 800974a:	f7ff f8f5 	bl	8008938 <dwt_modify8bitoffsetreg>
 800974e:	2d02      	cmp	r5, #2
 8009750:	d107      	bne.n	8009762 <dwt_ioctl+0x3fe>
 8009752:	60f4      	str	r4, [r6, #12]
 8009754:	e005      	b.n	8009762 <dwt_ioctl+0x3fe>
 8009756:	2200      	movs	r2, #0
 8009758:	9200      	str	r2, [sp, #0]
 800975a:	23bf      	movs	r3, #191	; 0xbf
 800975c:	2110      	movs	r1, #16
 800975e:	f7ff f8eb 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009762:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009764:	759d      	strb	r5, [r3, #22]
 8009766:	2500      	movs	r5, #0
 8009768:	e6a6      	b.n	80094b8 <dwt_ioctl+0x154>
 800976a:	2c00      	cmp	r4, #0
 800976c:	f001 83f2 	beq.w	800af54 <dwt_ioctl+0x1bf0>
 8009770:	6865      	ldr	r5, [r4, #4]
 8009772:	7823      	ldrb	r3, [r4, #0]
 8009774:	2203      	movs	r2, #3
 8009776:	4915      	ldr	r1, [pc, #84]	; (80097cc <dwt_ioctl+0x468>)
 8009778:	f7fe fa0f 	bl	8007b9a <dwt_write8bitoffsetreg>
 800977c:	b945      	cbnz	r5, 8009790 <dwt_ioctl+0x42c>
 800977e:	2200      	movs	r2, #0
 8009780:	9200      	str	r2, [sp, #0]
 8009782:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8009786:	2110      	movs	r1, #16
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fa87 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800978e:	e693      	b.n	80094b8 <dwt_ioctl+0x154>
 8009790:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	f04f 33ff 	mov.w	r3, #4294967295
 800979a:	2200      	movs	r2, #0
 800979c:	2110      	movs	r1, #16
 800979e:	4630      	mov	r0, r6
 80097a0:	f7fe fee0 	bl	8008564 <dwt_modify32bitoffsetreg>
 80097a4:	2500      	movs	r5, #0
 80097a6:	e687      	b.n	80094b8 <dwt_ioctl+0x154>
 80097a8:	000f0030 	.word	0x000f0030
 80097ac:	00010054 	.word	0x00010054
 80097b0:	00010058 	.word	0x00010058
 80097b4:	0001005c 	.word	0x0001005c
 80097b8:	00010060 	.word	0x00010060
 80097bc:	00010018 	.word	0x00010018
 80097c0:	0001001c 	.word	0x0001001c
 80097c4:	00010014 	.word	0x00010014
 80097c8:	00110004 	.word	0x00110004
 80097cc:	00010008 	.word	0x00010008
 80097d0:	2200      	movs	r2, #0
 80097d2:	4611      	mov	r1, r2
 80097d4:	f7fd fdf2 	bl	80073bc <dwt_read32bitoffsetreg>
 80097d8:	68b2      	ldr	r2, [r6, #8]
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	4043      	eors	r3, r0
 80097de:	6852      	ldr	r2, [r2, #4]
 80097e0:	4213      	tst	r3, r2
 80097e2:	bf14      	ite	ne
 80097e4:	f04f 35ff 	movne.w	r5, #4294967295
 80097e8:	2500      	moveq	r5, #0
 80097ea:	e665      	b.n	80094b8 <dwt_ioctl+0x154>
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	f001 83b4 	beq.w	800af5a <dwt_ioctl+0x1bf6>
 80097f2:	7821      	ldrb	r1, [r4, #0]
 80097f4:	f7ff f8b4 	bl	8008960 <ull_configciadiag>
 80097f8:	2500      	movs	r5, #0
 80097fa:	e65d      	b.n	80094b8 <dwt_ioctl+0x154>
 80097fc:	b93a      	cbnz	r2, 800980e <dwt_ioctl+0x4aa>
 80097fe:	2200      	movs	r2, #0
 8009800:	9200      	str	r2, [sp, #0]
 8009802:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8009806:	49ae      	ldr	r1, [pc, #696]	; (8009ac0 <dwt_ioctl+0x75c>)
 8009808:	f7ff fa48 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800980c:	e654      	b.n	80094b8 <dwt_ioctl+0x154>
 800980e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009818:	2200      	movs	r2, #0
 800981a:	49a9      	ldr	r1, [pc, #676]	; (8009ac0 <dwt_ioctl+0x75c>)
 800981c:	f7ff fa3e 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8009820:	2500      	movs	r5, #0
 8009822:	e649      	b.n	80094b8 <dwt_ioctl+0x154>
 8009824:	f002 0201 	and.w	r2, r2, #1
 8009828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800982c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8009830:	2a00      	cmp	r2, #0
 8009832:	bf08      	it	eq
 8009834:	460b      	moveq	r3, r1
 8009836:	02d2      	lsls	r2, r2, #11
 8009838:	f015 0f02 	tst.w	r5, #2
 800983c:	bf12      	itee	ne
 800983e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8009842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009846:	b29b      	uxtheq	r3, r3
 8009848:	9200      	str	r2, [sp, #0]
 800984a:	2200      	movs	r2, #0
 800984c:	499c      	ldr	r1, [pc, #624]	; (8009ac0 <dwt_ioctl+0x75c>)
 800984e:	f7ff fa25 	bl	8008c9c <dwt_modify16bitoffsetreg>
 8009852:	2500      	movs	r5, #0
 8009854:	e630      	b.n	80094b8 <dwt_ioctl+0x154>
 8009856:	b92a      	cbnz	r2, 8009864 <dwt_ioctl+0x500>
 8009858:	4b9a      	ldr	r3, [pc, #616]	; (8009ac4 <dwt_ioctl+0x760>)
 800985a:	2202      	movs	r2, #2
 800985c:	499a      	ldr	r1, [pc, #616]	; (8009ac8 <dwt_ioctl+0x764>)
 800985e:	f7fe faef 	bl	8007e40 <dwt_write32bitoffsetreg>
 8009862:	e629      	b.n	80094b8 <dwt_ioctl+0x154>
 8009864:	4b99      	ldr	r3, [pc, #612]	; (8009acc <dwt_ioctl+0x768>)
 8009866:	2202      	movs	r2, #2
 8009868:	4997      	ldr	r1, [pc, #604]	; (8009ac8 <dwt_ioctl+0x764>)
 800986a:	f7fe fae9 	bl	8007e40 <dwt_write32bitoffsetreg>
 800986e:	2500      	movs	r5, #0
 8009870:	e622      	b.n	80094b8 <dwt_ioctl+0x154>
 8009872:	4611      	mov	r1, r2
 8009874:	f7fe fc96 	bl	80081a4 <ull_setlnapamode>
 8009878:	2500      	movs	r5, #0
 800987a:	e61d      	b.n	80094b8 <dwt_ioctl+0x154>
 800987c:	2c00      	cmp	r4, #0
 800987e:	f001 836f 	beq.w	800af60 <dwt_ioctl+0x1bfc>
 8009882:	2200      	movs	r2, #0
 8009884:	4992      	ldr	r1, [pc, #584]	; (8009ad0 <dwt_ioctl+0x76c>)
 8009886:	f7fd fdc1 	bl	800740c <dwt_read8bitoffsetreg>
 800988a:	7020      	strb	r0, [r4, #0]
 800988c:	2500      	movs	r5, #0
 800988e:	e613      	b.n	80094b8 <dwt_ioctl+0x154>
 8009890:	4621      	mov	r1, r4
 8009892:	f7fe fca9 	bl	80081e8 <ull_configurestskey>
 8009896:	2500      	movs	r5, #0
 8009898:	e60e      	b.n	80094b8 <dwt_ioctl+0x154>
 800989a:	4621      	mov	r1, r4
 800989c:	f7fe fcc8 	bl	8008230 <ull_configurestsiv>
 80098a0:	2500      	movs	r5, #0
 80098a2:	e609      	b.n	80094b8 <dwt_ioctl+0x154>
 80098a4:	2301      	movs	r3, #1
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	23ff      	movs	r3, #255	; 0xff
 80098aa:	2200      	movs	r2, #0
 80098ac:	4989      	ldr	r1, [pc, #548]	; (8009ad4 <dwt_ioctl+0x770>)
 80098ae:	f7ff f843 	bl	8008938 <dwt_modify8bitoffsetreg>
 80098b2:	2500      	movs	r5, #0
 80098b4:	e600      	b.n	80094b8 <dwt_ioctl+0x154>
 80098b6:	4611      	mov	r1, r2
 80098b8:	f7fe fcde 	bl	8008278 <ull_configmrxlut>
 80098bc:	2500      	movs	r5, #0
 80098be:	e5fb      	b.n	80094b8 <dwt_ioctl+0x154>
 80098c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80098c2:	7a1b      	ldrb	r3, [r3, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d137      	bne.n	8009938 <dwt_ioctl+0x5d4>
 80098c8:	2314      	movs	r3, #20
 80098ca:	2201      	movs	r2, #1
 80098cc:	4982      	ldr	r1, [pc, #520]	; (8009ad8 <dwt_ioctl+0x774>)
 80098ce:	4630      	mov	r0, r6
 80098d0:	f7fe f963 	bl	8007b9a <dwt_write8bitoffsetreg>
 80098d4:	2318      	movs	r3, #24
 80098d6:	2200      	movs	r2, #0
 80098d8:	4980      	ldr	r1, [pc, #512]	; (8009adc <dwt_ioctl+0x778>)
 80098da:	4630      	mov	r0, r6
 80098dc:	f7fe fab0 	bl	8007e40 <dwt_write32bitoffsetreg>
 80098e0:	23e8      	movs	r3, #232	; 0xe8
 80098e2:	2200      	movs	r2, #0
 80098e4:	497e      	ldr	r1, [pc, #504]	; (8009ae0 <dwt_ioctl+0x77c>)
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7fe faaa 	bl	8007e40 <dwt_write32bitoffsetreg>
 80098ec:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80098ee:	8a5b      	ldrh	r3, [r3, #18]
 80098f0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d022      	beq.n	800993e <dwt_ioctl+0x5da>
 80098f8:	2b60      	cmp	r3, #96	; 0x60
 80098fa:	d02b      	beq.n	8009954 <dwt_ioctl+0x5f0>
 80098fc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80098fe:	7e1b      	ldrb	r3, [r3, #24]
 8009900:	085b      	lsrs	r3, r3, #1
 8009902:	d032      	beq.n	800996a <dwt_ioctl+0x606>
 8009904:	2200      	movs	r2, #0
 8009906:	4977      	ldr	r1, [pc, #476]	; (8009ae4 <dwt_ioctl+0x780>)
 8009908:	4630      	mov	r0, r6
 800990a:	f7fd fd6d 	bl	80073e8 <dwt_read16bitoffsetreg>
 800990e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8009912:	3b09      	subs	r3, #9
 8009914:	2b0f      	cmp	r3, #15
 8009916:	f201 8326 	bhi.w	800af66 <dwt_ioctl+0x1c02>
 800991a:	f000 0001 	and.w	r0, r0, #1
 800991e:	2800      	cmp	r0, #0
 8009920:	bf0c      	ite	eq
 8009922:	2105      	moveq	r1, #5
 8009924:	2109      	movne	r1, #9
 8009926:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009928:	7a5b      	ldrb	r3, [r3, #9]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d029      	beq.n	8009982 <dwt_ioctl+0x61e>
 800992e:	4630      	mov	r0, r6
 8009930:	f7fe fca2 	bl	8008278 <ull_configmrxlut>
 8009934:	2500      	movs	r5, #0
 8009936:	e5bf      	b.n	80094b8 <dwt_ioctl+0x154>
 8009938:	f7ff f9ca 	bl	8008cd0 <_dwt_prog_ldo_and_bias_tune>
 800993c:	e7c4      	b.n	80098c8 <dwt_ioctl+0x564>
 800993e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8009948:	2200      	movs	r2, #0
 800994a:	4967      	ldr	r1, [pc, #412]	; (8009ae8 <dwt_ioctl+0x784>)
 800994c:	4630      	mov	r0, r6
 800994e:	f7fe fe09 	bl	8008564 <dwt_modify32bitoffsetreg>
 8009952:	e7d3      	b.n	80098fc <dwt_ioctl+0x598>
 8009954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800995e:	2200      	movs	r2, #0
 8009960:	4961      	ldr	r1, [pc, #388]	; (8009ae8 <dwt_ioctl+0x784>)
 8009962:	4630      	mov	r0, r6
 8009964:	f7fe fdfe 	bl	8008564 <dwt_modify32bitoffsetreg>
 8009968:	e7c8      	b.n	80098fc <dwt_ioctl+0x598>
 800996a:	2301      	movs	r3, #1
 800996c:	2200      	movs	r2, #0
 800996e:	495f      	ldr	r1, [pc, #380]	; (8009aec <dwt_ioctl+0x788>)
 8009970:	4630      	mov	r0, r6
 8009972:	f7fe f912 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009976:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8009978:	7e13      	ldrb	r3, [r2, #24]
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	7613      	strb	r3, [r2, #24]
 8009980:	e7c0      	b.n	8009904 <dwt_ioctl+0x5a0>
 8009982:	4630      	mov	r0, r6
 8009984:	f7fe fe12 	bl	80085ac <_dwt_kick_dgc_on_wakeup>
 8009988:	2500      	movs	r5, #0
 800998a:	e595      	b.n	80094b8 <dwt_ioctl+0x154>
 800998c:	2c00      	cmp	r4, #0
 800998e:	f001 82ed 	beq.w	800af6c <dwt_ioctl+0x1c08>
 8009992:	7823      	ldrb	r3, [r4, #0]
 8009994:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009996:	75d3      	strb	r3, [r2, #23]
 8009998:	031b      	lsls	r3, r3, #12
 800999a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	f644 73ff 	movw	r3, #20479	; 0x4fff
 80099a4:	2200      	movs	r2, #0
 80099a6:	2110      	movs	r1, #16
 80099a8:	f7ff f978 	bl	8008c9c <dwt_modify16bitoffsetreg>
 80099ac:	2500      	movs	r5, #0
 80099ae:	e583      	b.n	80094b8 <dwt_ioctl+0x154>
 80099b0:	2c00      	cmp	r4, #0
 80099b2:	f001 82de 	beq.w	800af72 <dwt_ioctl+0x1c0e>
 80099b6:	8823      	ldrh	r3, [r4, #0]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80099be:	f7fe f93e 	bl	8007c3e <dwt_write16bitoffsetreg>
 80099c2:	2500      	movs	r5, #0
 80099c4:	e578      	b.n	80094b8 <dwt_ioctl+0x154>
 80099c6:	2c00      	cmp	r4, #0
 80099c8:	f001 82d6 	beq.w	800af78 <dwt_ioctl+0x1c14>
 80099cc:	2200      	movs	r2, #0
 80099ce:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80099d2:	f7fd fd09 	bl	80073e8 <dwt_read16bitoffsetreg>
 80099d6:	8020      	strh	r0, [r4, #0]
 80099d8:	2500      	movs	r5, #0
 80099da:	e56d      	b.n	80094b8 <dwt_ioctl+0x154>
 80099dc:	2c00      	cmp	r4, #0
 80099de:	f001 82ce 	beq.w	800af7e <dwt_ioctl+0x1c1a>
 80099e2:	8823      	ldrh	r3, [r4, #0]
 80099e4:	2200      	movs	r2, #0
 80099e6:	4942      	ldr	r1, [pc, #264]	; (8009af0 <dwt_ioctl+0x78c>)
 80099e8:	f7fe f929 	bl	8007c3e <dwt_write16bitoffsetreg>
 80099ec:	2500      	movs	r5, #0
 80099ee:	e563      	b.n	80094b8 <dwt_ioctl+0x154>
 80099f0:	2c00      	cmp	r4, #0
 80099f2:	f001 82c7 	beq.w	800af84 <dwt_ioctl+0x1c20>
 80099f6:	2200      	movs	r2, #0
 80099f8:	493d      	ldr	r1, [pc, #244]	; (8009af0 <dwt_ioctl+0x78c>)
 80099fa:	f7fd fcf5 	bl	80073e8 <dwt_read16bitoffsetreg>
 80099fe:	8020      	strh	r0, [r4, #0]
 8009a00:	2500      	movs	r5, #0
 8009a02:	e559      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a04:	2c00      	cmp	r4, #0
 8009a06:	f001 82c0 	beq.w	800af8a <dwt_ioctl+0x1c26>
 8009a0a:	88a3      	ldrh	r3, [r4, #4]
 8009a0c:	88e2      	ldrh	r2, [r4, #6]
 8009a0e:	6821      	ldr	r1, [r4, #0]
 8009a10:	9100      	str	r1, [sp, #0]
 8009a12:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8009a16:	f7fe f8b5 	bl	8007b84 <dwt_writetodevice>
 8009a1a:	2500      	movs	r5, #0
 8009a1c:	e54c      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	f001 82b6 	beq.w	800af90 <dwt_ioctl+0x1c2c>
 8009a24:	88a3      	ldrh	r3, [r4, #4]
 8009a26:	88e2      	ldrh	r2, [r4, #6]
 8009a28:	6821      	ldr	r1, [r4, #0]
 8009a2a:	9100      	str	r1, [sp, #0]
 8009a2c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8009a30:	f7fd fcba 	bl	80073a8 <dwt_readfromdevice>
 8009a34:	2500      	movs	r5, #0
 8009a36:	e53f      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a38:	2c00      	cmp	r4, #0
 8009a3a:	f001 82ac 	beq.w	800af96 <dwt_ioctl+0x1c32>
 8009a3e:	88e3      	ldrh	r3, [r4, #6]
 8009a40:	88a2      	ldrh	r2, [r4, #4]
 8009a42:	6821      	ldr	r1, [r4, #0]
 8009a44:	f7fe fcc2 	bl	80083cc <ull_readrxdata>
 8009a48:	2500      	movs	r5, #0
 8009a4a:	e535      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	f001 82a5 	beq.w	800af9c <dwt_ioctl+0x1c38>
 8009a52:	88e3      	ldrh	r3, [r4, #6]
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	88a1      	ldrh	r1, [r4, #4]
 8009a58:	f7fe fd52 	bl	8008500 <ull_writetxdata>
 8009a5c:	2500      	movs	r5, #0
 8009a5e:	e52b      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a60:	4611      	mov	r1, r2
 8009a62:	f7fe fce9 	bl	8008438 <ull_rxenable>
 8009a66:	2500      	movs	r5, #0
 8009a68:	e526      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a6a:	2c00      	cmp	r4, #0
 8009a6c:	f001 8299 	beq.w	800afa2 <dwt_ioctl+0x1c3e>
 8009a70:	7923      	ldrb	r3, [r4, #4]
 8009a72:	8862      	ldrh	r2, [r4, #2]
 8009a74:	8821      	ldrh	r1, [r4, #0]
 8009a76:	f7fe ff2d 	bl	80088d4 <ull_writetxfctrl>
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	e51c      	b.n	80094b8 <dwt_ioctl+0x154>
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	f001 8292 	beq.w	800afa8 <dwt_ioctl+0x1c44>
 8009a84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009a86:	7bdb      	ldrb	r3, [r3, #15]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d00c      	beq.n	8009aa6 <dwt_ioctl+0x742>
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d110      	bne.n	8009ab2 <dwt_ioctl+0x74e>
 8009a90:	220c      	movs	r2, #12
 8009a92:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009a96:	f7fd fca7 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009a9a:	b200      	sxth	r0, r0
 8009a9c:	f340 030c 	sbfx	r3, r0, #0, #13
 8009aa0:	8023      	strh	r3, [r4, #0]
 8009aa2:	2500      	movs	r5, #0
 8009aa4:	e508      	b.n	80094b8 <dwt_ioctl+0x154>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4912      	ldr	r1, [pc, #72]	; (8009af4 <dwt_ioctl+0x790>)
 8009aaa:	f7fd fc9d 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009aae:	b200      	sxth	r0, r0
 8009ab0:	e7f4      	b.n	8009a9c <dwt_ioctl+0x738>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4910      	ldr	r1, [pc, #64]	; (8009af8 <dwt_ioctl+0x794>)
 8009ab6:	f7fd fc97 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009aba:	b200      	sxth	r0, r0
 8009abc:	e7ee      	b.n	8009a9c <dwt_ioctl+0x738>
 8009abe:	bf00      	nop
 8009ac0:	00110008 	.word	0x00110008
 8009ac4:	00d20874 	.word	0x00d20874
 8009ac8:	00110010 	.word	0x00110010
 8009acc:	04d28874 	.word	0x04d28874
 8009ad0:	0007001c 	.word	0x0007001c
 8009ad4:	00020004 	.word	0x00020004
 8009ad8:	00070050 	.word	0x00070050
 8009adc:	001f000c 	.word	0x001f000c
 8009ae0:	001f0010 	.word	0x001f0010
 8009ae4:	00010014 	.word	0x00010014
 8009ae8:	000b0008 	.word	0x000b0008
 8009aec:	00010028 	.word	0x00010028
 8009af0:	00010004 	.word	0x00010004
 8009af4:	0018000c 	.word	0x0018000c
 8009af8:	000c0020 	.word	0x000c0020
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	f001 8256 	beq.w	800afae <dwt_ioctl+0x1c4a>
 8009b02:	ab0c      	add	r3, sp, #48	; 0x30
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	2303      	movs	r3, #3
 8009b08:	2200      	movs	r2, #0
 8009b0a:	49bb      	ldr	r1, [pc, #748]	; (8009df8 <dwt_ioctl+0xa94>)
 8009b0c:	f7fd fc4c 	bl	80073a8 <dwt_readfromdevice>
 8009b10:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8009b14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009b18:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8009b1c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009b20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009b24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009b28:	bf1c      	itt	ne
 8009b2a:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8009b2e:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	2500      	movs	r5, #0
 8009b36:	e4bf      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b38:	f7fe f892 	bl	8007c60 <ull_clearaonconfig>
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	e4bb      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	f001 8237 	beq.w	800afb4 <dwt_ioctl+0x1c50>
 8009b46:	8861      	ldrh	r1, [r4, #2]
 8009b48:	f7fe ff40 	bl	80089cc <ull_calcbandwidthadj>
 8009b4c:	7020      	strb	r0, [r4, #0]
 8009b4e:	2500      	movs	r5, #0
 8009b50:	e4b2      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b52:	4621      	mov	r1, r4
 8009b54:	f7fd fc68 	bl	8007428 <ull_readdiagnostics>
 8009b58:	2500      	movs	r5, #0
 8009b5a:	e4ad      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	f001 822c 	beq.w	800afba <dwt_ioctl+0x1c56>
 8009b62:	2201      	movs	r2, #1
 8009b64:	2174      	movs	r1, #116	; 0x74
 8009b66:	f7fd fc29 	bl	80073bc <dwt_read32bitoffsetreg>
 8009b6a:	6020      	str	r0, [r4, #0]
 8009b6c:	2500      	movs	r5, #0
 8009b6e:	e4a3      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b70:	2c00      	cmp	r4, #0
 8009b72:	f001 8225 	beq.w	800afc0 <dwt_ioctl+0x1c5c>
 8009b76:	2200      	movs	r2, #0
 8009b78:	2174      	movs	r1, #116	; 0x74
 8009b7a:	f7fd fc1f 	bl	80073bc <dwt_read32bitoffsetreg>
 8009b7e:	6020      	str	r0, [r4, #0]
 8009b80:	2500      	movs	r5, #0
 8009b82:	e499      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b84:	9400      	str	r4, [sp, #0]
 8009b86:	2305      	movs	r3, #5
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2174      	movs	r1, #116	; 0x74
 8009b8c:	f7fd fc0c 	bl	80073a8 <dwt_readfromdevice>
 8009b90:	2500      	movs	r5, #0
 8009b92:	e491      	b.n	80094b8 <dwt_ioctl+0x154>
 8009b94:	2c00      	cmp	r4, #0
 8009b96:	f001 8216 	beq.w	800afc6 <dwt_ioctl+0x1c62>
 8009b9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009b9c:	7bdb      	ldrb	r3, [r3, #15]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d014      	beq.n	8009bcc <dwt_ioctl+0x868>
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d119      	bne.n	8009bda <dwt_ioctl+0x876>
 8009ba6:	2216      	movs	r2, #22
 8009ba8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009bac:	f7fd fc1c 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009bb0:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8009bb4:	b283      	uxth	r3, r0
 8009bb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009bba:	d004      	beq.n	8009bc6 <dwt_ioctl+0x862>
 8009bbc:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8009bc0:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8009bc4:	b218      	sxth	r0, r3
 8009bc6:	8020      	strh	r0, [r4, #0]
 8009bc8:	2500      	movs	r5, #0
 8009bca:	e475      	b.n	80094b8 <dwt_ioctl+0x154>
 8009bcc:	2202      	movs	r2, #2
 8009bce:	498b      	ldr	r1, [pc, #556]	; (8009dfc <dwt_ioctl+0xa98>)
 8009bd0:	f7fd fc0a 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009bd4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8009bd8:	e7ec      	b.n	8009bb4 <dwt_ioctl+0x850>
 8009bda:	2202      	movs	r2, #2
 8009bdc:	4988      	ldr	r1, [pc, #544]	; (8009e00 <dwt_ioctl+0xa9c>)
 8009bde:	f7fd fc03 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009be2:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8009be6:	e7e5      	b.n	8009bb4 <dwt_ioctl+0x850>
 8009be8:	9400      	str	r4, [sp, #0]
 8009bea:	2306      	movs	r3, #6
 8009bec:	2200      	movs	r2, #0
 8009bee:	4985      	ldr	r1, [pc, #532]	; (8009e04 <dwt_ioctl+0xaa0>)
 8009bf0:	f7fd fbda 	bl	80073a8 <dwt_readfromdevice>
 8009bf4:	7963      	ldrb	r3, [r4, #5]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	7163      	strb	r3, [r4, #5]
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	e45b      	b.n	80094b8 <dwt_ioctl+0x154>
 8009c00:	2c00      	cmp	r4, #0
 8009c02:	f001 81e3 	beq.w	800afcc <dwt_ioctl+0x1c68>
 8009c06:	2201      	movs	r2, #1
 8009c08:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8009c0c:	f7fd fbfe 	bl	800740c <dwt_read8bitoffsetreg>
 8009c10:	7020      	strb	r0, [r4, #0]
 8009c12:	2500      	movs	r5, #0
 8009c14:	e450      	b.n	80094b8 <dwt_ioctl+0x154>
 8009c16:	2c00      	cmp	r4, #0
 8009c18:	f001 81db 	beq.w	800afd2 <dwt_ioctl+0x1c6e>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8009c22:	f7fd fbf3 	bl	800740c <dwt_read8bitoffsetreg>
 8009c26:	7020      	strb	r0, [r4, #0]
 8009c28:	2500      	movs	r5, #0
 8009c2a:	e445      	b.n	80094b8 <dwt_ioctl+0x154>
 8009c2c:	2c00      	cmp	r4, #0
 8009c2e:	f001 81d3 	beq.w	800afd8 <dwt_ioctl+0x1c74>
 8009c32:	88a2      	ldrh	r2, [r4, #4]
 8009c34:	6821      	ldr	r1, [r4, #0]
 8009c36:	f7fe fd1d 	bl	8008674 <_dwt_otpprogword32>
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	e43c      	b.n	80094b8 <dwt_ioctl+0x154>
 8009c3e:	2c00      	cmp	r4, #0
 8009c40:	f001 81cd 	beq.w	800afde <dwt_ioctl+0x1c7a>
 8009c44:	6825      	ldr	r5, [r4, #0]
 8009c46:	88a4      	ldrh	r4, [r4, #4]
 8009c48:	4622      	mov	r2, r4
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	f7fe fd12 	bl	8008674 <_dwt_otpprogword32>
 8009c50:	4621      	mov	r1, r4
 8009c52:	4630      	mov	r0, r6
 8009c54:	f7fe f84e 	bl	8007cf4 <_dwt_otpread>
 8009c58:	1a2d      	subs	r5, r5, r0
 8009c5a:	bf18      	it	ne
 8009c5c:	f04f 35ff 	movne.w	r5, #4294967295
 8009c60:	e42a      	b.n	80094b8 <dwt_ioctl+0x154>
 8009c62:	2a02      	cmp	r2, #2
 8009c64:	d00e      	beq.n	8009c84 <dwt_ioctl+0x920>
 8009c66:	4c68      	ldr	r4, [pc, #416]	; (8009e08 <dwt_ioctl+0xaa4>)
 8009c68:	2300      	movs	r3, #0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f7fd ff93 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009c74:	2302      	movs	r3, #2
 8009c76:	2200      	movs	r2, #0
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f7fd ff8d 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009c80:	2500      	movs	r5, #0
 8009c82:	e419      	b.n	80094b8 <dwt_ioctl+0x154>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	23fe      	movs	r3, #254	; 0xfe
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	495f      	ldr	r1, [pc, #380]	; (8009e0c <dwt_ioctl+0xaa8>)
 8009c8e:	f7fe fe53 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009c92:	e7e8      	b.n	8009c66 <dwt_ioctl+0x902>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	f001 81a5 	beq.w	800afe4 <dwt_ioctl+0x1c80>
 8009c9a:	8824      	ldrh	r4, [r4, #0]
 8009c9c:	b2e2      	uxtb	r2, r4
 8009c9e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8009ca2:	f7fe f869 	bl	8007d78 <ull_aon_write>
 8009ca6:	0a22      	lsrs	r2, r4, #8
 8009ca8:	f240 1103 	movw	r1, #259	; 0x103
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7fe f863 	bl	8007d78 <ull_aon_write>
 8009cb2:	2500      	movs	r5, #0
 8009cb4:	e400      	b.n	80094b8 <dwt_ioctl+0x154>
 8009cb6:	2c00      	cmp	r4, #0
 8009cb8:	f001 8197 	beq.w	800afea <dwt_ioctl+0x1c86>
 8009cbc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8009e18 <dwt_ioctl+0xab4>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	23ff      	movs	r3, #255	; 0xff
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4641      	mov	r1, r8
 8009cca:	f7fe fe35 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009cce:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7fe f830 	bl	8007d38 <ull_aon_read>
 8009cd8:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8009cdc:	462a      	mov	r2, r5
 8009cde:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7fe f848 	bl	8007d78 <ull_aon_write>
 8009ce8:	f045 0204 	orr.w	r2, r5, #4
 8009cec:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7fe f841 	bl	8007d78 <ull_aon_write>
 8009cf6:	2002      	movs	r0, #2
 8009cf8:	f7f7 fbcc 	bl	8001494 <deca_sleep>
 8009cfc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7fe f819 	bl	8007d38 <ull_aon_read>
 8009d06:	4607      	mov	r7, r0
 8009d08:	f240 110f 	movw	r1, #271	; 0x10f
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7fe f813 	bl	8007d38 <ull_aon_read>
 8009d12:	4681      	mov	r9, r0
 8009d14:	462a      	mov	r2, r5
 8009d16:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7fe f82c 	bl	8007d78 <ull_aon_write>
 8009d20:	2500      	movs	r5, #0
 8009d22:	9500      	str	r5, [sp, #0]
 8009d24:	23ef      	movs	r3, #239	; 0xef
 8009d26:	462a      	mov	r2, r5
 8009d28:	4641      	mov	r1, r8
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7fe fe04 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009d30:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8009d34:	8027      	strh	r7, [r4, #0]
 8009d36:	f7ff bbbf 	b.w	80094b8 <dwt_ioctl+0x154>
 8009d3a:	2c00      	cmp	r4, #0
 8009d3c:	f001 8158 	beq.w	800aff0 <dwt_ioctl+0x1c8c>
 8009d40:	78a2      	ldrb	r2, [r4, #2]
 8009d42:	8821      	ldrh	r1, [r4, #0]
 8009d44:	f7fe f840 	bl	8007dc8 <ull_configuresleep>
 8009d48:	2500      	movs	r5, #0
 8009d4a:	f7ff bbb5 	b.w	80094b8 <dwt_ioctl+0x154>
 8009d4e:	f7fd ff87 	bl	8007c60 <ull_clearaonconfig>
 8009d52:	2001      	movs	r0, #1
 8009d54:	f7f7 fb9e 	bl	8001494 <deca_sleep>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	23ff      	movs	r3, #255	; 0xff
 8009d5e:	2200      	movs	r2, #0
 8009d60:	492b      	ldr	r1, [pc, #172]	; (8009e10 <dwt_ioctl+0xaac>)
 8009d62:	4630      	mov	r0, r6
 8009d64:	f7fe fde8 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7fd ff12 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009d76:	2001      	movs	r0, #1
 8009d78:	f7f7 fb8c 	bl	8001494 <deca_sleep>
 8009d7c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009d7e:	2500      	movs	r5, #0
 8009d80:	73dd      	strb	r5, [r3, #15]
 8009d82:	2202      	movs	r2, #2
 8009d84:	825a      	strh	r2, [r3, #18]
 8009d86:	759d      	strb	r5, [r3, #22]
 8009d88:	75dd      	strb	r5, [r3, #23]
 8009d8a:	741d      	strb	r5, [r3, #16]
 8009d8c:	f7ff bb94 	b.w	80094b8 <dwt_ioctl+0x154>
 8009d90:	2c00      	cmp	r4, #0
 8009d92:	f001 8130 	beq.w	800aff6 <dwt_ioctl+0x1c92>
 8009d96:	7823      	ldrb	r3, [r4, #0]
 8009d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d9c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009d9e:	7393      	strb	r3, [r2, #14]
 8009da0:	2200      	movs	r2, #0
 8009da2:	491c      	ldr	r1, [pc, #112]	; (8009e14 <dwt_ioctl+0xab0>)
 8009da4:	f7fd fef9 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009da8:	2500      	movs	r5, #0
 8009daa:	f7ff bb85 	b.w	80094b8 <dwt_ioctl+0x154>
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	f001 8124 	beq.w	800affc <dwt_ioctl+0x1c98>
 8009db4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009db6:	7b9b      	ldrb	r3, [r3, #14]
 8009db8:	7023      	strb	r3, [r4, #0]
 8009dba:	2500      	movs	r5, #0
 8009dbc:	f7ff bb7c 	b.w	80094b8 <dwt_ioctl+0x154>
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	f7fe fc11 	bl	80085e8 <ull_enable_rf_tx>
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7fe fc42 	bl	8008650 <ull_enable_rftx_blocks>
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f7fd ff66 	bl	8007ca0 <ull_force_clocks>
 8009dd4:	220f      	movs	r2, #15
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff f86f 	bl	8008ebc <ull_repeated_cw>
 8009dde:	2500      	movs	r5, #0
 8009de0:	f7ff bb6a 	b.w	80094b8 <dwt_ioctl+0x154>
 8009de4:	2c00      	cmp	r4, #0
 8009de6:	f001 810c 	beq.w	800b002 <dwt_ioctl+0x1c9e>
 8009dea:	6862      	ldr	r2, [r4, #4]
 8009dec:	6821      	ldr	r1, [r4, #0]
 8009dee:	f7ff f865 	bl	8008ebc <ull_repeated_cw>
 8009df2:	2500      	movs	r5, #0
 8009df4:	f7ff bb60 	b.w	80094b8 <dwt_ioctl+0x154>
 8009df8:	00060029 	.word	0x00060029
 8009dfc:	00180014 	.word	0x00180014
 8009e00:	000c001c 	.word	0x000c001c
 8009e04:	000c0018 	.word	0x000c0018
 8009e08:	000a0004 	.word	0x000a0004
 8009e0c:	00110008 	.word	0x00110008
 8009e10:	00110004 	.word	0x00110004
 8009e14:	00090014 	.word	0x00090014
 8009e18:	00070048 	.word	0x00070048
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	f001 80f3 	beq.w	800b008 <dwt_ioctl+0x1ca4>
 8009e22:	4dd0      	ldr	r5, [pc, #832]	; (800a164 <dwt_ioctl+0xe00>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7fd faf0 	bl	800740c <dwt_read8bitoffsetreg>
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	2302      	movs	r3, #2
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	23ff      	movs	r3, #255	; 0xff
 8009e34:	2200      	movs	r2, #0
 8009e36:	4629      	mov	r1, r5
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7fe fd7d 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009e3e:	2304      	movs	r3, #4
 8009e40:	2200      	movs	r2, #0
 8009e42:	49c9      	ldr	r1, [pc, #804]	; (800a168 <dwt_ioctl+0xe04>)
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7fd fea8 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e52:	4630      	mov	r0, r6
 8009e54:	f7fd fea1 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009e58:	4fc4      	ldr	r7, [pc, #784]	; (800a16c <dwt_ioctl+0xe08>)
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4639      	mov	r1, r7
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7fd fad3 	bl	800740c <dwt_read8bitoffsetreg>
 8009e66:	f010 0f01 	tst.w	r0, #1
 8009e6a:	d0f7      	beq.n	8009e5c <dwt_ioctl+0xaf8>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7fd fab8 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009e78:	4605      	mov	r5, r0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7fd fe89 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	49b6      	ldr	r1, [pc, #728]	; (800a168 <dwt_ioctl+0xe04>)
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7fd fe83 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009e94:	4643      	mov	r3, r8
 8009e96:	2200      	movs	r2, #0
 8009e98:	49b2      	ldr	r1, [pc, #712]	; (800a164 <dwt_ioctl+0xe00>)
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f7fd fe7d 	bl	8007b9a <dwt_write8bitoffsetreg>
 8009ea0:	8025      	strh	r5, [r4, #0]
 8009ea2:	2500      	movs	r5, #0
 8009ea4:	f7ff bb08 	b.w	80094b8 <dwt_ioctl+0x154>
 8009ea8:	2c00      	cmp	r4, #0
 8009eaa:	f001 80b0 	beq.w	800b00e <dwt_ioctl+0x1caa>
 8009eae:	7920      	ldrb	r0, [r4, #4]
 8009eb0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009eb2:	7adb      	ldrb	r3, [r3, #11]
 8009eb4:	1ac0      	subs	r0, r0, r3
 8009eb6:	f7f6 ffa9 	bl	8000e0c <__aeabi_i2f>
 8009eba:	49ad      	ldr	r1, [pc, #692]	; (800a170 <dwt_ioctl+0xe0c>)
 8009ebc:	f7f6 fffa 	bl	8000eb4 <__aeabi_fmul>
 8009ec0:	49ac      	ldr	r1, [pc, #688]	; (800a174 <dwt_ioctl+0xe10>)
 8009ec2:	f7f6 feef 	bl	8000ca4 <__addsf3>
 8009ec6:	6020      	str	r0, [r4, #0]
 8009ec8:	2500      	movs	r5, #0
 8009eca:	f7ff baf5 	b.w	80094b8 <dwt_ioctl+0x154>
 8009ece:	2c00      	cmp	r4, #0
 8009ed0:	f001 80a0 	beq.w	800b014 <dwt_ioctl+0x1cb0>
 8009ed4:	7920      	ldrb	r0, [r4, #4]
 8009ed6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009ed8:	7a9b      	ldrb	r3, [r3, #10]
 8009eda:	1ac0      	subs	r0, r0, r3
 8009edc:	f7f6 ff96 	bl	8000e0c <__aeabi_i2f>
 8009ee0:	49a5      	ldr	r1, [pc, #660]	; (800a178 <dwt_ioctl+0xe14>)
 8009ee2:	f7f6 ffe7 	bl	8000eb4 <__aeabi_fmul>
 8009ee6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8009eea:	f7f6 ffe3 	bl	8000eb4 <__aeabi_fmul>
 8009eee:	49a3      	ldr	r1, [pc, #652]	; (800a17c <dwt_ioctl+0xe18>)
 8009ef0:	f7f7 f894 	bl	800101c <__aeabi_fdiv>
 8009ef4:	49a2      	ldr	r1, [pc, #648]	; (800a180 <dwt_ioctl+0xe1c>)
 8009ef6:	f7f6 fed5 	bl	8000ca4 <__addsf3>
 8009efa:	6020      	str	r0, [r4, #0]
 8009efc:	2500      	movs	r5, #0
 8009efe:	f7ff badb 	b.w	80094b8 <dwt_ioctl+0x154>
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	f001 8089 	beq.w	800b01a <dwt_ioctl+0x1cb6>
 8009f08:	6824      	ldr	r4, [r4, #0]
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	f7fe fb6c 	bl	80085e8 <ull_enable_rf_tx>
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7fe fb9d 	bl	8008650 <ull_enable_rftx_blocks>
 8009f16:	2101      	movs	r1, #1
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7fd fec1 	bl	8007ca0 <ull_force_clocks>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7fe fdaf 	bl	8008a84 <ull_repeated_frames>
 8009f26:	2500      	movs	r5, #0
 8009f28:	f7ff bac6 	b.w	80094b8 <dwt_ioctl+0x154>
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	9500      	str	r5, [sp, #0]
 8009f30:	23ef      	movs	r3, #239	; 0xef
 8009f32:	462a      	mov	r2, r5
 8009f34:	4993      	ldr	r1, [pc, #588]	; (800a184 <dwt_ioctl+0xe20>)
 8009f36:	f7fe fcff 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009f3a:	2105      	movs	r1, #5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7fd feaf 	bl	8007ca0 <ull_force_clocks>
 8009f42:	2101      	movs	r1, #1
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7fe fa23 	bl	8008390 <ull_disable_rf_tx>
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7fe fa16 	bl	800837c <ull_disable_rftx_blocks>
 8009f50:	f7ff bab2 	b.w	80094b8 <dwt_ioctl+0x154>
 8009f54:	2500      	movs	r5, #0
 8009f56:	9500      	str	r5, [sp, #0]
 8009f58:	23ef      	movs	r3, #239	; 0xef
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	4989      	ldr	r1, [pc, #548]	; (800a184 <dwt_ioctl+0xe20>)
 8009f5e:	f7fe fceb 	bl	8008938 <dwt_modify8bitoffsetreg>
 8009f62:	f7ff baa9 	b.w	80094b8 <dwt_ioctl+0x154>
 8009f66:	2c00      	cmp	r4, #0
 8009f68:	f001 805a 	beq.w	800b020 <dwt_ioctl+0x1cbc>
 8009f6c:	6821      	ldr	r1, [r4, #0]
 8009f6e:	f7fe fd89 	bl	8008a84 <ull_repeated_frames>
 8009f72:	2500      	movs	r5, #0
 8009f74:	f7ff baa0 	b.w	80094b8 <dwt_ioctl+0x154>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4983      	ldr	r1, [pc, #524]	; (800a188 <dwt_ioctl+0xe24>)
 8009f7c:	f7fd fa34 	bl	80073e8 <dwt_read16bitoffsetreg>
 8009f80:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8009f84:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8009f88:	bf18      	it	ne
 8009f8a:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8009f8e:	b22d      	sxth	r5, r5
 8009f90:	8025      	strh	r5, [r4, #0]
 8009f92:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009f94:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009f98:	1aed      	subs	r5, r5, r3
 8009f9a:	f7ff ba8d 	b.w	80094b8 <dwt_ioctl+0x154>
 8009f9e:	2c00      	cmp	r4, #0
 8009fa0:	f001 8070 	beq.w	800b084 <dwt_ioctl+0x1d20>
 8009fa4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009fa8:	7a23      	ldrb	r3, [r4, #8]
 8009faa:	f899 2013 	ldrb.w	r2, [r9, #19]
 8009fae:	2aff      	cmp	r2, #255	; 0xff
 8009fb0:	f000 8142 	beq.w	800a238 <dwt_ioctl+0xed4>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d136      	bne.n	800a026 <dwt_ioctl+0xcc2>
 8009fb8:	f8d9 3000 	ldr.w	r3, [r9]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4972      	ldr	r1, [pc, #456]	; (800a18c <dwt_ioctl+0xe28>)
 8009fc4:	f7fd fdde 	bl	8007b84 <dwt_writetodevice>
 8009fc8:	f899 300c 	ldrb.w	r3, [r9, #12]
 8009fcc:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8009fd0:	18d1      	adds	r1, r2, r3
 8009fd2:	f899 2012 	ldrb.w	r2, [r9, #18]
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	d15f      	bne.n	800a09a <dwt_ioctl+0xd36>
 8009fda:	f899 0010 	ldrb.w	r0, [r9, #16]
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	bf0b      	itete	eq
 8009fe2:	227f      	moveq	r2, #127	; 0x7f
 8009fe4:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8009fe8:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8009fec:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8009ff0:	f899 0013 	ldrb.w	r0, [r9, #19]
 8009ff4:	1a12      	subs	r2, r2, r0
 8009ff6:	3a02      	subs	r2, #2
 8009ff8:	4291      	cmp	r1, r2
 8009ffa:	f200 8123 	bhi.w	800a244 <dwt_ioctl+0xee0>
 8009ffe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a002:	9200      	str	r2, [sp, #0]
 800a004:	2200      	movs	r2, #0
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7fd fdbb 	bl	8007b84 <dwt_writetodevice>
 800a00e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800a012:	f899 200c 	ldrb.w	r2, [r9, #12]
 800a016:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a01a:	9100      	str	r1, [sp, #0]
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f7fd fdb0 	bl	8007b84 <dwt_writetodevice>
 800a024:	e04a      	b.n	800a0bc <dwt_ioctl+0xd58>
 800a026:	f8d9 3000 	ldr.w	r3, [r9]
 800a02a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800a02e:	7a9a      	ldrb	r2, [r3, #10]
 800a030:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800a034:	7a5a      	ldrb	r2, [r3, #9]
 800a036:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800a03a:	7a1a      	ldrb	r2, [r3, #8]
 800a03c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800a040:	79da      	ldrb	r2, [r3, #7]
 800a042:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800a046:	799a      	ldrb	r2, [r3, #6]
 800a048:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800a04c:	795a      	ldrb	r2, [r3, #5]
 800a04e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800a052:	791a      	ldrb	r2, [r3, #4]
 800a054:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800a058:	78da      	ldrb	r2, [r3, #3]
 800a05a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800a05e:	789a      	ldrb	r2, [r3, #2]
 800a060:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800a064:	785a      	ldrb	r2, [r3, #1]
 800a066:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800a070:	2200      	movs	r2, #0
 800a072:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800a076:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800a07a:	0a09      	lsrs	r1, r1, #8
 800a07c:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800a080:	7b19      	ldrb	r1, [r3, #12]
 800a082:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800a086:	7adb      	ldrb	r3, [r3, #11]
 800a088:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800a08c:	ab0c      	add	r3, sp, #48	; 0x30
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	2310      	movs	r3, #16
 800a092:	493e      	ldr	r1, [pc, #248]	; (800a18c <dwt_ioctl+0xe28>)
 800a094:	f7fd fd76 	bl	8007b84 <dwt_writetodevice>
 800a098:	e796      	b.n	8009fc8 <dwt_ioctl+0xc64>
 800a09a:	2a01      	cmp	r2, #1
 800a09c:	f040 80cf 	bne.w	800a23e <dwt_ioctl+0xeda>
 800a0a0:	f899 3011 	ldrb.w	r3, [r9, #17]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a0aa:	bf08      	it	eq
 800a0ac:	237f      	moveq	r3, #127	; 0x7f
 800a0ae:	f899 2013 	ldrb.w	r2, [r9, #19]
 800a0b2:	1a9b      	subs	r3, r3, r2
 800a0b4:	3b02      	subs	r3, #2
 800a0b6:	4299      	cmp	r1, r3
 800a0b8:	f200 80c7 	bhi.w	800a24a <dwt_ioctl+0xee6>
 800a0bc:	f899 2010 	ldrb.w	r2, [r9, #16]
 800a0c0:	1e53      	subs	r3, r2, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d940      	bls.n	800a14a <dwt_ioctl+0xde6>
 800a0c8:	f899 3011 	ldrb.w	r3, [r9, #17]
 800a0cc:	1e59      	subs	r1, r3, #1
 800a0ce:	b2c9      	uxtb	r1, r1
 800a0d0:	2901      	cmp	r1, #1
 800a0d2:	d967      	bls.n	800a1a4 <dwt_ioctl+0xe40>
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d06c      	beq.n	800a1b2 <dwt_ioctl+0xe4e>
 800a0d8:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800a0dc:	2200      	movs	r2, #0
 800a0de:	492c      	ldr	r1, [pc, #176]	; (800a190 <dwt_ioctl+0xe2c>)
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7fd fead 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a0e6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <dwt_ioctl+0xe30>)
 800a0ec:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800a0f0:	f899 300c 	ldrb.w	r3, [r9, #12]
 800a0f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4926      	ldr	r1, [pc, #152]	; (800a198 <dwt_ioctl+0xe34>)
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7fd fe9e 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a104:	2301      	movs	r3, #1
 800a106:	2200      	movs	r2, #0
 800a108:	4924      	ldr	r1, [pc, #144]	; (800a19c <dwt_ioctl+0xe38>)
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7fd fd45 	bl	8007b9a <dwt_write8bitoffsetreg>
 800a110:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800a1a0 <dwt_ioctl+0xe3c>
 800a114:	2700      	movs	r7, #0
 800a116:	463a      	mov	r2, r7
 800a118:	4641      	mov	r1, r8
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7fd f976 	bl	800740c <dwt_read8bitoffsetreg>
 800a120:	f010 0f05 	tst.w	r0, #5
 800a124:	d0f7      	beq.n	800a116 <dwt_ioctl+0xdb2>
 800a126:	4605      	mov	r5, r0
 800a128:	4603      	mov	r3, r0
 800a12a:	2200      	movs	r2, #0
 800a12c:	491c      	ldr	r1, [pc, #112]	; (800a1a0 <dwt_ioctl+0xe3c>)
 800a12e:	4630      	mov	r0, r6
 800a130:	f7fd fd33 	bl	8007b9a <dwt_write8bitoffsetreg>
 800a134:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800a138:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d045      	beq.n	800a1cc <dwt_ioctl+0xe68>
 800a140:	b26b      	sxtb	r3, r5
 800a142:	7023      	strb	r3, [r4, #0]
 800a144:	2500      	movs	r5, #0
 800a146:	f7ff b9b7 	b.w	80094b8 <dwt_ioctl+0x154>
 800a14a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800a14c:	7bdb      	ldrb	r3, [r3, #15]
 800a14e:	2b03      	cmp	r3, #3
 800a150:	f001 8031 	beq.w	800b1b6 <dwt_ioctl+0x1e52>
 800a154:	f899 3011 	ldrb.w	r3, [r9, #17]
 800a158:	1e5a      	subs	r2, r3, #1
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	2a01      	cmp	r2, #1
 800a15e:	d92f      	bls.n	800a1c0 <dwt_ioctl+0xe5c>
 800a160:	2201      	movs	r2, #1
 800a162:	e7b7      	b.n	800a0d4 <dwt_ioctl+0xd70>
 800a164:	00070048 	.word	0x00070048
 800a168:	00070034 	.word	0x00070034
 800a16c:	00080004 	.word	0x00080004
 800a170:	3f866666 	.word	0x3f866666
 800a174:	41b00000 	.word	0x41b00000
 800a178:	3ecccccd 	.word	0x3ecccccd
 800a17c:	437f0000 	.word	0x437f0000
 800a180:	40400000 	.word	0x40400000
 800a184:	000f0024 	.word	0x000f0024
 800a188:	00020008 	.word	0x00020008
 800a18c:	00010034 	.word	0x00010034
 800a190:	00010044 	.word	0x00010044
 800a194:	0001ff80 	.word	0x0001ff80
 800a198:	00010048 	.word	0x00010048
 800a19c:	0001004c 	.word	0x0001004c
 800a1a0:	00010050 	.word	0x00010050
 800a1a4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800a1a6:	7bdb      	ldrb	r3, [r3, #15]
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	bf0c      	ite	eq
 800a1ac:	2302      	moveq	r3, #2
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	e792      	b.n	800a0d8 <dwt_ioctl+0xd74>
 800a1b2:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800a1b6:	2910      	cmp	r1, #16
 800a1b8:	d98e      	bls.n	800a0d8 <dwt_ioctl+0xd74>
 800a1ba:	f06f 0303 	mvn.w	r3, #3
 800a1be:	e7c0      	b.n	800a142 <dwt_ioctl+0xdde>
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	e788      	b.n	800a0d8 <dwt_ioctl+0xd74>
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	e785      	b.n	800a0d8 <dwt_ioctl+0xd74>
 800a1cc:	f899 3012 	ldrb.w	r3, [r9, #18]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d1b5      	bne.n	800a140 <dwt_ioctl+0xddc>
 800a1d4:	f899 2011 	ldrb.w	r2, [r9, #17]
 800a1d8:	1e53      	subs	r3, r2, #1
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d91b      	bls.n	800a218 <dwt_ioctl+0xeb4>
 800a1e0:	2a03      	cmp	r2, #3
 800a1e2:	bf0c      	ite	eq
 800a1e4:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800a1e8:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800a1ec:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a1f0:	b112      	cbz	r2, 800a1f8 <dwt_ioctl+0xe94>
 800a1f2:	f899 300c 	ldrb.w	r3, [r9, #12]
 800a1f6:	b9c3      	cbnz	r3, 800a22a <dwt_ioctl+0xec6>
 800a1f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d09f      	beq.n	800a140 <dwt_ioctl+0xddc>
 800a200:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d09b      	beq.n	800a140 <dwt_ioctl+0xddc>
 800a208:	f899 200c 	ldrb.w	r2, [r9, #12]
 800a20c:	9100      	str	r1, [sp, #0]
 800a20e:	4639      	mov	r1, r7
 800a210:	4630      	mov	r0, r6
 800a212:	f7fd f8c9 	bl	80073a8 <dwt_readfromdevice>
 800a216:	e793      	b.n	800a140 <dwt_ioctl+0xddc>
 800a218:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800a21a:	7bdb      	ldrb	r3, [r3, #15]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	bf0c      	ite	eq
 800a220:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800a224:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800a228:	e7e0      	b.n	800a1ec <dwt_ioctl+0xe88>
 800a22a:	9200      	str	r2, [sp, #0]
 800a22c:	2200      	movs	r2, #0
 800a22e:	4639      	mov	r1, r7
 800a230:	4630      	mov	r0, r6
 800a232:	f7fd f8b9 	bl	80073a8 <dwt_readfromdevice>
 800a236:	e7df      	b.n	800a1f8 <dwt_ioctl+0xe94>
 800a238:	f06f 0302 	mvn.w	r3, #2
 800a23c:	e781      	b.n	800a142 <dwt_ioctl+0xdde>
 800a23e:	f06f 0301 	mvn.w	r3, #1
 800a242:	e77e      	b.n	800a142 <dwt_ioctl+0xdde>
 800a244:	f04f 33ff 	mov.w	r3, #4294967295
 800a248:	e77b      	b.n	800a142 <dwt_ioctl+0xdde>
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295
 800a24e:	e778      	b.n	800a142 <dwt_ioctl+0xdde>
 800a250:	7a23      	ldrb	r3, [r4, #8]
 800a252:	79e1      	ldrb	r1, [r4, #7]
 800a254:	79a2      	ldrb	r2, [r4, #6]
 800a256:	00d2      	lsls	r2, r2, #3
 800a258:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800a25c:	4313      	orrs	r3, r2
 800a25e:	7962      	ldrb	r2, [r4, #5]
 800a260:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800a264:	7922      	ldrb	r2, [r4, #4]
 800a266:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a26a:	78e2      	ldrb	r2, [r4, #3]
 800a26c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a270:	78a2      	ldrb	r2, [r4, #2]
 800a272:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800a276:	7862      	ldrb	r2, [r4, #1]
 800a278:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2200      	movs	r2, #0
 800a280:	49cd      	ldr	r1, [pc, #820]	; (800a5b8 <dwt_ioctl+0x1254>)
 800a282:	f7fd fcdc 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a286:	2500      	movs	r5, #0
 800a288:	f7ff b916 	b.w	80094b8 <dwt_ioctl+0x154>
 800a28c:	2c00      	cmp	r4, #0
 800a28e:	f000 86fc 	beq.w	800b08a <dwt_ioctl+0x1d26>
 800a292:	7863      	ldrb	r3, [r4, #1]
 800a294:	b133      	cbz	r3, 800a2a4 <dwt_ioctl+0xf40>
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	3b01      	subs	r3, #1
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	7023      	strb	r3, [r4, #0]
 800a29e:	2500      	movs	r5, #0
 800a2a0:	f7ff b90a 	b.w	80094b8 <dwt_ioctl+0x154>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e7f9      	b.n	800a29c <dwt_ioctl+0xf38>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	49c4      	ldr	r1, [pc, #784]	; (800a5bc <dwt_ioctl+0x1258>)
 800a2ac:	f7fd f886 	bl	80073bc <dwt_read32bitoffsetreg>
 800a2b0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800a2b4:	8023      	strh	r3, [r4, #0]
 800a2b6:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800a2ba:	8060      	strh	r0, [r4, #2]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	49c0      	ldr	r1, [pc, #768]	; (800a5c0 <dwt_ioctl+0x125c>)
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7fd f87b 	bl	80073bc <dwt_read32bitoffsetreg>
 800a2c6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800a2ca:	80a3      	strh	r3, [r4, #4]
 800a2cc:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800a2d0:	80e0      	strh	r0, [r4, #6]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	49bb      	ldr	r1, [pc, #748]	; (800a5c4 <dwt_ioctl+0x1260>)
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7fd f870 	bl	80073bc <dwt_read32bitoffsetreg>
 800a2dc:	7220      	strb	r0, [r4, #8]
 800a2de:	0c00      	lsrs	r0, r0, #16
 800a2e0:	7260      	strb	r0, [r4, #9]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	49b8      	ldr	r1, [pc, #736]	; (800a5c8 <dwt_ioctl+0x1264>)
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7fd f868 	bl	80073bc <dwt_read32bitoffsetreg>
 800a2ec:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800a2f6:	8160      	strh	r0, [r4, #10]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	49b4      	ldr	r1, [pc, #720]	; (800a5cc <dwt_ioctl+0x1268>)
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f7fd f85d 	bl	80073bc <dwt_read32bitoffsetreg>
 800a302:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800a306:	f8a4 300f 	strh.w	r3, [r4, #15]
 800a30a:	73a0      	strb	r0, [r4, #14]
 800a30c:	2200      	movs	r2, #0
 800a30e:	49b0      	ldr	r1, [pc, #704]	; (800a5d0 <dwt_ioctl+0x126c>)
 800a310:	4630      	mov	r0, r6
 800a312:	f7fd f853 	bl	80073bc <dwt_read32bitoffsetreg>
 800a316:	7460      	strb	r0, [r4, #17]
 800a318:	0c00      	lsrs	r0, r0, #16
 800a31a:	74a0      	strb	r0, [r4, #18]
 800a31c:	2200      	movs	r2, #0
 800a31e:	49ad      	ldr	r1, [pc, #692]	; (800a5d4 <dwt_ioctl+0x1270>)
 800a320:	4630      	mov	r0, r6
 800a322:	f7fd f84b 	bl	80073bc <dwt_read32bitoffsetreg>
 800a326:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800a32a:	f8a4 0013 	strh.w	r0, [r4, #19]
 800a32e:	2500      	movs	r5, #0
 800a330:	7565      	strb	r5, [r4, #21]
 800a332:	75a5      	strb	r5, [r4, #22]
 800a334:	462a      	mov	r2, r5
 800a336:	49a8      	ldr	r1, [pc, #672]	; (800a5d8 <dwt_ioctl+0x1274>)
 800a338:	4630      	mov	r0, r6
 800a33a:	f7fd f867 	bl	800740c <dwt_read8bitoffsetreg>
 800a33e:	75e0      	strb	r0, [r4, #23]
 800a340:	f7ff b8ba 	b.w	80094b8 <dwt_ioctl+0x154>
 800a344:	4611      	mov	r1, r2
 800a346:	f7fd fc67 	bl	8007c18 <ull_configeventcounters>
 800a34a:	2500      	movs	r5, #0
 800a34c:	f7ff b8b4 	b.w	80094b8 <dwt_ioctl+0x154>
 800a350:	2c00      	cmp	r4, #0
 800a352:	f000 869d 	beq.w	800b090 <dwt_ioctl+0x1d2c>
 800a356:	8823      	ldrh	r3, [r4, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	49a0      	ldr	r1, [pc, #640]	; (800a5dc <dwt_ioctl+0x1278>)
 800a35c:	f7fd fc6f 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a360:	2500      	movs	r5, #0
 800a362:	f7ff b8a9 	b.w	80094b8 <dwt_ioctl+0x154>
 800a366:	2c00      	cmp	r4, #0
 800a368:	f000 8695 	beq.w	800b096 <dwt_ioctl+0x1d32>
 800a36c:	6825      	ldr	r5, [r4, #0]
 800a36e:	b935      	cbnz	r5, 800a37e <dwt_ioctl+0x101a>
 800a370:	2300      	movs	r3, #0
 800a372:	461a      	mov	r2, r3
 800a374:	499a      	ldr	r1, [pc, #616]	; (800a5e0 <dwt_ioctl+0x127c>)
 800a376:	f7fd fc62 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a37a:	f7ff b89d 	b.w	80094b8 <dwt_ioctl+0x154>
 800a37e:	7962      	ldrb	r2, [r4, #5]
 800a380:	7923      	ldrb	r3, [r4, #4]
 800a382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a38a:	2200      	movs	r2, #0
 800a38c:	4994      	ldr	r1, [pc, #592]	; (800a5e0 <dwt_ioctl+0x127c>)
 800a38e:	f7fd fc56 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a392:	2500      	movs	r5, #0
 800a394:	f7ff b890 	b.w	80094b8 <dwt_ioctl+0x154>
 800a398:	2c00      	cmp	r4, #0
 800a39a:	f000 867f 	beq.w	800b09c <dwt_ioctl+0x1d38>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	b94b      	cbnz	r3, 800a3b6 <dwt_ioctl+0x1052>
 800a3a2:	2500      	movs	r5, #0
 800a3a4:	9500      	str	r5, [sp, #0]
 800a3a6:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	2110      	movs	r1, #16
 800a3ae:	f7fe fc75 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800a3b2:	f7ff b881 	b.w	80094b8 <dwt_ioctl+0x154>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2134      	movs	r1, #52	; 0x34
 800a3ba:	f7fd fd41 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a3be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2110      	movs	r1, #16
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7fe fc65 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	f7ff b870 	b.w	80094b8 <dwt_ioctl+0x154>
 800a3d8:	2c00      	cmp	r4, #0
 800a3da:	f000 8662 	beq.w	800b0a2 <dwt_ioctl+0x1d3e>
 800a3de:	8861      	ldrh	r1, [r4, #2]
 800a3e0:	f7fd fcaa 	bl	8007d38 <ull_aon_read>
 800a3e4:	7020      	strb	r0, [r4, #0]
 800a3e6:	2500      	movs	r5, #0
 800a3e8:	f7ff b866 	b.w	80094b8 <dwt_ioctl+0x154>
 800a3ec:	2c00      	cmp	r4, #0
 800a3ee:	f000 865b 	beq.w	800b0a8 <dwt_ioctl+0x1d44>
 800a3f2:	78a2      	ldrb	r2, [r4, #2]
 800a3f4:	8821      	ldrh	r1, [r4, #0]
 800a3f6:	f7fd fcbf 	bl	8007d78 <ull_aon_write>
 800a3fa:	2500      	movs	r5, #0
 800a3fc:	f7ff b85c 	b.w	80094b8 <dwt_ioctl+0x154>
 800a400:	4b78      	ldr	r3, [pc, #480]	; (800a5e4 <dwt_ioctl+0x1280>)
 800a402:	4a79      	ldr	r2, [pc, #484]	; (800a5e8 <dwt_ioctl+0x1284>)
 800a404:	2d01      	cmp	r5, #1
 800a406:	bf18      	it	ne
 800a408:	4613      	movne	r3, r2
 800a40a:	2d01      	cmp	r5, #1
 800a40c:	4977      	ldr	r1, [pc, #476]	; (800a5ec <dwt_ioctl+0x1288>)
 800a40e:	bf18      	it	ne
 800a410:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800a414:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a416:	7bd2      	ldrb	r2, [r2, #15]
 800a418:	2a01      	cmp	r2, #1
 800a41a:	d012      	beq.n	800a442 <dwt_ioctl+0x10de>
 800a41c:	2a03      	cmp	r2, #3
 800a41e:	d117      	bne.n	800a450 <dwt_ioctl+0x10ec>
 800a420:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800a424:	3a01      	subs	r2, #1
 800a426:	441a      	add	r2, r3
 800a428:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a42c:	f7fc ffdc 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a430:	09c0      	lsrs	r0, r0, #7
 800a432:	8020      	strh	r0, [r4, #0]
 800a434:	8825      	ldrh	r5, [r4, #0]
 800a436:	3500      	adds	r5, #0
 800a438:	bf18      	it	ne
 800a43a:	2501      	movne	r5, #1
 800a43c:	426d      	negs	r5, r5
 800a43e:	f7ff b83b 	b.w	80094b8 <dwt_ioctl+0x154>
 800a442:	2202      	movs	r2, #2
 800a444:	4619      	mov	r1, r3
 800a446:	f7fc ffcf 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a44a:	09c0      	lsrs	r0, r0, #7
 800a44c:	8020      	strh	r0, [r4, #0]
 800a44e:	e7f1      	b.n	800a434 <dwt_ioctl+0x10d0>
 800a450:	2202      	movs	r2, #2
 800a452:	f7fc ffc9 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a456:	09c0      	lsrs	r0, r0, #7
 800a458:	8020      	strh	r0, [r4, #0]
 800a45a:	e7eb      	b.n	800a434 <dwt_ioctl+0x10d0>
 800a45c:	2c00      	cmp	r4, #0
 800a45e:	f000 8626 	beq.w	800b0ae <dwt_ioctl+0x1d4a>
 800a462:	7821      	ldrb	r1, [r4, #0]
 800a464:	f7fe fc50 	bl	8008d08 <ull_setleds>
 800a468:	2500      	movs	r5, #0
 800a46a:	f7ff b825 	b.w	80094b8 <dwt_ioctl+0x154>
 800a46e:	4611      	mov	r1, r2
 800a470:	f7fe fb20 	bl	8008ab4 <ull_setdwstate>
 800a474:	2500      	movs	r5, #0
 800a476:	f7ff b81f 	b.w	80094b8 <dwt_ioctl+0x154>
 800a47a:	9400      	str	r4, [sp, #0]
 800a47c:	2304      	movs	r3, #4
 800a47e:	2200      	movs	r2, #0
 800a480:	211c      	movs	r1, #28
 800a482:	f7fc ff91 	bl	80073a8 <dwt_readfromdevice>
 800a486:	2500      	movs	r5, #0
 800a488:	f7ff b816 	b.w	80094b8 <dwt_ioctl+0x154>
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	f000 8611 	beq.w	800b0b4 <dwt_ioctl+0x1d50>
 800a492:	2202      	movs	r2, #2
 800a494:	2144      	movs	r1, #68	; 0x44
 800a496:	f7fc ffa7 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a49a:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800a49e:	7020      	strb	r0, [r4, #0]
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	f7ff b809 	b.w	80094b8 <dwt_ioctl+0x154>
 800a4a6:	2c00      	cmp	r4, #0
 800a4a8:	f000 8607 	beq.w	800b0ba <dwt_ioctl+0x1d56>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2144      	movs	r1, #68	; 0x44
 800a4b0:	f7fc ffac 	bl	800740c <dwt_read8bitoffsetreg>
 800a4b4:	f000 0001 	and.w	r0, r0, #1
 800a4b8:	7020      	strb	r0, [r4, #0]
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	f7fe bffc 	b.w	80094b8 <dwt_ioctl+0x154>
 800a4c0:	2c00      	cmp	r4, #0
 800a4c2:	f000 85fd 	beq.w	800b0c0 <dwt_ioctl+0x1d5c>
 800a4c6:	8862      	ldrh	r2, [r4, #2]
 800a4c8:	8821      	ldrh	r1, [r4, #0]
 800a4ca:	f7fe fb51 	bl	8008b70 <ull_configureframefilter>
 800a4ce:	2500      	movs	r5, #0
 800a4d0:	f7fe bff2 	b.w	80094b8 <dwt_ioctl+0x154>
 800a4d4:	9400      	str	r4, [sp, #0]
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2104      	movs	r1, #4
 800a4dc:	f7fd fb52 	bl	8007b84 <dwt_writetodevice>
 800a4e0:	2500      	movs	r5, #0
 800a4e2:	f7fe bfe9 	b.w	80094b8 <dwt_ioctl+0x154>
 800a4e6:	9400      	str	r4, [sp, #0]
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	f7fc ff5b 	bl	80073a8 <dwt_readfromdevice>
 800a4f2:	2500      	movs	r5, #0
 800a4f4:	f7fe bfe0 	b.w	80094b8 <dwt_ioctl+0x154>
 800a4f8:	2c00      	cmp	r4, #0
 800a4fa:	f000 85e4 	beq.w	800b0c6 <dwt_ioctl+0x1d62>
 800a4fe:	8823      	ldrh	r3, [r4, #0]
 800a500:	2202      	movs	r2, #2
 800a502:	210c      	movs	r1, #12
 800a504:	f7fd fb9b 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a508:	2500      	movs	r5, #0
 800a50a:	f7fe bfd5 	b.w	80094b8 <dwt_ioctl+0x154>
 800a50e:	2c00      	cmp	r4, #0
 800a510:	f000 85dc 	beq.w	800b0cc <dwt_ioctl+0x1d68>
 800a514:	8823      	ldrh	r3, [r4, #0]
 800a516:	2200      	movs	r2, #0
 800a518:	210c      	movs	r1, #12
 800a51a:	f7fd fb90 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a51e:	2500      	movs	r5, #0
 800a520:	f7fe bfca 	b.w	80094b8 <dwt_ioctl+0x154>
 800a524:	4621      	mov	r1, r4
 800a526:	f7fd fb0b 	bl	8007b40 <ull_readrxtimestamp>
 800a52a:	2500      	movs	r5, #0
 800a52c:	f7fe bfc4 	b.w	80094b8 <dwt_ioctl+0x154>
 800a530:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a532:	7bdb      	ldrb	r3, [r3, #15]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d00b      	beq.n	800a550 <dwt_ioctl+0x11ec>
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d112      	bne.n	800a562 <dwt_ioctl+0x11fe>
 800a53c:	9400      	str	r4, [sp, #0]
 800a53e:	2305      	movs	r3, #5
 800a540:	2220      	movs	r2, #32
 800a542:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a546:	f7fc ff2f 	bl	80073a8 <dwt_readfromdevice>
 800a54a:	2500      	movs	r5, #0
 800a54c:	f7fe bfb4 	b.w	80094b8 <dwt_ioctl+0x154>
 800a550:	9400      	str	r4, [sp, #0]
 800a552:	2305      	movs	r3, #5
 800a554:	2200      	movs	r2, #0
 800a556:	4926      	ldr	r1, [pc, #152]	; (800a5f0 <dwt_ioctl+0x128c>)
 800a558:	f7fc ff26 	bl	80073a8 <dwt_readfromdevice>
 800a55c:	2500      	movs	r5, #0
 800a55e:	f7fe bfab 	b.w	80094b8 <dwt_ioctl+0x154>
 800a562:	9400      	str	r4, [sp, #0]
 800a564:	2305      	movs	r3, #5
 800a566:	2200      	movs	r2, #0
 800a568:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a56c:	f7fc ff1c 	bl	80073a8 <dwt_readfromdevice>
 800a570:	2500      	movs	r5, #0
 800a572:	f7fe bfa1 	b.w	80094b8 <dwt_ioctl+0x154>
 800a576:	2500      	movs	r5, #0
 800a578:	f804 5b01 	strb.w	r5, [r4], #1
 800a57c:	9400      	str	r4, [sp, #0]
 800a57e:	2304      	movs	r3, #4
 800a580:	462a      	mov	r2, r5
 800a582:	2170      	movs	r1, #112	; 0x70
 800a584:	f7fc ff10 	bl	80073a8 <dwt_readfromdevice>
 800a588:	f7fe bf96 	b.w	80094b8 <dwt_ioctl+0x154>
 800a58c:	2c00      	cmp	r4, #0
 800a58e:	f000 85a0 	beq.w	800b0d2 <dwt_ioctl+0x1d6e>
 800a592:	2201      	movs	r2, #1
 800a594:	2164      	movs	r1, #100	; 0x64
 800a596:	f7fc ff11 	bl	80073bc <dwt_read32bitoffsetreg>
 800a59a:	6020      	str	r0, [r4, #0]
 800a59c:	2500      	movs	r5, #0
 800a59e:	f7fe bf8b 	b.w	80094b8 <dwt_ioctl+0x154>
 800a5a2:	2c00      	cmp	r4, #0
 800a5a4:	f000 8598 	beq.w	800b0d8 <dwt_ioctl+0x1d74>
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2164      	movs	r1, #100	; 0x64
 800a5ac:	f7fc ff06 	bl	80073bc <dwt_read32bitoffsetreg>
 800a5b0:	6020      	str	r0, [r4, #0]
 800a5b2:	2500      	movs	r5, #0
 800a5b4:	f7fe bf80 	b.w	80094b8 <dwt_ioctl+0x154>
 800a5b8:	00010030 	.word	0x00010030
 800a5bc:	000f0004 	.word	0x000f0004
 800a5c0:	000f0008 	.word	0x000f0008
 800a5c4:	000f000c 	.word	0x000f000c
 800a5c8:	000f0010 	.word	0x000f0010
 800a5cc:	000f0014 	.word	0x000f0014
 800a5d0:	000f0018 	.word	0x000f0018
 800a5d4:	000f001c 	.word	0x000f001c
 800a5d8:	000f0028 	.word	0x000f0028
 800a5dc:	00060004 	.word	0x00060004
 800a5e0:	0011001a 	.word	0x0011001a
 800a5e4:	00180034 	.word	0x00180034
 800a5e8:	0018002c 	.word	0x0018002c
 800a5ec:	000c0014 	.word	0x000c0014
 800a5f0:	00180020 	.word	0x00180020
 800a5f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a5f6:	7bdb      	ldrb	r3, [r3, #15]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d00b      	beq.n	800a614 <dwt_ioctl+0x12b0>
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d112      	bne.n	800a626 <dwt_ioctl+0x12c2>
 800a600:	9400      	str	r4, [sp, #0]
 800a602:	2305      	movs	r3, #5
 800a604:	2228      	movs	r2, #40	; 0x28
 800a606:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a60a:	f7fc fecd 	bl	80073a8 <dwt_readfromdevice>
 800a60e:	2500      	movs	r5, #0
 800a610:	f7fe bf52 	b.w	80094b8 <dwt_ioctl+0x154>
 800a614:	9400      	str	r4, [sp, #0]
 800a616:	2305      	movs	r3, #5
 800a618:	2200      	movs	r2, #0
 800a61a:	49d3      	ldr	r1, [pc, #844]	; (800a968 <dwt_ioctl+0x1604>)
 800a61c:	f7fc fec4 	bl	80073a8 <dwt_readfromdevice>
 800a620:	2500      	movs	r5, #0
 800a622:	f7fe bf49 	b.w	80094b8 <dwt_ioctl+0x154>
 800a626:	9400      	str	r4, [sp, #0]
 800a628:	2305      	movs	r3, #5
 800a62a:	2200      	movs	r2, #0
 800a62c:	49cf      	ldr	r1, [pc, #828]	; (800a96c <dwt_ioctl+0x1608>)
 800a62e:	f7fc febb 	bl	80073a8 <dwt_readfromdevice>
 800a632:	2500      	movs	r5, #0
 800a634:	f7fe bf40 	b.w	80094b8 <dwt_ioctl+0x154>
 800a638:	2c00      	cmp	r4, #0
 800a63a:	f000 8550 	beq.w	800b0de <dwt_ioctl+0x1d7a>
 800a63e:	2200      	movs	r2, #0
 800a640:	211c      	movs	r1, #28
 800a642:	f7fc febb 	bl	80073bc <dwt_read32bitoffsetreg>
 800a646:	6020      	str	r0, [r4, #0]
 800a648:	2500      	movs	r5, #0
 800a64a:	f7fe bf35 	b.w	80094b8 <dwt_ioctl+0x154>
 800a64e:	2c00      	cmp	r4, #0
 800a650:	f000 8548 	beq.w	800b0e4 <dwt_ioctl+0x1d80>
 800a654:	8825      	ldrh	r5, [r4, #0]
 800a656:	6867      	ldr	r7, [r4, #4]
 800a658:	7a23      	ldrb	r3, [r4, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 8545 	beq.w	800b0ea <dwt_ioctl+0x1d86>
 800a660:	463c      	mov	r4, r7
 800a662:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800a666:	4629      	mov	r1, r5
 800a668:	4630      	mov	r0, r6
 800a66a:	f7fd fb43 	bl	8007cf4 <_dwt_otpread>
 800a66e:	f844 0b04 	str.w	r0, [r4], #4
 800a672:	3501      	adds	r5, #1
 800a674:	b2ad      	uxth	r5, r5
 800a676:	42bc      	cmp	r4, r7
 800a678:	d1f5      	bne.n	800a666 <dwt_ioctl+0x1302>
 800a67a:	2500      	movs	r5, #0
 800a67c:	f7fe bf1c 	b.w	80094b8 <dwt_ioctl+0x154>
 800a680:	2c00      	cmp	r4, #0
 800a682:	f000 8535 	beq.w	800b0f0 <dwt_ioctl+0x1d8c>
 800a686:	7823      	ldrb	r3, [r4, #0]
 800a688:	2201      	movs	r2, #1
 800a68a:	2128      	movs	r1, #40	; 0x28
 800a68c:	f7fd fa85 	bl	8007b9a <dwt_write8bitoffsetreg>
 800a690:	2500      	movs	r5, #0
 800a692:	f7fe bf11 	b.w	80094b8 <dwt_ioctl+0x154>
 800a696:	f7fe fa8f 	bl	8008bb8 <ull_run_pgfcal>
 800a69a:	4605      	mov	r5, r0
 800a69c:	f7fe bf0c 	b.w	80094b8 <dwt_ioctl+0x154>
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	f7fe fb7f 	bl	8008da4 <ull_pgf_cal>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	f7fe bf06 	b.w	80094b8 <dwt_ioctl+0x154>
 800a6ac:	2c00      	cmp	r4, #0
 800a6ae:	f000 8522 	beq.w	800b0f6 <dwt_ioctl+0x1d92>
 800a6b2:	78a5      	ldrb	r5, [r4, #2]
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	f7fd faf3 	bl	8007ca0 <ull_force_clocks>
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7fd ff93 	bl	80085e8 <ull_enable_rf_tx>
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7fd ffc4 	bl	8008650 <ull_enable_rftx_blocks>
 800a6c8:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	49a8      	ldr	r1, [pc, #672]	; (800a970 <dwt_ioctl+0x160c>)
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7fd fa62 	bl	8007b9a <dwt_write8bitoffsetreg>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	23ff      	movs	r3, #255	; 0xff
 800a6dc:	2200      	movs	r2, #0
 800a6de:	49a5      	ldr	r1, [pc, #660]	; (800a974 <dwt_ioctl+0x1610>)
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f7fe f929 	bl	8008938 <dwt_modify8bitoffsetreg>
 800a6e6:	4fa3      	ldr	r7, [pc, #652]	; (800a974 <dwt_ioctl+0x1610>)
 800a6e8:	2500      	movs	r5, #0
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	f7fc fe8c 	bl	800740c <dwt_read8bitoffsetreg>
 800a6f4:	f010 0f01 	tst.w	r0, #1
 800a6f8:	d1f7      	bne.n	800a6ea <dwt_ioctl+0x1386>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	499e      	ldr	r1, [pc, #632]	; (800a978 <dwt_ioctl+0x1614>)
 800a6fe:	4630      	mov	r0, r6
 800a700:	f7fc fe72 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a704:	4605      	mov	r5, r0
 800a706:	4630      	mov	r0, r6
 800a708:	f7fd fe38 	bl	800837c <ull_disable_rftx_blocks>
 800a70c:	2100      	movs	r1, #0
 800a70e:	4630      	mov	r0, r6
 800a710:	f7fd fe3e 	bl	8008390 <ull_disable_rf_tx>
 800a714:	2105      	movs	r1, #5
 800a716:	4630      	mov	r0, r6
 800a718:	f7fd fac2 	bl	8007ca0 <ull_force_clocks>
 800a71c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800a720:	8025      	strh	r5, [r4, #0]
 800a722:	2500      	movs	r5, #0
 800a724:	f7fe bec8 	b.w	80094b8 <dwt_ioctl+0x154>
 800a728:	2102      	movs	r1, #2
 800a72a:	f7fe f9c3 	bl	8008ab4 <ull_setdwstate>
 800a72e:	2101      	movs	r1, #1
 800a730:	4630      	mov	r0, r6
 800a732:	f7fe f9bf 	bl	8008ab4 <ull_setdwstate>
 800a736:	2432      	movs	r4, #50	; 0x32
 800a738:	f04f 0814 	mov.w	r8, #20
 800a73c:	2700      	movs	r7, #0
 800a73e:	2544      	movs	r5, #68	; 0x44
 800a740:	4640      	mov	r0, r8
 800a742:	f7f6 feb2 	bl	80014aa <deca_usleep>
 800a746:	463a      	mov	r2, r7
 800a748:	4629      	mov	r1, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7fc fe5e 	bl	800740c <dwt_read8bitoffsetreg>
 800a750:	f010 0f02 	tst.w	r0, #2
 800a754:	d105      	bne.n	800a762 <dwt_ioctl+0x13fe>
 800a756:	1e63      	subs	r3, r4, #1
 800a758:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a75c:	d1f0      	bne.n	800a740 <dwt_ioctl+0x13dc>
 800a75e:	2501      	movs	r5, #1
 800a760:	e000      	b.n	800a764 <dwt_ioctl+0x1400>
 800a762:	2500      	movs	r5, #0
 800a764:	426d      	negs	r5, r5
 800a766:	f7fe bea7 	b.w	80094b8 <dwt_ioctl+0x154>
 800a76a:	2c00      	cmp	r4, #0
 800a76c:	f000 84c6 	beq.w	800b0fc <dwt_ioctl+0x1d98>
 800a770:	7823      	ldrb	r3, [r4, #0]
 800a772:	031b      	lsls	r3, r3, #12
 800a774:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a778:	7862      	ldrb	r2, [r4, #1]
 800a77a:	2a01      	cmp	r2, #1
 800a77c:	bf08      	it	eq
 800a77e:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800a788:	2200      	movs	r2, #0
 800a78a:	497c      	ldr	r1, [pc, #496]	; (800a97c <dwt_ioctl+0x1618>)
 800a78c:	f7fd feea 	bl	8008564 <dwt_modify32bitoffsetreg>
 800a790:	2500      	movs	r5, #0
 800a792:	f7fe be91 	b.w	80094b8 <dwt_ioctl+0x154>
 800a796:	2c00      	cmp	r4, #0
 800a798:	f000 84b3 	beq.w	800b102 <dwt_ioctl+0x1d9e>
 800a79c:	6862      	ldr	r2, [r4, #4]
 800a79e:	6821      	ldr	r1, [r4, #0]
 800a7a0:	f7fe f820 	bl	80087e4 <ull_setgpiomode>
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	f7fe be87 	b.w	80094b8 <dwt_ioctl+0x154>
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	f000 84ac 	beq.w	800b108 <dwt_ioctl+0x1da4>
 800a7b0:	8823      	ldrh	r3, [r4, #0]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	4972      	ldr	r1, [pc, #456]	; (800a980 <dwt_ioctl+0x161c>)
 800a7b6:	f7fd fa42 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	f7fe be7c 	b.w	80094b8 <dwt_ioctl+0x154>
 800a7c0:	2c00      	cmp	r4, #0
 800a7c2:	f000 84a4 	beq.w	800b10e <dwt_ioctl+0x1daa>
 800a7c6:	6862      	ldr	r2, [r4, #4]
 800a7c8:	8821      	ldrh	r1, [r4, #0]
 800a7ca:	f7fe fb1b 	bl	8008e04 <ull_setgpiovalue>
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	f7fe be72 	b.w	80094b8 <dwt_ioctl+0x154>
 800a7d4:	2c00      	cmp	r4, #0
 800a7d6:	f000 849d 	beq.w	800b114 <dwt_ioctl+0x1db0>
 800a7da:	7865      	ldrb	r5, [r4, #1]
 800a7dc:	7823      	ldrb	r3, [r4, #0]
 800a7de:	b18b      	cbz	r3, 800a804 <dwt_ioctl+0x14a0>
 800a7e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	73da      	strb	r2, [r3, #15]
 800a7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	b1e5      	cbz	r5, 800a828 <dwt_ioctl+0x14c4>
 800a7ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7f2:	9200      	str	r2, [sp, #0]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2110      	movs	r1, #16
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7fd feb3 	bl	8008564 <dwt_modify32bitoffsetreg>
 800a7fe:	2500      	movs	r5, #0
 800a800:	f7fe be5a 	b.w	80094b8 <dwt_ioctl+0x154>
 800a804:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a806:	2201      	movs	r2, #1
 800a808:	73da      	strb	r2, [r3, #15]
 800a80a:	2318      	movs	r3, #24
 800a80c:	2200      	movs	r2, #0
 800a80e:	495d      	ldr	r1, [pc, #372]	; (800a984 <dwt_ioctl+0x1620>)
 800a810:	f7fd fb16 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a814:	23e8      	movs	r3, #232	; 0xe8
 800a816:	2200      	movs	r2, #0
 800a818:	495b      	ldr	r1, [pc, #364]	; (800a988 <dwt_ioctl+0x1624>)
 800a81a:	4630      	mov	r0, r6
 800a81c:	f7fd fb10 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a820:	f06f 0308 	mvn.w	r3, #8
 800a824:	2200      	movs	r2, #0
 800a826:	e7e1      	b.n	800a7ec <dwt_ioctl+0x1488>
 800a828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a82c:	e7e1      	b.n	800a7f2 <dwt_ioctl+0x148e>
 800a82e:	2c00      	cmp	r4, #0
 800a830:	f000 8473 	beq.w	800b11a <dwt_ioctl+0x1db6>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	2200      	movs	r2, #0
 800a838:	2130      	movs	r1, #48	; 0x30
 800a83a:	f7fd fb01 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a83e:	2500      	movs	r5, #0
 800a840:	f7fe be3a 	b.w	80094b8 <dwt_ioctl+0x154>
 800a844:	2c00      	cmp	r4, #0
 800a846:	f000 846b 	beq.w	800b120 <dwt_ioctl+0x1dbc>
 800a84a:	2200      	movs	r2, #0
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7fc fdb5 	bl	80073bc <dwt_read32bitoffsetreg>
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	2500      	movs	r5, #0
 800a856:	f7fe be2f 	b.w	80094b8 <dwt_ioctl+0x154>
 800a85a:	4623      	mov	r3, r4
 800a85c:	2200      	movs	r2, #0
 800a85e:	4629      	mov	r1, r5
 800a860:	f7fd faee 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a864:	2500      	movs	r5, #0
 800a866:	f7fe be27 	b.w	80094b8 <dwt_ioctl+0x154>
 800a86a:	2c00      	cmp	r4, #0
 800a86c:	f000 845b 	beq.w	800b126 <dwt_ioctl+0x1dc2>
 800a870:	2203      	movs	r2, #3
 800a872:	4946      	ldr	r1, [pc, #280]	; (800a98c <dwt_ioctl+0x1628>)
 800a874:	f7fc fdca 	bl	800740c <dwt_read8bitoffsetreg>
 800a878:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800a87c:	7020      	strb	r0, [r4, #0]
 800a87e:	2500      	movs	r5, #0
 800a880:	f7fe be1a 	b.w	80094b8 <dwt_ioctl+0x154>
 800a884:	2c00      	cmp	r4, #0
 800a886:	f000 8451 	beq.w	800b12c <dwt_ioctl+0x1dc8>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	2200      	movs	r2, #0
 800a88e:	2144      	movs	r1, #68	; 0x44
 800a890:	f7fd fad6 	bl	8007e40 <dwt_write32bitoffsetreg>
 800a894:	2500      	movs	r5, #0
 800a896:	f7fe be0f 	b.w	80094b8 <dwt_ioctl+0x154>
 800a89a:	2c00      	cmp	r4, #0
 800a89c:	f000 8449 	beq.w	800b132 <dwt_ioctl+0x1dce>
 800a8a0:	8823      	ldrh	r3, [r4, #0]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2148      	movs	r1, #72	; 0x48
 800a8a6:	f7fd f9ca 	bl	8007c3e <dwt_write16bitoffsetreg>
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	f7fe be04 	b.w	80094b8 <dwt_ioctl+0x154>
 800a8b0:	2c00      	cmp	r4, #0
 800a8b2:	f000 8441 	beq.w	800b138 <dwt_ioctl+0x1dd4>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2144      	movs	r1, #68	; 0x44
 800a8ba:	f7fc fd7f 	bl	80073bc <dwt_read32bitoffsetreg>
 800a8be:	6020      	str	r0, [r4, #0]
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	f7fe bdf9 	b.w	80094b8 <dwt_ioctl+0x154>
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	f000 8439 	beq.w	800b13e <dwt_ioctl+0x1dda>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2148      	movs	r1, #72	; 0x48
 800a8d0:	f7fc fd8a 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a8d4:	6020      	str	r0, [r4, #0]
 800a8d6:	2500      	movs	r5, #0
 800a8d8:	f7fe bdee 	b.w	80094b8 <dwt_ioctl+0x154>
 800a8dc:	2c00      	cmp	r4, #0
 800a8de:	f000 8431 	beq.w	800b144 <dwt_ioctl+0x1de0>
 800a8e2:	7823      	ldrb	r3, [r4, #0]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	492a      	ldr	r1, [pc, #168]	; (800a990 <dwt_ioctl+0x162c>)
 800a8e8:	f7fd f957 	bl	8007b9a <dwt_write8bitoffsetreg>
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	f7fe bde3 	b.w	80094b8 <dwt_ioctl+0x154>
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	f000 8429 	beq.w	800b14a <dwt_ioctl+0x1de6>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2144      	movs	r1, #68	; 0x44
 800a8fc:	f7fc fd86 	bl	800740c <dwt_read8bitoffsetreg>
 800a900:	7020      	strb	r0, [r4, #0]
 800a902:	2500      	movs	r5, #0
 800a904:	f7fe bdd8 	b.w	80094b8 <dwt_ioctl+0x154>
 800a908:	2c00      	cmp	r4, #0
 800a90a:	f000 8421 	beq.w	800b150 <dwt_ioctl+0x1dec>
 800a90e:	f7fd f951 	bl	8007bb4 <ull_getframelength>
 800a912:	6020      	str	r0, [r4, #0]
 800a914:	2500      	movs	r5, #0
 800a916:	f7fe bdcf 	b.w	80094b8 <dwt_ioctl+0x154>
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	f000 841b 	beq.w	800b156 <dwt_ioctl+0x1df2>
 800a920:	2200      	movs	r2, #0
 800a922:	491c      	ldr	r1, [pc, #112]	; (800a994 <dwt_ioctl+0x1630>)
 800a924:	f7fc fd60 	bl	80073e8 <dwt_read16bitoffsetreg>
 800a928:	8020      	strh	r0, [r4, #0]
 800a92a:	2500      	movs	r5, #0
 800a92c:	f7fe bdc4 	b.w	80094b8 <dwt_ioctl+0x154>
 800a930:	2c00      	cmp	r4, #0
 800a932:	f000 8413 	beq.w	800b15c <dwt_ioctl+0x1df8>
 800a936:	2200      	movs	r2, #0
 800a938:	4917      	ldr	r1, [pc, #92]	; (800a998 <dwt_ioctl+0x1634>)
 800a93a:	f7fc fd3f 	bl	80073bc <dwt_read32bitoffsetreg>
 800a93e:	6020      	str	r0, [r4, #0]
 800a940:	2500      	movs	r5, #0
 800a942:	f7fe bdb9 	b.w	80094b8 <dwt_ioctl+0x154>
 800a946:	2c00      	cmp	r4, #0
 800a948:	f000 840b 	beq.w	800b162 <dwt_ioctl+0x1dfe>
 800a94c:	8823      	ldrh	r3, [r4, #0]
 800a94e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a958:	2200      	movs	r2, #0
 800a95a:	490f      	ldr	r1, [pc, #60]	; (800a998 <dwt_ioctl+0x1634>)
 800a95c:	f7fe f99e 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800a960:	2500      	movs	r5, #0
 800a962:	f7fe bda9 	b.w	80094b8 <dwt_ioctl+0x154>
 800a966:	bf00      	nop
 800a968:	00180028 	.word	0x00180028
 800a96c:	000c0008 	.word	0x000c0008
 800a970:	0007001c 	.word	0x0007001c
 800a974:	00080010 	.word	0x00080010
 800a978:	00080014 	.word	0x00080014
 800a97c:	00070014 	.word	0x00070014
 800a980:	00050008 	.word	0x00050008
 800a984:	001f000c 	.word	0x001f000c
 800a988:	001f0010 	.word	0x001f0010
 800a98c:	00030060 	.word	0x00030060
 800a990:	00010024 	.word	0x00010024
 800a994:	0005002c 	.word	0x0005002c
 800a998:	000e001a 	.word	0x000e001a
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	f000 83e3 	beq.w	800b168 <dwt_ioctl+0x1e04>
 800a9a2:	88a7      	ldrh	r7, [r4, #4]
 800a9a4:	68a3      	ldr	r3, [r4, #8]
 800a9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a8:	7b21      	ldrb	r1, [r4, #12]
 800a9aa:	9106      	str	r1, [sp, #24]
 800a9ac:	6922      	ldr	r2, [r4, #16]
 800a9ae:	9204      	str	r2, [sp, #16]
 800a9b0:	6962      	ldr	r2, [r4, #20]
 800a9b2:	9205      	str	r2, [sp, #20]
 800a9b4:	f003 0203 	and.w	r2, r3, #3
 800a9b8:	f3c3 0085 	ubfx	r0, r3, #2, #6
 800a9bc:	2905      	cmp	r1, #5
 800a9be:	d142      	bne.n	800aa46 <dwt_ioctl+0x16e2>
 800a9c0:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800a9c4:	bf28      	it	cs
 800a9c6:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800a9ca:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800acac <dwt_ioctl+0x1948>
 800a9ce:	2f04      	cmp	r7, #4
 800a9d0:	d805      	bhi.n	800a9de <dwt_ioctl+0x167a>
 800a9d2:	eb09 0300 	add.w	r3, r9, r0
 800a9d6:	785b      	ldrb	r3, [r3, #1]
 800a9d8:	3b05      	subs	r3, #5
 800a9da:	429f      	cmp	r7, r3
 800a9dc:	db3b      	blt.n	800aa56 <dwt_ioctl+0x16f2>
 800a9de:	2a01      	cmp	r2, #1
 800a9e0:	d877      	bhi.n	800aad2 <dwt_ioctl+0x176e>
 800a9e2:	4bae      	ldr	r3, [pc, #696]	; (800ac9c <dwt_ioctl+0x1938>)
 800a9e4:	5c99      	ldrb	r1, [r3, r2]
 800a9e6:	463e      	mov	r6, r7
 800a9e8:	42b9      	cmp	r1, r7
 800a9ea:	da74      	bge.n	800aad6 <dwt_ioctl+0x1772>
 800a9ec:	1c55      	adds	r5, r2, #1
 800a9ee:	fa53 f585 	uxtab	r5, r3, r5
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	440b      	add	r3, r1
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3201      	adds	r2, #1
 800a9fa:	b2d2      	uxtb	r2, r2
 800a9fc:	2a02      	cmp	r2, #2
 800a9fe:	d005      	beq.n	800aa0c <dwt_ioctl+0x16a8>
 800aa00:	f815 1b01 	ldrb.w	r1, [r5], #1
 800aa04:	eba6 0c03 	sub.w	ip, r6, r3
 800aa08:	4561      	cmp	r1, ip
 800aa0a:	dbf3      	blt.n	800a9f4 <dwt_ioctl+0x1690>
 800aa0c:	429f      	cmp	r7, r3
 800aa0e:	bf08      	it	eq
 800aa10:	9003      	streq	r0, [sp, #12]
 800aa12:	d064      	beq.n	800aade <dwt_ioctl+0x177a>
 800aa14:	f107 0805 	add.w	r8, r7, #5
 800aa18:	fa1f f888 	uxth.w	r8, r8
 800aa1c:	2580      	movs	r5, #128	; 0x80
 800aa1e:	2100      	movs	r1, #0
 800aa20:	9107      	str	r1, [sp, #28]
 800aa22:	9103      	str	r1, [sp, #12]
 800aa24:	9108      	str	r1, [sp, #32]
 800aa26:	460e      	mov	r6, r1
 800aa28:	f04f 0b05 	mov.w	fp, #5
 800aa2c:	46be      	mov	lr, r7
 800aa2e:	455f      	cmp	r7, fp
 800aa30:	bf38      	it	cc
 800aa32:	46de      	movcc	lr, fp
 800aa34:	f1ae 0e05 	sub.w	lr, lr, #5
 800aa38:	fa1f fe8e 	uxth.w	lr, lr
 800aa3c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800ac9c <dwt_ioctl+0x1938>
 800aa40:	46bc      	mov	ip, r7
 800aa42:	460f      	mov	r7, r1
 800aa44:	e3dd      	b.n	800b202 <dwt_ioctl+0x1e9e>
 800aa46:	f240 1331 	movw	r3, #305	; 0x131
 800aa4a:	429f      	cmp	r7, r3
 800aa4c:	bf28      	it	cs
 800aa4e:	461f      	movcs	r7, r3
 800aa50:	f8df 925c 	ldr.w	r9, [pc, #604]	; 800acb0 <dwt_ioctl+0x194c>
 800aa54:	e7bb      	b.n	800a9ce <dwt_ioctl+0x166a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	9a05      	ldr	r2, [sp, #20]
 800aa5a:	8013      	strh	r3, [r2, #0]
 800aa5c:	9a04      	ldr	r2, [sp, #16]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa62:	600a      	str	r2, [r1, #0]
 800aa64:	e04a      	b.n	800aafc <dwt_ioctl+0x1798>
 800aa66:	2300      	movs	r3, #0
 800aa68:	9a05      	ldr	r2, [sp, #20]
 800aa6a:	8013      	strh	r3, [r2, #0]
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	f04f 33ff 	mov.w	r3, #4294967295
 800aa78:	e040      	b.n	800aafc <dwt_ioctl+0x1798>
 800aa7a:	fa1f fb81 	uxth.w	fp, r1
 800aa7e:	9207      	str	r2, [sp, #28]
 800aa80:	9003      	str	r0, [sp, #12]
 800aa82:	9308      	str	r3, [sp, #32]
 800aa84:	2701      	movs	r7, #1
 800aa86:	e3cd      	b.n	800b224 <dwt_ioctl+0x1ec0>
 800aa88:	2f00      	cmp	r7, #0
 800aa8a:	f040 83a1 	bne.w	800b1d0 <dwt_ioctl+0x1e6c>
 800aa8e:	4598      	cmp	r8, r3
 800aa90:	f200 83a3 	bhi.w	800b1da <dwt_ioctl+0x1e76>
 800aa94:	2e00      	cmp	r6, #0
 800aa96:	d038      	beq.n	800ab0a <dwt_ioctl+0x17a6>
 800aa98:	283f      	cmp	r0, #63	; 0x3f
 800aa9a:	f000 83c8 	beq.w	800b22e <dwt_ioctl+0x1eca>
 800aa9e:	2700      	movs	r7, #0
 800aaa0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800aaa4:	1a5b      	subs	r3, r3, r1
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	1e46      	subs	r6, r0, #1
 800aaaa:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800aaae:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800aab2:	bf18      	it	ne
 800aab4:	2601      	movne	r6, #1
 800aab6:	e39c      	b.n	800b1f2 <dwt_ioctl+0x1e8e>
 800aab8:	9906      	ldr	r1, [sp, #24]
 800aaba:	2909      	cmp	r1, #9
 800aabc:	f040 83bd 	bne.w	800b23a <dwt_ioctl+0x1ed6>
 800aac0:	213f      	movs	r1, #63	; 0x3f
 800aac2:	9103      	str	r1, [sp, #12]
 800aac4:	e00b      	b.n	800aade <dwt_ioctl+0x177a>
 800aac6:	b2b3      	uxth	r3, r6
 800aac8:	3201      	adds	r2, #1
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	213f      	movs	r1, #63	; 0x3f
 800aace:	9103      	str	r1, [sp, #12]
 800aad0:	e005      	b.n	800aade <dwt_ioctl+0x177a>
 800aad2:	2300      	movs	r3, #0
 800aad4:	e79a      	b.n	800aa0c <dwt_ioctl+0x16a8>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e798      	b.n	800aa0c <dwt_ioctl+0x16a8>
 800aada:	9003      	str	r0, [sp, #12]
 800aadc:	4663      	mov	r3, ip
 800aade:	9905      	ldr	r1, [sp, #20]
 800aae0:	800b      	strh	r3, [r1, #0]
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800aae8:	b2d2      	uxtb	r2, r2
 800aaea:	0413      	lsls	r3, r2, #16
 800aaec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aaf6:	9a04      	ldr	r2, [sp, #16]
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	2500      	movs	r5, #0
 800ab00:	f7fe bcda 	b.w	80094b8 <dwt_ioctl+0x154>
 800ab04:	9a07      	ldr	r2, [sp, #28]
 800ab06:	9b08      	ldr	r3, [sp, #32]
 800ab08:	e7e9      	b.n	800aade <dwt_ioctl+0x177a>
 800ab0a:	9003      	str	r0, [sp, #12]
 800ab0c:	e7e7      	b.n	800aade <dwt_ioctl+0x177a>
 800ab0e:	9a07      	ldr	r2, [sp, #28]
 800ab10:	9b08      	ldr	r3, [sp, #32]
 800ab12:	e7e4      	b.n	800aade <dwt_ioctl+0x177a>
 800ab14:	213f      	movs	r1, #63	; 0x3f
 800ab16:	9103      	str	r1, [sp, #12]
 800ab18:	e7e1      	b.n	800aade <dwt_ioctl+0x177a>
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	f000 8327 	beq.w	800b16e <dwt_ioctl+0x1e0a>
 800ab20:	7825      	ldrb	r5, [r4, #0]
 800ab22:	6862      	ldr	r2, [r4, #4]
 800ab24:	2a01      	cmp	r2, #1
 800ab26:	bf15      	itete	ne
 800ab28:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800ab2c:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800ab30:	27df      	movne	r7, #223	; 0xdf
 800ab32:	27ef      	moveq	r7, #239	; 0xef
 800ab34:	bf14      	ite	ne
 800ab36:	f04f 0820 	movne.w	r8, #32
 800ab3a:	f04f 0810 	moveq.w	r8, #16
 800ab3e:	2400      	movs	r4, #0
 800ab40:	9400      	str	r4, [sp, #0]
 800ab42:	4622      	mov	r2, r4
 800ab44:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ab48:	f7fd fd0c 	bl	8008564 <dwt_modify32bitoffsetreg>
 800ab4c:	9400      	str	r4, [sp, #0]
 800ab4e:	463b      	mov	r3, r7
 800ab50:	4622      	mov	r2, r4
 800ab52:	4953      	ldr	r1, [pc, #332]	; (800aca0 <dwt_ioctl+0x193c>)
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7fd feef 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ab5a:	2d01      	cmp	r5, #1
 800ab5c:	d003      	beq.n	800ab66 <dwt_ioctl+0x1802>
 800ab5e:	b165      	cbz	r5, 800ab7a <dwt_ioctl+0x1816>
 800ab60:	2500      	movs	r5, #0
 800ab62:	f7fe bca9 	b.w	80094b8 <dwt_ioctl+0x154>
 800ab66:	4625      	mov	r5, r4
 800ab68:	9400      	str	r4, [sp, #0]
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	494d      	ldr	r1, [pc, #308]	; (800aca4 <dwt_ioctl+0x1940>)
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7fd fee1 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ab76:	f7fe bc9f 	b.w	80094b8 <dwt_ioctl+0x154>
 800ab7a:	f8cd 8000 	str.w	r8, [sp]
 800ab7e:	23ff      	movs	r3, #255	; 0xff
 800ab80:	2200      	movs	r2, #0
 800ab82:	4948      	ldr	r1, [pc, #288]	; (800aca4 <dwt_ioctl+0x1940>)
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7fd fed7 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ab8a:	f7fe bc95 	b.w	80094b8 <dwt_ioctl+0x154>
 800ab8e:	2c00      	cmp	r4, #0
 800ab90:	f000 82f0 	beq.w	800b174 <dwt_ioctl+0x1e10>
 800ab94:	7822      	ldrb	r2, [r4, #0]
 800ab96:	f012 0f01 	tst.w	r2, #1
 800ab9a:	d02d      	beq.n	800abf8 <dwt_ioctl+0x1894>
 800ab9c:	0157      	lsls	r7, r2, #5
 800ab9e:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800aba2:	2440      	movs	r4, #64	; 0x40
 800aba4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800aba8:	f012 0f04 	tst.w	r2, #4
 800abac:	d028      	beq.n	800ac00 <dwt_ioctl+0x189c>
 800abae:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800abb2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800abb6:	0112      	lsls	r2, r2, #4
 800abb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800abbc:	4317      	orrs	r7, r2
 800abbe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800abc2:	9200      	str	r2, [sp, #0]
 800abc4:	43db      	mvns	r3, r3
 800abc6:	2200      	movs	r2, #0
 800abc8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800abcc:	4630      	mov	r0, r6
 800abce:	f7fd fcc9 	bl	8008564 <dwt_modify32bitoffsetreg>
 800abd2:	43e4      	mvns	r4, r4
 800abd4:	b2a4      	uxth	r4, r4
 800abd6:	2500      	movs	r5, #0
 800abd8:	9500      	str	r5, [sp, #0]
 800abda:	4623      	mov	r3, r4
 800abdc:	462a      	mov	r2, r5
 800abde:	4930      	ldr	r1, [pc, #192]	; (800aca0 <dwt_ioctl+0x193c>)
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7fe f85b 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800abe6:	9700      	str	r7, [sp, #0]
 800abe8:	4623      	mov	r3, r4
 800abea:	462a      	mov	r2, r5
 800abec:	492d      	ldr	r1, [pc, #180]	; (800aca4 <dwt_ioctl+0x1940>)
 800abee:	4630      	mov	r0, r6
 800abf0:	f7fe f854 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800abf4:	f7fe bc60 	b.w	80094b8 <dwt_ioctl+0x154>
 800abf8:	2700      	movs	r7, #0
 800abfa:	463c      	mov	r4, r7
 800abfc:	463b      	mov	r3, r7
 800abfe:	e7d3      	b.n	800aba8 <dwt_ioctl+0x1844>
 800ac00:	2200      	movs	r2, #0
 800ac02:	e7de      	b.n	800abc2 <dwt_ioctl+0x185e>
 800ac04:	2308      	movs	r3, #8
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	23ff      	movs	r3, #255	; 0xff
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800ac10:	f7fd fe92 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ac14:	4c24      	ldr	r4, [pc, #144]	; (800aca8 <dwt_ioctl+0x1944>)
 800ac16:	2302      	movs	r3, #2
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	23ff      	movs	r3, #255	; 0xff
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	4621      	mov	r1, r4
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7fd fe89 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ac26:	2500      	movs	r5, #0
 800ac28:	9500      	str	r5, [sp, #0]
 800ac2a:	23f7      	movs	r3, #247	; 0xf7
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800ac32:	4630      	mov	r0, r6
 800ac34:	f7fd fe80 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ac38:	9500      	str	r5, [sp, #0]
 800ac3a:	23fd      	movs	r3, #253	; 0xfd
 800ac3c:	2203      	movs	r2, #3
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7fd fe79 	bl	8008938 <dwt_modify8bitoffsetreg>
 800ac46:	f7fe bc37 	b.w	80094b8 <dwt_ioctl+0x154>
 800ac4a:	2c00      	cmp	r4, #0
 800ac4c:	f000 8295 	beq.w	800b17a <dwt_ioctl+0x1e16>
 800ac50:	8863      	ldrh	r3, [r4, #2]
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800ac58:	7822      	ldrb	r2, [r4, #0]
 800ac5a:	b10a      	cbz	r2, 800ac60 <dwt_ioctl+0x18fc>
 800ac5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	f24f 0307 	movw	r3, #61447	; 0xf007
 800ac66:	2200      	movs	r2, #0
 800ac68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7fe f815 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800ac72:	2500      	movs	r5, #0
 800ac74:	f7fe bc20 	b.w	80094b8 <dwt_ioctl+0x154>
 800ac78:	2c00      	cmp	r4, #0
 800ac7a:	f000 8281 	beq.w	800b180 <dwt_ioctl+0x1e1c>
 800ac7e:	b2e3      	uxtb	r3, r4
 800ac80:	1c9a      	adds	r2, r3, #2
 800ac82:	2301      	movs	r3, #1
 800ac84:	4093      	lsls	r3, r2
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800ac90:	f7fc ff83 	bl	8007b9a <dwt_write8bitoffsetreg>
 800ac94:	2500      	movs	r5, #0
 800ac96:	f7fe bc0f 	b.w	80094b8 <dwt_ioctl+0x154>
 800ac9a:	bf00      	nop
 800ac9c:	0801996c 	.word	0x0801996c
 800aca0:	00050008 	.word	0x00050008
 800aca4:	0005000c 	.word	0x0005000c
 800aca8:	00110008 	.word	0x00110008
 800acac:	080198ec 	.word	0x080198ec
 800acb0:	0801992c 	.word	0x0801992c
 800acb4:	2c00      	cmp	r4, #0
 800acb6:	f000 8266 	beq.w	800b186 <dwt_ioctl+0x1e22>
 800acba:	7ae3      	ldrb	r3, [r4, #11]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 8265 	beq.w	800b18c <dwt_ioctl+0x1e28>
 800acc2:	7b63      	ldrb	r3, [r4, #13]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d921      	bls.n	800ad0c <dwt_ioctl+0x19a8>
 800acc8:	7b22      	ldrb	r2, [r4, #12]
 800acca:	4bd7      	ldr	r3, [pc, #860]	; (800b028 <dwt_ioctl+0x1cc4>)
 800accc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800acd0:	0112      	lsls	r2, r2, #4
 800acd2:	0ad3      	lsrs	r3, r2, #11
 800acd4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800acd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acdc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ace0:	bf28      	it	cs
 800ace2:	3301      	addcs	r3, #1
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	f64f 7380 	movw	r3, #65408	; 0xff80
 800acf0:	2202      	movs	r2, #2
 800acf2:	49ce      	ldr	r1, [pc, #824]	; (800b02c <dwt_ioctl+0x1cc8>)
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7fd ffd1 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800acfa:	2394      	movs	r3, #148	; 0x94
 800acfc:	2200      	movs	r2, #0
 800acfe:	49cc      	ldr	r1, [pc, #816]	; (800b030 <dwt_ioctl+0x1ccc>)
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7fc ff4a 	bl	8007b9a <dwt_write8bitoffsetreg>
 800ad06:	2500      	movs	r5, #0
 800ad08:	f7fe bbd6 	b.w	80094b8 <dwt_ioctl+0x154>
 800ad0c:	7b22      	ldrb	r2, [r4, #12]
 800ad0e:	4bc6      	ldr	r3, [pc, #792]	; (800b028 <dwt_ioctl+0x1cc4>)
 800ad10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ad14:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800ad18:	fb02 f203 	mul.w	r2, r2, r3
 800ad1c:	0c93      	lsrs	r3, r2, #18
 800ad1e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800ad22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad26:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ad2a:	bf28      	it	cs
 800ad2c:	3301      	addcs	r3, #1
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	e7d9      	b.n	800ace6 <dwt_ioctl+0x1982>
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	f000 822d 	beq.w	800b192 <dwt_ioctl+0x1e2e>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	49be      	ldr	r1, [pc, #760]	; (800b034 <dwt_ioctl+0x1cd0>)
 800ad3c:	f7fc fb3e 	bl	80073bc <dwt_read32bitoffsetreg>
 800ad40:	6020      	str	r0, [r4, #0]
 800ad42:	2500      	movs	r5, #0
 800ad44:	f7fe bbb8 	b.w	80094b8 <dwt_ioctl+0x154>
 800ad48:	2c00      	cmp	r4, #0
 800ad4a:	f000 8225 	beq.w	800b198 <dwt_ioctl+0x1e34>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	49b9      	ldr	r1, [pc, #740]	; (800b038 <dwt_ioctl+0x1cd4>)
 800ad52:	f7fc fb33 	bl	80073bc <dwt_read32bitoffsetreg>
 800ad56:	6020      	str	r0, [r4, #0]
 800ad58:	2500      	movs	r5, #0
 800ad5a:	f7fe bbad 	b.w	80094b8 <dwt_ioctl+0x154>
 800ad5e:	2c00      	cmp	r4, #0
 800ad60:	f000 821d 	beq.w	800b19e <dwt_ioctl+0x1e3a>
 800ad64:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	f7fe bba4 	b.w	80094b8 <dwt_ioctl+0x154>
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	f000 8217 	beq.w	800b1a4 <dwt_ioctl+0x1e40>
 800ad76:	2500      	movs	r5, #0
 800ad78:	950b      	str	r5, [sp, #44]	; 0x2c
 800ad7a:	af10      	add	r7, sp, #64	; 0x40
 800ad7c:	2319      	movs	r3, #25
 800ad7e:	f847 3d10 	str.w	r3, [r7, #-16]!
 800ad82:	9700      	str	r7, [sp, #0]
 800ad84:	2304      	movs	r3, #4
 800ad86:	462a      	mov	r2, r5
 800ad88:	49ac      	ldr	r1, [pc, #688]	; (800b03c <dwt_ioctl+0x1cd8>)
 800ad8a:	f7fc fefb 	bl	8007b84 <dwt_writetodevice>
 800ad8e:	f641 7348 	movw	r3, #8008	; 0x1f48
 800ad92:	930c      	str	r3, [sp, #48]	; 0x30
 800ad94:	9700      	str	r7, [sp, #0]
 800ad96:	2304      	movs	r3, #4
 800ad98:	462a      	mov	r2, r5
 800ad9a:	49a9      	ldr	r1, [pc, #676]	; (800b040 <dwt_ioctl+0x1cdc>)
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f7fc fef1 	bl	8007b84 <dwt_writetodevice>
 800ada2:	ab0b      	add	r3, sp, #44	; 0x2c
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	2304      	movs	r3, #4
 800ada8:	462a      	mov	r2, r5
 800adaa:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800adae:	4630      	mov	r0, r6
 800adb0:	f7fc fafa 	bl	80073a8 <dwt_readfromdevice>
 800adb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	f7fe bb7e 	b.w	80094b8 <dwt_ioctl+0x154>
 800adbc:	2c00      	cmp	r4, #0
 800adbe:	f000 81f4 	beq.w	800b1aa <dwt_ioctl+0x1e46>
 800adc2:	2200      	movs	r2, #0
 800adc4:	499f      	ldr	r1, [pc, #636]	; (800b044 <dwt_ioctl+0x1ce0>)
 800adc6:	f7fc faf9 	bl	80073bc <dwt_read32bitoffsetreg>
 800adca:	b280      	uxth	r0, r0
 800adcc:	6020      	str	r0, [r4, #0]
 800adce:	2200      	movs	r2, #0
 800add0:	499d      	ldr	r1, [pc, #628]	; (800b048 <dwt_ioctl+0x1ce4>)
 800add2:	4630      	mov	r0, r6
 800add4:	f7fc faf2 	bl	80073bc <dwt_read32bitoffsetreg>
 800add8:	0d43      	lsrs	r3, r0, #21
 800adda:	019b      	lsls	r3, r3, #6
 800addc:	b29b      	uxth	r3, r3
 800adde:	6063      	str	r3, [r4, #4]
 800ade0:	2500      	movs	r5, #0
 800ade2:	f7fe bb69 	b.w	80094b8 <dwt_ioctl+0x154>
 800ade6:	2c00      	cmp	r4, #0
 800ade8:	f000 81e2 	beq.w	800b1b0 <dwt_ioctl+0x1e4c>
 800adec:	7d63      	ldrb	r3, [r4, #21]
 800adee:	b12b      	cbz	r3, 800adfc <dwt_ioctl+0x1a98>
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d037      	beq.n	800ae64 <dwt_ioctl+0x1b00>
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d05e      	beq.n	800aeb6 <dwt_ioctl+0x1b52>
 800adf8:	23ff      	movs	r3, #255	; 0xff
 800adfa:	e02f      	b.n	800ae5c <dwt_ioctl+0x1af8>
 800adfc:	2200      	movs	r2, #0
 800adfe:	4993      	ldr	r1, [pc, #588]	; (800b04c <dwt_ioctl+0x1ce8>)
 800ae00:	f7fc fadc 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae04:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800ae08:	6020      	str	r0, [r4, #0]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4990      	ldr	r1, [pc, #576]	; (800b050 <dwt_ioctl+0x1cec>)
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7fc fad4 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae14:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ae18:	6060      	str	r0, [r4, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	498d      	ldr	r1, [pc, #564]	; (800b054 <dwt_ioctl+0x1cf0>)
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7fc facc 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae24:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ae28:	60a0      	str	r0, [r4, #8]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	498a      	ldr	r1, [pc, #552]	; (800b058 <dwt_ioctl+0x1cf4>)
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f7fc fac4 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae34:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ae38:	60e0      	str	r0, [r4, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	4987      	ldr	r1, [pc, #540]	; (800b05c <dwt_ioctl+0x1cf8>)
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f7fc fabc 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae44:	f3c0 0010 	ubfx	r0, r0, #0, #17
 800ae48:	6120      	str	r0, [r4, #16]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	4979      	ldr	r1, [pc, #484]	; (800b034 <dwt_ioctl+0x1cd0>)
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7fc fadc 	bl	800740c <dwt_read8bitoffsetreg>
 800ae54:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ae58:	7520      	strb	r0, [r4, #20]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	75a3      	strb	r3, [r4, #22]
 800ae5e:	2500      	movs	r5, #0
 800ae60:	f7fe bb2a 	b.w	80094b8 <dwt_ioctl+0x154>
 800ae64:	2200      	movs	r2, #0
 800ae66:	497e      	ldr	r1, [pc, #504]	; (800b060 <dwt_ioctl+0x1cfc>)
 800ae68:	f7fc faa8 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae6c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800ae70:	6020      	str	r0, [r4, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	497b      	ldr	r1, [pc, #492]	; (800b064 <dwt_ioctl+0x1d00>)
 800ae76:	4630      	mov	r0, r6
 800ae78:	f7fc faa0 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae7c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ae80:	6060      	str	r0, [r4, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	4978      	ldr	r1, [pc, #480]	; (800b068 <dwt_ioctl+0x1d04>)
 800ae86:	4630      	mov	r0, r6
 800ae88:	f7fc fa98 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae8c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ae90:	60a0      	str	r0, [r4, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7fc fa8f 	bl	80073bc <dwt_read32bitoffsetreg>
 800ae9e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800aea2:	60e0      	str	r0, [r4, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	4971      	ldr	r1, [pc, #452]	; (800b06c <dwt_ioctl+0x1d08>)
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7fc fa87 	bl	80073bc <dwt_read32bitoffsetreg>
 800aeae:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800aeb2:	6120      	str	r0, [r4, #16]
 800aeb4:	e7c9      	b.n	800ae4a <dwt_ioctl+0x1ae6>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	496d      	ldr	r1, [pc, #436]	; (800b070 <dwt_ioctl+0x1d0c>)
 800aeba:	f7fc fa7f 	bl	80073bc <dwt_read32bitoffsetreg>
 800aebe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800aec2:	6020      	str	r0, [r4, #0]
 800aec4:	2200      	movs	r2, #0
 800aec6:	496b      	ldr	r1, [pc, #428]	; (800b074 <dwt_ioctl+0x1d10>)
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7fc fa77 	bl	80073bc <dwt_read32bitoffsetreg>
 800aece:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800aed2:	6060      	str	r0, [r4, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	4968      	ldr	r1, [pc, #416]	; (800b078 <dwt_ioctl+0x1d14>)
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7fc fa6f 	bl	80073bc <dwt_read32bitoffsetreg>
 800aede:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800aee2:	60a0      	str	r0, [r4, #8]
 800aee4:	2200      	movs	r2, #0
 800aee6:	4965      	ldr	r1, [pc, #404]	; (800b07c <dwt_ioctl+0x1d18>)
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7fc fa67 	bl	80073bc <dwt_read32bitoffsetreg>
 800aeee:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800aef2:	60e0      	str	r0, [r4, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	4962      	ldr	r1, [pc, #392]	; (800b080 <dwt_ioctl+0x1d1c>)
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7fc fa5f 	bl	80073bc <dwt_read32bitoffsetreg>
 800aefe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800af02:	6120      	str	r0, [r4, #16]
 800af04:	e7a1      	b.n	800ae4a <dwt_ioctl+0x1ae6>
 800af06:	2500      	movs	r5, #0
 800af08:	f7fe bad6 	b.w	80094b8 <dwt_ioctl+0x154>
 800af0c:	2500      	movs	r5, #0
 800af0e:	f7fe bad3 	b.w	80094b8 <dwt_ioctl+0x154>
 800af12:	2500      	movs	r5, #0
 800af14:	f7fe bad0 	b.w	80094b8 <dwt_ioctl+0x154>
 800af18:	2500      	movs	r5, #0
 800af1a:	f7fe bacd 	b.w	80094b8 <dwt_ioctl+0x154>
 800af1e:	2500      	movs	r5, #0
 800af20:	f7fe baca 	b.w	80094b8 <dwt_ioctl+0x154>
 800af24:	2500      	movs	r5, #0
 800af26:	f7fe bac7 	b.w	80094b8 <dwt_ioctl+0x154>
 800af2a:	2500      	movs	r5, #0
 800af2c:	f7fe bac4 	b.w	80094b8 <dwt_ioctl+0x154>
 800af30:	2500      	movs	r5, #0
 800af32:	f7fe bac1 	b.w	80094b8 <dwt_ioctl+0x154>
 800af36:	2500      	movs	r5, #0
 800af38:	f7fe babe 	b.w	80094b8 <dwt_ioctl+0x154>
 800af3c:	2500      	movs	r5, #0
 800af3e:	f7fe babb 	b.w	80094b8 <dwt_ioctl+0x154>
 800af42:	2500      	movs	r5, #0
 800af44:	f7fe bab8 	b.w	80094b8 <dwt_ioctl+0x154>
 800af48:	2500      	movs	r5, #0
 800af4a:	f7fe bab5 	b.w	80094b8 <dwt_ioctl+0x154>
 800af4e:	2500      	movs	r5, #0
 800af50:	f7fe bab2 	b.w	80094b8 <dwt_ioctl+0x154>
 800af54:	2500      	movs	r5, #0
 800af56:	f7fe baaf 	b.w	80094b8 <dwt_ioctl+0x154>
 800af5a:	2500      	movs	r5, #0
 800af5c:	f7fe baac 	b.w	80094b8 <dwt_ioctl+0x154>
 800af60:	2500      	movs	r5, #0
 800af62:	f7fe baa9 	b.w	80094b8 <dwt_ioctl+0x154>
 800af66:	2500      	movs	r5, #0
 800af68:	f7fe baa6 	b.w	80094b8 <dwt_ioctl+0x154>
 800af6c:	2500      	movs	r5, #0
 800af6e:	f7fe baa3 	b.w	80094b8 <dwt_ioctl+0x154>
 800af72:	2500      	movs	r5, #0
 800af74:	f7fe baa0 	b.w	80094b8 <dwt_ioctl+0x154>
 800af78:	2500      	movs	r5, #0
 800af7a:	f7fe ba9d 	b.w	80094b8 <dwt_ioctl+0x154>
 800af7e:	2500      	movs	r5, #0
 800af80:	f7fe ba9a 	b.w	80094b8 <dwt_ioctl+0x154>
 800af84:	2500      	movs	r5, #0
 800af86:	f7fe ba97 	b.w	80094b8 <dwt_ioctl+0x154>
 800af8a:	2500      	movs	r5, #0
 800af8c:	f7fe ba94 	b.w	80094b8 <dwt_ioctl+0x154>
 800af90:	2500      	movs	r5, #0
 800af92:	f7fe ba91 	b.w	80094b8 <dwt_ioctl+0x154>
 800af96:	2500      	movs	r5, #0
 800af98:	f7fe ba8e 	b.w	80094b8 <dwt_ioctl+0x154>
 800af9c:	2500      	movs	r5, #0
 800af9e:	f7fe ba8b 	b.w	80094b8 <dwt_ioctl+0x154>
 800afa2:	2500      	movs	r5, #0
 800afa4:	f7fe ba88 	b.w	80094b8 <dwt_ioctl+0x154>
 800afa8:	2500      	movs	r5, #0
 800afaa:	f7fe ba85 	b.w	80094b8 <dwt_ioctl+0x154>
 800afae:	2500      	movs	r5, #0
 800afb0:	f7fe ba82 	b.w	80094b8 <dwt_ioctl+0x154>
 800afb4:	2500      	movs	r5, #0
 800afb6:	f7fe ba7f 	b.w	80094b8 <dwt_ioctl+0x154>
 800afba:	2500      	movs	r5, #0
 800afbc:	f7fe ba7c 	b.w	80094b8 <dwt_ioctl+0x154>
 800afc0:	2500      	movs	r5, #0
 800afc2:	f7fe ba79 	b.w	80094b8 <dwt_ioctl+0x154>
 800afc6:	2500      	movs	r5, #0
 800afc8:	f7fe ba76 	b.w	80094b8 <dwt_ioctl+0x154>
 800afcc:	2500      	movs	r5, #0
 800afce:	f7fe ba73 	b.w	80094b8 <dwt_ioctl+0x154>
 800afd2:	2500      	movs	r5, #0
 800afd4:	f7fe ba70 	b.w	80094b8 <dwt_ioctl+0x154>
 800afd8:	2500      	movs	r5, #0
 800afda:	f7fe ba6d 	b.w	80094b8 <dwt_ioctl+0x154>
 800afde:	2500      	movs	r5, #0
 800afe0:	f7fe ba6a 	b.w	80094b8 <dwt_ioctl+0x154>
 800afe4:	2500      	movs	r5, #0
 800afe6:	f7fe ba67 	b.w	80094b8 <dwt_ioctl+0x154>
 800afea:	2500      	movs	r5, #0
 800afec:	f7fe ba64 	b.w	80094b8 <dwt_ioctl+0x154>
 800aff0:	2500      	movs	r5, #0
 800aff2:	f7fe ba61 	b.w	80094b8 <dwt_ioctl+0x154>
 800aff6:	2500      	movs	r5, #0
 800aff8:	f7fe ba5e 	b.w	80094b8 <dwt_ioctl+0x154>
 800affc:	2500      	movs	r5, #0
 800affe:	f7fe ba5b 	b.w	80094b8 <dwt_ioctl+0x154>
 800b002:	2500      	movs	r5, #0
 800b004:	f7fe ba58 	b.w	80094b8 <dwt_ioctl+0x154>
 800b008:	2500      	movs	r5, #0
 800b00a:	f7fe ba55 	b.w	80094b8 <dwt_ioctl+0x154>
 800b00e:	2500      	movs	r5, #0
 800b010:	f7fe ba52 	b.w	80094b8 <dwt_ioctl+0x154>
 800b014:	2500      	movs	r5, #0
 800b016:	f7fe ba4f 	b.w	80094b8 <dwt_ioctl+0x154>
 800b01a:	2500      	movs	r5, #0
 800b01c:	f7fe ba4c 	b.w	80094b8 <dwt_ioctl+0x154>
 800b020:	2500      	movs	r5, #0
 800b022:	f7fe ba49 	b.w	80094b8 <dwt_ioctl+0x154>
 800b026:	bf00      	nop
 800b028:	080199a8 	.word	0x080199a8
 800b02c:	000e0012 	.word	0x000e0012
 800b030:	000e0016 	.word	0x000e0016
 800b034:	00030060 	.word	0x00030060
 800b038:	000f0048 	.word	0x000f0048
 800b03c:	001f0004 	.word	0x001f0004
 800b040:	001f0008 	.word	0x001f0008
 800b044:	000c0048 	.word	0x000c0048
 800b048:	000c0028 	.word	0x000c0028
 800b04c:	000c0058 	.word	0x000c0058
 800b050:	000c0030 	.word	0x000c0030
 800b054:	000c0034 	.word	0x000c0034
 800b058:	000c0038 	.word	0x000c0038
 800b05c:	000c002c 	.word	0x000c002c
 800b060:	000d0020 	.word	0x000d0020
 800b064:	000c0064 	.word	0x000c0064
 800b068:	000c0068 	.word	0x000c0068
 800b06c:	000c0060 	.word	0x000c0060
 800b070:	000d0068 	.word	0x000d0068
 800b074:	000d0040 	.word	0x000d0040
 800b078:	000d0044 	.word	0x000d0044
 800b07c:	000d0048 	.word	0x000d0048
 800b080:	000d003c 	.word	0x000d003c
 800b084:	2500      	movs	r5, #0
 800b086:	f7fe ba17 	b.w	80094b8 <dwt_ioctl+0x154>
 800b08a:	2500      	movs	r5, #0
 800b08c:	f7fe ba14 	b.w	80094b8 <dwt_ioctl+0x154>
 800b090:	2500      	movs	r5, #0
 800b092:	f7fe ba11 	b.w	80094b8 <dwt_ioctl+0x154>
 800b096:	2500      	movs	r5, #0
 800b098:	f7fe ba0e 	b.w	80094b8 <dwt_ioctl+0x154>
 800b09c:	2500      	movs	r5, #0
 800b09e:	f7fe ba0b 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0a2:	2500      	movs	r5, #0
 800b0a4:	f7fe ba08 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	f7fe ba05 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	f7fe ba02 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0b4:	2500      	movs	r5, #0
 800b0b6:	f7fe b9ff 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0ba:	2500      	movs	r5, #0
 800b0bc:	f7fe b9fc 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0c0:	2500      	movs	r5, #0
 800b0c2:	f7fe b9f9 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0c6:	2500      	movs	r5, #0
 800b0c8:	f7fe b9f6 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0cc:	2500      	movs	r5, #0
 800b0ce:	f7fe b9f3 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0d2:	2500      	movs	r5, #0
 800b0d4:	f7fe b9f0 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0d8:	2500      	movs	r5, #0
 800b0da:	f7fe b9ed 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0de:	2500      	movs	r5, #0
 800b0e0:	f7fe b9ea 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	f7fe b9e7 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	f7fe b9e4 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0f0:	2500      	movs	r5, #0
 800b0f2:	f7fe b9e1 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0f6:	2500      	movs	r5, #0
 800b0f8:	f7fe b9de 	b.w	80094b8 <dwt_ioctl+0x154>
 800b0fc:	2500      	movs	r5, #0
 800b0fe:	f7fe b9db 	b.w	80094b8 <dwt_ioctl+0x154>
 800b102:	2500      	movs	r5, #0
 800b104:	f7fe b9d8 	b.w	80094b8 <dwt_ioctl+0x154>
 800b108:	2500      	movs	r5, #0
 800b10a:	f7fe b9d5 	b.w	80094b8 <dwt_ioctl+0x154>
 800b10e:	2500      	movs	r5, #0
 800b110:	f7fe b9d2 	b.w	80094b8 <dwt_ioctl+0x154>
 800b114:	2500      	movs	r5, #0
 800b116:	f7fe b9cf 	b.w	80094b8 <dwt_ioctl+0x154>
 800b11a:	2500      	movs	r5, #0
 800b11c:	f7fe b9cc 	b.w	80094b8 <dwt_ioctl+0x154>
 800b120:	2500      	movs	r5, #0
 800b122:	f7fe b9c9 	b.w	80094b8 <dwt_ioctl+0x154>
 800b126:	2500      	movs	r5, #0
 800b128:	f7fe b9c6 	b.w	80094b8 <dwt_ioctl+0x154>
 800b12c:	2500      	movs	r5, #0
 800b12e:	f7fe b9c3 	b.w	80094b8 <dwt_ioctl+0x154>
 800b132:	2500      	movs	r5, #0
 800b134:	f7fe b9c0 	b.w	80094b8 <dwt_ioctl+0x154>
 800b138:	2500      	movs	r5, #0
 800b13a:	f7fe b9bd 	b.w	80094b8 <dwt_ioctl+0x154>
 800b13e:	2500      	movs	r5, #0
 800b140:	f7fe b9ba 	b.w	80094b8 <dwt_ioctl+0x154>
 800b144:	2500      	movs	r5, #0
 800b146:	f7fe b9b7 	b.w	80094b8 <dwt_ioctl+0x154>
 800b14a:	2500      	movs	r5, #0
 800b14c:	f7fe b9b4 	b.w	80094b8 <dwt_ioctl+0x154>
 800b150:	2500      	movs	r5, #0
 800b152:	f7fe b9b1 	b.w	80094b8 <dwt_ioctl+0x154>
 800b156:	2500      	movs	r5, #0
 800b158:	f7fe b9ae 	b.w	80094b8 <dwt_ioctl+0x154>
 800b15c:	2500      	movs	r5, #0
 800b15e:	f7fe b9ab 	b.w	80094b8 <dwt_ioctl+0x154>
 800b162:	2500      	movs	r5, #0
 800b164:	f7fe b9a8 	b.w	80094b8 <dwt_ioctl+0x154>
 800b168:	2500      	movs	r5, #0
 800b16a:	f7fe b9a5 	b.w	80094b8 <dwt_ioctl+0x154>
 800b16e:	2500      	movs	r5, #0
 800b170:	f7fe b9a2 	b.w	80094b8 <dwt_ioctl+0x154>
 800b174:	2500      	movs	r5, #0
 800b176:	f7fe b99f 	b.w	80094b8 <dwt_ioctl+0x154>
 800b17a:	2500      	movs	r5, #0
 800b17c:	f7fe b99c 	b.w	80094b8 <dwt_ioctl+0x154>
 800b180:	2500      	movs	r5, #0
 800b182:	f7fe b999 	b.w	80094b8 <dwt_ioctl+0x154>
 800b186:	2500      	movs	r5, #0
 800b188:	f7fe b996 	b.w	80094b8 <dwt_ioctl+0x154>
 800b18c:	2500      	movs	r5, #0
 800b18e:	f7fe b993 	b.w	80094b8 <dwt_ioctl+0x154>
 800b192:	2500      	movs	r5, #0
 800b194:	f7fe b990 	b.w	80094b8 <dwt_ioctl+0x154>
 800b198:	2500      	movs	r5, #0
 800b19a:	f7fe b98d 	b.w	80094b8 <dwt_ioctl+0x154>
 800b19e:	2500      	movs	r5, #0
 800b1a0:	f7fe b98a 	b.w	80094b8 <dwt_ioctl+0x154>
 800b1a4:	2500      	movs	r5, #0
 800b1a6:	f7fe b987 	b.w	80094b8 <dwt_ioctl+0x154>
 800b1aa:	2500      	movs	r5, #0
 800b1ac:	f7fe b984 	b.w	80094b8 <dwt_ioctl+0x154>
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	f7fe b981 	b.w	80094b8 <dwt_ioctl+0x154>
 800b1b6:	f899 3011 	ldrb.w	r3, [r9, #17]
 800b1ba:	1e5a      	subs	r2, r3, #1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	2a01      	cmp	r2, #1
 800b1c0:	f67f a801 	bls.w	800a1c6 <dwt_ioctl+0xe62>
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	f7fe bf85 	b.w	800a0d4 <dwt_ioctl+0xd70>
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	f43f ac62 	beq.w	800aa94 <dwt_ioctl+0x1730>
 800b1d0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800b1d4:	1a5b      	subs	r3, r3, r1
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	e481      	b.n	800aade <dwt_ioctl+0x177a>
 800b1da:	283f      	cmp	r0, #63	; 0x3f
 800b1dc:	d027      	beq.n	800b22e <dwt_ioctl+0x1eca>
 800b1de:	2e00      	cmp	r6, #0
 800b1e0:	f47f ac5e 	bne.w	800aaa0 <dwt_ioctl+0x173c>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b1ea:	f819 1000 	ldrb.w	r1, [r9, r0]
 800b1ee:	440b      	add	r3, r1
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	459c      	cmp	ip, r3
 800b1f4:	f43f ac71 	beq.w	800aada <dwt_ioctl+0x1776>
 800b1f8:	3d01      	subs	r5, #1
 800b1fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800b1fe:	f43f ac32 	beq.w	800aa66 <dwt_ioctl+0x1702>
 800b202:	459e      	cmp	lr, r3
 800b204:	f4bf ac40 	bcs.w	800aa88 <dwt_ioctl+0x1724>
 800b208:	4598      	cmp	r8, r3
 800b20a:	d9de      	bls.n	800b1ca <dwt_ioctl+0x1e66>
 800b20c:	ebac 0103 	sub.w	r1, ip, r3
 800b210:	b209      	sxth	r1, r1
 800b212:	2900      	cmp	r1, #0
 800b214:	bfb8      	it	lt
 800b216:	4249      	neglt	r1, r1
 800b218:	4559      	cmp	r1, fp
 800b21a:	f77f ac2e 	ble.w	800aa7a <dwt_ioctl+0x1716>
 800b21e:	2f00      	cmp	r7, #0
 800b220:	f47f ac70 	bne.w	800ab04 <dwt_ioctl+0x17a0>
 800b224:	283f      	cmp	r0, #63	; 0x3f
 800b226:	d1da      	bne.n	800b1de <dwt_ioctl+0x1e7a>
 800b228:	2f00      	cmp	r7, #0
 800b22a:	f47f ac70 	bne.w	800ab0e <dwt_ioctl+0x17aa>
 800b22e:	2a03      	cmp	r2, #3
 800b230:	f43f ac70 	beq.w	800ab14 <dwt_ioctl+0x17b0>
 800b234:	2a02      	cmp	r2, #2
 800b236:	f43f ac3f 	beq.w	800aab8 <dwt_ioctl+0x1754>
 800b23a:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800b23e:	185e      	adds	r6, r3, r1
 800b240:	4566      	cmp	r6, ip
 800b242:	f77f ac40 	ble.w	800aac6 <dwt_ioctl+0x1762>
 800b246:	440b      	add	r3, r1
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3201      	adds	r2, #1
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	2700      	movs	r7, #0
 800b250:	e426      	b.n	800aaa0 <dwt_ioctl+0x173c>
 800b252:	bf00      	nop

0800b254 <ull_initialise>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	4605      	mov	r5, r0
 800b25a:	460e      	mov	r6, r1
 800b25c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d05c      	beq.n	800b31c <ull_initialise+0xc8>
 800b262:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800b264:	2300      	movs	r3, #0
 800b266:	73e3      	strb	r3, [r4, #15]
 800b268:	2202      	movs	r2, #2
 800b26a:	8262      	strh	r2, [r4, #18]
 800b26c:	75a3      	strb	r3, [r4, #22]
 800b26e:	75e3      	strb	r3, [r4, #23]
 800b270:	7423      	strb	r3, [r4, #16]
 800b272:	72a3      	strb	r3, [r4, #10]
 800b274:	72e3      	strb	r3, [r4, #11]
 800b276:	2104      	movs	r1, #4
 800b278:	4628      	mov	r0, r5
 800b27a:	f7fc fd3b 	bl	8007cf4 <_dwt_otpread>
 800b27e:	4607      	mov	r7, r0
 800b280:	2105      	movs	r1, #5
 800b282:	4628      	mov	r0, r5
 800b284:	f7fc fd36 	bl	8007cf4 <_dwt_otpread>
 800b288:	4680      	mov	r8, r0
 800b28a:	210a      	movs	r1, #10
 800b28c:	4628      	mov	r0, r5
 800b28e:	f7fc fd31 	bl	8007cf4 <_dwt_otpread>
 800b292:	f3c0 4004 	ubfx	r0, r0, #16, #5
 800b296:	7220      	strb	r0, [r4, #8]
 800b298:	b127      	cbz	r7, 800b2a4 <ull_initialise+0x50>
 800b29a:	f1b8 0f00 	cmp.w	r8, #0
 800b29e:	d001      	beq.n	800b2a4 <ull_initialise+0x50>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d140      	bne.n	800b326 <ull_initialise+0xd2>
 800b2a4:	2120      	movs	r1, #32
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f7fc fd24 	bl	8007cf4 <_dwt_otpread>
 800b2ac:	4b2f      	ldr	r3, [pc, #188]	; (800b36c <ull_initialise+0x118>)
 800b2ae:	4298      	cmp	r0, r3
 800b2b0:	bf0c      	ite	eq
 800b2b2:	2301      	moveq	r3, #1
 800b2b4:	2300      	movne	r3, #0
 800b2b6:	7263      	strb	r3, [r4, #9]
 800b2b8:	f016 0f10 	tst.w	r6, #16
 800b2bc:	d137      	bne.n	800b32e <ull_initialise+0xda>
 800b2be:	f016 0f20 	tst.w	r6, #32
 800b2c2:	d13a      	bne.n	800b33a <ull_initialise+0xe6>
 800b2c4:	f016 0f40 	tst.w	r6, #64	; 0x40
 800b2c8:	d13d      	bne.n	800b346 <ull_initialise+0xf2>
 800b2ca:	f016 0f80 	tst.w	r6, #128	; 0x80
 800b2ce:	d141      	bne.n	800b354 <ull_initialise+0x100>
 800b2d0:	7ae3      	ldrb	r3, [r4, #11]
 800b2d2:	b90b      	cbnz	r3, 800b2d8 <ull_initialise+0x84>
 800b2d4:	2385      	movs	r3, #133	; 0x85
 800b2d6:	72e3      	strb	r3, [r4, #11]
 800b2d8:	7aa3      	ldrb	r3, [r4, #10]
 800b2da:	b90b      	cbnz	r3, 800b2e0 <ull_initialise+0x8c>
 800b2dc:	2374      	movs	r3, #116	; 0x74
 800b2de:	72a3      	strb	r3, [r4, #10]
 800b2e0:	211f      	movs	r1, #31
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f7fc fd06 	bl	8007cf4 <_dwt_otpread>
 800b2e8:	7360      	strb	r0, [r4, #13]
 800b2ea:	211e      	movs	r1, #30
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f7fc fd01 	bl	8007cf4 <_dwt_otpread>
 800b2f2:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800b2f6:	bf12      	itee	ne
 800b2f8:	73a0      	strbne	r0, [r4, #14]
 800b2fa:	232e      	moveq	r3, #46	; 0x2e
 800b2fc:	73a3      	strbeq	r3, [r4, #14]
 800b2fe:	7ba3      	ldrb	r3, [r4, #14]
 800b300:	2200      	movs	r2, #0
 800b302:	491b      	ldr	r1, [pc, #108]	; (800b370 <ull_initialise+0x11c>)
 800b304:	4628      	mov	r0, r5
 800b306:	f7fc fc48 	bl	8007b9a <dwt_write8bitoffsetreg>
 800b30a:	2135      	movs	r1, #53	; 0x35
 800b30c:	4628      	mov	r0, r5
 800b30e:	f7fc fcf1 	bl	8007cf4 <_dwt_otpread>
 800b312:	4603      	mov	r3, r0
 800b314:	bb20      	cbnz	r0, 800b360 <ull_initialise+0x10c>
 800b316:	2000      	movs	r0, #0
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	202c      	movs	r0, #44	; 0x2c
 800b31e:	f009 f8f7 	bl	8014510 <malloc>
 800b322:	6528      	str	r0, [r5, #80]	; 0x50
 800b324:	e79d      	b.n	800b262 <ull_initialise+0xe>
 800b326:	4628      	mov	r0, r5
 800b328:	f7fd fcd2 	bl	8008cd0 <_dwt_prog_ldo_and_bias_tune>
 800b32c:	e7ba      	b.n	800b2a4 <ull_initialise+0x50>
 800b32e:	2106      	movs	r1, #6
 800b330:	4628      	mov	r0, r5
 800b332:	f7fc fcdf 	bl	8007cf4 <_dwt_otpread>
 800b336:	6020      	str	r0, [r4, #0]
 800b338:	e7c1      	b.n	800b2be <ull_initialise+0x6a>
 800b33a:	2107      	movs	r1, #7
 800b33c:	4628      	mov	r0, r5
 800b33e:	f7fc fcd9 	bl	8007cf4 <_dwt_otpread>
 800b342:	6060      	str	r0, [r4, #4]
 800b344:	e7be      	b.n	800b2c4 <ull_initialise+0x70>
 800b346:	2108      	movs	r1, #8
 800b348:	4628      	mov	r0, r5
 800b34a:	f7fc fcd3 	bl	8007cf4 <_dwt_otpread>
 800b34e:	0c00      	lsrs	r0, r0, #16
 800b350:	72a0      	strb	r0, [r4, #10]
 800b352:	e7ba      	b.n	800b2ca <ull_initialise+0x76>
 800b354:	2109      	movs	r1, #9
 800b356:	4628      	mov	r0, r5
 800b358:	f7fc fccc 	bl	8007cf4 <_dwt_otpread>
 800b35c:	72e0      	strb	r0, [r4, #11]
 800b35e:	e7b7      	b.n	800b2d0 <ull_initialise+0x7c>
 800b360:	2200      	movs	r2, #0
 800b362:	4904      	ldr	r1, [pc, #16]	; (800b374 <ull_initialise+0x120>)
 800b364:	4628      	mov	r0, r5
 800b366:	f7fc fd6b 	bl	8007e40 <dwt_write32bitoffsetreg>
 800b36a:	e7d4      	b.n	800b316 <ull_initialise+0xc2>
 800b36c:	10000240 	.word	0x10000240
 800b370:	00090014 	.word	0x00090014
 800b374:	00090004 	.word	0x00090004

0800b378 <_init>:
 800b378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37a:	b085      	sub	sp, #20
 800b37c:	4604      	mov	r4, r0
 800b37e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b380:	6819      	ldr	r1, [r3, #0]
 800b382:	f7ff ff67 	bl	800b254 <ull_initialise>
 800b386:	4606      	mov	r6, r0
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	4798      	blx	r3
 800b38e:	ab03      	add	r3, sp, #12
 800b390:	2200      	movs	r2, #0
 800b392:	4611      	mov	r1, r2
 800b394:	4620      	mov	r0, r4
 800b396:	f7fd ffe5 	bl	8009364 <dwt_ioctl>
 800b39a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39e:	6819      	ldr	r1, [r3, #0]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7fd fdb5 	bl	8008f10 <ull_configure>
 800b3a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3aa:	6859      	ldr	r1, [r3, #4]
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7fd fb4f 	bl	8008a50 <ull_configuretxrf>
 800b3b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b6:	89db      	ldrh	r3, [r3, #14]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7fc fc3d 	bl	8007c3e <dwt_write16bitoffsetreg>
 800b3c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c8:	899b      	ldrh	r3, [r3, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4952      	ldr	r1, [pc, #328]	; (800b518 <_init+0x1a0>)
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7fc fc35 	bl	8007c3e <dwt_write16bitoffsetreg>
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7fc fece 	bl	8008178 <ull_setrxaftertxdelay>
 800b3dc:	2500      	movs	r5, #0
 800b3de:	9500      	str	r5, [sp, #0]
 800b3e0:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	2110      	movs	r1, #16
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f7fd fc57 	bl	8008c9c <dwt_modify16bitoffsetreg>
 800b3ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f2:	895a      	ldrh	r2, [r3, #10]
 800b3f4:	8919      	ldrh	r1, [r3, #8]
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7fd fbba 	bl	8008b70 <ull_configureframefilter>
 800b3fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b400:	8a1b      	ldrh	r3, [r3, #16]
 800b402:	2202      	movs	r2, #2
 800b404:	210c      	movs	r1, #12
 800b406:	4620      	mov	r0, r4
 800b408:	f7fc fc19 	bl	8007c3e <dwt_write16bitoffsetreg>
 800b40c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b410:	8a5b      	ldrh	r3, [r3, #18]
 800b412:	462a      	mov	r2, r5
 800b414:	210c      	movs	r1, #12
 800b416:	4620      	mov	r0, r4
 800b418:	f7fc fc11 	bl	8007c3e <dwt_write16bitoffsetreg>
 800b41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b41e:	7a19      	ldrb	r1, [r3, #8]
 800b420:	4620      	mov	r0, r4
 800b422:	f7fd fc71 	bl	8008d08 <ull_setleds>
 800b426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b428:	68d9      	ldr	r1, [r3, #12]
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7fc feba 	bl	80081a4 <ull_setlnapamode>
 800b430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b432:	7e0b      	ldrb	r3, [r1, #24]
 800b434:	694a      	ldr	r2, [r1, #20]
 800b436:	6909      	ldr	r1, [r1, #16]
 800b438:	4620      	mov	r0, r4
 800b43a:	f7fd f9f1 	bl	8008820 <ull_setinterrupt>
 800b43e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b440:	7f9a      	ldrb	r2, [r3, #30]
 800b442:	8b99      	ldrh	r1, [r3, #28]
 800b444:	4620      	mov	r0, r4
 800b446:	f7fc fcbf 	bl	8007dc8 <ull_configuresleep>
 800b44a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b44c:	7b93      	ldrb	r3, [r2, #14]
 800b44e:	2b2e      	cmp	r3, #46	; 0x2e
 800b450:	d005      	beq.n	800b45e <_init+0xe6>
 800b452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b454:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b458:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800b45c:	d00a      	beq.n	800b474 <_init+0xfc>
 800b45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b460:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b468:	7393      	strb	r3, [r2, #14]
 800b46a:	2200      	movs	r2, #0
 800b46c:	492b      	ldr	r1, [pc, #172]	; (800b51c <_init+0x1a4>)
 800b46e:	4620      	mov	r0, r4
 800b470:	f7fc fb93 	bl	8007b9a <dwt_write8bitoffsetreg>
 800b474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b476:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800b47a:	4620      	mov	r0, r4
 800b47c:	f7fd fa70 	bl	8008960 <ull_configciadiag>
 800b480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b482:	6a19      	ldr	r1, [r3, #32]
 800b484:	4620      	mov	r0, r4
 800b486:	f7fc feaf 	bl	80081e8 <ull_configurestskey>
 800b48a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b48c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b48e:	4620      	mov	r0, r4
 800b490:	f7fc fece 	bl	8008230 <ull_configurestsiv>
 800b494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b496:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b49a:	bba3      	cbnz	r3, 800b506 <_init+0x18e>
 800b49c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b49e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7fc fbb8 	bl	8007c18 <ull_configeventcounters>
 800b4a8:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800b4ac:	2d00      	cmp	r5, #0
 800b4ae:	db27      	blt.n	800b500 <_init+0x188>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	fa03 f505 	lsl.w	r5, r3, r5
 800b4b6:	b2af      	uxth	r7, r5
 800b4b8:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7fd f990 	bl	80087e4 <ull_setgpiomode>
 800b4c4:	f10d 030a 	add.w	r3, sp, #10
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7fb ff68 	bl	80073a8 <dwt_readfromdevice>
 800b4d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b4dc:	ea23 0305 	bic.w	r3, r3, r5
 800b4e0:	f8ad 300a 	strh.w	r3, [sp, #10]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	490e      	ldr	r1, [pc, #56]	; (800b520 <_init+0x1a8>)
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f7fc fba8 	bl	8007c3e <dwt_write16bitoffsetreg>
 800b4ee:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800b4f2:	fab2 f282 	clz	r2, r2
 800b4f6:	0952      	lsrs	r2, r2, #5
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7fd fc82 	bl	8008e04 <ull_setgpiovalue>
 800b500:	4630      	mov	r0, r6
 800b502:	b005      	add	sp, #20
 800b504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b506:	2301      	movs	r3, #1
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	23ff      	movs	r3, #255	; 0xff
 800b50c:	2200      	movs	r2, #0
 800b50e:	4905      	ldr	r1, [pc, #20]	; (800b524 <_init+0x1ac>)
 800b510:	4620      	mov	r0, r4
 800b512:	f7fd fa11 	bl	8008938 <dwt_modify8bitoffsetreg>
 800b516:	e7c1      	b.n	800b49c <_init+0x124>
 800b518:	00010004 	.word	0x00010004
 800b51c:	00090014 	.word	0x00090014
 800b520:	00050008 	.word	0x00050008
 800b524:	00020004 	.word	0x00020004

0800b528 <dwt_dbg_fn>:
 800b528:	2998      	cmp	r1, #152	; 0x98
 800b52a:	4802      	ldr	r0, [pc, #8]	; (800b534 <dwt_dbg_fn+0xc>)
 800b52c:	bf18      	it	ne
 800b52e:	2000      	movne	r0, #0
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	08019ab0 	.word	0x08019ab0

0800b538 <_deinit>:
 800b538:	4770      	bx	lr

0800b53a <dwt_xfer3xxx>:
 800b53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	4605      	mov	r5, r0
 800b542:	460f      	mov	r7, r1
 800b544:	461e      	mov	r6, r3
 800b546:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b54a:	1e59      	subs	r1, r3, #1
 800b54c:	b289      	uxth	r1, r1
 800b54e:	2901      	cmp	r1, #1
 800b550:	d91c      	bls.n	800b58c <dwt_xfer3xxx+0x52>
 800b552:	19d0      	adds	r0, r2, r7
 800b554:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b558:	443a      	add	r2, r7
 800b55a:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800b55e:	0082      	lsls	r2, r0, #2
 800b560:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800b564:	ea43 0102 	orr.w	r1, r3, r2
 800b568:	0a09      	lsrs	r1, r1, #8
 800b56a:	f88d 100c 	strb.w	r1, [sp, #12]
 800b56e:	b920      	cbnz	r0, 800b57a <dwt_xfer3xxx+0x40>
 800b570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b574:	d018      	beq.n	800b5a8 <dwt_xfer3xxx+0x6e>
 800b576:	2b00      	cmp	r3, #0
 800b578:	d037      	beq.n	800b5ea <dwt_xfer3xxx+0xb0>
 800b57a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b57e:	f88d 100c 	strb.w	r1, [sp, #12]
 800b582:	431a      	orrs	r2, r3
 800b584:	f88d 200d 	strb.w	r2, [sp, #13]
 800b588:	2402      	movs	r4, #2
 800b58a:	e005      	b.n	800b598 <dwt_xfer3xxx+0x5e>
 800b58c:	007a      	lsls	r2, r7, #1
 800b58e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800b592:	f88d 200c 	strb.w	r2, [sp, #12]
 800b596:	2401      	movs	r4, #1
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d006      	beq.n	800b5aa <dwt_xfer3xxx+0x70>
 800b59c:	d326      	bcc.n	800b5ec <dwt_xfer3xxx+0xb2>
 800b59e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d901      	bls.n	800b5aa <dwt_xfer3xxx+0x70>
 800b5a6:	e7fe      	b.n	800b5a6 <dwt_xfer3xxx+0x6c>
 800b5a8:	2401      	movs	r4, #1
 800b5aa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b5ac:	7d1b      	ldrb	r3, [r3, #20]
 800b5ae:	b94b      	cbnz	r3, 800b5c4 <dwt_xfer3xxx+0x8a>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	685d      	ldr	r5, [r3, #4]
 800b5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	a903      	add	r1, sp, #12
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	47a8      	blx	r5
 800b5be:	b004      	add	sp, #16
 800b5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	a803      	add	r0, sp, #12
 800b5ca:	f7fb fdaf 	bl	800712c <dwt_generatecrc8>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5d4:	f7fb fdaa 	bl	800712c <dwt_generatecrc8>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	9000      	str	r0, [sp, #0]
 800b5dc:	689d      	ldr	r5, [r3, #8]
 800b5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	a903      	add	r1, sp, #12
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	47a8      	blx	r5
 800b5e8:	e7e9      	b.n	800b5be <dwt_xfer3xxx+0x84>
 800b5ea:	2401      	movs	r4, #1
 800b5ec:	682b      	ldr	r3, [r5, #0]
 800b5ee:	f8d3 8000 	ldr.w	r8, [r3]
 800b5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	a903      	add	r1, sp, #12
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	47c0      	blx	r8
 800b5fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b5fe:	7d1b      	ldrb	r3, [r3, #20]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d1dc      	bne.n	800b5be <dwt_xfer3xxx+0x84>
 800b604:	2f18      	cmp	r7, #24
 800b606:	d0da      	beq.n	800b5be <dwt_xfer3xxx+0x84>
 800b608:	2200      	movs	r2, #0
 800b60a:	4621      	mov	r1, r4
 800b60c:	a803      	add	r0, sp, #12
 800b60e:	f7fb fd8d 	bl	800712c <dwt_generatecrc8>
 800b612:	4602      	mov	r2, r0
 800b614:	4631      	mov	r1, r6
 800b616:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b618:	f7fb fd88 	bl	800712c <dwt_generatecrc8>
 800b61c:	4604      	mov	r4, r0
 800b61e:	2200      	movs	r2, #0
 800b620:	2118      	movs	r1, #24
 800b622:	4628      	mov	r0, r5
 800b624:	f000 f839 	bl	800b69a <dwt_read8bitoffsetreg>
 800b628:	4284      	cmp	r4, r0
 800b62a:	d0c8      	beq.n	800b5be <dwt_xfer3xxx+0x84>
 800b62c:	68eb      	ldr	r3, [r5, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0c5      	beq.n	800b5be <dwt_xfer3xxx+0x84>
 800b632:	4798      	blx	r3
 800b634:	e7c3      	b.n	800b5be <dwt_xfer3xxx+0x84>

0800b636 <dwt_readfromdevice>:
 800b636:	b510      	push	{r4, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	2400      	movs	r4, #0
 800b63c:	9401      	str	r4, [sp, #4]
 800b63e:	9c04      	ldr	r4, [sp, #16]
 800b640:	9400      	str	r4, [sp, #0]
 800b642:	f7ff ff7a 	bl	800b53a <dwt_xfer3xxx>
 800b646:	b002      	add	sp, #8
 800b648:	bd10      	pop	{r4, pc}

0800b64a <dwt_read32bitoffsetreg>:
 800b64a:	b500      	push	{lr}
 800b64c:	b085      	sub	sp, #20
 800b64e:	ab03      	add	r3, sp, #12
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	2304      	movs	r3, #4
 800b654:	b292      	uxth	r2, r2
 800b656:	f7ff ffee 	bl	800b636 <dwt_readfromdevice>
 800b65a:	f10d 030f 	add.w	r3, sp, #15
 800b65e:	f10d 010b 	add.w	r1, sp, #11
 800b662:	2000      	movs	r0, #0
 800b664:	f813 2901 	ldrb.w	r2, [r3], #-1
 800b668:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800b66c:	428b      	cmp	r3, r1
 800b66e:	d1f9      	bne.n	800b664 <dwt_read32bitoffsetreg+0x1a>
 800b670:	b005      	add	sp, #20
 800b672:	f85d fb04 	ldr.w	pc, [sp], #4

0800b676 <dwt_read16bitoffsetreg>:
 800b676:	b500      	push	{lr}
 800b678:	b085      	sub	sp, #20
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	2302      	movs	r3, #2
 800b680:	b292      	uxth	r2, r2
 800b682:	f7ff ffd8 	bl	800b636 <dwt_readfromdevice>
 800b686:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800b68a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800b68e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800b692:	b280      	uxth	r0, r0
 800b694:	b005      	add	sp, #20
 800b696:	f85d fb04 	ldr.w	pc, [sp], #4

0800b69a <dwt_read8bitoffsetreg>:
 800b69a:	b500      	push	{lr}
 800b69c:	b085      	sub	sp, #20
 800b69e:	f10d 030f 	add.w	r3, sp, #15
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	b292      	uxth	r2, r2
 800b6a8:	f7ff ffc5 	bl	800b636 <dwt_readfromdevice>
 800b6ac:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800b6b0:	b005      	add	sp, #20
 800b6b2:	f85d fb04 	ldr.w	pc, [sp], #4

0800b6b6 <ull_readdiagnostics>:
 800b6b6:	b530      	push	{r4, r5, lr}
 800b6b8:	b0bd      	sub	sp, #244	; 0xf4
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	460c      	mov	r4, r1
 800b6be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b6c0:	7b9a      	ldrb	r2, [r3, #14]
 800b6c2:	2a01      	cmp	r2, #1
 800b6c4:	d01c      	beq.n	800b700 <ull_readdiagnostics+0x4a>
 800b6c6:	2a03      	cmp	r2, #3
 800b6c8:	f040 81e8 	bne.w	800ba9c <ull_readdiagnostics+0x3e6>
 800b6cc:	7d9b      	ldrb	r3, [r3, #22]
 800b6ce:	f013 0f08 	tst.w	r3, #8
 800b6d2:	d10c      	bne.n	800b6ee <ull_readdiagnostics+0x38>
 800b6d4:	f013 0f04 	tst.w	r3, #4
 800b6d8:	ab02      	add	r3, sp, #8
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	bf14      	ite	ne
 800b6de:	2338      	movne	r3, #56	; 0x38
 800b6e0:	2320      	moveq	r3, #32
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b6e8:	f7ff ffa5 	bl	800b636 <dwt_readfromdevice>
 800b6ec:	e019      	b.n	800b722 <ull_readdiagnostics+0x6c>
 800b6ee:	ab02      	add	r3, sp, #8
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	23e8      	movs	r3, #232	; 0xe8
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b6fa:	f7ff ff9c 	bl	800b636 <dwt_readfromdevice>
 800b6fe:	e010      	b.n	800b722 <ull_readdiagnostics+0x6c>
 800b700:	7d9b      	ldrb	r3, [r3, #22]
 800b702:	f013 0f08 	tst.w	r3, #8
 800b706:	f040 81c0 	bne.w	800ba8a <ull_readdiagnostics+0x3d4>
 800b70a:	f013 0f04 	tst.w	r3, #4
 800b70e:	ab02      	add	r3, sp, #8
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	bf14      	ite	ne
 800b714:	2338      	movne	r3, #56	; 0x38
 800b716:	2320      	moveq	r3, #32
 800b718:	2200      	movs	r2, #0
 800b71a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800b71e:	f7ff ff8a 	bl	800b636 <dwt_readfromdevice>
 800b722:	f10d 0217 	add.w	r2, sp, #23
 800b726:	f104 031a 	add.w	r3, r4, #26
 800b72a:	f104 0020 	add.w	r0, r4, #32
 800b72e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b732:	f803 1b01 	strb.w	r1, [r3], #1
 800b736:	4283      	cmp	r3, r0
 800b738:	d1f9      	bne.n	800b72e <ull_readdiagnostics+0x78>
 800b73a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800b73e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b746:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b74a:	8463      	strh	r3, [r4, #34]	; 0x22
 800b74c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800b750:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b758:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b75c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b760:	bf1c      	itt	ne
 800b762:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800b766:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800b76a:	8423      	strh	r3, [r4, #32]
 800b76c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800b770:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b77c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b77e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b780:	7d9b      	ldrb	r3, [r3, #22]
 800b782:	f013 0f02 	tst.w	r3, #2
 800b786:	f040 817e 	bne.w	800ba86 <ull_readdiagnostics+0x3d0>
 800b78a:	aa0a      	add	r2, sp, #40	; 0x28
 800b78c:	1e63      	subs	r3, r4, #1
 800b78e:	1d20      	adds	r0, r4, #4
 800b790:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b794:	f803 1f01 	strb.w	r1, [r3, #1]!
 800b798:	79d1      	ldrb	r1, [r2, #7]
 800b79a:	7219      	strb	r1, [r3, #8]
 800b79c:	7bd1      	ldrb	r1, [r2, #15]
 800b79e:	7459      	strb	r1, [r3, #17]
 800b7a0:	4283      	cmp	r3, r0
 800b7a2:	d1f5      	bne.n	800b790 <ull_readdiagnostics+0xda>
 800b7a4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800b7a8:	7163      	strb	r3, [r4, #5]
 800b7aa:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800b7ae:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800b7b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b7b6:	80e3      	strh	r3, [r4, #6]
 800b7b8:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800b7bc:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800b7c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b7c4:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800b7c8:	f8a4 300d 	strh.w	r3, [r4, #13]
 800b7cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b7d0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800b7d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b7d8:	f8a4 300f 	strh.w	r3, [r4, #15]
 800b7dc:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800b7e0:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800b7e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b7e8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800b7ec:	82e3      	strh	r3, [r4, #22]
 800b7ee:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800b7f2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800b7f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b7fa:	8323      	strh	r3, [r4, #24]
 800b7fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b7fe:	7d9b      	ldrb	r3, [r3, #22]
 800b800:	f013 0f04 	tst.w	r3, #4
 800b804:	f040 813f 	bne.w	800ba86 <ull_readdiagnostics+0x3d0>
 800b808:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800b80c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800b810:	041b      	lsls	r3, r3, #16
 800b812:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b816:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800b81a:	4313      	orrs	r3, r2
 800b81c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800b820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b824:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800b828:	6263      	str	r3, [r4, #36]	; 0x24
 800b82a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800b82e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800b832:	041b      	lsls	r3, r3, #16
 800b834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b838:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800b83c:	4313      	orrs	r3, r2
 800b83e:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800b842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b84a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b84c:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800b850:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b85a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800b85e:	4313      	orrs	r3, r2
 800b860:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800b864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b86c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b86e:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800b872:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800b876:	041b      	lsls	r3, r3, #16
 800b878:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b87c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800b880:	4313      	orrs	r3, r2
 800b882:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800b886:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b88a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b88e:	6323      	str	r3, [r4, #48]	; 0x30
 800b890:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800b894:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800b898:	041b      	lsls	r3, r3, #16
 800b89a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b89e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800b8a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b8ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b8b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b8b2:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800b8b6:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800b8ba:	041b      	lsls	r3, r3, #16
 800b8bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b8c0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800b8ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b8ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b8d2:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8d4:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800b8d8:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800b8dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b8e0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800b8e2:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800b8e6:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800b8ea:	041b      	lsls	r3, r3, #16
 800b8ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b8f0:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800b8fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b8fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b902:	6423      	str	r3, [r4, #64]	; 0x40
 800b904:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800b908:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800b90c:	041b      	lsls	r3, r3, #16
 800b90e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b912:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800b916:	4313      	orrs	r3, r2
 800b918:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800b91c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b924:	6463      	str	r3, [r4, #68]	; 0x44
 800b926:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800b92a:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800b92e:	041b      	lsls	r3, r3, #16
 800b930:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b934:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800b938:	4313      	orrs	r3, r2
 800b93a:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800b93e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b942:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b946:	64a3      	str	r3, [r4, #72]	; 0x48
 800b948:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800b94c:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800b950:	041b      	lsls	r3, r3, #16
 800b952:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b956:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800b95a:	4313      	orrs	r3, r2
 800b95c:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800b960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b964:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b968:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b96a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800b96e:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800b972:	041b      	lsls	r3, r3, #16
 800b974:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b978:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800b97c:	4313      	orrs	r3, r2
 800b97e:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800b982:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b986:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b98a:	6523      	str	r3, [r4, #80]	; 0x50
 800b98c:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800b990:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800b994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b998:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b99c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800b9a0:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800b9a4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800b9a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b9ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9b0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800b9b4:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800b9b8:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800b9bc:	041b      	lsls	r3, r3, #16
 800b9be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b9c2:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800b9cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b9d0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b9d4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b9d6:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800b9da:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800b9de:	041b      	lsls	r3, r3, #16
 800b9e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b9e4:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800b9ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b9f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9f6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800b9f8:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800b9fc:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800ba00:	041b      	lsls	r3, r3, #16
 800ba02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba06:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800ba10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba18:	6623      	str	r3, [r4, #96]	; 0x60
 800ba1a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800ba1e:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800ba22:	041b      	lsls	r3, r3, #16
 800ba24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba28:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800ba32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba36:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba3a:	6663      	str	r3, [r4, #100]	; 0x64
 800ba3c:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800ba40:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800ba44:	041b      	lsls	r3, r3, #16
 800ba46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba4a:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800ba54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba5c:	66a3      	str	r3, [r4, #104]	; 0x68
 800ba5e:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800ba62:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800ba66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ba6e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ba72:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800ba76:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800ba7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba82:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800ba86:	b03d      	add	sp, #244	; 0xf4
 800ba88:	bd30      	pop	{r4, r5, pc}
 800ba8a:	ab02      	add	r3, sp, #8
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	23e8      	movs	r3, #232	; 0xe8
 800ba90:	2200      	movs	r2, #0
 800ba92:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800ba96:	f7ff fdce 	bl	800b636 <dwt_readfromdevice>
 800ba9a:	e642      	b.n	800b722 <ull_readdiagnostics+0x6c>
 800ba9c:	7d9b      	ldrb	r3, [r3, #22]
 800ba9e:	f013 0f01 	tst.w	r3, #1
 800baa2:	f000 81b3 	beq.w	800be0c <ull_readdiagnostics+0x756>
 800baa6:	ab02      	add	r3, sp, #8
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	236c      	movs	r3, #108	; 0x6c
 800baac:	2200      	movs	r2, #0
 800baae:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800bab2:	f7ff fdc0 	bl	800b636 <dwt_readfromdevice>
 800bab6:	ab1d      	add	r3, sp, #116	; 0x74
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	236c      	movs	r3, #108	; 0x6c
 800babc:	2200      	movs	r2, #0
 800babe:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800bac2:	4628      	mov	r0, r5
 800bac4:	f7ff fdb7 	bl	800b636 <dwt_readfromdevice>
 800bac8:	aa02      	add	r2, sp, #8
 800baca:	1e63      	subs	r3, r4, #1
 800bacc:	1d20      	adds	r0, r4, #4
 800bace:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bad2:	f803 1f01 	strb.w	r1, [r3, #1]!
 800bad6:	79d1      	ldrb	r1, [r2, #7]
 800bad8:	7219      	strb	r1, [r3, #8]
 800bada:	7bd1      	ldrb	r1, [r2, #15]
 800badc:	7459      	strb	r1, [r3, #17]
 800bade:	7dd1      	ldrb	r1, [r2, #23]
 800bae0:	7699      	strb	r1, [r3, #26]
 800bae2:	4283      	cmp	r3, r0
 800bae4:	d1f3      	bne.n	800bace <ull_readdiagnostics+0x418>
 800bae6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800baea:	77e3      	strb	r3, [r4, #31]
 800baec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800baf0:	7163      	strb	r3, [r4, #5]
 800baf2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800baf6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800bafa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bafe:	80e3      	strh	r3, [r4, #6]
 800bb00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800bb04:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800bb08:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800bb0c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800bb10:	f8a4 200d 	strh.w	r2, [r4, #13]
 800bb14:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800bb18:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800bb1c:	f8a4 200f 	strh.w	r2, [r4, #15]
 800bb20:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800bb24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb28:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800bb2c:	82e3      	strh	r3, [r4, #22]
 800bb2e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800bb32:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800bb36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb3a:	8323      	strh	r3, [r4, #24]
 800bb3c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800bb40:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800bb44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb4c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800bb50:	bf1c      	itt	ne
 800bb52:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800bb56:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800bb5a:	8423      	strh	r3, [r4, #32]
 800bb5c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800bb60:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800bb64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb6c:	8463      	strh	r3, [r4, #34]	; 0x22
 800bb6e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800bb72:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800bb76:	041b      	lsls	r3, r3, #16
 800bb78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bb7c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800bb80:	4313      	orrs	r3, r2
 800bb82:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800bb86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb8a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800bb8e:	6263      	str	r3, [r4, #36]	; 0x24
 800bb90:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800bb92:	7d9b      	ldrb	r3, [r3, #22]
 800bb94:	f013 0f01 	tst.w	r3, #1
 800bb98:	f43f af75 	beq.w	800ba86 <ull_readdiagnostics+0x3d0>
 800bb9c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800bba0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800bba4:	041b      	lsls	r3, r3, #16
 800bba6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bbaa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800bbb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bbb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbbe:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800bbc2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bbcc:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800bbd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bbda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbde:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbe0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800bbe4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800bbe8:	041b      	lsls	r3, r3, #16
 800bbea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bbee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800bbf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bbfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc00:	6323      	str	r3, [r4, #48]	; 0x30
 800bc02:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800bc06:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc10:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800bc14:	4313      	orrs	r3, r2
 800bc16:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800bc1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc1e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc22:	6363      	str	r3, [r4, #52]	; 0x34
 800bc24:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800bc28:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800bc2c:	041b      	lsls	r3, r3, #16
 800bc2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc32:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800bc36:	4313      	orrs	r3, r2
 800bc38:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800bc3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc44:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc46:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800bc4a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800bc4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc52:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800bc54:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800bc58:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800bc5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc64:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800bc66:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800bc6a:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800bc6e:	041b      	lsls	r3, r3, #16
 800bc70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc74:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800bc7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc82:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800bc86:	6423      	str	r3, [r4, #64]	; 0x40
 800bc88:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800bc8c:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800bc90:	041b      	lsls	r3, r3, #16
 800bc92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc96:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800bca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bca8:	6463      	str	r3, [r4, #68]	; 0x44
 800bcaa:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800bcae:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800bcb2:	041b      	lsls	r3, r3, #16
 800bcb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcb8:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800bcc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bcc6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bcca:	64a3      	str	r3, [r4, #72]	; 0x48
 800bccc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800bcd0:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800bcd4:	041b      	lsls	r3, r3, #16
 800bcd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcda:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800bcde:	4313      	orrs	r3, r2
 800bce0:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800bce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bce8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bcec:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bcee:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800bcf2:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800bcf6:	041b      	lsls	r3, r3, #16
 800bcf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcfc:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800bd00:	4313      	orrs	r3, r2
 800bd02:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800bd06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd0e:	6523      	str	r3, [r4, #80]	; 0x50
 800bd10:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800bd14:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800bd18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bd20:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800bd24:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800bd28:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800bd2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd34:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800bd38:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800bd3c:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800bd40:	041b      	lsls	r3, r3, #16
 800bd42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bd46:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800bd50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd54:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800bd58:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd5a:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800bd5e:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800bd62:	041b      	lsls	r3, r3, #16
 800bd64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bd68:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800bd72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800bd7c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800bd80:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800bd84:	041b      	lsls	r3, r3, #16
 800bd86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bd8a:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800bd94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd9c:	6623      	str	r3, [r4, #96]	; 0x60
 800bd9e:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800bda2:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800bda6:	041b      	lsls	r3, r3, #16
 800bda8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bdac:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800bdb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bdba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bdbe:	6663      	str	r3, [r4, #100]	; 0x64
 800bdc0:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800bdc4:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800bdc8:	041b      	lsls	r3, r3, #16
 800bdca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bdce:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800bdd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bddc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bde0:	66a3      	str	r3, [r4, #104]	; 0x68
 800bde2:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800bde6:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800bdea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bdee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bdf2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800bdf6:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800bdfa:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800bdfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800be02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be06:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800be0a:	e63c      	b.n	800ba86 <ull_readdiagnostics+0x3d0>
 800be0c:	ab02      	add	r3, sp, #8
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2328      	movs	r3, #40	; 0x28
 800be12:	2200      	movs	r2, #0
 800be14:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800be18:	f7ff fc0d 	bl	800b636 <dwt_readfromdevice>
 800be1c:	e654      	b.n	800bac8 <ull_readdiagnostics+0x412>
	...

0800be20 <ull_readrxtimestamp>:
 800be20:	b500      	push	{lr}
 800be22:	b083      	sub	sp, #12
 800be24:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800be26:	7b9b      	ldrb	r3, [r3, #14]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d00b      	beq.n	800be44 <ull_readrxtimestamp+0x24>
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d110      	bne.n	800be52 <ull_readrxtimestamp+0x32>
 800be30:	9100      	str	r1, [sp, #0]
 800be32:	2305      	movs	r3, #5
 800be34:	2204      	movs	r2, #4
 800be36:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800be3a:	f7ff fbfc 	bl	800b636 <dwt_readfromdevice>
 800be3e:	b003      	add	sp, #12
 800be40:	f85d fb04 	ldr.w	pc, [sp], #4
 800be44:	9100      	str	r1, [sp, #0]
 800be46:	2305      	movs	r3, #5
 800be48:	2200      	movs	r2, #0
 800be4a:	4905      	ldr	r1, [pc, #20]	; (800be60 <ull_readrxtimestamp+0x40>)
 800be4c:	f7ff fbf3 	bl	800b636 <dwt_readfromdevice>
 800be50:	e7f5      	b.n	800be3e <ull_readrxtimestamp+0x1e>
 800be52:	9100      	str	r1, [sp, #0]
 800be54:	2305      	movs	r3, #5
 800be56:	2200      	movs	r2, #0
 800be58:	2160      	movs	r1, #96	; 0x60
 800be5a:	f7ff fbec 	bl	800b636 <dwt_readfromdevice>
 800be5e:	e7ee      	b.n	800be3e <ull_readrxtimestamp+0x1e>
 800be60:	00180004 	.word	0x00180004

0800be64 <dwt_writetodevice>:
 800be64:	b510      	push	{r4, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800be6c:	9401      	str	r4, [sp, #4]
 800be6e:	9c04      	ldr	r4, [sp, #16]
 800be70:	9400      	str	r4, [sp, #0]
 800be72:	f7ff fb62 	bl	800b53a <dwt_xfer3xxx>
 800be76:	b002      	add	sp, #8
 800be78:	bd10      	pop	{r4, pc}

0800be7a <dwt_write16bitoffsetreg>:
 800be7a:	b500      	push	{lr}
 800be7c:	b085      	sub	sp, #20
 800be7e:	f88d 300c 	strb.w	r3, [sp, #12]
 800be82:	0a1b      	lsrs	r3, r3, #8
 800be84:	f88d 300d 	strb.w	r3, [sp, #13]
 800be88:	ab03      	add	r3, sp, #12
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2302      	movs	r3, #2
 800be8e:	b292      	uxth	r2, r2
 800be90:	f7ff ffe8 	bl	800be64 <dwt_writetodevice>
 800be94:	b005      	add	sp, #20
 800be96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800be9c <ull_force_clocks>:
 800be9c:	b508      	push	{r3, lr}
 800be9e:	2901      	cmp	r1, #1
 800bea0:	d002      	beq.n	800bea8 <ull_force_clocks+0xc>
 800bea2:	2905      	cmp	r1, #5
 800bea4:	d007      	beq.n	800beb6 <ull_force_clocks+0x1a>
 800bea6:	bd08      	pop	{r3, pc}
 800bea8:	f641 0322 	movw	r3, #6178	; 0x1822
 800beac:	2200      	movs	r2, #0
 800beae:	4905      	ldr	r1, [pc, #20]	; (800bec4 <ull_force_clocks+0x28>)
 800beb0:	f7ff ffe3 	bl	800be7a <dwt_write16bitoffsetreg>
 800beb4:	e7f7      	b.n	800bea6 <ull_force_clocks+0xa>
 800beb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800beba:	2200      	movs	r2, #0
 800bebc:	4901      	ldr	r1, [pc, #4]	; (800bec4 <ull_force_clocks+0x28>)
 800bebe:	f7ff ffdc 	bl	800be7a <dwt_write16bitoffsetreg>
 800bec2:	e7f0      	b.n	800bea6 <ull_force_clocks+0xa>
 800bec4:	00110004 	.word	0x00110004

0800bec8 <__dwt_otp_write_wdata_id_reg>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4605      	mov	r5, r0
 800becc:	460c      	mov	r4, r1
 800bece:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2200      	movs	r2, #0
 800bed6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800beda:	f7ff ffce 	bl	800be7a <dwt_write16bitoffsetreg>
 800bede:	b2a3      	uxth	r3, r4
 800bee0:	2200      	movs	r2, #0
 800bee2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800bee6:	4628      	mov	r0, r5
 800bee8:	f7ff ffc7 	bl	800be7a <dwt_write16bitoffsetreg>
 800beec:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bef0 <_dwt_otpread>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	4604      	mov	r4, r0
 800bef4:	460e      	mov	r6, r1
 800bef6:	4d0c      	ldr	r5, [pc, #48]	; (800bf28 <_dwt_otpread+0x38>)
 800bef8:	2301      	movs	r3, #1
 800befa:	2200      	movs	r2, #0
 800befc:	4629      	mov	r1, r5
 800befe:	f7ff ffbc 	bl	800be7a <dwt_write16bitoffsetreg>
 800bf02:	4633      	mov	r3, r6
 800bf04:	2200      	movs	r2, #0
 800bf06:	4909      	ldr	r1, [pc, #36]	; (800bf2c <_dwt_otpread+0x3c>)
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f7ff ffb6 	bl	800be7a <dwt_write16bitoffsetreg>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	2200      	movs	r2, #0
 800bf12:	4629      	mov	r1, r5
 800bf14:	4620      	mov	r0, r4
 800bf16:	f7ff ffb0 	bl	800be7a <dwt_write16bitoffsetreg>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	4904      	ldr	r1, [pc, #16]	; (800bf30 <_dwt_otpread+0x40>)
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff fb93 	bl	800b64a <dwt_read32bitoffsetreg>
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	bf00      	nop
 800bf28:	000b0008 	.word	0x000b0008
 800bf2c:	000b0004 	.word	0x000b0004
 800bf30:	000b0010 	.word	0x000b0010

0800bf34 <dwt_write32bitoffsetreg>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	f88d 300c 	strb.w	r3, [sp, #12]
 800bf3c:	0a1c      	lsrs	r4, r3, #8
 800bf3e:	f88d 400d 	strb.w	r4, [sp, #13]
 800bf42:	0c1c      	lsrs	r4, r3, #16
 800bf44:	f88d 400e 	strb.w	r4, [sp, #14]
 800bf48:	0e1b      	lsrs	r3, r3, #24
 800bf4a:	f88d 300f 	strb.w	r3, [sp, #15]
 800bf4e:	ab03      	add	r3, sp, #12
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	2304      	movs	r3, #4
 800bf54:	b292      	uxth	r2, r2
 800bf56:	f7ff ff85 	bl	800be64 <dwt_writetodevice>
 800bf5a:	b004      	add	sp, #16
 800bf5c:	bd10      	pop	{r4, pc}

0800bf5e <_dwt_adjust_delaytime>:
 800bf5e:	b538      	push	{r3, r4, r5, lr}
 800bf60:	4604      	mov	r4, r0
 800bf62:	b989      	cbnz	r1, 800bf88 <_dwt_adjust_delaytime+0x2a>
 800bf64:	2200      	movs	r2, #0
 800bf66:	2128      	movs	r1, #40	; 0x28
 800bf68:	f7ff fb6f 	bl	800b64a <dwt_read32bitoffsetreg>
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7ff fb90 	bl	800b69a <dwt_read8bitoffsetreg>
 800bf7a:	1a2b      	subs	r3, r5, r0
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2128      	movs	r1, #40	; 0x28
 800bf80:	4620      	mov	r0, r4
 800bf82:	f7ff ffd7 	bl	800bf34 <dwt_write32bitoffsetreg>
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2128      	movs	r1, #40	; 0x28
 800bf8c:	f7ff fb5d 	bl	800b64a <dwt_read32bitoffsetreg>
 800bf90:	4605      	mov	r5, r0
 800bf92:	2201      	movs	r2, #1
 800bf94:	217c      	movs	r1, #124	; 0x7c
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7ff fb7f 	bl	800b69a <dwt_read8bitoffsetreg>
 800bf9c:	1a2b      	subs	r3, r5, r0
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2128      	movs	r1, #40	; 0x28
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7ff ffc6 	bl	800bf34 <dwt_write32bitoffsetreg>
 800bfa8:	e7ed      	b.n	800bf86 <_dwt_adjust_delaytime+0x28>

0800bfaa <ull_setrxaftertxdelay>:
 800bfaa:	b538      	push	{r3, r4, r5, lr}
 800bfac:	4605      	mov	r5, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bfb6:	f7ff fb48 	bl	800b64a <dwt_read32bitoffsetreg>
 800bfba:	0d00      	lsrs	r0, r0, #20
 800bfbc:	0500      	lsls	r0, r0, #20
 800bfbe:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bfc2:	4303      	orrs	r3, r0
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f7ff ffb2 	bl	800bf34 <dwt_write32bitoffsetreg>
 800bfd0:	bd38      	pop	{r3, r4, r5, pc}

0800bfd2 <ull_setlnapamode>:
 800bfd2:	b538      	push	{r3, r4, r5, lr}
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800bfde:	f7ff fb34 	bl	800b64a <dwt_read32bitoffsetreg>
 800bfe2:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800bfe6:	f014 0f01 	tst.w	r4, #1
 800bfea:	bf18      	it	ne
 800bfec:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800bff0:	f014 0f02 	tst.w	r4, #2
 800bff4:	bf18      	it	ne
 800bff6:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800bffa:	f014 0f04 	tst.w	r4, #4
 800bffe:	bf18      	it	ne
 800c000:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800c004:	2200      	movs	r2, #0
 800c006:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c00a:	4628      	mov	r0, r5
 800c00c:	f7ff ff92 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c010:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c014 <ull_configurestskey>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4605      	mov	r5, r0
 800c018:	460c      	mov	r4, r1
 800c01a:	680b      	ldr	r3, [r1, #0]
 800c01c:	2200      	movs	r2, #0
 800c01e:	490b      	ldr	r1, [pc, #44]	; (800c04c <ull_configurestskey+0x38>)
 800c020:	f7ff ff88 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c024:	6863      	ldr	r3, [r4, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	4909      	ldr	r1, [pc, #36]	; (800c050 <ull_configurestskey+0x3c>)
 800c02a:	4628      	mov	r0, r5
 800c02c:	f7ff ff82 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c030:	68a3      	ldr	r3, [r4, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	4907      	ldr	r1, [pc, #28]	; (800c054 <ull_configurestskey+0x40>)
 800c036:	4628      	mov	r0, r5
 800c038:	f7ff ff7c 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c03c:	68e3      	ldr	r3, [r4, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	4905      	ldr	r1, [pc, #20]	; (800c058 <ull_configurestskey+0x44>)
 800c042:	4628      	mov	r0, r5
 800c044:	f7ff ff76 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	bf00      	nop
 800c04c:	0002000c 	.word	0x0002000c
 800c050:	00020010 	.word	0x00020010
 800c054:	00020014 	.word	0x00020014
 800c058:	00020018 	.word	0x00020018

0800c05c <ull_configurestsiv>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	4605      	mov	r5, r0
 800c060:	460c      	mov	r4, r1
 800c062:	680b      	ldr	r3, [r1, #0]
 800c064:	2200      	movs	r2, #0
 800c066:	490b      	ldr	r1, [pc, #44]	; (800c094 <ull_configurestsiv+0x38>)
 800c068:	f7ff ff64 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c06c:	6863      	ldr	r3, [r4, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	4909      	ldr	r1, [pc, #36]	; (800c098 <ull_configurestsiv+0x3c>)
 800c072:	4628      	mov	r0, r5
 800c074:	f7ff ff5e 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	4907      	ldr	r1, [pc, #28]	; (800c09c <ull_configurestsiv+0x40>)
 800c07e:	4628      	mov	r0, r5
 800c080:	f7ff ff58 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c084:	68e3      	ldr	r3, [r4, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	4905      	ldr	r1, [pc, #20]	; (800c0a0 <ull_configurestsiv+0x44>)
 800c08a:	4628      	mov	r0, r5
 800c08c:	f7ff ff52 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	bf00      	nop
 800c094:	0002001c 	.word	0x0002001c
 800c098:	00020020 	.word	0x00020020
 800c09c:	00020024 	.word	0x00020024
 800c0a0:	00020028 	.word	0x00020028

0800c0a4 <ull_configmrxlut>:
 800c0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	2905      	cmp	r1, #5
 800c0ac:	d03a      	beq.n	800c124 <ull_configmrxlut+0x80>
 800c0ae:	4d23      	ldr	r5, [pc, #140]	; (800c13c <ull_configmrxlut+0x98>)
 800c0b0:	462e      	mov	r6, r5
 800c0b2:	4f23      	ldr	r7, [pc, #140]	; (800c140 <ull_configmrxlut+0x9c>)
 800c0b4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800c17c <ull_configmrxlut+0xd8>
 800c0b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800c180 <ull_configmrxlut+0xdc>
 800c0bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c184 <ull_configmrxlut+0xe0>
 800c0c0:	4b20      	ldr	r3, [pc, #128]	; (800c144 <ull_configmrxlut+0xa0>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4920      	ldr	r1, [pc, #128]	; (800c148 <ull_configmrxlut+0xa4>)
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f7ff ff34 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c0cc:	4653      	mov	r3, sl
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	491e      	ldr	r1, [pc, #120]	; (800c14c <ull_configmrxlut+0xa8>)
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f7ff ff2e 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c0d8:	464b      	mov	r3, r9
 800c0da:	2200      	movs	r2, #0
 800c0dc:	491c      	ldr	r1, [pc, #112]	; (800c150 <ull_configmrxlut+0xac>)
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f7ff ff28 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c0e4:	4643      	mov	r3, r8
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	491a      	ldr	r1, [pc, #104]	; (800c154 <ull_configmrxlut+0xb0>)
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f7ff ff22 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c0f0:	463b      	mov	r3, r7
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	4918      	ldr	r1, [pc, #96]	; (800c158 <ull_configmrxlut+0xb4>)
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f7ff ff1c 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c0fc:	4633      	mov	r3, r6
 800c0fe:	2200      	movs	r2, #0
 800c100:	4916      	ldr	r1, [pc, #88]	; (800c15c <ull_configmrxlut+0xb8>)
 800c102:	4620      	mov	r0, r4
 800c104:	f7ff ff16 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c108:	462b      	mov	r3, r5
 800c10a:	2200      	movs	r2, #0
 800c10c:	4914      	ldr	r1, [pc, #80]	; (800c160 <ull_configmrxlut+0xbc>)
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff ff10 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c114:	4b13      	ldr	r3, [pc, #76]	; (800c164 <ull_configmrxlut+0xc0>)
 800c116:	2200      	movs	r2, #0
 800c118:	4913      	ldr	r1, [pc, #76]	; (800c168 <ull_configmrxlut+0xc4>)
 800c11a:	4620      	mov	r0, r4
 800c11c:	f7ff ff0a 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	4d11      	ldr	r5, [pc, #68]	; (800c16c <ull_configmrxlut+0xc8>)
 800c126:	4e12      	ldr	r6, [pc, #72]	; (800c170 <ull_configmrxlut+0xcc>)
 800c128:	4f12      	ldr	r7, [pc, #72]	; (800c174 <ull_configmrxlut+0xd0>)
 800c12a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c188 <ull_configmrxlut+0xe4>
 800c12e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800c18c <ull_configmrxlut+0xe8>
 800c132:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800c190 <ull_configmrxlut+0xec>
 800c136:	4b10      	ldr	r3, [pc, #64]	; (800c178 <ull_configmrxlut+0xd4>)
 800c138:	e7c3      	b.n	800c0c2 <ull_configmrxlut+0x1e>
 800c13a:	bf00      	nop
 800c13c:	0002afb5 	.word	0x0002afb5
 800c140:	0002af7d 	.word	0x0002af7d
 800c144:	0002a8fe 	.word	0x0002a8fe
 800c148:	00030038 	.word	0x00030038
 800c14c:	0003003c 	.word	0x0003003c
 800c150:	00030040 	.word	0x00030040
 800c154:	00030044 	.word	0x00030044
 800c158:	00030048 	.word	0x00030048
 800c15c:	0003004c 	.word	0x0003004c
 800c160:	00030050 	.word	0x00030050
 800c164:	10000240 	.word	0x10000240
 800c168:	0003001c 	.word	0x0003001c
 800c16c:	0001cff5 	.word	0x0001cff5
 800c170:	0001cfb5 	.word	0x0001cfb5
 800c174:	0001cf36 	.word	0x0001cf36
 800c178:	0001c0fd 	.word	0x0001c0fd
 800c17c:	0002af3e 	.word	0x0002af3e
 800c180:	0002a5fe 	.word	0x0002a5fe
 800c184:	0002ac36 	.word	0x0002ac36
 800c188:	0001c77e 	.word	0x0001c77e
 800c18c:	0001c6be 	.word	0x0001c6be
 800c190:	0001c43e 	.word	0x0001c43e

0800c194 <ull_disable_rftx_blocks>:
 800c194:	b508      	push	{r3, lr}
 800c196:	2300      	movs	r3, #0
 800c198:	461a      	mov	r2, r3
 800c19a:	4902      	ldr	r1, [pc, #8]	; (800c1a4 <ull_disable_rftx_blocks+0x10>)
 800c19c:	f7ff feca 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c1a0:	bd08      	pop	{r3, pc}
 800c1a2:	bf00      	nop
 800c1a4:	00070004 	.word	0x00070004

0800c1a8 <ull_disable_rf_tx>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	460d      	mov	r5, r1
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	490a      	ldr	r1, [pc, #40]	; (800c1dc <ull_disable_rf_tx+0x34>)
 800c1b4:	f7ff febe 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7ff feb7 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c1c6:	b905      	cbnz	r5, 800c1ca <ull_disable_rf_tx+0x22>
 800c1c8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ca:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4903      	ldr	r1, [pc, #12]	; (800c1e0 <ull_disable_rf_tx+0x38>)
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff feae 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c1d8:	e7f6      	b.n	800c1c8 <ull_disable_rf_tx+0x20>
 800c1da:	bf00      	nop
 800c1dc:	00070048 	.word	0x00070048
 800c1e0:	00070014 	.word	0x00070014

0800c1e4 <ull_readrxdata>:
 800c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800c1ea:	7ba4      	ldrb	r4, [r4, #14]
 800c1ec:	2c03      	cmp	r4, #3
 800c1ee:	bf0c      	ite	eq
 800c1f0:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800c1f4:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800c1f8:	189c      	adds	r4, r3, r2
 800c1fa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c1fe:	da19      	bge.n	800c234 <ull_readrxdata+0x50>
 800c200:	461d      	mov	r5, r3
 800c202:	4616      	mov	r6, r2
 800c204:	460f      	mov	r7, r1
 800c206:	4604      	mov	r4, r0
 800c208:	2b7f      	cmp	r3, #127	; 0x7f
 800c20a:	d915      	bls.n	800c238 <ull_readrxdata+0x54>
 800c20c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800c210:	2200      	movs	r2, #0
 800c212:	490d      	ldr	r1, [pc, #52]	; (800c248 <ull_readrxdata+0x64>)
 800c214:	f7ff fe8e 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c218:	462b      	mov	r3, r5
 800c21a:	2200      	movs	r2, #0
 800c21c:	490b      	ldr	r1, [pc, #44]	; (800c24c <ull_readrxdata+0x68>)
 800c21e:	4620      	mov	r0, r4
 800c220:	f7ff fe88 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c224:	9700      	str	r7, [sp, #0]
 800c226:	4633      	mov	r3, r6
 800c228:	2200      	movs	r2, #0
 800c22a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800c22e:	4620      	mov	r0, r4
 800c230:	f7ff fa01 	bl	800b636 <dwt_readfromdevice>
 800c234:	b003      	add	sp, #12
 800c236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c238:	9100      	str	r1, [sp, #0]
 800c23a:	4613      	mov	r3, r2
 800c23c:	462a      	mov	r2, r5
 800c23e:	4661      	mov	r1, ip
 800c240:	f7ff f9f9 	bl	800b636 <dwt_readfromdevice>
 800c244:	e7f6      	b.n	800c234 <ull_readrxdata+0x50>
 800c246:	bf00      	nop
 800c248:	001f0004 	.word	0x001f0004
 800c24c:	001f0008 	.word	0x001f0008

0800c250 <dwt_write8bitoffsetreg>:
 800c250:	b510      	push	{r4, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	ac04      	add	r4, sp, #16
 800c256:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800c25a:	9400      	str	r4, [sp, #0]
 800c25c:	2301      	movs	r3, #1
 800c25e:	b292      	uxth	r2, r2
 800c260:	f7ff fe00 	bl	800be64 <dwt_writetodevice>
 800c264:	b004      	add	sp, #16
 800c266:	bd10      	pop	{r4, pc}

0800c268 <ull_getframelength>:
 800c268:	b510      	push	{r4, lr}
 800c26a:	4604      	mov	r4, r0
 800c26c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c26e:	7b9b      	ldrb	r3, [r3, #14]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d013      	beq.n	800c29c <ull_getframelength+0x34>
 800c274:	2b03      	cmp	r3, #3
 800c276:	d11d      	bne.n	800c2b4 <ull_getframelength+0x4c>
 800c278:	23f0      	movs	r3, #240	; 0xf0
 800c27a:	2200      	movs	r2, #0
 800c27c:	4912      	ldr	r1, [pc, #72]	; (800c2c8 <ull_getframelength+0x60>)
 800c27e:	f7ff ffe7 	bl	800c250 <dwt_write8bitoffsetreg>
 800c282:	2200      	movs	r2, #0
 800c284:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c288:	4620      	mov	r0, r4
 800c28a:	f7ff f9f4 	bl	800b676 <dwt_read16bitoffsetreg>
 800c28e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c290:	7ada      	ldrb	r2, [r3, #11]
 800c292:	b1a2      	cbz	r2, 800c2be <ull_getframelength+0x56>
 800c294:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c298:	83d8      	strh	r0, [r3, #30]
 800c29a:	bd10      	pop	{r4, pc}
 800c29c:	230f      	movs	r3, #15
 800c29e:	2200      	movs	r2, #0
 800c2a0:	4909      	ldr	r1, [pc, #36]	; (800c2c8 <ull_getframelength+0x60>)
 800c2a2:	f7ff ffd5 	bl	800c250 <dwt_write8bitoffsetreg>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f7ff f9e2 	bl	800b676 <dwt_read16bitoffsetreg>
 800c2b2:	e7ec      	b.n	800c28e <ull_getframelength+0x26>
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	214c      	movs	r1, #76	; 0x4c
 800c2b8:	f7ff f9dd 	bl	800b676 <dwt_read16bitoffsetreg>
 800c2bc:	e7e7      	b.n	800c28e <ull_getframelength+0x26>
 800c2be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c2c2:	83d8      	strh	r0, [r3, #30]
 800c2c4:	e7e9      	b.n	800c29a <ull_getframelength+0x32>
 800c2c6:	bf00      	nop
 800c2c8:	00010018 	.word	0x00010018

0800c2cc <_dwt_clear_db_events>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c2d2:	7b9b      	ldrb	r3, [r3, #14]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d004      	beq.n	800c2e2 <_dwt_clear_db_events+0x16>
 800c2d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2da:	7b9b      	ldrb	r3, [r3, #14]
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d006      	beq.n	800c2ee <_dwt_clear_db_events+0x22>
 800c2e0:	bd10      	pop	{r4, pc}
 800c2e2:	230f      	movs	r3, #15
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	4905      	ldr	r1, [pc, #20]	; (800c2fc <_dwt_clear_db_events+0x30>)
 800c2e8:	f7ff ffb2 	bl	800c250 <dwt_write8bitoffsetreg>
 800c2ec:	e7f4      	b.n	800c2d8 <_dwt_clear_db_events+0xc>
 800c2ee:	23f0      	movs	r3, #240	; 0xf0
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4902      	ldr	r1, [pc, #8]	; (800c2fc <_dwt_clear_db_events+0x30>)
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f7ff ffab 	bl	800c250 <dwt_write8bitoffsetreg>
 800c2fa:	e7f1      	b.n	800c2e0 <_dwt_clear_db_events+0x14>
 800c2fc:	00010018 	.word	0x00010018

0800c300 <ull_clearaonconfig>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4604      	mov	r4, r0
 800c304:	2300      	movs	r3, #0
 800c306:	461a      	mov	r2, r3
 800c308:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800c30c:	f7ff fdb5 	bl	800be7a <dwt_write16bitoffsetreg>
 800c310:	2300      	movs	r3, #0
 800c312:	461a      	mov	r2, r3
 800c314:	4908      	ldr	r1, [pc, #32]	; (800c338 <ull_clearaonconfig+0x38>)
 800c316:	4620      	mov	r0, r4
 800c318:	f7ff ff9a 	bl	800c250 <dwt_write8bitoffsetreg>
 800c31c:	4d07      	ldr	r5, [pc, #28]	; (800c33c <ull_clearaonconfig+0x3c>)
 800c31e:	2300      	movs	r3, #0
 800c320:	461a      	mov	r2, r3
 800c322:	4629      	mov	r1, r5
 800c324:	4620      	mov	r0, r4
 800c326:	f7ff ff93 	bl	800c250 <dwt_write8bitoffsetreg>
 800c32a:	2302      	movs	r3, #2
 800c32c:	2200      	movs	r2, #0
 800c32e:	4629      	mov	r1, r5
 800c330:	4620      	mov	r0, r4
 800c332:	f7ff ff8d 	bl	800c250 <dwt_write8bitoffsetreg>
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	000a0014 	.word	0x000a0014
 800c33c:	000a0004 	.word	0x000a0004

0800c340 <ull_configeventcounters>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4605      	mov	r5, r0
 800c344:	460c      	mov	r4, r1
 800c346:	2302      	movs	r3, #2
 800c348:	2200      	movs	r2, #0
 800c34a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800c34e:	f7ff ff7f 	bl	800c250 <dwt_write8bitoffsetreg>
 800c352:	b904      	cbnz	r4, 800c356 <ull_configeventcounters+0x16>
 800c354:	bd38      	pop	{r3, r4, r5, pc}
 800c356:	2301      	movs	r3, #1
 800c358:	2200      	movs	r2, #0
 800c35a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800c35e:	4628      	mov	r0, r5
 800c360:	f7ff ff76 	bl	800c250 <dwt_write8bitoffsetreg>
 800c364:	e7f6      	b.n	800c354 <ull_configeventcounters+0x14>
	...

0800c368 <ull_aon_read>:
 800c368:	b538      	push	{r3, r4, r5, lr}
 800c36a:	4604      	mov	r4, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	2200      	movs	r2, #0
 800c370:	490a      	ldr	r1, [pc, #40]	; (800c39c <ull_aon_read+0x34>)
 800c372:	f7ff fd82 	bl	800be7a <dwt_write16bitoffsetreg>
 800c376:	4d0a      	ldr	r5, [pc, #40]	; (800c3a0 <ull_aon_read+0x38>)
 800c378:	2388      	movs	r3, #136	; 0x88
 800c37a:	2200      	movs	r2, #0
 800c37c:	4629      	mov	r1, r5
 800c37e:	4620      	mov	r0, r4
 800c380:	f7ff ff66 	bl	800c250 <dwt_write8bitoffsetreg>
 800c384:	2300      	movs	r3, #0
 800c386:	461a      	mov	r2, r3
 800c388:	4629      	mov	r1, r5
 800c38a:	4620      	mov	r0, r4
 800c38c:	f7ff ff60 	bl	800c250 <dwt_write8bitoffsetreg>
 800c390:	2200      	movs	r2, #0
 800c392:	4904      	ldr	r1, [pc, #16]	; (800c3a4 <ull_aon_read+0x3c>)
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff f980 	bl	800b69a <dwt_read8bitoffsetreg>
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	000a000c 	.word	0x000a000c
 800c3a0:	000a0004 	.word	0x000a0004
 800c3a4:	000a0008 	.word	0x000a0008

0800c3a8 <ull_aon_write>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	4615      	mov	r5, r2
 800c3b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c3b4:	bf34      	ite	cc
 800c3b6:	2600      	movcc	r6, #0
 800c3b8:	2620      	movcs	r6, #32
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	490b      	ldr	r1, [pc, #44]	; (800c3ec <ull_aon_write+0x44>)
 800c3be:	f7ff fd5c 	bl	800be7a <dwt_write16bitoffsetreg>
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	490a      	ldr	r1, [pc, #40]	; (800c3f0 <ull_aon_write+0x48>)
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff ff41 	bl	800c250 <dwt_write8bitoffsetreg>
 800c3ce:	4d09      	ldr	r5, [pc, #36]	; (800c3f4 <ull_aon_write+0x4c>)
 800c3d0:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f7ff ff39 	bl	800c250 <dwt_write8bitoffsetreg>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7ff ff33 	bl	800c250 <dwt_write8bitoffsetreg>
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	000a000c 	.word	0x000a000c
 800c3f0:	000a0010 	.word	0x000a0010
 800c3f4:	000a0004 	.word	0x000a0004

0800c3f8 <ull_configuresleep>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	460d      	mov	r5, r1
 800c3fe:	4616      	mov	r6, r2
 800c400:	2200      	movs	r2, #0
 800c402:	f240 110b 	movw	r1, #267	; 0x10b
 800c406:	f7ff ffcf 	bl	800c3a8 <ull_aon_write>
 800c40a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c40e:	4620      	mov	r0, r4
 800c410:	f7ff ffaa 	bl	800c368 <ull_aon_read>
 800c414:	f000 021f 	and.w	r2, r0, #31
 800c418:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7ff ffc3 	bl	800c3a8 <ull_aon_write>
 800c422:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c424:	8a1a      	ldrh	r2, [r3, #16]
 800c426:	4315      	orrs	r5, r2
 800c428:	821d      	strh	r5, [r3, #16]
 800c42a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c42c:	8a1b      	ldrh	r3, [r3, #16]
 800c42e:	2200      	movs	r2, #0
 800c430:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800c434:	4620      	mov	r0, r4
 800c436:	f7ff fd20 	bl	800be7a <dwt_write16bitoffsetreg>
 800c43a:	4633      	mov	r3, r6
 800c43c:	2200      	movs	r2, #0
 800c43e:	4902      	ldr	r1, [pc, #8]	; (800c448 <ull_configuresleep+0x50>)
 800c440:	4620      	mov	r0, r4
 800c442:	f7ff ff05 	bl	800c250 <dwt_write8bitoffsetreg>
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	000a0014 	.word	0x000a0014

0800c44c <ull_writetxdata>:
 800c44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c44e:	b083      	sub	sp, #12
 800c450:	185c      	adds	r4, r3, r1
 800c452:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c456:	da24      	bge.n	800c4a2 <ull_writetxdata+0x56>
 800c458:	461c      	mov	r4, r3
 800c45a:	4617      	mov	r7, r2
 800c45c:	460e      	mov	r6, r1
 800c45e:	4605      	mov	r5, r0
 800c460:	2b7f      	cmp	r3, #127	; 0x7f
 800c462:	d915      	bls.n	800c490 <ull_writetxdata+0x44>
 800c464:	2314      	movs	r3, #20
 800c466:	2200      	movs	r2, #0
 800c468:	490f      	ldr	r1, [pc, #60]	; (800c4a8 <ull_writetxdata+0x5c>)
 800c46a:	f7ff fd63 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c46e:	4623      	mov	r3, r4
 800c470:	2200      	movs	r2, #0
 800c472:	490e      	ldr	r1, [pc, #56]	; (800c4ac <ull_writetxdata+0x60>)
 800c474:	4628      	mov	r0, r5
 800c476:	f7ff fd5d 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c47a:	9700      	str	r7, [sp, #0]
 800c47c:	4633      	mov	r3, r6
 800c47e:	2200      	movs	r2, #0
 800c480:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800c484:	4628      	mov	r0, r5
 800c486:	f7ff fced 	bl	800be64 <dwt_writetodevice>
 800c48a:	2000      	movs	r0, #0
 800c48c:	b003      	add	sp, #12
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	9200      	str	r2, [sp, #0]
 800c492:	460b      	mov	r3, r1
 800c494:	4622      	mov	r2, r4
 800c496:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800c49a:	f7ff fce3 	bl	800be64 <dwt_writetodevice>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e7f4      	b.n	800c48c <ull_writetxdata+0x40>
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	e7f1      	b.n	800c48c <ull_writetxdata+0x40>
 800c4a8:	001f0004 	.word	0x001f0004
 800c4ac:	001f0008 	.word	0x001f0008

0800c4b0 <ull_signal_rx_buff_free>:
 800c4b0:	b510      	push	{r4, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	9200      	str	r2, [sp, #0]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	2113      	movs	r1, #19
 800c4c2:	f7ff f83a 	bl	800b53a <dwt_xfer3xxx>
 800c4c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c4c8:	7b9a      	ldrb	r2, [r3, #14]
 800c4ca:	2a03      	cmp	r2, #3
 800c4cc:	bf0c      	ite	eq
 800c4ce:	2201      	moveq	r2, #1
 800c4d0:	2203      	movne	r2, #3
 800c4d2:	739a      	strb	r2, [r3, #14]
 800c4d4:	b002      	add	sp, #8
 800c4d6:	bd10      	pop	{r4, pc}

0800c4d8 <ull_isr>:
 800c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4dc:	4604      	mov	r4, r0
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800c4e4:	f7ff f8d9 	bl	800b69a <dwt_read8bitoffsetreg>
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2144      	movs	r1, #68	; 0x44
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f7ff f8ab 	bl	800b64a <dwt_read32bitoffsetreg>
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	83da      	strh	r2, [r3, #30]
 800c4fc:	f883 2020 	strb.w	r2, [r3, #32]
 800c500:	619a      	str	r2, [r3, #24]
 800c502:	839a      	strh	r2, [r3, #28]
 800c504:	625a      	str	r2, [r3, #36]	; 0x24
 800c506:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c508:	625c      	str	r4, [r3, #36]	; 0x24
 800c50a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c50c:	7b9f      	ldrb	r7, [r3, #14]
 800c50e:	2f00      	cmp	r7, #0
 800c510:	d17f      	bne.n	800c612 <ull_isr+0x13a>
 800c512:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c514:	619e      	str	r6, [r3, #24]
 800c516:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800c51a:	f898 3015 	ldrb.w	r3, [r8, #21]
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	2b03      	cmp	r3, #3
 800c524:	f000 8090 	beq.w	800c648 <ull_isr+0x170>
 800c528:	f015 0f80 	tst.w	r5, #128	; 0x80
 800c52c:	f040 8093 	bne.w	800c656 <ull_isr+0x17e>
 800c530:	f015 0f01 	tst.w	r5, #1
 800c534:	f040 80c1 	bne.w	800c6ba <ull_isr+0x1e2>
 800c538:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c53c:	d00b      	beq.n	800c556 <ull_isr+0x7e>
 800c53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c540:	b113      	cbz	r3, 800c548 <ull_isr+0x70>
 800c542:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c544:	3018      	adds	r0, #24
 800c546:	4798      	blx	r3
 800c548:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c54c:	2202      	movs	r2, #2
 800c54e:	2144      	movs	r1, #68	; 0x44
 800c550:	4620      	mov	r0, r4
 800c552:	f7ff fc92 	bl	800be7a <dwt_write16bitoffsetreg>
 800c556:	f015 0f08 	tst.w	r5, #8
 800c55a:	d107      	bne.n	800c56c <ull_isr+0x94>
 800c55c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c55e:	7b9b      	ldrb	r3, [r3, #14]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 80ea 	beq.w	800c73a <ull_isr+0x262>
 800c566:	2f00      	cmp	r7, #0
 800c568:	f000 80e7 	beq.w	800c73a <ull_isr+0x262>
 800c56c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c56e:	2200      	movs	r2, #0
 800c570:	f883 2020 	strb.w	r2, [r3, #32]
 800c574:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800c578:	f000 80ad 	beq.w	800c6d6 <ull_isr+0x1fe>
 800c57c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c57e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800c582:	f043 0308 	orr.w	r3, r3, #8
 800c586:	f882 3020 	strb.w	r3, [r2, #32]
 800c58a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800c58e:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800c592:	d008      	beq.n	800c5a6 <ull_isr+0xce>
 800c594:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c596:	f892 3020 	ldrb.w	r3, [r2, #32]
 800c59a:	f043 0310 	orr.w	r3, r3, #16
 800c59e:	f882 3020 	strb.w	r3, [r2, #32]
 800c5a2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800c5a6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800c5aa:	d006      	beq.n	800c5ba <ull_isr+0xe2>
 800c5ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c5ae:	7d53      	ldrb	r3, [r2, #21]
 800c5b0:	f003 0303 	and.w	r3, r3, #3
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	f000 809a 	beq.w	800c6ee <ull_isr+0x216>
 800c5ba:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800c5be:	f040 80a2 	bne.w	800c706 <ull_isr+0x22e>
 800c5c2:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2144      	movs	r1, #68	; 0x44
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7ff fcb2 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7ff fe7b 	bl	800c2cc <_dwt_clear_db_events>
 800c5d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c5d8:	8bc3      	ldrh	r3, [r0, #30]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f040 80a2 	bne.w	800c724 <ull_isr+0x24c>
 800c5e0:	7d43      	ldrb	r3, [r0, #21]
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	f000 809c 	beq.w	800c724 <ull_isr+0x24c>
 800c5ec:	6983      	ldr	r3, [r0, #24]
 800c5ee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c5f2:	6183      	str	r3, [r0, #24]
 800c5f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c5f6:	6993      	ldr	r3, [r2, #24]
 800c5f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c5fc:	6193      	str	r3, [r2, #24]
 800c5fe:	69e3      	ldr	r3, [r4, #28]
 800c600:	b113      	cbz	r3, 800c608 <ull_isr+0x130>
 800c602:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c604:	3018      	adds	r0, #24
 800c606:	4798      	blx	r3
 800c608:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 2020 	strb.w	r2, [r3, #32]
 800c610:	e08c      	b.n	800c72c <ull_isr+0x254>
 800c612:	496d      	ldr	r1, [pc, #436]	; (800c7c8 <ull_isr+0x2f0>)
 800c614:	4620      	mov	r0, r4
 800c616:	f7ff f840 	bl	800b69a <dwt_read8bitoffsetreg>
 800c61a:	4607      	mov	r7, r0
 800c61c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c61e:	7b9b      	ldrb	r3, [r3, #14]
 800c620:	2b03      	cmp	r3, #3
 800c622:	bf08      	it	eq
 800c624:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800c628:	f017 0f01 	tst.w	r7, #1
 800c62c:	bf18      	it	ne
 800c62e:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800c632:	f017 0f02 	tst.w	r7, #2
 800c636:	bf18      	it	ne
 800c638:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800c63c:	f017 0f04 	tst.w	r7, #4
 800c640:	bf18      	it	ne
 800c642:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800c646:	e764      	b.n	800c512 <ull_isr+0x3a>
 800c648:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800c64c:	bf1c      	itt	ne
 800c64e:	f045 0508 	orrne.w	r5, r5, #8
 800c652:	b2ed      	uxtbne	r5, r5
 800c654:	e768      	b.n	800c528 <ull_isr+0x50>
 800c656:	2200      	movs	r2, #0
 800c658:	2148      	movs	r1, #72	; 0x48
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff f80b 	bl	800b676 <dwt_read16bitoffsetreg>
 800c660:	f8a8 001c 	strh.w	r0, [r8, #28]
 800c664:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c666:	7d1a      	ldrb	r2, [r3, #20]
 800c668:	b11a      	cbz	r2, 800c672 <ull_isr+0x19a>
 800c66a:	699a      	ldr	r2, [r3, #24]
 800c66c:	f012 0f04 	tst.w	r2, #4
 800c670:	d103      	bne.n	800c67a <ull_isr+0x1a2>
 800c672:	8b9b      	ldrh	r3, [r3, #28]
 800c674:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800c678:	b18b      	cbz	r3, 800c69e <ull_isr+0x1c6>
 800c67a:	2304      	movs	r3, #4
 800c67c:	2200      	movs	r2, #0
 800c67e:	2144      	movs	r1, #68	; 0x44
 800c680:	4620      	mov	r0, r4
 800c682:	f7ff fde5 	bl	800c250 <dwt_write8bitoffsetreg>
 800c686:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800c68a:	2200      	movs	r2, #0
 800c68c:	2148      	movs	r1, #72	; 0x48
 800c68e:	4620      	mov	r0, r4
 800c690:	f7ff fbf3 	bl	800be7a <dwt_write16bitoffsetreg>
 800c694:	6a23      	ldr	r3, [r4, #32]
 800c696:	b113      	cbz	r3, 800c69e <ull_isr+0x1c6>
 800c698:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c69a:	3018      	adds	r0, #24
 800c69c:	4798      	blx	r3
 800c69e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c6a0:	8b9b      	ldrh	r3, [r3, #28]
 800c6a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c6a6:	f43f af43 	beq.w	800c530 <ull_isr+0x58>
 800c6aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2148      	movs	r1, #72	; 0x48
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff fbe1 	bl	800be7a <dwt_write16bitoffsetreg>
 800c6b8:	e73a      	b.n	800c530 <ull_isr+0x58>
 800c6ba:	23f8      	movs	r3, #248	; 0xf8
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2144      	movs	r1, #68	; 0x44
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f7ff fdc5 	bl	800c250 <dwt_write8bitoffsetreg>
 800c6c6:	6923      	ldr	r3, [r4, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f43f af35 	beq.w	800c538 <ull_isr+0x60>
 800c6ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c6d0:	3018      	adds	r0, #24
 800c6d2:	4798      	blx	r3
 800c6d4:	e730      	b.n	800c538 <ull_isr+0x60>
 800c6d6:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800c6da:	bf1f      	itttt	ne
 800c6dc:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800c6de:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800c6e2:	f043 0304 	orrne.w	r3, r3, #4
 800c6e6:	f882 3020 	strbne.w	r3, [r2, #32]
 800c6ea:	2700      	movs	r7, #0
 800c6ec:	e74f      	b.n	800c58e <ull_isr+0xb6>
 800c6ee:	f892 3020 	ldrb.w	r3, [r2, #32]
 800c6f2:	f043 0302 	orr.w	r3, r3, #2
 800c6f6:	f882 3020 	strb.w	r3, [r2, #32]
 800c6fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	83da      	strh	r2, [r3, #30]
 800c700:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800c704:	e75d      	b.n	800c5c2 <ull_isr+0xea>
 800c706:	4620      	mov	r0, r4
 800c708:	f7ff fdae 	bl	800c268 <ull_getframelength>
 800c70c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800c710:	f43f af57 	beq.w	800c5c2 <ull_isr+0xea>
 800c714:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c716:	f892 3020 	ldrb.w	r3, [r2, #32]
 800c71a:	f043 0301 	orr.w	r3, r3, #1
 800c71e:	f882 3020 	strb.w	r3, [r2, #32]
 800c722:	e74e      	b.n	800c5c2 <ull_isr+0xea>
 800c724:	6963      	ldr	r3, [r4, #20]
 800c726:	b10b      	cbz	r3, 800c72c <ull_isr+0x254>
 800c728:	3018      	adds	r0, #24
 800c72a:	4798      	blx	r3
 800c72c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c72e:	7b9b      	ldrb	r3, [r3, #14]
 800c730:	bb03      	cbnz	r3, 800c774 <ull_isr+0x29c>
 800c732:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c734:	2200      	movs	r2, #0
 800c736:	f883 2020 	strb.w	r2, [r3, #32]
 800c73a:	f015 0f10 	tst.w	r5, #16
 800c73e:	d11d      	bne.n	800c77c <ull_isr+0x2a4>
 800c740:	f015 0f20 	tst.w	r5, #32
 800c744:	d12d      	bne.n	800c7a2 <ull_isr+0x2ca>
 800c746:	2200      	movs	r2, #0
 800c748:	4920      	ldr	r1, [pc, #128]	; (800c7cc <ull_isr+0x2f4>)
 800c74a:	4620      	mov	r0, r4
 800c74c:	f7fe ffa5 	bl	800b69a <dwt_read8bitoffsetreg>
 800c750:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c752:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800c756:	f010 0303 	ands.w	r3, r0, #3
 800c75a:	d009      	beq.n	800c770 <ull_isr+0x298>
 800c75c:	2200      	movs	r2, #0
 800c75e:	491b      	ldr	r1, [pc, #108]	; (800c7cc <ull_isr+0x2f4>)
 800c760:	4620      	mov	r0, r4
 800c762:	f7ff fd75 	bl	800c250 <dwt_write8bitoffsetreg>
 800c766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c768:	b113      	cbz	r3, 800c770 <ull_isr+0x298>
 800c76a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c76c:	3018      	adds	r0, #24
 800c76e:	4798      	blx	r3
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c774:	4620      	mov	r0, r4
 800c776:	f7ff fe9b 	bl	800c4b0 <ull_signal_rx_buff_free>
 800c77a:	e7da      	b.n	800c732 <ull_isr+0x25a>
 800c77c:	4b14      	ldr	r3, [pc, #80]	; (800c7d0 <ull_isr+0x2f8>)
 800c77e:	2200      	movs	r2, #0
 800c780:	2144      	movs	r1, #68	; 0x44
 800c782:	4620      	mov	r0, r4
 800c784:	f7ff fbd6 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c788:	4620      	mov	r0, r4
 800c78a:	f7ff fd9f 	bl	800c2cc <_dwt_clear_db_events>
 800c78e:	69e3      	ldr	r3, [r4, #28]
 800c790:	b113      	cbz	r3, 800c798 <ull_isr+0x2c0>
 800c792:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c794:	3018      	adds	r0, #24
 800c796:	4798      	blx	r3
 800c798:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2020 	strb.w	r2, [r3, #32]
 800c7a0:	e7ce      	b.n	800c740 <ull_isr+0x268>
 800c7a2:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <ull_isr+0x2fc>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2144      	movs	r1, #68	; 0x44
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7ff fbc3 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7ff fd8c 	bl	800c2cc <_dwt_clear_db_events>
 800c7b4:	69a3      	ldr	r3, [r4, #24]
 800c7b6:	b113      	cbz	r3, 800c7be <ull_isr+0x2e6>
 800c7b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c7ba:	3018      	adds	r0, #24
 800c7bc:	4798      	blx	r3
 800c7be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2020 	strb.w	r2, [r3, #32]
 800c7c6:	e7be      	b.n	800c746 <ull_isr+0x26e>
 800c7c8:	00010018 	.word	0x00010018
 800c7cc:	00110038 	.word	0x00110038
 800c7d0:	34059400 	.word	0x34059400
 800c7d4:	10220400 	.word	0x10220400

0800c7d8 <dwt_modify32bitoffsetreg>:
 800c7d8:	b530      	push	{r4, r5, lr}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	9c08      	ldr	r4, [sp, #32]
 800c7de:	f88d 3008 	strb.w	r3, [sp, #8]
 800c7e2:	0a1d      	lsrs	r5, r3, #8
 800c7e4:	f88d 5009 	strb.w	r5, [sp, #9]
 800c7e8:	0c1d      	lsrs	r5, r3, #16
 800c7ea:	f88d 500a 	strb.w	r5, [sp, #10]
 800c7ee:	0e1b      	lsrs	r3, r3, #24
 800c7f0:	f88d 300b 	strb.w	r3, [sp, #11]
 800c7f4:	f88d 400c 	strb.w	r4, [sp, #12]
 800c7f8:	0a23      	lsrs	r3, r4, #8
 800c7fa:	f88d 300d 	strb.w	r3, [sp, #13]
 800c7fe:	0c23      	lsrs	r3, r4, #16
 800c800:	f88d 300e 	strb.w	r3, [sp, #14]
 800c804:	0e24      	lsrs	r4, r4, #24
 800c806:	f88d 400f 	strb.w	r4, [sp, #15]
 800c80a:	f248 0303 	movw	r3, #32771	; 0x8003
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	ab02      	add	r3, sp, #8
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	2308      	movs	r3, #8
 800c816:	b292      	uxth	r2, r2
 800c818:	f7fe fe8f 	bl	800b53a <dwt_xfer3xxx>
 800c81c:	b005      	add	sp, #20
 800c81e:	bd30      	pop	{r4, r5, pc}

0800c820 <ull_enable_rf_tx>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	4604      	mov	r4, r0
 800c826:	460e      	mov	r6, r1
 800c828:	4d13      	ldr	r5, [pc, #76]	; (800c878 <ull_enable_rf_tx+0x58>)
 800c82a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	2200      	movs	r2, #0
 800c836:	4629      	mov	r1, r5
 800c838:	f7ff ffce 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800c83c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	f04f 33ff 	mov.w	r3, #4294967295
 800c846:	2200      	movs	r2, #0
 800c848:	4629      	mov	r1, r5
 800c84a:	4620      	mov	r0, r4
 800c84c:	f7ff ffc4 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800c850:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <ull_enable_rf_tx+0x5c>)
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	f04f 33ff 	mov.w	r3, #4294967295
 800c858:	2200      	movs	r2, #0
 800c85a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800c85e:	4620      	mov	r0, r4
 800c860:	f7ff ffba 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800c864:	b90e      	cbnz	r6, 800c86a <ull_enable_rf_tx+0x4a>
 800c866:	b002      	add	sp, #8
 800c868:	bd70      	pop	{r4, r5, r6, pc}
 800c86a:	4b05      	ldr	r3, [pc, #20]	; (800c880 <ull_enable_rf_tx+0x60>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	4905      	ldr	r1, [pc, #20]	; (800c884 <ull_enable_rf_tx+0x64>)
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff fb5f 	bl	800bf34 <dwt_write32bitoffsetreg>
 800c876:	e7f6      	b.n	800c866 <ull_enable_rf_tx+0x46>
 800c878:	00070048 	.word	0x00070048
 800c87c:	02003c00 	.word	0x02003c00
 800c880:	01011100 	.word	0x01011100
 800c884:	00070014 	.word	0x00070014

0800c888 <ull_enable_rftx_blocks>:
 800c888:	b500      	push	{lr}
 800c88a:	b083      	sub	sp, #12
 800c88c:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <ull_enable_rftx_blocks+0x1c>)
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	f04f 33ff 	mov.w	r3, #4294967295
 800c894:	2200      	movs	r2, #0
 800c896:	4904      	ldr	r1, [pc, #16]	; (800c8a8 <ull_enable_rftx_blocks+0x20>)
 800c898:	f7ff ff9e 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800c89c:	b003      	add	sp, #12
 800c89e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8a2:	bf00      	nop
 800c8a4:	02003c00 	.word	0x02003c00
 800c8a8:	00070004 	.word	0x00070004

0800c8ac <_dwt_otpprogword32>:
 800c8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	4617      	mov	r7, r2
 800c8b8:	4e56      	ldr	r6, [pc, #344]	; (800ca14 <_dwt_otpprogword32+0x168>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	4631      	mov	r1, r6
 800c8be:	f7fe fec4 	bl	800b64a <dwt_read32bitoffsetreg>
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	4631      	mov	r1, r6
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7ff ff80 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800c8d8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800ca18 <_dwt_otpprogword32+0x16c>
 800c8dc:	2318      	movs	r3, #24
 800c8de:	2200      	movs	r2, #0
 800c8e0:	4641      	mov	r1, r8
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7ff fac9 	bl	800be7a <dwt_write16bitoffsetreg>
 800c8e8:	2125      	movs	r1, #37	; 0x25
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f7ff faec 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c8f0:	2102      	movs	r1, #2
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f7ff fae8 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c8f8:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f7ff fae3 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c902:	b2f9      	uxtb	r1, r7
 800c904:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c908:	4620      	mov	r0, r4
 800c90a:	f7ff fadd 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c90e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c912:	4620      	mov	r0, r4
 800c914:	f7ff fad8 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c918:	2100      	movs	r1, #0
 800c91a:	4620      	mov	r0, r4
 800c91c:	f7ff fad4 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c920:	2102      	movs	r1, #2
 800c922:	4620      	mov	r0, r4
 800c924:	f7ff fad0 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c928:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7ff facb 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c932:	b2e9      	uxtb	r1, r5
 800c934:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c938:	4620      	mov	r0, r4
 800c93a:	f7ff fac5 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c93e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800c942:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c946:	4620      	mov	r0, r4
 800c948:	f7ff fabe 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c94c:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800c950:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c954:	4620      	mov	r0, r4
 800c956:	f7ff fab7 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c95a:	0e29      	lsrs	r1, r5, #24
 800c95c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff fab1 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c966:	2100      	movs	r1, #0
 800c968:	4620      	mov	r0, r4
 800c96a:	f7ff faad 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c96e:	213a      	movs	r1, #58	; 0x3a
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff faa9 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c976:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff faa4 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c980:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800c984:	4620      	mov	r0, r4
 800c986:	f7ff fa9f 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c98a:	2100      	movs	r1, #0
 800c98c:	4620      	mov	r0, r4
 800c98e:	f7ff fa9b 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c992:	213a      	movs	r1, #58	; 0x3a
 800c994:	4620      	mov	r0, r4
 800c996:	f7ff fa97 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c99a:	f240 1101 	movw	r1, #257	; 0x101
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7ff fa92 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7ff fa64 	bl	800be7a <dwt_write16bitoffsetreg>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f7ff fa5d 	bl	800be7a <dwt_write16bitoffsetreg>
 800c9c0:	2002      	movs	r0, #2
 800c9c2:	f7f4 fd67 	bl	8001494 <deca_sleep>
 800c9c6:	213a      	movs	r1, #58	; 0x3a
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f7ff fa7d 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c9ce:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f7ff fa78 	bl	800bec8 <__dwt_otp_write_wdata_id_reg>
 800c9d8:	2302      	movs	r3, #2
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f7ff fa4a 	bl	800be7a <dwt_write16bitoffsetreg>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7ff fa43 	bl	800be7a <dwt_write16bitoffsetreg>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	4641      	mov	r1, r8
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7ff fa3d 	bl	800be7a <dwt_write16bitoffsetreg>
 800ca00:	464b      	mov	r3, r9
 800ca02:	2200      	movs	r2, #0
 800ca04:	4631      	mov	r1, r6
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff fa94 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ca0c:	b003      	add	sp, #12
 800ca0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca12:	bf00      	nop
 800ca14:	00070044 	.word	0x00070044
 800ca18:	000b0008 	.word	0x000b0008

0800ca1c <ull_setgpiomode>:
 800ca1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	2400      	movs	r4, #0
 800ca22:	4623      	mov	r3, r4
 800ca24:	2601      	movs	r6, #1
 800ca26:	2707      	movs	r7, #7
 800ca28:	e002      	b.n	800ca30 <ull_setgpiomode+0x14>
 800ca2a:	3401      	adds	r4, #1
 800ca2c:	2c09      	cmp	r4, #9
 800ca2e:	d009      	beq.n	800ca44 <ull_setgpiomode+0x28>
 800ca30:	fa06 f504 	lsl.w	r5, r6, r4
 800ca34:	420d      	tst	r5, r1
 800ca36:	d0f8      	beq.n	800ca2a <ull_setgpiomode+0xe>
 800ca38:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800ca3c:	fa07 f505 	lsl.w	r5, r7, r5
 800ca40:	432b      	orrs	r3, r5
 800ca42:	e7f2      	b.n	800ca2a <ull_setgpiomode+0xe>
 800ca44:	401a      	ands	r2, r3
 800ca46:	9200      	str	r2, [sp, #0]
 800ca48:	43db      	mvns	r3, r3
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ca50:	f7ff fec2 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ca54:	b003      	add	sp, #12
 800ca56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca58 <ull_writetxfctrl>:
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	2a7f      	cmp	r2, #127	; 0x7f
 800ca60:	d912      	bls.n	800ca88 <ull_writetxfctrl+0x30>
 800ca62:	3280      	adds	r2, #128	; 0x80
 800ca64:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800ca68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca6c:	9100      	str	r1, [sp, #0]
 800ca6e:	4b0c      	ldr	r3, [pc, #48]	; (800caa0 <ull_writetxfctrl+0x48>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	2120      	movs	r1, #32
 800ca74:	f7ff feb0 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7fe fe0b 	bl	800b69a <dwt_read8bitoffsetreg>
 800ca84:	b002      	add	sp, #8
 800ca86:	bd10      	pop	{r4, pc}
 800ca88:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800ca8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca90:	9100      	str	r1, [sp, #0]
 800ca92:	4b03      	ldr	r3, [pc, #12]	; (800caa0 <ull_writetxfctrl+0x48>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	2120      	movs	r1, #32
 800ca98:	f7ff fe9e 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ca9c:	e7f2      	b.n	800ca84 <ull_writetxfctrl+0x2c>
 800ca9e:	bf00      	nop
 800caa0:	fc00f400 	.word	0xfc00f400

0800caa4 <prs_sys_status_and_or>:
 800caa4:	b500      	push	{lr}
 800caa6:	b083      	sub	sp, #12
 800caa8:	9200      	str	r2, [sp, #0]
 800caaa:	460b      	mov	r3, r1
 800caac:	2200      	movs	r2, #0
 800caae:	2144      	movs	r1, #68	; 0x44
 800cab0:	f7ff fe92 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cab4:	2000      	movs	r0, #0
 800cab6:	b003      	add	sp, #12
 800cab8:	f85d fb04 	ldr.w	pc, [sp], #4

0800cabc <dwt_modify8bitoffsetreg>:
 800cabc:	b500      	push	{lr}
 800cabe:	b085      	sub	sp, #20
 800cac0:	f88d 300c 	strb.w	r3, [sp, #12]
 800cac4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800cac8:	f88d 300d 	strb.w	r3, [sp, #13]
 800cacc:	f248 0301 	movw	r3, #32769	; 0x8001
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	ab03      	add	r3, sp, #12
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	2302      	movs	r3, #2
 800cad8:	b292      	uxth	r2, r2
 800cada:	f7fe fd2e 	bl	800b53a <dwt_xfer3xxx>
 800cade:	b005      	add	sp, #20
 800cae0:	f85d fb04 	ldr.w	pc, [sp], #4

0800cae4 <ull_configciadiag>:
 800cae4:	b530      	push	{r4, r5, lr}
 800cae6:	b083      	sub	sp, #12
 800cae8:	4604      	mov	r4, r0
 800caea:	460d      	mov	r5, r1
 800caec:	f011 0f01 	tst.w	r1, #1
 800caf0:	d015      	beq.n	800cb1e <ull_configciadiag+0x3a>
 800caf2:	2300      	movs	r3, #0
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	23ef      	movs	r3, #239	; 0xef
 800caf8:	2202      	movs	r2, #2
 800cafa:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800cafe:	f7ff ffdd 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cb02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cb04:	759d      	strb	r5, [r3, #22]
 800cb06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cb08:	7d9b      	ldrb	r3, [r3, #22]
 800cb0a:	085b      	lsrs	r3, r3, #1
 800cb0c:	d010      	beq.n	800cb30 <ull_configciadiag+0x4c>
 800cb0e:	086b      	lsrs	r3, r5, #1
 800cb10:	2200      	movs	r2, #0
 800cb12:	490e      	ldr	r1, [pc, #56]	; (800cb4c <ull_configciadiag+0x68>)
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7ff fb9b 	bl	800c250 <dwt_write8bitoffsetreg>
 800cb1a:	b003      	add	sp, #12
 800cb1c:	bd30      	pop	{r4, r5, pc}
 800cb1e:	2310      	movs	r3, #16
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	23ff      	movs	r3, #255	; 0xff
 800cb24:	2202      	movs	r2, #2
 800cb26:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800cb2a:	f7ff ffc7 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cb2e:	e7e8      	b.n	800cb02 <ull_configciadiag+0x1e>
 800cb30:	2301      	movs	r3, #1
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	23ff      	movs	r3, #255	; 0xff
 800cb36:	2200      	movs	r2, #0
 800cb38:	4904      	ldr	r1, [pc, #16]	; (800cb4c <ull_configciadiag+0x68>)
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff ffbe 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cb40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cb42:	7d93      	ldrb	r3, [r2, #22]
 800cb44:	f043 0302 	orr.w	r3, r3, #2
 800cb48:	7593      	strb	r3, [r2, #22]
 800cb4a:	e7e6      	b.n	800cb1a <ull_configciadiag+0x36>
 800cb4c:	00010020 	.word	0x00010020

0800cb50 <ull_calcbandwidthadj>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	4604      	mov	r4, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	2101      	movs	r1, #1
 800cb5a:	f7ff f99f 	bl	800be9c <ull_force_clocks>
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4620      	mov	r0, r4
 800cb62:	f7ff fe5d 	bl	800c820 <ull_enable_rf_tx>
 800cb66:	4620      	mov	r0, r4
 800cb68:	f7ff fe8e 	bl	800c888 <ull_enable_rftx_blocks>
 800cb6c:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800cb70:	2200      	movs	r2, #0
 800cb72:	4915      	ldr	r1, [pc, #84]	; (800cbc8 <ull_calcbandwidthadj+0x78>)
 800cb74:	4620      	mov	r0, r4
 800cb76:	f7ff f980 	bl	800be7a <dwt_write16bitoffsetreg>
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	23ff      	movs	r3, #255	; 0xff
 800cb80:	2200      	movs	r2, #0
 800cb82:	4912      	ldr	r1, [pc, #72]	; (800cbcc <ull_calcbandwidthadj+0x7c>)
 800cb84:	4620      	mov	r0, r4
 800cb86:	f7ff ff99 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cb8a:	4e10      	ldr	r6, [pc, #64]	; (800cbcc <ull_calcbandwidthadj+0x7c>)
 800cb8c:	2500      	movs	r5, #0
 800cb8e:	462a      	mov	r2, r5
 800cb90:	4631      	mov	r1, r6
 800cb92:	4620      	mov	r0, r4
 800cb94:	f7fe fd81 	bl	800b69a <dwt_read8bitoffsetreg>
 800cb98:	f010 0f01 	tst.w	r0, #1
 800cb9c:	d1f7      	bne.n	800cb8e <ull_calcbandwidthadj+0x3e>
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff faf8 	bl	800c194 <ull_disable_rftx_blocks>
 800cba4:	2100      	movs	r1, #0
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff fafe 	bl	800c1a8 <ull_disable_rf_tx>
 800cbac:	2105      	movs	r1, #5
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f7ff f974 	bl	800be9c <ull_force_clocks>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4906      	ldr	r1, [pc, #24]	; (800cbd0 <ull_calcbandwidthadj+0x80>)
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f7fe fd6e 	bl	800b69a <dwt_read8bitoffsetreg>
 800cbbe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cbc2:	b002      	add	sp, #8
 800cbc4:	bd70      	pop	{r4, r5, r6, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0008001c 	.word	0x0008001c
 800cbcc:	00080010 	.word	0x00080010
 800cbd0:	0007001c 	.word	0x0007001c

0800cbd4 <ull_configuretxrf>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	460c      	mov	r4, r1
 800cbda:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800cbde:	b149      	cbz	r1, 800cbf4 <ull_configuretxrf+0x20>
 800cbe0:	f7ff ffb6 	bl	800cb50 <ull_calcbandwidthadj>
 800cbe4:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4905      	ldr	r1, [pc, #20]	; (800cc00 <ull_configuretxrf+0x2c>)
 800cbec:	4628      	mov	r0, r5
 800cbee:	f7ff f9a1 	bl	800bf34 <dwt_write32bitoffsetreg>
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	7823      	ldrb	r3, [r4, #0]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4902      	ldr	r1, [pc, #8]	; (800cc04 <ull_configuretxrf+0x30>)
 800cbfa:	f7ff fb29 	bl	800c250 <dwt_write8bitoffsetreg>
 800cbfe:	e7f1      	b.n	800cbe4 <ull_configuretxrf+0x10>
 800cc00:	00010004 	.word	0x00010004
 800cc04:	0007001c 	.word	0x0007001c

0800cc08 <ull_repeated_frames>:
 800cc08:	b530      	push	{r4, r5, lr}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	2310      	movs	r3, #16
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	23ff      	movs	r3, #255	; 0xff
 800cc16:	2200      	movs	r2, #0
 800cc18:	4906      	ldr	r1, [pc, #24]	; (800cc34 <ull_repeated_frames+0x2c>)
 800cc1a:	f7ff ff4f 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cc1e:	462b      	mov	r3, r5
 800cc20:	2d02      	cmp	r5, #2
 800cc22:	bf38      	it	cc
 800cc24:	2302      	movcc	r3, #2
 800cc26:	2200      	movs	r2, #0
 800cc28:	2128      	movs	r1, #40	; 0x28
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f7ff f982 	bl	800bf34 <dwt_write32bitoffsetreg>
 800cc30:	b003      	add	sp, #12
 800cc32:	bd30      	pop	{r4, r5, pc}
 800cc34:	000f0028 	.word	0x000f0028

0800cc38 <ull_setdwstate>:
 800cc38:	b530      	push	{r4, r5, lr}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	2901      	cmp	r1, #1
 800cc40:	d01d      	beq.n	800cc7e <ull_setdwstate+0x46>
 800cc42:	2902      	cmp	r1, #2
 800cc44:	d02f      	beq.n	800cca6 <ull_setdwstate+0x6e>
 800cc46:	2301      	movs	r3, #1
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	23ff      	movs	r3, #255	; 0xff
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	4925      	ldr	r1, [pc, #148]	; (800cce4 <ull_setdwstate+0xac>)
 800cc50:	f7ff ff34 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cc54:	4d24      	ldr	r5, [pc, #144]	; (800cce8 <ull_setdwstate+0xb0>)
 800cc56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800cc60:	2200      	movs	r2, #0
 800cc62:	4629      	mov	r1, r5
 800cc64:	4620      	mov	r0, r4
 800cc66:	f7ff fdb7 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	237f      	movs	r3, #127	; 0x7f
 800cc70:	2202      	movs	r2, #2
 800cc72:	4629      	mov	r1, r5
 800cc74:	4620      	mov	r0, r4
 800cc76:	f7ff ff21 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cc7a:	b003      	add	sp, #12
 800cc7c:	bd30      	pop	{r4, r5, pc}
 800cc7e:	2105      	movs	r1, #5
 800cc80:	f7ff f90c 	bl	800be9c <ull_force_clocks>
 800cc84:	2302      	movs	r3, #2
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	4917      	ldr	r1, [pc, #92]	; (800ccec <ull_setdwstate+0xb4>)
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7ff fda1 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cc96:	2201      	movs	r2, #1
 800cc98:	9200      	str	r2, [sp, #0]
 800cc9a:	23ff      	movs	r3, #255	; 0xff
 800cc9c:	4912      	ldr	r1, [pc, #72]	; (800cce8 <ull_setdwstate+0xb0>)
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7ff ff0c 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cca4:	e7e9      	b.n	800cc7a <ull_setdwstate+0x42>
 800cca6:	2303      	movs	r3, #3
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	23ff      	movs	r3, #255	; 0xff
 800ccac:	2200      	movs	r2, #0
 800ccae:	490d      	ldr	r1, [pc, #52]	; (800cce4 <ull_setdwstate+0xac>)
 800ccb0:	f7ff ff04 	bl	800cabc <dwt_modify8bitoffsetreg>
 800ccb4:	4d0c      	ldr	r5, [pc, #48]	; (800cce8 <ull_setdwstate+0xb0>)
 800ccb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7ff fd87 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ccca:	2300      	movs	r3, #0
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	237f      	movs	r3, #127	; 0x7f
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f7ff fef1 	bl	800cabc <dwt_modify8bitoffsetreg>
 800ccda:	2105      	movs	r1, #5
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f7ff f8dd 	bl	800be9c <ull_force_clocks>
 800cce2:	e7ca      	b.n	800cc7a <ull_setdwstate+0x42>
 800cce4:	00110004 	.word	0x00110004
 800cce8:	00110008 	.word	0x00110008
 800ccec:	00090008 	.word	0x00090008

0800ccf0 <ull_configureframefilter>:
 800ccf0:	b530      	push	{r4, r5, lr}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	2902      	cmp	r1, #2
 800ccf8:	d00e      	beq.n	800cd18 <ull_configureframefilter+0x28>
 800ccfa:	2400      	movs	r4, #0
 800ccfc:	9400      	str	r4, [sp, #0]
 800ccfe:	23fe      	movs	r3, #254	; 0xfe
 800cd00:	4622      	mov	r2, r4
 800cd02:	2110      	movs	r1, #16
 800cd04:	f7ff feda 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cd08:	4623      	mov	r3, r4
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	2114      	movs	r1, #20
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f7ff f8b3 	bl	800be7a <dwt_write16bitoffsetreg>
 800cd14:	b003      	add	sp, #12
 800cd16:	bd30      	pop	{r4, r5, pc}
 800cd18:	4614      	mov	r4, r2
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	23ff      	movs	r3, #255	; 0xff
 800cd20:	2200      	movs	r2, #0
 800cd22:	2110      	movs	r1, #16
 800cd24:	f7ff feca 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cd28:	4623      	mov	r3, r4
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2114      	movs	r1, #20
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f7ff f8a3 	bl	800be7a <dwt_write16bitoffsetreg>
 800cd34:	e7ee      	b.n	800cd14 <ull_configureframefilter+0x24>
	...

0800cd38 <ull_run_pgfcal>:
 800cd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3c:	b082      	sub	sp, #8
 800cd3e:	4605      	mov	r5, r0
 800cd40:	4c29      	ldr	r4, [pc, #164]	; (800cde8 <ull_run_pgfcal+0xb0>)
 800cd42:	4b2a      	ldr	r3, [pc, #168]	; (800cdec <ull_run_pgfcal+0xb4>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	4621      	mov	r1, r4
 800cd48:	f7ff f8f4 	bl	800bf34 <dwt_write32bitoffsetreg>
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	23ff      	movs	r3, #255	; 0xff
 800cd52:	2200      	movs	r2, #0
 800cd54:	4621      	mov	r1, r4
 800cd56:	4628      	mov	r0, r5
 800cd58:	f7ff feb0 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cd5c:	2403      	movs	r4, #3
 800cd5e:	f04f 0814 	mov.w	r8, #20
 800cd62:	4f23      	ldr	r7, [pc, #140]	; (800cdf0 <ull_run_pgfcal+0xb8>)
 800cd64:	2600      	movs	r6, #0
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7f4 fb9f 	bl	80014aa <deca_usleep>
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4628      	mov	r0, r5
 800cd72:	f7fe fc92 	bl	800b69a <dwt_read8bitoffsetreg>
 800cd76:	2801      	cmp	r0, #1
 800cd78:	d034      	beq.n	800cde4 <ull_run_pgfcal+0xac>
 800cd7a:	1e63      	subs	r3, r4, #1
 800cd7c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800cd80:	d1f1      	bne.n	800cd66 <ull_run_pgfcal+0x2e>
 800cd82:	f06f 0402 	mvn.w	r4, #2
 800cd86:	4e18      	ldr	r6, [pc, #96]	; (800cde8 <ull_run_pgfcal+0xb0>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f7ff fa5e 	bl	800c250 <dwt_write8bitoffsetreg>
 800cd94:	2301      	movs	r3, #1
 800cd96:	2200      	movs	r2, #0
 800cd98:	4915      	ldr	r1, [pc, #84]	; (800cdf0 <ull_run_pgfcal+0xb8>)
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f7ff fa58 	bl	800c250 <dwt_write8bitoffsetreg>
 800cda0:	2301      	movs	r3, #1
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	23ff      	movs	r3, #255	; 0xff
 800cda6:	2202      	movs	r2, #2
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f7ff fe86 	bl	800cabc <dwt_modify8bitoffsetreg>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4910      	ldr	r1, [pc, #64]	; (800cdf4 <ull_run_pgfcal+0xbc>)
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f7fe fc48 	bl	800b64a <dwt_read32bitoffsetreg>
 800cdba:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cdbe:	4298      	cmp	r0, r3
 800cdc0:	bf08      	it	eq
 800cdc2:	f06f 0403 	mvneq.w	r4, #3
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	490b      	ldr	r1, [pc, #44]	; (800cdf8 <ull_run_pgfcal+0xc0>)
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f7fe fc3d 	bl	800b64a <dwt_read32bitoffsetreg>
 800cdd0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cdd4:	4298      	cmp	r0, r3
 800cdd6:	bf14      	ite	ne
 800cdd8:	4620      	movne	r0, r4
 800cdda:	f06f 0004 	mvneq.w	r0, #4
 800cdde:	b002      	add	sp, #8
 800cde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde4:	2400      	movs	r4, #0
 800cde6:	e7ce      	b.n	800cd86 <ull_run_pgfcal+0x4e>
 800cde8:	0004000c 	.word	0x0004000c
 800cdec:	00020001 	.word	0x00020001
 800cdf0:	00040020 	.word	0x00040020
 800cdf4:	00040014 	.word	0x00040014
 800cdf8:	0004001c 	.word	0x0004001c

0800cdfc <ull_setinterrupt>:
 800cdfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce00:	b083      	sub	sp, #12
 800ce02:	4605      	mov	r5, r0
 800ce04:	4688      	mov	r8, r1
 800ce06:	4617      	mov	r7, r2
 800ce08:	461c      	mov	r4, r3
 800ce0a:	f7f4 fb25 	bl	8001458 <decamutexon>
 800ce0e:	4606      	mov	r6, r0
 800ce10:	2c02      	cmp	r4, #2
 800ce12:	d019      	beq.n	800ce48 <ull_setinterrupt+0x4c>
 800ce14:	2c04      	cmp	r4, #4
 800ce16:	d017      	beq.n	800ce48 <ull_setinterrupt+0x4c>
 800ce18:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d03f      	beq.n	800cea0 <ull_setinterrupt+0xa4>
 800ce20:	f04f 0900 	mov.w	r9, #0
 800ce24:	f8cd 9000 	str.w	r9, [sp]
 800ce28:	ea6f 0308 	mvn.w	r3, r8
 800ce2c:	464a      	mov	r2, r9
 800ce2e:	213c      	movs	r1, #60	; 0x3c
 800ce30:	4628      	mov	r0, r5
 800ce32:	f7ff fcd1 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ce36:	f8cd 9000 	str.w	r9, [sp]
 800ce3a:	43fb      	mvns	r3, r7
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	2140      	movs	r1, #64	; 0x40
 800ce40:	4628      	mov	r0, r5
 800ce42:	f7ff fcc9 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ce46:	e00b      	b.n	800ce60 <ull_setinterrupt+0x64>
 800ce48:	4643      	mov	r3, r8
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	213c      	movs	r1, #60	; 0x3c
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f7ff f870 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ce54:	463b      	mov	r3, r7
 800ce56:	2200      	movs	r2, #0
 800ce58:	2140      	movs	r1, #64	; 0x40
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f7ff f86a 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ce60:	3c03      	subs	r4, #3
 800ce62:	b2e4      	uxtb	r4, r4
 800ce64:	2c01      	cmp	r4, #1
 800ce66:	d92d      	bls.n	800cec4 <ull_setinterrupt+0xc8>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	213c      	movs	r1, #60	; 0x3c
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	f7fe fbec 	bl	800b64a <dwt_read32bitoffsetreg>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2200      	movs	r2, #0
 800ce76:	2144      	movs	r1, #68	; 0x44
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f7ff f85b 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ce7e:	2200      	movs	r2, #0
 800ce80:	2140      	movs	r1, #64	; 0x40
 800ce82:	4628      	mov	r0, r5
 800ce84:	f7fe fbe1 	bl	800b64a <dwt_read32bitoffsetreg>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	2148      	movs	r1, #72	; 0x48
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f7ff f850 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7f4 faf0 	bl	800147a <decamutexoff>
 800ce9a:	b003      	add	sp, #12
 800ce9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea0:	f8cd 8000 	str.w	r8, [sp]
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295
 800cea8:	2200      	movs	r2, #0
 800ceaa:	213c      	movs	r1, #60	; 0x3c
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7ff fc93 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ceb2:	9700      	str	r7, [sp, #0]
 800ceb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb8:	2200      	movs	r2, #0
 800ceba:	2140      	movs	r1, #64	; 0x40
 800cebc:	4628      	mov	r0, r5
 800cebe:	f7ff fc8b 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cec2:	e7cd      	b.n	800ce60 <ull_setinterrupt+0x64>
 800cec4:	2110      	movs	r1, #16
 800cec6:	9100      	str	r1, [sp, #0]
 800cec8:	23ff      	movs	r3, #255	; 0xff
 800ceca:	2202      	movs	r2, #2
 800cecc:	4628      	mov	r0, r5
 800cece:	f7ff fdf5 	bl	800cabc <dwt_modify8bitoffsetreg>
 800ced2:	e7c9      	b.n	800ce68 <ull_setinterrupt+0x6c>

0800ced4 <prs_ack_enable>:
 800ced4:	b500      	push	{lr}
 800ced6:	b083      	sub	sp, #12
 800ced8:	2900      	cmp	r1, #0
 800ceda:	bf0b      	itete	eq
 800cedc:	23ff      	moveq	r3, #255	; 0xff
 800cede:	23f7      	movne	r3, #247	; 0xf7
 800cee0:	2200      	moveq	r2, #0
 800cee2:	2208      	movne	r2, #8
 800cee4:	9200      	str	r2, [sp, #0]
 800cee6:	2201      	movs	r2, #1
 800cee8:	2110      	movs	r1, #16
 800ceea:	f7ff fde7 	bl	800cabc <dwt_modify8bitoffsetreg>
 800ceee:	b003      	add	sp, #12
 800cef0:	f85d fb04 	ldr.w	pc, [sp], #4

0800cef4 <dwt_modify16bitoffsetreg>:
 800cef4:	b510      	push	{r4, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800cefc:	f88d 300c 	strb.w	r3, [sp, #12]
 800cf00:	0a1b      	lsrs	r3, r3, #8
 800cf02:	f88d 300d 	strb.w	r3, [sp, #13]
 800cf06:	f88d 400e 	strb.w	r4, [sp, #14]
 800cf0a:	0a24      	lsrs	r4, r4, #8
 800cf0c:	f88d 400f 	strb.w	r4, [sp, #15]
 800cf10:	f248 0302 	movw	r3, #32770	; 0x8002
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	ab03      	add	r3, sp, #12
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	2304      	movs	r3, #4
 800cf1c:	b292      	uxth	r2, r2
 800cf1e:	f7fe fb0c 	bl	800b53a <dwt_xfer3xxx>
 800cf22:	b004      	add	sp, #16
 800cf24:	bd10      	pop	{r4, pc}
	...

0800cf28 <ull_setleds>:
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	f011 0f01 	tst.w	r1, #1
 800cf32:	d01f      	beq.n	800cf74 <ull_setleds+0x4c>
 800cf34:	460d      	mov	r5, r1
 800cf36:	f44f 7310 	mov.w	r3, #576	; 0x240
 800cf3a:	9300      	str	r3, [sp, #0]
 800cf3c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800cf40:	2200      	movs	r2, #0
 800cf42:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800cf46:	f7ff fc47 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cf4a:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	f04f 33ff 	mov.w	r3, #4294967295
 800cf54:	2200      	movs	r2, #0
 800cf56:	4918      	ldr	r1, [pc, #96]	; (800cfb8 <ull_setleds+0x90>)
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f7ff fc3d 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cf5e:	f015 0f02 	tst.w	r5, #2
 800cf62:	d11a      	bne.n	800cf9a <ull_setleds+0x72>
 800cf64:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4914      	ldr	r1, [pc, #80]	; (800cfbc <ull_setleds+0x94>)
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7fe ffe1 	bl	800bf34 <dwt_write32bitoffsetreg>
 800cf72:	e010      	b.n	800cf96 <ull_setleds+0x6e>
 800cf74:	2500      	movs	r5, #0
 800cf76:	9500      	str	r5, [sp, #0]
 800cf78:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800cf7c:	462a      	mov	r2, r5
 800cf7e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800cf82:	f7ff fc29 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800cf86:	9500      	str	r5, [sp, #0]
 800cf88:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800cf8c:	462a      	mov	r2, r5
 800cf8e:	490b      	ldr	r1, [pc, #44]	; (800cfbc <ull_setleds+0x94>)
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7ff ffaf 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800cf96:	b003      	add	sp, #12
 800cf98:	bd30      	pop	{r4, r5, pc}
 800cf9a:	4d08      	ldr	r5, [pc, #32]	; (800cfbc <ull_setleds+0x94>)
 800cf9c:	4b08      	ldr	r3, [pc, #32]	; (800cfc0 <ull_setleds+0x98>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f7fe ffc6 	bl	800bf34 <dwt_write32bitoffsetreg>
 800cfa8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cfac:	2200      	movs	r2, #0
 800cfae:	4629      	mov	r1, r5
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f7fe ffbf 	bl	800bf34 <dwt_write32bitoffsetreg>
 800cfb6:	e7ee      	b.n	800cf96 <ull_setleds+0x6e>
 800cfb8:	00110004 	.word	0x00110004
 800cfbc:	00110018 	.word	0x00110018
 800cfc0:	000f0110 	.word	0x000f0110

0800cfc4 <ull_pgf_cal>:
 800cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	4604      	mov	r4, r0
 800cfca:	2901      	cmp	r1, #1
 800cfcc:	d009      	beq.n	800cfe2 <ull_pgf_cal+0x1e>
 800cfce:	2014      	movs	r0, #20
 800cfd0:	f7f4 fa6b 	bl	80014aa <deca_usleep>
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f7ff feaf 	bl	800cd38 <ull_run_pgfcal>
 800cfda:	4605      	mov	r5, r0
 800cfdc:	4628      	mov	r0, r5
 800cfde:	b003      	add	sp, #12
 800cfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe2:	4e0f      	ldr	r6, [pc, #60]	; (800d020 <ull_pgf_cal+0x5c>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	f7fe fb45 	bl	800b676 <dwt_read16bitoffsetreg>
 800cfec:	4607      	mov	r7, r0
 800cfee:	f240 1307 	movw	r3, #263	; 0x107
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cff8:	2200      	movs	r2, #0
 800cffa:	4631      	mov	r1, r6
 800cffc:	4620      	mov	r0, r4
 800cffe:	f7ff ff79 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d002:	2014      	movs	r0, #20
 800d004:	f7f4 fa51 	bl	80014aa <deca_usleep>
 800d008:	4620      	mov	r0, r4
 800d00a:	f7ff fe95 	bl	800cd38 <ull_run_pgfcal>
 800d00e:	4605      	mov	r5, r0
 800d010:	2200      	movs	r2, #0
 800d012:	9200      	str	r2, [sp, #0]
 800d014:	463b      	mov	r3, r7
 800d016:	4631      	mov	r1, r6
 800d018:	4620      	mov	r0, r4
 800d01a:	f7ff ff6b 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d01e:	e7dd      	b.n	800cfdc <ull_pgf_cal+0x18>
 800d020:	00070048 	.word	0x00070048

0800d024 <ull_setgpiovalue>:
 800d024:	b500      	push	{lr}
 800d026:	b083      	sub	sp, #12
 800d028:	2a01      	cmp	r2, #1
 800d02a:	d009      	beq.n	800d040 <ull_setgpiovalue+0x1c>
 800d02c:	43cb      	mvns	r3, r1
 800d02e:	2200      	movs	r2, #0
 800d030:	9200      	str	r2, [sp, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	4906      	ldr	r1, [pc, #24]	; (800d050 <ull_setgpiovalue+0x2c>)
 800d036:	f7ff ff5d 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d03a:	b003      	add	sp, #12
 800d03c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d040:	9100      	str	r1, [sp, #0]
 800d042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d046:	2200      	movs	r2, #0
 800d048:	4901      	ldr	r1, [pc, #4]	; (800d050 <ull_setgpiovalue+0x2c>)
 800d04a:	f7ff ff53 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d04e:	e7f4      	b.n	800d03a <ull_setgpiovalue+0x16>
 800d050:	0005000c 	.word	0x0005000c

0800d054 <ull_readaccdata>:
 800d054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d056:	b083      	sub	sp, #12
 800d058:	4604      	mov	r4, r0
 800d05a:	460f      	mov	r7, r1
 800d05c:	4616      	mov	r6, r2
 800d05e:	461d      	mov	r5, r3
 800d060:	f248 0340 	movw	r3, #32832	; 0x8040
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d06a:	2200      	movs	r2, #0
 800d06c:	4918      	ldr	r1, [pc, #96]	; (800d0d0 <ull_readaccdata+0x7c>)
 800d06e:	f7ff ff41 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d072:	19aa      	adds	r2, r5, r6
 800d074:	f243 0301 	movw	r3, #12289	; 0x3001
 800d078:	429a      	cmp	r2, r3
 800d07a:	dc15      	bgt.n	800d0a8 <ull_readaccdata+0x54>
 800d07c:	2d7f      	cmp	r5, #127	; 0x7f
 800d07e:	d91d      	bls.n	800d0bc <ull_readaccdata+0x68>
 800d080:	2315      	movs	r3, #21
 800d082:	2200      	movs	r2, #0
 800d084:	4913      	ldr	r1, [pc, #76]	; (800d0d4 <ull_readaccdata+0x80>)
 800d086:	4620      	mov	r0, r4
 800d088:	f7fe ff54 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d08c:	462b      	mov	r3, r5
 800d08e:	2200      	movs	r2, #0
 800d090:	4911      	ldr	r1, [pc, #68]	; (800d0d8 <ull_readaccdata+0x84>)
 800d092:	4620      	mov	r0, r4
 800d094:	f7fe ff4e 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d098:	9700      	str	r7, [sp, #0]
 800d09a:	4633      	mov	r3, r6
 800d09c:	2200      	movs	r2, #0
 800d09e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7fe fac7 	bl	800b636 <dwt_readfromdevice>
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	9200      	str	r2, [sp, #0]
 800d0ac:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800d0b0:	4907      	ldr	r1, [pc, #28]	; (800d0d0 <ull_readaccdata+0x7c>)
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f7ff ff1e 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d0b8:	b003      	add	sp, #12
 800d0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0bc:	9700      	str	r7, [sp, #0]
 800d0be:	4633      	mov	r3, r6
 800d0c0:	462a      	mov	r2, r5
 800d0c2:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f7fe fab5 	bl	800b636 <dwt_readfromdevice>
 800d0cc:	e7ec      	b.n	800d0a8 <ull_readaccdata+0x54>
 800d0ce:	bf00      	nop
 800d0d0:	00110004 	.word	0x00110004
 800d0d4:	001f0004 	.word	0x001f0004
 800d0d8:	001f0008 	.word	0x001f0008

0800d0dc <ull_repeated_cw>:
 800d0dc:	b570      	push	{r4, r5, r6, lr}
 800d0de:	4606      	mov	r6, r0
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	4615      	mov	r5, r2
 800d0e4:	4b0e      	ldr	r3, [pc, #56]	; (800d120 <ull_repeated_cw+0x44>)
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	490e      	ldr	r1, [pc, #56]	; (800d124 <ull_repeated_cw+0x48>)
 800d0ea:	f7fe ff23 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d0ee:	2d0f      	cmp	r5, #15
 800d0f0:	bfa8      	it	ge
 800d0f2:	250f      	movge	r5, #15
 800d0f4:	1e63      	subs	r3, r4, #1
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	bf28      	it	cs
 800d0fa:	2404      	movcs	r4, #4
 800d0fc:	2310      	movs	r3, #16
 800d0fe:	4123      	asrs	r3, r4
 800d100:	2200      	movs	r2, #0
 800d102:	4909      	ldr	r1, [pc, #36]	; (800d128 <ull_repeated_cw+0x4c>)
 800d104:	4630      	mov	r0, r6
 800d106:	f7fe ff15 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d10a:	1e63      	subs	r3, r4, #1
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	fa05 f303 	lsl.w	r3, r5, r3
 800d112:	2200      	movs	r2, #0
 800d114:	4905      	ldr	r1, [pc, #20]	; (800d12c <ull_repeated_cw+0x50>)
 800d116:	4630      	mov	r0, r6
 800d118:	f7fe ff0c 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	bf00      	nop
 800d120:	00d20874 	.word	0x00d20874
 800d124:	00110010 	.word	0x00110010
 800d128:	00070028 	.word	0x00070028
 800d12c:	00080018 	.word	0x00080018

0800d130 <ull_configure>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	b083      	sub	sp, #12
 800d136:	4604      	mov	r4, r0
 800d138:	460d      	mov	r5, r1
 800d13a:	f891 9000 	ldrb.w	r9, [r1]
 800d13e:	790b      	ldrb	r3, [r1, #4]
 800d140:	2b18      	cmp	r3, #24
 800d142:	d814      	bhi.n	800d16e <ull_configure+0x3e>
 800d144:	78cf      	ldrb	r7, [r1, #3]
 800d146:	2f18      	cmp	r7, #24
 800d148:	bf94      	ite	ls
 800d14a:	2700      	movls	r7, #0
 800d14c:	2701      	movhi	r7, #1
 800d14e:	b2ff      	uxtb	r7, r7
 800d150:	79eb      	ldrb	r3, [r5, #7]
 800d152:	2b01      	cmp	r3, #1
 800d154:	bf0c      	ite	eq
 800d156:	2110      	moveq	r1, #16
 800d158:	2100      	movne	r1, #0
 800d15a:	786b      	ldrb	r3, [r5, #1]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	2b06      	cmp	r3, #6
 800d160:	d810      	bhi.n	800d184 <ull_configure+0x54>
 800d162:	e8df f003 	tbb	[pc, r3]
 800d166:	0f06      	.short	0x0f06
 800d168:	0f0c120f 	.word	0x0f0c120f
 800d16c:	09          	.byte	0x09
 800d16d:	00          	.byte	0x00
 800d16e:	2701      	movs	r7, #1
 800d170:	e7ed      	b.n	800d14e <ull_configure+0x1e>
 800d172:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800d176:	e00a      	b.n	800d18e <ull_configure+0x5e>
 800d178:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800d17c:	e007      	b.n	800d18e <ull_configure+0x5e>
 800d17e:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800d182:	e004      	b.n	800d18e <ull_configure+0x5e>
 800d184:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800d188:	e001      	b.n	800d18e <ull_configure+0x5e>
 800d18a:	f04f 0a20 	mov.w	sl, #32
 800d18e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d190:	8a13      	ldrh	r3, [r2, #16]
 800d192:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800d196:	8213      	strh	r3, [r2, #16]
 800d198:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d19a:	79ea      	ldrb	r2, [r5, #7]
 800d19c:	72da      	strb	r2, [r3, #11]
 800d19e:	7b2e      	ldrb	r6, [r5, #12]
 800d1a0:	1cb3      	adds	r3, r6, #2
 800d1a2:	2601      	movs	r6, #1
 800d1a4:	409e      	lsls	r6, r3
 800d1a6:	fa1f f886 	uxth.w	r8, r6
 800d1aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d1ac:	4bca      	ldr	r3, [pc, #808]	; (800d4d8 <ull_configure+0x3a8>)
 800d1ae:	fb03 f308 	mul.w	r3, r3, r8
 800d1b2:	0bdb      	lsrs	r3, r3, #15
 800d1b4:	8253      	strh	r3, [r2, #18]
 800d1b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d1b8:	7aea      	ldrb	r2, [r5, #11]
 800d1ba:	755a      	strb	r2, [r3, #21]
 800d1bc:	7a2b      	ldrb	r3, [r5, #8]
 800d1be:	015b      	lsls	r3, r3, #5
 800d1c0:	f003 0320 	and.w	r3, r3, #32
 800d1c4:	7b6a      	ldrb	r2, [r5, #13]
 800d1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ca:	7aea      	ldrb	r2, [r5, #11]
 800d1cc:	0312      	lsls	r2, r2, #12
 800d1ce:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	4bc0      	ldr	r3, [pc, #768]	; (800d4dc <ull_configure+0x3ac>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	2110      	movs	r1, #16
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f7ff fafa 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800d1e4:	2f00      	cmp	r7, #0
 800d1e6:	f040 80fc 	bne.w	800d3e2 <ull_configure+0x2b2>
 800d1ea:	7aeb      	ldrb	r3, [r5, #11]
 800d1ec:	b1f3      	cbz	r3, 800d22c <ull_configure+0xfc>
 800d1ee:	7b6b      	ldrb	r3, [r5, #13]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	f240 8121 	bls.w	800d438 <ull_configure+0x308>
 800d1f6:	7b2a      	ldrb	r2, [r5, #12]
 800d1f8:	4bb9      	ldr	r3, [pc, #740]	; (800d4e0 <ull_configure+0x3b0>)
 800d1fa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d1fe:	0112      	lsls	r2, r2, #4
 800d200:	0ad3      	lsrs	r3, r2, #11
 800d202:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800d206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d20a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d20e:	bf28      	it	cs
 800d210:	3301      	addcs	r3, #1
 800d212:	b29b      	uxth	r3, r3
 800d214:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800d218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	f64f 7380 	movw	r3, #65408	; 0xff80
 800d222:	2202      	movs	r2, #2
 800d224:	49af      	ldr	r1, [pc, #700]	; (800d4e4 <ull_configure+0x3b4>)
 800d226:	4620      	mov	r0, r4
 800d228:	f7ff fe64 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d22c:	2394      	movs	r3, #148	; 0x94
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4bad      	ldr	r3, [pc, #692]	; (800d4e8 <ull_configure+0x3b8>)
 800d232:	2200      	movs	r2, #0
 800d234:	49ad      	ldr	r1, [pc, #692]	; (800d4ec <ull_configure+0x3bc>)
 800d236:	4620      	mov	r0, r4
 800d238:	f7ff face 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800d23c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d240:	f340 810d 	ble.w	800d45e <ull_configure+0x32e>
 800d244:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d246:	8a13      	ldrh	r3, [r2, #16]
 800d248:	f043 0320 	orr.w	r3, r3, #32
 800d24c:	8213      	strh	r3, [r2, #16]
 800d24e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800d258:	2200      	movs	r2, #0
 800d25a:	49a5      	ldr	r1, [pc, #660]	; (800d4f0 <ull_configure+0x3c0>)
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7ff fe49 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d262:	7b6b      	ldrb	r3, [r5, #13]
 800d264:	2b01      	cmp	r3, #1
 800d266:	f000 8105 	beq.w	800d474 <ull_configure+0x344>
 800d26a:	78ab      	ldrb	r3, [r5, #2]
 800d26c:	f043 0310 	orr.w	r3, r3, #16
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	23fc      	movs	r3, #252	; 0xfc
 800d274:	2200      	movs	r2, #0
 800d276:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800d27a:	4620      	mov	r0, r4
 800d27c:	f7ff fc1e 	bl	800cabc <dwt_modify8bitoffsetreg>
 800d280:	1e73      	subs	r3, r6, #1
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2200      	movs	r2, #0
 800d286:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d28a:	4620      	mov	r0, r4
 800d28c:	f7fe ffe0 	bl	800c250 <dwt_write8bitoffsetreg>
 800d290:	786b      	ldrb	r3, [r5, #1]
 800d292:	2b07      	cmp	r3, #7
 800d294:	bf0c      	ite	eq
 800d296:	2308      	moveq	r3, #8
 800d298:	2300      	movne	r3, #0
 800d29a:	2201      	movs	r2, #1
 800d29c:	2124      	movs	r1, #36	; 0x24
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f7fe ffd6 	bl	800c250 <dwt_write8bitoffsetreg>
 800d2a4:	7aeb      	ldrb	r3, [r5, #11]
 800d2a6:	f003 0303 	and.w	r3, r3, #3
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	bf0c      	ite	eq
 800d2ae:	4b91      	ldreq	r3, [pc, #580]	; (800d4f4 <ull_configure+0x3c4>)
 800d2b0:	4b91      	ldrne	r3, [pc, #580]	; (800d4f8 <ull_configure+0x3c8>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	4991      	ldr	r1, [pc, #580]	; (800d4fc <ull_configure+0x3cc>)
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f7fe fe3c 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4990      	ldr	r1, [pc, #576]	; (800d500 <ull_configure+0x3d0>)
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f7fe f9c2 	bl	800b64a <dwt_read32bitoffsetreg>
 800d2c6:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800d2ca:	f020 001f 	bic.w	r0, r0, #31
 800d2ce:	f1b9 0f09 	cmp.w	r9, #9
 800d2d2:	bf08      	it	eq
 800d2d4:	f040 0001 	orreq.w	r0, r0, #1
 800d2d8:	792a      	ldrb	r2, [r5, #4]
 800d2da:	0212      	lsls	r2, r2, #8
 800d2dc:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800d2e0:	78eb      	ldrb	r3, [r5, #3]
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	796b      	ldrb	r3, [r5, #5]
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	f003 0306 	and.w	r3, r3, #6
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	4303      	orrs	r3, r0
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4982      	ldr	r1, [pc, #520]	; (800d500 <ull_configure+0x3d0>)
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f7fe fe1b 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d2fe:	79aa      	ldrb	r2, [r5, #6]
 800d300:	786b      	ldrb	r3, [r5, #1]
 800d302:	031b      	lsls	r3, r3, #12
 800d304:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800d30e:	2200      	movs	r2, #0
 800d310:	2120      	movs	r1, #32
 800d312:	4620      	mov	r0, r4
 800d314:	f7ff fa60 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800d318:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800d31c:	b923      	cbnz	r3, 800d328 <ull_configure+0x1f8>
 800d31e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800d322:	726b      	strb	r3, [r5, #9]
 800d324:	2300      	movs	r3, #0
 800d326:	72ab      	strb	r3, [r5, #10]
 800d328:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800d32c:	2202      	movs	r2, #2
 800d32e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800d332:	4620      	mov	r0, r4
 800d334:	f7fe fda1 	bl	800be7a <dwt_write16bitoffsetreg>
 800d338:	2202      	movs	r2, #2
 800d33a:	4972      	ldr	r1, [pc, #456]	; (800d504 <ull_configure+0x3d4>)
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7fe f9ac 	bl	800b69a <dwt_read8bitoffsetreg>
 800d342:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d344:	7bdb      	ldrb	r3, [r3, #15]
 800d346:	454b      	cmp	r3, r9
 800d348:	f000 809e 	beq.w	800d488 <ull_configure+0x358>
 800d34c:	2803      	cmp	r0, #3
 800d34e:	f000 809f 	beq.w	800d490 <ull_configure+0x360>
 800d352:	f1b9 0f09 	cmp.w	r9, #9
 800d356:	f000 80a0 	beq.w	800d49a <ull_configure+0x36a>
 800d35a:	4b6b      	ldr	r3, [pc, #428]	; (800d508 <ull_configure+0x3d8>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	496b      	ldr	r1, [pc, #428]	; (800d50c <ull_configure+0x3dc>)
 800d360:	4620      	mov	r0, r4
 800d362:	f7fe fde7 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d366:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800d36a:	2200      	movs	r2, #0
 800d36c:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800d370:	4620      	mov	r0, r4
 800d372:	f7fe fd82 	bl	800be7a <dwt_write16bitoffsetreg>
 800d376:	2314      	movs	r3, #20
 800d378:	2201      	movs	r2, #1
 800d37a:	4965      	ldr	r1, [pc, #404]	; (800d510 <ull_configure+0x3e0>)
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7fe ff67 	bl	800c250 <dwt_write8bitoffsetreg>
 800d382:	230e      	movs	r3, #14
 800d384:	2202      	movs	r2, #2
 800d386:	4963      	ldr	r1, [pc, #396]	; (800d514 <ull_configure+0x3e4>)
 800d388:	4620      	mov	r0, r4
 800d38a:	f7fe ff61 	bl	800c250 <dwt_write8bitoffsetreg>
 800d38e:	2381      	movs	r3, #129	; 0x81
 800d390:	2200      	movs	r2, #0
 800d392:	4961      	ldr	r1, [pc, #388]	; (800d518 <ull_configure+0x3e8>)
 800d394:	4620      	mov	r0, r4
 800d396:	f7fe ff5b 	bl	800c250 <dwt_write8bitoffsetreg>
 800d39a:	2302      	movs	r3, #2
 800d39c:	2200      	movs	r2, #0
 800d39e:	2144      	movs	r1, #68	; 0x44
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f7fe ff55 	bl	800c250 <dwt_write8bitoffsetreg>
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f7ff fc45 	bl	800cc38 <ull_setdwstate>
 800d3ae:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800d3b2:	f04f 0814 	mov.w	r8, #20
 800d3b6:	2700      	movs	r7, #0
 800d3b8:	2644      	movs	r6, #68	; 0x44
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	f7f4 f875 	bl	80014aa <deca_usleep>
 800d3c0:	463a      	mov	r2, r7
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f7fe f968 	bl	800b69a <dwt_read8bitoffsetreg>
 800d3ca:	f010 0f02 	tst.w	r0, #2
 800d3ce:	f040 80b5 	bne.w	800d53c <ull_configure+0x40c>
 800d3d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d3d6:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800d3da:	d1ee      	bne.n	800d3ba <ull_configure+0x28a>
 800d3dc:	f06f 0001 	mvn.w	r0, #1
 800d3e0:	e0de      	b.n	800d5a0 <ull_configure+0x470>
 800d3e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d3e4:	8a13      	ldrh	r3, [r2, #16]
 800d3e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d3ea:	8213      	strh	r3, [r2, #16]
 800d3ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	493d      	ldr	r1, [pc, #244]	; (800d4f0 <ull_configure+0x3c0>)
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f7ff f9ec 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800d400:	f240 3306 	movw	r3, #774	; 0x306
 800d404:	2200      	movs	r2, #0
 800d406:	4945      	ldr	r1, [pc, #276]	; (800d51c <ull_configure+0x3ec>)
 800d408:	4620      	mov	r0, r4
 800d40a:	f7fe fd93 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d40e:	2300      	movs	r3, #0
 800d410:	461a      	mov	r2, r3
 800d412:	4943      	ldr	r1, [pc, #268]	; (800d520 <ull_configure+0x3f0>)
 800d414:	4620      	mov	r0, r4
 800d416:	f7fe fd8d 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d41a:	4b42      	ldr	r3, [pc, #264]	; (800d524 <ull_configure+0x3f4>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	4931      	ldr	r1, [pc, #196]	; (800d4e4 <ull_configure+0x3b4>)
 800d420:	4620      	mov	r0, r4
 800d422:	f7fe fd87 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d426:	239d      	movs	r3, #157	; 0x9d
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	4b2f      	ldr	r3, [pc, #188]	; (800d4e8 <ull_configure+0x3b8>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	492f      	ldr	r1, [pc, #188]	; (800d4ec <ull_configure+0x3bc>)
 800d430:	4620      	mov	r0, r4
 800d432:	f7ff f9d1 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800d436:	e714      	b.n	800d262 <ull_configure+0x132>
 800d438:	7b2a      	ldrb	r2, [r5, #12]
 800d43a:	4b29      	ldr	r3, [pc, #164]	; (800d4e0 <ull_configure+0x3b0>)
 800d43c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d440:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800d444:	fb02 f203 	mul.w	r2, r2, r3
 800d448:	0c93      	lsrs	r3, r2, #18
 800d44a:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800d44e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d452:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d456:	bf28      	it	cs
 800d458:	3301      	addcs	r3, #1
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	e6da      	b.n	800d214 <ull_configure+0xe4>
 800d45e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800d468:	2200      	movs	r2, #0
 800d46a:	4921      	ldr	r1, [pc, #132]	; (800d4f0 <ull_configure+0x3c0>)
 800d46c:	4620      	mov	r0, r4
 800d46e:	f7ff fd41 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d472:	e6f6      	b.n	800d262 <ull_configure+0x132>
 800d474:	78ab      	ldrb	r3, [r5, #2]
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	23ec      	movs	r3, #236	; 0xec
 800d47a:	2200      	movs	r2, #0
 800d47c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800d480:	4620      	mov	r0, r4
 800d482:	f7ff fb1b 	bl	800cabc <dwt_modify8bitoffsetreg>
 800d486:	e6fb      	b.n	800d280 <ull_configure+0x150>
 800d488:	2803      	cmp	r0, #3
 800d48a:	f47f af62 	bne.w	800d352 <ull_configure+0x222>
 800d48e:	e058      	b.n	800d542 <ull_configure+0x412>
 800d490:	2102      	movs	r1, #2
 800d492:	4620      	mov	r0, r4
 800d494:	f7ff fbd0 	bl	800cc38 <ull_setdwstate>
 800d498:	e75b      	b.n	800d352 <ull_configure+0x222>
 800d49a:	4b23      	ldr	r3, [pc, #140]	; (800d528 <ull_configure+0x3f8>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	491b      	ldr	r1, [pc, #108]	; (800d50c <ull_configure+0x3dc>)
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f7fe fd47 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d4a6:	f640 733c 	movw	r3, #3900	; 0xf3c
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7fe fce2 	bl	800be7a <dwt_write16bitoffsetreg>
 800d4b6:	e75e      	b.n	800d376 <ull_configure+0x246>
 800d4b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	490a      	ldr	r1, [pc, #40]	; (800d4f0 <ull_configure+0x3c0>)
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f7ff fd14 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d4cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d4ce:	8a13      	ldrh	r3, [r2, #16]
 800d4d0:	f043 0308 	orr.w	r3, r3, #8
 800d4d4:	8213      	strh	r3, [r2, #16]
 800d4d6:	e046      	b.n	800d566 <ull_configure+0x436>
 800d4d8:	00026668 	.word	0x00026668
 800d4dc:	fffc4fcf 	.word	0xfffc4fcf
 800d4e0:	08019ab8 	.word	0x08019ab8
 800d4e4:	000e0014 	.word	0x000e0014
 800d4e8:	bfffff00 	.word	0xbfffff00
 800d4ec:	000e0018 	.word	0x000e0018
 800d4f0:	000b0008 	.word	0x000b0008
 800d4f4:	af5f35cc 	.word	0xaf5f35cc
 800d4f8:	af5f584c 	.word	0xaf5f584c
 800d4fc:	0006000c 	.word	0x0006000c
 800d500:	00010008 	.word	0x00010008
 800d504:	000f0030 	.word	0x000f0030
 800d508:	1c071134 	.word	0x1c071134
 800d50c:	0007001c 	.word	0x0007001c
 800d510:	00070050 	.word	0x00070050
 800d514:	00070018 	.word	0x00070018
 800d518:	00090008 	.word	0x00090008
 800d51c:	000e000c 	.word	0x000e000c
 800d520:	000e0010 	.word	0x000e0010
 800d524:	000c5a0a 	.word	0x000c5a0a
 800d528:	1c010034 	.word	0x1c010034
 800d52c:	2200      	movs	r2, #0
 800d52e:	9200      	str	r2, [sp, #0]
 800d530:	23fe      	movs	r3, #254	; 0xfe
 800d532:	491d      	ldr	r1, [pc, #116]	; (800d5a8 <ull_configure+0x478>)
 800d534:	4620      	mov	r0, r4
 800d536:	f7ff fac1 	bl	800cabc <dwt_modify8bitoffsetreg>
 800d53a:	e01e      	b.n	800d57a <ull_configure+0x44a>
 800d53c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d53e:	f883 900f 	strb.w	r9, [r3, #15]
 800d542:	792b      	ldrb	r3, [r5, #4]
 800d544:	3b09      	subs	r3, #9
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b0f      	cmp	r3, #15
 800d54a:	d8ef      	bhi.n	800d52c <ull_configure+0x3fc>
 800d54c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d54e:	7a1b      	ldrb	r3, [r3, #8]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d0b1      	beq.n	800d4b8 <ull_configure+0x388>
 800d554:	4649      	mov	r1, r9
 800d556:	4620      	mov	r0, r4
 800d558:	f7fe fda4 	bl	800c0a4 <ull_configmrxlut>
 800d55c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d55e:	8a13      	ldrh	r3, [r2, #16]
 800d560:	f023 0308 	bic.w	r3, r3, #8
 800d564:	8213      	strh	r3, [r2, #16]
 800d566:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800d570:	2200      	movs	r2, #0
 800d572:	490d      	ldr	r1, [pc, #52]	; (800d5a8 <ull_configure+0x478>)
 800d574:	4620      	mov	r0, r4
 800d576:	f7ff fcbd 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d57a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800d57e:	bfcc      	ite	gt
 800d580:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800d584:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800d58e:	2200      	movs	r2, #0
 800d590:	4906      	ldr	r1, [pc, #24]	; (800d5ac <ull_configure+0x47c>)
 800d592:	4620      	mov	r0, r4
 800d594:	f7ff f920 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800d598:	2101      	movs	r1, #1
 800d59a:	4620      	mov	r0, r4
 800d59c:	f7ff fd12 	bl	800cfc4 <ull_pgf_cal>
 800d5a0:	b003      	add	sp, #12
 800d5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a6:	bf00      	nop
 800d5a8:	00030018 	.word	0x00030018
 800d5ac:	00060010 	.word	0x00060010

0800d5b0 <ull_initialise>:
 800d5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	460e      	mov	r6, r1
 800d5b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d051      	beq.n	800d662 <ull_initialise+0xb2>
 800d5be:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73a3      	strb	r3, [r4, #14]
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	8222      	strh	r2, [r4, #16]
 800d5c8:	7523      	strb	r3, [r4, #20]
 800d5ca:	7563      	strb	r3, [r4, #21]
 800d5cc:	73e3      	strb	r3, [r4, #15]
 800d5ce:	7263      	strb	r3, [r4, #9]
 800d5d0:	72a3      	strb	r3, [r4, #10]
 800d5d2:	2104      	movs	r1, #4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f7fe fc8b 	bl	800bef0 <_dwt_otpread>
 800d5da:	4607      	mov	r7, r0
 800d5dc:	2105      	movs	r1, #5
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f7fe fc86 	bl	800bef0 <_dwt_otpread>
 800d5e4:	b10f      	cbz	r7, 800d5ea <ull_initialise+0x3a>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d140      	bne.n	800d66c <ull_initialise+0xbc>
 800d5ea:	2120      	movs	r1, #32
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f7fe fc7f 	bl	800bef0 <_dwt_otpread>
 800d5f2:	4b35      	ldr	r3, [pc, #212]	; (800d6c8 <ull_initialise+0x118>)
 800d5f4:	4298      	cmp	r0, r3
 800d5f6:	bf0c      	ite	eq
 800d5f8:	2301      	moveq	r3, #1
 800d5fa:	2300      	movne	r3, #0
 800d5fc:	7223      	strb	r3, [r4, #8]
 800d5fe:	f016 0f10 	tst.w	r6, #16
 800d602:	d142      	bne.n	800d68a <ull_initialise+0xda>
 800d604:	f016 0f20 	tst.w	r6, #32
 800d608:	d145      	bne.n	800d696 <ull_initialise+0xe6>
 800d60a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800d60e:	d148      	bne.n	800d6a2 <ull_initialise+0xf2>
 800d610:	f016 0f80 	tst.w	r6, #128	; 0x80
 800d614:	d14c      	bne.n	800d6b0 <ull_initialise+0x100>
 800d616:	7aa3      	ldrb	r3, [r4, #10]
 800d618:	b90b      	cbnz	r3, 800d61e <ull_initialise+0x6e>
 800d61a:	2385      	movs	r3, #133	; 0x85
 800d61c:	72a3      	strb	r3, [r4, #10]
 800d61e:	7a63      	ldrb	r3, [r4, #9]
 800d620:	b90b      	cbnz	r3, 800d626 <ull_initialise+0x76>
 800d622:	2374      	movs	r3, #116	; 0x74
 800d624:	7263      	strb	r3, [r4, #9]
 800d626:	211f      	movs	r1, #31
 800d628:	4628      	mov	r0, r5
 800d62a:	f7fe fc61 	bl	800bef0 <_dwt_otpread>
 800d62e:	7320      	strb	r0, [r4, #12]
 800d630:	211e      	movs	r1, #30
 800d632:	4628      	mov	r0, r5
 800d634:	f7fe fc5c 	bl	800bef0 <_dwt_otpread>
 800d638:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800d63c:	bf12      	itee	ne
 800d63e:	7360      	strbne	r0, [r4, #13]
 800d640:	232e      	moveq	r3, #46	; 0x2e
 800d642:	7363      	strbeq	r3, [r4, #13]
 800d644:	7b63      	ldrb	r3, [r4, #13]
 800d646:	2200      	movs	r2, #0
 800d648:	4920      	ldr	r1, [pc, #128]	; (800d6cc <ull_initialise+0x11c>)
 800d64a:	4628      	mov	r0, r5
 800d64c:	f7fe fe00 	bl	800c250 <dwt_write8bitoffsetreg>
 800d650:	2135      	movs	r1, #53	; 0x35
 800d652:	4628      	mov	r0, r5
 800d654:	f7fe fc4c 	bl	800bef0 <_dwt_otpread>
 800d658:	4603      	mov	r3, r0
 800d65a:	bb78      	cbnz	r0, 800d6bc <ull_initialise+0x10c>
 800d65c:	2000      	movs	r0, #0
 800d65e:	b003      	add	sp, #12
 800d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d662:	2028      	movs	r0, #40	; 0x28
 800d664:	f006 ff54 	bl	8014510 <malloc>
 800d668:	6528      	str	r0, [r5, #80]	; 0x50
 800d66a:	e7a8      	b.n	800d5be <ull_initialise+0xe>
 800d66c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d676:	2200      	movs	r2, #0
 800d678:	4915      	ldr	r1, [pc, #84]	; (800d6d0 <ull_initialise+0x120>)
 800d67a:	4628      	mov	r0, r5
 800d67c:	f7ff fc3a 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800d680:	8a23      	ldrh	r3, [r4, #16]
 800d682:	f043 0310 	orr.w	r3, r3, #16
 800d686:	8223      	strh	r3, [r4, #16]
 800d688:	e7af      	b.n	800d5ea <ull_initialise+0x3a>
 800d68a:	2106      	movs	r1, #6
 800d68c:	4628      	mov	r0, r5
 800d68e:	f7fe fc2f 	bl	800bef0 <_dwt_otpread>
 800d692:	6020      	str	r0, [r4, #0]
 800d694:	e7b6      	b.n	800d604 <ull_initialise+0x54>
 800d696:	2107      	movs	r1, #7
 800d698:	4628      	mov	r0, r5
 800d69a:	f7fe fc29 	bl	800bef0 <_dwt_otpread>
 800d69e:	6060      	str	r0, [r4, #4]
 800d6a0:	e7b3      	b.n	800d60a <ull_initialise+0x5a>
 800d6a2:	2108      	movs	r1, #8
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	f7fe fc23 	bl	800bef0 <_dwt_otpread>
 800d6aa:	0c00      	lsrs	r0, r0, #16
 800d6ac:	7260      	strb	r0, [r4, #9]
 800d6ae:	e7af      	b.n	800d610 <ull_initialise+0x60>
 800d6b0:	2109      	movs	r1, #9
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f7fe fc1c 	bl	800bef0 <_dwt_otpread>
 800d6b8:	72a0      	strb	r0, [r4, #10]
 800d6ba:	e7ac      	b.n	800d616 <ull_initialise+0x66>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	4905      	ldr	r1, [pc, #20]	; (800d6d4 <ull_initialise+0x124>)
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f7fe fc37 	bl	800bf34 <dwt_write32bitoffsetreg>
 800d6c6:	e7c9      	b.n	800d65c <ull_initialise+0xac>
 800d6c8:	10000240 	.word	0x10000240
 800d6cc:	00090014 	.word	0x00090014
 800d6d0:	000b0008 	.word	0x000b0008
 800d6d4:	00090004 	.word	0x00090004

0800d6d8 <ull_rxenable>:
 800d6d8:	b530      	push	{r4, r5, lr}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	4605      	mov	r5, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	b171      	cbz	r1, 800d700 <ull_rxenable+0x28>
 800d6e2:	f021 0302 	bic.w	r3, r1, #2
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	2b0f      	cmp	r3, #15
 800d6ea:	d862      	bhi.n	800d7b2 <ull_rxenable+0xda>
 800d6ec:	e8df f003 	tbb	[pc, r3]
 800d6f0:	24616111 	.word	0x24616111
 800d6f4:	2d616161 	.word	0x2d616161
 800d6f8:	61616161 	.word	0x61616161
 800d6fc:	3a616161 	.word	0x3a616161
 800d700:	2102      	movs	r1, #2
 800d702:	9101      	str	r1, [sp, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	9200      	str	r2, [sp, #0]
 800d708:	4613      	mov	r3, r2
 800d70a:	f7fd ff16 	bl	800b53a <dwt_xfer3xxx>
 800d70e:	4620      	mov	r0, r4
 800d710:	e010      	b.n	800d734 <ull_rxenable+0x5c>
 800d712:	2302      	movs	r3, #2
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	9200      	str	r2, [sp, #0]
 800d71a:	4613      	mov	r3, r2
 800d71c:	2104      	movs	r1, #4
 800d71e:	f7fd ff0c 	bl	800b53a <dwt_xfer3xxx>
 800d722:	2203      	movs	r2, #3
 800d724:	2144      	movs	r1, #68	; 0x44
 800d726:	4628      	mov	r0, r5
 800d728:	f7fd ffb7 	bl	800b69a <dwt_read8bitoffsetreg>
 800d72c:	f010 0f08 	tst.w	r0, #8
 800d730:	d125      	bne.n	800d77e <ull_rxenable+0xa6>
 800d732:	2000      	movs	r0, #0
 800d734:	b003      	add	sp, #12
 800d736:	bd30      	pop	{r4, r5, pc}
 800d738:	2302      	movs	r3, #2
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	9200      	str	r2, [sp, #0]
 800d740:	4613      	mov	r3, r2
 800d742:	210a      	movs	r1, #10
 800d744:	f7fd fef9 	bl	800b53a <dwt_xfer3xxx>
 800d748:	e7eb      	b.n	800d722 <ull_rxenable+0x4a>
 800d74a:	2100      	movs	r1, #0
 800d74c:	f7fe fc07 	bl	800bf5e <_dwt_adjust_delaytime>
 800d750:	2302      	movs	r3, #2
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	9200      	str	r2, [sp, #0]
 800d758:	4613      	mov	r3, r2
 800d75a:	2108      	movs	r1, #8
 800d75c:	4628      	mov	r0, r5
 800d75e:	f7fd feec 	bl	800b53a <dwt_xfer3xxx>
 800d762:	e7de      	b.n	800d722 <ull_rxenable+0x4a>
 800d764:	2101      	movs	r1, #1
 800d766:	f7fe fbfa 	bl	800bf5e <_dwt_adjust_delaytime>
 800d76a:	2302      	movs	r3, #2
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	9200      	str	r2, [sp, #0]
 800d772:	4613      	mov	r3, r2
 800d774:	2106      	movs	r1, #6
 800d776:	4628      	mov	r0, r5
 800d778:	f7fd fedf 	bl	800b53a <dwt_xfer3xxx>
 800d77c:	e7d1      	b.n	800d722 <ull_rxenable+0x4a>
 800d77e:	2302      	movs	r3, #2
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	2100      	movs	r1, #0
 800d784:	9100      	str	r1, [sp, #0]
 800d786:	460b      	mov	r3, r1
 800d788:	460a      	mov	r2, r1
 800d78a:	4628      	mov	r0, r5
 800d78c:	f7fd fed5 	bl	800b53a <dwt_xfer3xxx>
 800d790:	f014 0f02 	tst.w	r4, #2
 800d794:	d002      	beq.n	800d79c <ull_rxenable+0xc4>
 800d796:	f04f 30ff 	mov.w	r0, #4294967295
 800d79a:	e7cb      	b.n	800d734 <ull_rxenable+0x5c>
 800d79c:	2102      	movs	r1, #2
 800d79e:	9101      	str	r1, [sp, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	9200      	str	r2, [sp, #0]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f7fd fec7 	bl	800b53a <dwt_xfer3xxx>
 800d7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b0:	e7c0      	b.n	800d734 <ull_rxenable+0x5c>
 800d7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b6:	e7bd      	b.n	800d734 <ull_rxenable+0x5c>

0800d7b8 <ull_softreset_no_sema_fcmd>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	4606      	mov	r6, r0
 800d7be:	2502      	movs	r5, #2
 800d7c0:	9501      	str	r5, [sp, #4]
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	9400      	str	r4, [sp, #0]
 800d7c6:	4623      	mov	r3, r4
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	2119      	movs	r1, #25
 800d7cc:	f7fd feb5 	bl	800b53a <dwt_xfer3xxx>
 800d7d0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800d7d2:	739c      	strb	r4, [r3, #14]
 800d7d4:	821d      	strh	r5, [r3, #16]
 800d7d6:	751c      	strb	r4, [r3, #20]
 800d7d8:	755c      	strb	r4, [r3, #21]
 800d7da:	73dc      	strb	r4, [r3, #15]
 800d7dc:	b002      	add	sp, #8
 800d7de:	bd70      	pop	{r4, r5, r6, pc}

0800d7e0 <ull_softreset_fcmd>:
 800d7e0:	b570      	push	{r4, r5, r6, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	2502      	movs	r5, #2
 800d7e8:	9501      	str	r5, [sp, #4]
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	9400      	str	r4, [sp, #0]
 800d7ee:	4623      	mov	r3, r4
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	2118      	movs	r1, #24
 800d7f4:	f7fd fea1 	bl	800b53a <dwt_xfer3xxx>
 800d7f8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800d7fa:	739c      	strb	r4, [r3, #14]
 800d7fc:	821d      	strh	r5, [r3, #16]
 800d7fe:	751c      	strb	r4, [r3, #20]
 800d800:	755c      	strb	r4, [r3, #21]
 800d802:	73dc      	strb	r4, [r3, #15]
 800d804:	b002      	add	sp, #8
 800d806:	bd70      	pop	{r4, r5, r6, pc}

0800d808 <dwt_ioctl>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	b091      	sub	sp, #68	; 0x44
 800d80e:	4606      	mov	r6, r0
 800d810:	4615      	mov	r5, r2
 800d812:	461c      	mov	r4, r3
 800d814:	299c      	cmp	r1, #156	; 0x9c
 800d816:	f200 809f 	bhi.w	800d958 <dwt_ioctl+0x150>
 800d81a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800d81e:	0a4e      	.short	0x0a4e
 800d820:	00a30a59 	.word	0x00a30a59
 800d824:	00c000a7 	.word	0x00c000a7
 800d828:	0192014c 	.word	0x0192014c
 800d82c:	0156016f 	.word	0x0156016f
 800d830:	01ad01a2 	.word	0x01ad01a2
 800d834:	01bd01b5 	.word	0x01bd01b5
 800d838:	01cd01c5 	.word	0x01cd01c5
 800d83c:	01d901d5 	.word	0x01d901d5
 800d840:	027201e1 	.word	0x027201e1
 800d844:	02850280 	.word	0x02850280
 800d848:	0294028f 	.word	0x0294028f
 800d84c:	02a20299 	.word	0x02a20299
 800d850:	02dd02a7 	.word	0x02dd02a7
 800d854:	030502fa 	.word	0x030502fa
 800d858:	031a0310 	.word	0x031a0310
 800d85c:	03480352 	.word	0x03480352
 800d860:	0324033e 	.word	0x0324033e
 800d864:	03810331 	.word	0x03810331
 800d868:	022f01fc 	.word	0x022f01fc
 800d86c:	0245023d 	.word	0x0245023d
 800d870:	09770259 	.word	0x09770259
 800d874:	0361097c 	.word	0x0361097c
 800d878:	03a3039f 	.word	0x03a3039f
 800d87c:	03b103ac 	.word	0x03b103ac
 800d880:	03e503db 	.word	0x03e503db
 800d884:	041703ed 	.word	0x041703ed
 800d888:	042e0423 	.word	0x042e0423
 800d88c:	04390357 	.word	0x04390357
 800d890:	04540442 	.word	0x04540442
 800d894:	047e046d 	.word	0x047e046d
 800d898:	04ca04c0 	.word	0x04ca04c0
 800d89c:	04ff04f0 	.word	0x04ff04f0
 800d8a0:	0508051a 	.word	0x0508051a
 800d8a4:	056a0524 	.word	0x056a0524
 800d8a8:	0597057d 	.word	0x0597057d
 800d8ac:	05df05cb 	.word	0x05df05cb
 800d8b0:	060405e8 	.word	0x060405e8
 800d8b4:	073d05f1 	.word	0x073d05f1
 800d8b8:	07cd077f 	.word	0x07cd077f
 800d8bc:	07de07d3 	.word	0x07de07d3
 800d8c0:	081707f7 	.word	0x081707f7
 800d8c4:	082b0821 	.word	0x082b0821
 800d8c8:	08620859 	.word	0x08620859
 800d8cc:	08710868 	.word	0x08710868
 800d8d0:	088b087e 	.word	0x088b087e
 800d8d4:	089e0895 	.word	0x089e0895
 800d8d8:	08b208a7 	.word	0x08b208a7
 800d8dc:	08c308bd 	.word	0x08c308bd
 800d8e0:	08f108e6 	.word	0x08f108e6
 800d8e4:	090708fc 	.word	0x090708fc
 800d8e8:	09530948 	.word	0x09530948
 800d8ec:	0982096c 	.word	0x0982096c
 800d8f0:	0a0109f7 	.word	0x0a0109f7
 800d8f4:	0a610a0c 	.word	0x0a610a0c
 800d8f8:	0a430a16 	.word	0x0a430a16
 800d8fc:	09c00771 	.word	0x09c00771
 800d900:	0acf09e1 	.word	0x0acf09e1
 800d904:	0a6e0ac4 	.word	0x0a6e0ac4
 800d908:	0a840a79 	.word	0x0a840a79
 800d90c:	0a9a0a8f 	.word	0x0a9a0a8f
 800d910:	0ab00aa5 	.word	0x0ab00aa5
 800d914:	0caf0ab9 	.word	0x0caf0ab9
 800d918:	0d240ce9 	.word	0x0d240ce9
 800d91c:	0df30d47 	.word	0x0df30d47
 800d920:	0af70e08 	.word	0x0af70e08
 800d924:	0bee0bbb 	.word	0x0bee0bbb
 800d928:	0bfe0bf9 	.word	0x0bfe0bf9
 800d92c:	0c0e0c03 	.word	0x0c0e0c03
 800d930:	0c2c0c21 	.word	0x0c2c0c21
 800d934:	0c560c41 	.word	0x0c560c41
 800d938:	009d0c92 	.word	0x009d0c92
 800d93c:	009d009d 	.word	0x009d009d
 800d940:	009d009d 	.word	0x009d009d
 800d944:	009d009d 	.word	0x009d009d
 800d948:	0d5e009d 	.word	0x0d5e009d
 800d94c:	0ebc0d6f 	.word	0x0ebc0d6f
 800d950:	0dae0db9 	.word	0x0dae0db9
 800d954:	0dc40dcd 	.word	0x0dc40dcd
 800d958:	f04f 35ff 	mov.w	r5, #4294967295
 800d95c:	4628      	mov	r0, r5
 800d95e:	b011      	add	sp, #68	; 0x44
 800d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d964:	6843      	ldr	r3, [r0, #4]
 800d966:	4798      	blx	r3
 800d968:	2500      	movs	r5, #0
 800d96a:	e7f7      	b.n	800d95c <dwt_ioctl+0x154>
 800d96c:	2202      	movs	r2, #2
 800d96e:	49b4      	ldr	r1, [pc, #720]	; (800dc40 <dwt_ioctl+0x438>)
 800d970:	f7fd fe93 	bl	800b69a <dwt_read8bitoffsetreg>
 800d974:	2803      	cmp	r0, #3
 800d976:	d801      	bhi.n	800d97c <dwt_ioctl+0x174>
 800d978:	2500      	movs	r5, #0
 800d97a:	e7ef      	b.n	800d95c <dwt_ioctl+0x154>
 800d97c:	f7f3 fd6c 	bl	8001458 <decamutexon>
 800d980:	4604      	mov	r4, r0
 800d982:	2302      	movs	r3, #2
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	2500      	movs	r5, #0
 800d988:	9500      	str	r5, [sp, #0]
 800d98a:	462b      	mov	r3, r5
 800d98c:	462a      	mov	r2, r5
 800d98e:	4629      	mov	r1, r5
 800d990:	4630      	mov	r0, r6
 800d992:	f7fd fdd2 	bl	800b53a <dwt_xfer3xxx>
 800d996:	4620      	mov	r0, r4
 800d998:	f7f3 fd6f 	bl	800147a <decamutexoff>
 800d99c:	e7de      	b.n	800d95c <dwt_ioctl+0x154>
 800d99e:	2c00      	cmp	r4, #0
 800d9a0:	f001 85fc 	beq.w	800f59c <dwt_ioctl+0x1d94>
 800d9a4:	7824      	ldrb	r4, [r4, #0]
 800d9a6:	f014 0f1d 	tst.w	r4, #29
 800d9aa:	d061      	beq.n	800da70 <dwt_ioctl+0x268>
 800d9ac:	f014 0f01 	tst.w	r4, #1
 800d9b0:	d023      	beq.n	800d9fa <dwt_ioctl+0x1f2>
 800d9b2:	f014 0f02 	tst.w	r4, #2
 800d9b6:	f04f 0302 	mov.w	r3, #2
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	f04f 0200 	mov.w	r2, #0
 800d9c0:	9200      	str	r2, [sp, #0]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	bf14      	ite	ne
 800d9c6:	210d      	movne	r1, #13
 800d9c8:	2103      	moveq	r1, #3
 800d9ca:	f7fd fdb6 	bl	800b53a <dwt_xfer3xxx>
 800d9ce:	2203      	movs	r2, #3
 800d9d0:	2144      	movs	r1, #68	; 0x44
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7fd fe61 	bl	800b69a <dwt_read8bitoffsetreg>
 800d9d8:	f010 0f08 	tst.w	r0, #8
 800d9dc:	bf08      	it	eq
 800d9de:	2500      	moveq	r5, #0
 800d9e0:	d0bc      	beq.n	800d95c <dwt_ioctl+0x154>
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	9100      	str	r1, [sp, #0]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	460a      	mov	r2, r1
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7fd fda3 	bl	800b53a <dwt_xfer3xxx>
 800d9f4:	f04f 35ff 	mov.w	r5, #4294967295
 800d9f8:	e7b0      	b.n	800d95c <dwt_ioctl+0x154>
 800d9fa:	f014 0f08 	tst.w	r4, #8
 800d9fe:	d111      	bne.n	800da24 <dwt_ioctl+0x21c>
 800da00:	f014 0f10 	tst.w	r4, #16
 800da04:	d121      	bne.n	800da4a <dwt_ioctl+0x242>
 800da06:	f014 0f02 	tst.w	r4, #2
 800da0a:	f04f 0302 	mov.w	r3, #2
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	f04f 0200 	mov.w	r2, #0
 800da14:	9200      	str	r2, [sp, #0]
 800da16:	4613      	mov	r3, r2
 800da18:	bf14      	ite	ne
 800da1a:	2110      	movne	r1, #16
 800da1c:	2109      	moveq	r1, #9
 800da1e:	f7fd fd8c 	bl	800b53a <dwt_xfer3xxx>
 800da22:	e7d4      	b.n	800d9ce <dwt_ioctl+0x1c6>
 800da24:	2100      	movs	r1, #0
 800da26:	f7fe fa9a 	bl	800bf5e <_dwt_adjust_delaytime>
 800da2a:	f014 0f02 	tst.w	r4, #2
 800da2e:	f04f 0302 	mov.w	r3, #2
 800da32:	9301      	str	r3, [sp, #4]
 800da34:	f04f 0200 	mov.w	r2, #0
 800da38:	9200      	str	r2, [sp, #0]
 800da3a:	4613      	mov	r3, r2
 800da3c:	bf14      	ite	ne
 800da3e:	210f      	movne	r1, #15
 800da40:	2107      	moveq	r1, #7
 800da42:	4630      	mov	r0, r6
 800da44:	f7fd fd79 	bl	800b53a <dwt_xfer3xxx>
 800da48:	e7c1      	b.n	800d9ce <dwt_ioctl+0x1c6>
 800da4a:	2101      	movs	r1, #1
 800da4c:	f7fe fa87 	bl	800bf5e <_dwt_adjust_delaytime>
 800da50:	f014 0f02 	tst.w	r4, #2
 800da54:	f04f 0302 	mov.w	r3, #2
 800da58:	9301      	str	r3, [sp, #4]
 800da5a:	f04f 0200 	mov.w	r2, #0
 800da5e:	9200      	str	r2, [sp, #0]
 800da60:	4613      	mov	r3, r2
 800da62:	bf14      	ite	ne
 800da64:	210e      	movne	r1, #14
 800da66:	2105      	moveq	r1, #5
 800da68:	4630      	mov	r0, r6
 800da6a:	f7fd fd66 	bl	800b53a <dwt_xfer3xxx>
 800da6e:	e7ae      	b.n	800d9ce <dwt_ioctl+0x1c6>
 800da70:	f014 0f20 	tst.w	r4, #32
 800da74:	d00f      	beq.n	800da96 <dwt_ioctl+0x28e>
 800da76:	f014 0f02 	tst.w	r4, #2
 800da7a:	f04f 0302 	mov.w	r3, #2
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	f04f 0500 	mov.w	r5, #0
 800da84:	9500      	str	r5, [sp, #0]
 800da86:	462b      	mov	r3, r5
 800da88:	462a      	mov	r2, r5
 800da8a:	bf14      	ite	ne
 800da8c:	2111      	movne	r1, #17
 800da8e:	210b      	moveq	r1, #11
 800da90:	f7fd fd53 	bl	800b53a <dwt_xfer3xxx>
 800da94:	e762      	b.n	800d95c <dwt_ioctl+0x154>
 800da96:	f014 0f02 	tst.w	r4, #2
 800da9a:	f04f 0302 	mov.w	r3, #2
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	f04f 0500 	mov.w	r5, #0
 800daa4:	9500      	str	r5, [sp, #0]
 800daa6:	462b      	mov	r3, r5
 800daa8:	462a      	mov	r2, r5
 800daaa:	bf14      	ite	ne
 800daac:	210c      	movne	r1, #12
 800daae:	2101      	moveq	r1, #1
 800dab0:	f7fd fd43 	bl	800b53a <dwt_xfer3xxx>
 800dab4:	e752      	b.n	800d95c <dwt_ioctl+0x154>
 800dab6:	2c00      	cmp	r4, #0
 800dab8:	f001 8573 	beq.w	800f5a2 <dwt_ioctl+0x1d9a>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	2200      	movs	r2, #0
 800dac0:	2128      	movs	r1, #40	; 0x28
 800dac2:	f7fe fa37 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dac6:	2500      	movs	r5, #0
 800dac8:	e748      	b.n	800d95c <dwt_ioctl+0x154>
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	2200      	movs	r2, #0
 800dace:	495d      	ldr	r1, [pc, #372]	; (800dc44 <dwt_ioctl+0x43c>)
 800dad0:	f7fe fa30 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dad4:	6863      	ldr	r3, [r4, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	495b      	ldr	r1, [pc, #364]	; (800dc48 <dwt_ioctl+0x440>)
 800dada:	4630      	mov	r0, r6
 800dadc:	f7fe fa2a 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dae0:	68a3      	ldr	r3, [r4, #8]
 800dae2:	2200      	movs	r2, #0
 800dae4:	4959      	ldr	r1, [pc, #356]	; (800dc4c <dwt_ioctl+0x444>)
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7fe fa24 	bl	800bf34 <dwt_write32bitoffsetreg>
 800daec:	68e3      	ldr	r3, [r4, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	4957      	ldr	r1, [pc, #348]	; (800dc50 <dwt_ioctl+0x448>)
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7fe fa1e 	bl	800bf34 <dwt_write32bitoffsetreg>
 800daf8:	2500      	movs	r5, #0
 800dafa:	e72f      	b.n	800d95c <dwt_ioctl+0x154>
 800dafc:	2c00      	cmp	r4, #0
 800dafe:	f001 8553 	beq.w	800f5a8 <dwt_ioctl+0x1da0>
 800db02:	8823      	ldrh	r3, [r4, #0]
 800db04:	6865      	ldr	r5, [r4, #4]
 800db06:	2d03      	cmp	r5, #3
 800db08:	f201 8551 	bhi.w	800f5ae <dwt_ioctl+0x1da6>
 800db0c:	e8df f005 	tbb	[pc, r5]
 800db10:	130d0702 	.word	0x130d0702
 800db14:	2200      	movs	r2, #0
 800db16:	494f      	ldr	r1, [pc, #316]	; (800dc54 <dwt_ioctl+0x44c>)
 800db18:	f7fe f9af 	bl	800be7a <dwt_write16bitoffsetreg>
 800db1c:	e71e      	b.n	800d95c <dwt_ioctl+0x154>
 800db1e:	2202      	movs	r2, #2
 800db20:	494c      	ldr	r1, [pc, #304]	; (800dc54 <dwt_ioctl+0x44c>)
 800db22:	f7fe f9aa 	bl	800be7a <dwt_write16bitoffsetreg>
 800db26:	2500      	movs	r5, #0
 800db28:	e718      	b.n	800d95c <dwt_ioctl+0x154>
 800db2a:	2200      	movs	r2, #0
 800db2c:	494a      	ldr	r1, [pc, #296]	; (800dc58 <dwt_ioctl+0x450>)
 800db2e:	f7fe f9a4 	bl	800be7a <dwt_write16bitoffsetreg>
 800db32:	2500      	movs	r5, #0
 800db34:	e712      	b.n	800d95c <dwt_ioctl+0x154>
 800db36:	2202      	movs	r2, #2
 800db38:	4947      	ldr	r1, [pc, #284]	; (800dc58 <dwt_ioctl+0x450>)
 800db3a:	f7fe f99e 	bl	800be7a <dwt_write16bitoffsetreg>
 800db3e:	2500      	movs	r5, #0
 800db40:	e70c      	b.n	800d95c <dwt_ioctl+0x154>
 800db42:	2c00      	cmp	r4, #0
 800db44:	f001 8536 	beq.w	800f5b4 <dwt_ioctl+0x1dac>
 800db48:	7823      	ldrb	r3, [r4, #0]
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	f003 0306 	and.w	r3, r3, #6
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	f06f 0306 	mvn.w	r3, #6
 800db56:	2200      	movs	r2, #0
 800db58:	4940      	ldr	r1, [pc, #256]	; (800dc5c <dwt_ioctl+0x454>)
 800db5a:	f7fe fe3d 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800db5e:	2500      	movs	r5, #0
 800db60:	e6fc      	b.n	800d95c <dwt_ioctl+0x154>
 800db62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	f04f 33ff 	mov.w	r3, #4294967295
 800db6c:	2200      	movs	r2, #0
 800db6e:	493c      	ldr	r1, [pc, #240]	; (800dc60 <dwt_ioctl+0x458>)
 800db70:	f7fe fe32 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800db74:	2500      	movs	r5, #0
 800db76:	e6f1      	b.n	800d95c <dwt_ioctl+0x154>
 800db78:	2c00      	cmp	r4, #0
 800db7a:	f001 851e 	beq.w	800f5ba <dwt_ioctl+0x1db2>
 800db7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800db80:	7b1b      	ldrb	r3, [r3, #12]
 800db82:	7023      	strb	r3, [r4, #0]
 800db84:	2500      	movs	r5, #0
 800db86:	e6e9      	b.n	800d95c <dwt_ioctl+0x154>
 800db88:	2c00      	cmp	r4, #0
 800db8a:	f001 8519 	beq.w	800f5c0 <dwt_ioctl+0x1db8>
 800db8e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800db90:	7a5b      	ldrb	r3, [r3, #9]
 800db92:	7023      	strb	r3, [r4, #0]
 800db94:	2500      	movs	r5, #0
 800db96:	e6e1      	b.n	800d95c <dwt_ioctl+0x154>
 800db98:	2c00      	cmp	r4, #0
 800db9a:	f001 8514 	beq.w	800f5c6 <dwt_ioctl+0x1dbe>
 800db9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dba0:	7a9b      	ldrb	r3, [r3, #10]
 800dba2:	7023      	strb	r3, [r4, #0]
 800dba4:	2500      	movs	r5, #0
 800dba6:	e6d9      	b.n	800d95c <dwt_ioctl+0x154>
 800dba8:	2c00      	cmp	r4, #0
 800dbaa:	f001 850f 	beq.w	800f5cc <dwt_ioctl+0x1dc4>
 800dbae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	2500      	movs	r5, #0
 800dbb6:	e6d1      	b.n	800d95c <dwt_ioctl+0x154>
 800dbb8:	2c00      	cmp	r4, #0
 800dbba:	f001 850a 	beq.w	800f5d2 <dwt_ioctl+0x1dca>
 800dbbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	6023      	str	r3, [r4, #0]
 800dbc4:	2500      	movs	r5, #0
 800dbc6:	e6c9      	b.n	800d95c <dwt_ioctl+0x154>
 800dbc8:	f7fe fc72 	bl	800c4b0 <ull_signal_rx_buff_free>
 800dbcc:	2500      	movs	r5, #0
 800dbce:	e6c5      	b.n	800d95c <dwt_ioctl+0x154>
 800dbd0:	2c00      	cmp	r4, #0
 800dbd2:	f001 8501 	beq.w	800f5d8 <dwt_ioctl+0x1dd0>
 800dbd6:	6821      	ldr	r1, [r4, #0]
 800dbd8:	f7fe f9e7 	bl	800bfaa <ull_setrxaftertxdelay>
 800dbdc:	2500      	movs	r5, #0
 800dbde:	e6bd      	b.n	800d95c <dwt_ioctl+0x154>
 800dbe0:	2c00      	cmp	r4, #0
 800dbe2:	f001 84fc 	beq.w	800f5de <dwt_ioctl+0x1dd6>
 800dbe6:	7825      	ldrb	r5, [r4, #0]
 800dbe8:	b15d      	cbz	r5, 800dc02 <dwt_ioctl+0x3fa>
 800dbea:	6864      	ldr	r4, [r4, #4]
 800dbec:	2340      	movs	r3, #64	; 0x40
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	23ff      	movs	r3, #255	; 0xff
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	2110      	movs	r1, #16
 800dbf6:	f7fe ff61 	bl	800cabc <dwt_modify8bitoffsetreg>
 800dbfa:	2d02      	cmp	r5, #2
 800dbfc:	d107      	bne.n	800dc0e <dwt_ioctl+0x406>
 800dbfe:	60f4      	str	r4, [r6, #12]
 800dc00:	e005      	b.n	800dc0e <dwt_ioctl+0x406>
 800dc02:	2200      	movs	r2, #0
 800dc04:	9200      	str	r2, [sp, #0]
 800dc06:	23bf      	movs	r3, #191	; 0xbf
 800dc08:	2110      	movs	r1, #16
 800dc0a:	f7fe ff57 	bl	800cabc <dwt_modify8bitoffsetreg>
 800dc0e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800dc10:	751d      	strb	r5, [r3, #20]
 800dc12:	2500      	movs	r5, #0
 800dc14:	e6a2      	b.n	800d95c <dwt_ioctl+0x154>
 800dc16:	2c00      	cmp	r4, #0
 800dc18:	f001 84e4 	beq.w	800f5e4 <dwt_ioctl+0x1ddc>
 800dc1c:	6865      	ldr	r5, [r4, #4]
 800dc1e:	7823      	ldrb	r3, [r4, #0]
 800dc20:	2203      	movs	r2, #3
 800dc22:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dc26:	f7fe fb13 	bl	800c250 <dwt_write8bitoffsetreg>
 800dc2a:	b9dd      	cbnz	r5, 800dc64 <dwt_ioctl+0x45c>
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	9200      	str	r2, [sp, #0]
 800dc30:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800dc34:	2110      	movs	r1, #16
 800dc36:	4630      	mov	r0, r6
 800dc38:	f7ff f95c 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800dc3c:	e68e      	b.n	800d95c <dwt_ioctl+0x154>
 800dc3e:	bf00      	nop
 800dc40:	000f0030 	.word	0x000f0030
 800dc44:	00010054 	.word	0x00010054
 800dc48:	00010058 	.word	0x00010058
 800dc4c:	0001005c 	.word	0x0001005c
 800dc50:	00010060 	.word	0x00010060
 800dc54:	0001000c 	.word	0x0001000c
 800dc58:	00010010 	.word	0x00010010
 800dc5c:	00010008 	.word	0x00010008
 800dc60:	00110004 	.word	0x00110004
 800dc64:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2110      	movs	r1, #16
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7fe fdb0 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	e66f      	b.n	800d95c <dwt_ioctl+0x154>
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	4611      	mov	r1, r2
 800dc80:	f7fd fce3 	bl	800b64a <dwt_read32bitoffsetreg>
 800dc84:	68b2      	ldr	r2, [r6, #8]
 800dc86:	6813      	ldr	r3, [r2, #0]
 800dc88:	4043      	eors	r3, r0
 800dc8a:	6852      	ldr	r2, [r2, #4]
 800dc8c:	4213      	tst	r3, r2
 800dc8e:	bf14      	ite	ne
 800dc90:	f04f 35ff 	movne.w	r5, #4294967295
 800dc94:	2500      	moveq	r5, #0
 800dc96:	e661      	b.n	800d95c <dwt_ioctl+0x154>
 800dc98:	2c00      	cmp	r4, #0
 800dc9a:	f001 84a6 	beq.w	800f5ea <dwt_ioctl+0x1de2>
 800dc9e:	7821      	ldrb	r1, [r4, #0]
 800dca0:	f7fe ff20 	bl	800cae4 <ull_configciadiag>
 800dca4:	2500      	movs	r5, #0
 800dca6:	e659      	b.n	800d95c <dwt_ioctl+0x154>
 800dca8:	b93a      	cbnz	r2, 800dcba <dwt_ioctl+0x4b2>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	9200      	str	r2, [sp, #0]
 800dcae:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800dcb2:	49b8      	ldr	r1, [pc, #736]	; (800df94 <dwt_ioctl+0x78c>)
 800dcb4:	f7ff f91e 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800dcb8:	e650      	b.n	800d95c <dwt_ioctl+0x154>
 800dcba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	49b3      	ldr	r1, [pc, #716]	; (800df94 <dwt_ioctl+0x78c>)
 800dcc8:	f7ff f914 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800dccc:	2500      	movs	r5, #0
 800dcce:	e645      	b.n	800d95c <dwt_ioctl+0x154>
 800dcd0:	f002 0201 	and.w	r2, r2, #1
 800dcd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcd8:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	bf08      	it	eq
 800dce0:	460b      	moveq	r3, r1
 800dce2:	02d2      	lsls	r2, r2, #11
 800dce4:	f015 0f02 	tst.w	r5, #2
 800dce8:	bf12      	itee	ne
 800dcea:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800dcee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcf2:	b29b      	uxtheq	r3, r3
 800dcf4:	9200      	str	r2, [sp, #0]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	49a6      	ldr	r1, [pc, #664]	; (800df94 <dwt_ioctl+0x78c>)
 800dcfa:	f7ff f8fb 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800dcfe:	2500      	movs	r5, #0
 800dd00:	e62c      	b.n	800d95c <dwt_ioctl+0x154>
 800dd02:	b92a      	cbnz	r2, 800dd10 <dwt_ioctl+0x508>
 800dd04:	4ba4      	ldr	r3, [pc, #656]	; (800df98 <dwt_ioctl+0x790>)
 800dd06:	2202      	movs	r2, #2
 800dd08:	49a4      	ldr	r1, [pc, #656]	; (800df9c <dwt_ioctl+0x794>)
 800dd0a:	f7fe f913 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dd0e:	e625      	b.n	800d95c <dwt_ioctl+0x154>
 800dd10:	4ba3      	ldr	r3, [pc, #652]	; (800dfa0 <dwt_ioctl+0x798>)
 800dd12:	2202      	movs	r2, #2
 800dd14:	49a1      	ldr	r1, [pc, #644]	; (800df9c <dwt_ioctl+0x794>)
 800dd16:	f7fe f90d 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dd1a:	2500      	movs	r5, #0
 800dd1c:	e61e      	b.n	800d95c <dwt_ioctl+0x154>
 800dd1e:	4611      	mov	r1, r2
 800dd20:	f7fe f957 	bl	800bfd2 <ull_setlnapamode>
 800dd24:	2500      	movs	r5, #0
 800dd26:	e619      	b.n	800d95c <dwt_ioctl+0x154>
 800dd28:	2c00      	cmp	r4, #0
 800dd2a:	f001 8461 	beq.w	800f5f0 <dwt_ioctl+0x1de8>
 800dd2e:	2200      	movs	r2, #0
 800dd30:	499c      	ldr	r1, [pc, #624]	; (800dfa4 <dwt_ioctl+0x79c>)
 800dd32:	f7fd fcb2 	bl	800b69a <dwt_read8bitoffsetreg>
 800dd36:	7020      	strb	r0, [r4, #0]
 800dd38:	2500      	movs	r5, #0
 800dd3a:	e60f      	b.n	800d95c <dwt_ioctl+0x154>
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	f7fe f969 	bl	800c014 <ull_configurestskey>
 800dd42:	2500      	movs	r5, #0
 800dd44:	e60a      	b.n	800d95c <dwt_ioctl+0x154>
 800dd46:	4621      	mov	r1, r4
 800dd48:	f7fe f988 	bl	800c05c <ull_configurestsiv>
 800dd4c:	2500      	movs	r5, #0
 800dd4e:	e605      	b.n	800d95c <dwt_ioctl+0x154>
 800dd50:	2301      	movs	r3, #1
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	23ff      	movs	r3, #255	; 0xff
 800dd56:	2200      	movs	r2, #0
 800dd58:	4993      	ldr	r1, [pc, #588]	; (800dfa8 <dwt_ioctl+0x7a0>)
 800dd5a:	f7fe feaf 	bl	800cabc <dwt_modify8bitoffsetreg>
 800dd5e:	2500      	movs	r5, #0
 800dd60:	e5fc      	b.n	800d95c <dwt_ioctl+0x154>
 800dd62:	4611      	mov	r1, r2
 800dd64:	f7fe f99e 	bl	800c0a4 <ull_configmrxlut>
 800dd68:	2500      	movs	r5, #0
 800dd6a:	e5f7      	b.n	800d95c <dwt_ioctl+0x154>
 800dd6c:	2318      	movs	r3, #24
 800dd6e:	2200      	movs	r2, #0
 800dd70:	498e      	ldr	r1, [pc, #568]	; (800dfac <dwt_ioctl+0x7a4>)
 800dd72:	f7fe f8df 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dd76:	23e8      	movs	r3, #232	; 0xe8
 800dd78:	2200      	movs	r2, #0
 800dd7a:	498d      	ldr	r1, [pc, #564]	; (800dfb0 <dwt_ioctl+0x7a8>)
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	f7fe f8d9 	bl	800bf34 <dwt_write32bitoffsetreg>
 800dd82:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800dd84:	7d9b      	ldrb	r3, [r3, #22]
 800dd86:	085b      	lsrs	r3, r3, #1
 800dd88:	d01a      	beq.n	800ddc0 <dwt_ioctl+0x5b8>
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	4989      	ldr	r1, [pc, #548]	; (800dfb4 <dwt_ioctl+0x7ac>)
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7fd fc71 	bl	800b676 <dwt_read16bitoffsetreg>
 800dd94:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800dd98:	3b09      	subs	r3, #9
 800dd9a:	2b0f      	cmp	r3, #15
 800dd9c:	f201 842b 	bhi.w	800f5f6 <dwt_ioctl+0x1dee>
 800dda0:	f000 0001 	and.w	r0, r0, #1
 800dda4:	2800      	cmp	r0, #0
 800dda6:	bf0c      	ite	eq
 800dda8:	2105      	moveq	r1, #5
 800ddaa:	2109      	movne	r1, #9
 800ddac:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ddae:	7a1b      	ldrb	r3, [r3, #8]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	f001 8423 	beq.w	800f5fc <dwt_ioctl+0x1df4>
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f7fe f974 	bl	800c0a4 <ull_configmrxlut>
 800ddbc:	2500      	movs	r5, #0
 800ddbe:	e5cd      	b.n	800d95c <dwt_ioctl+0x154>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	497c      	ldr	r1, [pc, #496]	; (800dfb8 <dwt_ioctl+0x7b0>)
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f7fe fa42 	bl	800c250 <dwt_write8bitoffsetreg>
 800ddcc:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800ddce:	7d93      	ldrb	r3, [r2, #22]
 800ddd0:	f043 0302 	orr.w	r3, r3, #2
 800ddd4:	7593      	strb	r3, [r2, #22]
 800ddd6:	e7d8      	b.n	800dd8a <dwt_ioctl+0x582>
 800ddd8:	2c00      	cmp	r4, #0
 800ddda:	f001 8412 	beq.w	800f602 <dwt_ioctl+0x1dfa>
 800ddde:	7824      	ldrb	r4, [r4, #0]
 800dde0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dde2:	755c      	strb	r4, [r3, #21]
 800dde4:	0323      	lsls	r3, r4, #12
 800dde6:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2110      	movs	r1, #16
 800ddf4:	f7ff f87e 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800ddf8:	f004 0403 	and.w	r4, r4, #3
 800ddfc:	2c03      	cmp	r4, #3
 800ddfe:	bf0c      	ite	eq
 800de00:	4b6e      	ldreq	r3, [pc, #440]	; (800dfbc <dwt_ioctl+0x7b4>)
 800de02:	4b6f      	ldrne	r3, [pc, #444]	; (800dfc0 <dwt_ioctl+0x7b8>)
 800de04:	2200      	movs	r2, #0
 800de06:	496f      	ldr	r1, [pc, #444]	; (800dfc4 <dwt_ioctl+0x7bc>)
 800de08:	4630      	mov	r0, r6
 800de0a:	f7fe f893 	bl	800bf34 <dwt_write32bitoffsetreg>
 800de0e:	2500      	movs	r5, #0
 800de10:	e5a4      	b.n	800d95c <dwt_ioctl+0x154>
 800de12:	2c00      	cmp	r4, #0
 800de14:	f001 83f8 	beq.w	800f608 <dwt_ioctl+0x1e00>
 800de18:	8823      	ldrh	r3, [r4, #0]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800de20:	f7fe f82b 	bl	800be7a <dwt_write16bitoffsetreg>
 800de24:	2500      	movs	r5, #0
 800de26:	e599      	b.n	800d95c <dwt_ioctl+0x154>
 800de28:	2c00      	cmp	r4, #0
 800de2a:	f001 83f0 	beq.w	800f60e <dwt_ioctl+0x1e06>
 800de2e:	2200      	movs	r2, #0
 800de30:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800de34:	f7fd fc1f 	bl	800b676 <dwt_read16bitoffsetreg>
 800de38:	8020      	strh	r0, [r4, #0]
 800de3a:	2500      	movs	r5, #0
 800de3c:	e58e      	b.n	800d95c <dwt_ioctl+0x154>
 800de3e:	2c00      	cmp	r4, #0
 800de40:	f001 83e8 	beq.w	800f614 <dwt_ioctl+0x1e0c>
 800de44:	8823      	ldrh	r3, [r4, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	217c      	movs	r1, #124	; 0x7c
 800de4a:	f7fe f816 	bl	800be7a <dwt_write16bitoffsetreg>
 800de4e:	2500      	movs	r5, #0
 800de50:	e584      	b.n	800d95c <dwt_ioctl+0x154>
 800de52:	2c00      	cmp	r4, #0
 800de54:	f001 83e1 	beq.w	800f61a <dwt_ioctl+0x1e12>
 800de58:	2200      	movs	r2, #0
 800de5a:	217c      	movs	r1, #124	; 0x7c
 800de5c:	f7fd fc0b 	bl	800b676 <dwt_read16bitoffsetreg>
 800de60:	8020      	strh	r0, [r4, #0]
 800de62:	2500      	movs	r5, #0
 800de64:	e57a      	b.n	800d95c <dwt_ioctl+0x154>
 800de66:	2c00      	cmp	r4, #0
 800de68:	f001 83da 	beq.w	800f620 <dwt_ioctl+0x1e18>
 800de6c:	88a3      	ldrh	r3, [r4, #4]
 800de6e:	88e2      	ldrh	r2, [r4, #6]
 800de70:	6821      	ldr	r1, [r4, #0]
 800de72:	9100      	str	r1, [sp, #0]
 800de74:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800de78:	f7fd fff4 	bl	800be64 <dwt_writetodevice>
 800de7c:	2500      	movs	r5, #0
 800de7e:	e56d      	b.n	800d95c <dwt_ioctl+0x154>
 800de80:	2c00      	cmp	r4, #0
 800de82:	f001 83d0 	beq.w	800f626 <dwt_ioctl+0x1e1e>
 800de86:	88a3      	ldrh	r3, [r4, #4]
 800de88:	88e2      	ldrh	r2, [r4, #6]
 800de8a:	6821      	ldr	r1, [r4, #0]
 800de8c:	9100      	str	r1, [sp, #0]
 800de8e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800de92:	f7fd fbd0 	bl	800b636 <dwt_readfromdevice>
 800de96:	2500      	movs	r5, #0
 800de98:	e560      	b.n	800d95c <dwt_ioctl+0x154>
 800de9a:	2c00      	cmp	r4, #0
 800de9c:	f001 83c6 	beq.w	800f62c <dwt_ioctl+0x1e24>
 800dea0:	88e3      	ldrh	r3, [r4, #6]
 800dea2:	88a2      	ldrh	r2, [r4, #4]
 800dea4:	6821      	ldr	r1, [r4, #0]
 800dea6:	f7fe f99d 	bl	800c1e4 <ull_readrxdata>
 800deaa:	2500      	movs	r5, #0
 800deac:	e556      	b.n	800d95c <dwt_ioctl+0x154>
 800deae:	2c00      	cmp	r4, #0
 800deb0:	f001 83bf 	beq.w	800f632 <dwt_ioctl+0x1e2a>
 800deb4:	88e3      	ldrh	r3, [r4, #6]
 800deb6:	6822      	ldr	r2, [r4, #0]
 800deb8:	88a1      	ldrh	r1, [r4, #4]
 800deba:	f7fe fac7 	bl	800c44c <ull_writetxdata>
 800debe:	2500      	movs	r5, #0
 800dec0:	e54c      	b.n	800d95c <dwt_ioctl+0x154>
 800dec2:	4611      	mov	r1, r2
 800dec4:	f7ff fc08 	bl	800d6d8 <ull_rxenable>
 800dec8:	2500      	movs	r5, #0
 800deca:	e547      	b.n	800d95c <dwt_ioctl+0x154>
 800decc:	2c00      	cmp	r4, #0
 800dece:	f001 83b3 	beq.w	800f638 <dwt_ioctl+0x1e30>
 800ded2:	7923      	ldrb	r3, [r4, #4]
 800ded4:	8862      	ldrh	r2, [r4, #2]
 800ded6:	8821      	ldrh	r1, [r4, #0]
 800ded8:	f7fe fdbe 	bl	800ca58 <ull_writetxfctrl>
 800dedc:	2500      	movs	r5, #0
 800dede:	e53d      	b.n	800d95c <dwt_ioctl+0x154>
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	f001 83ac 	beq.w	800f63e <dwt_ioctl+0x1e36>
 800dee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dee8:	7b9b      	ldrb	r3, [r3, #14]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d00c      	beq.n	800df08 <dwt_ioctl+0x700>
 800deee:	2b03      	cmp	r3, #3
 800def0:	d110      	bne.n	800df14 <dwt_ioctl+0x70c>
 800def2:	220c      	movs	r2, #12
 800def4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800def8:	f7fd fbbd 	bl	800b676 <dwt_read16bitoffsetreg>
 800defc:	b200      	sxth	r0, r0
 800defe:	f340 030c 	sbfx	r3, r0, #0, #13
 800df02:	8023      	strh	r3, [r4, #0]
 800df04:	2500      	movs	r5, #0
 800df06:	e529      	b.n	800d95c <dwt_ioctl+0x154>
 800df08:	2200      	movs	r2, #0
 800df0a:	492f      	ldr	r1, [pc, #188]	; (800dfc8 <dwt_ioctl+0x7c0>)
 800df0c:	f7fd fbb3 	bl	800b676 <dwt_read16bitoffsetreg>
 800df10:	b200      	sxth	r0, r0
 800df12:	e7f4      	b.n	800defe <dwt_ioctl+0x6f6>
 800df14:	2200      	movs	r2, #0
 800df16:	492d      	ldr	r1, [pc, #180]	; (800dfcc <dwt_ioctl+0x7c4>)
 800df18:	f7fd fbad 	bl	800b676 <dwt_read16bitoffsetreg>
 800df1c:	b200      	sxth	r0, r0
 800df1e:	e7ee      	b.n	800defe <dwt_ioctl+0x6f6>
 800df20:	2c00      	cmp	r4, #0
 800df22:	f001 838f 	beq.w	800f644 <dwt_ioctl+0x1e3c>
 800df26:	ab0c      	add	r3, sp, #48	; 0x30
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	2303      	movs	r3, #3
 800df2c:	2200      	movs	r2, #0
 800df2e:	4928      	ldr	r1, [pc, #160]	; (800dfd0 <dwt_ioctl+0x7c8>)
 800df30:	f7fd fb81 	bl	800b636 <dwt_readfromdevice>
 800df34:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800df38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800df3c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800df40:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800df44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800df48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800df4c:	bf1c      	itt	ne
 800df4e:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800df52:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800df56:	6023      	str	r3, [r4, #0]
 800df58:	2500      	movs	r5, #0
 800df5a:	e4ff      	b.n	800d95c <dwt_ioctl+0x154>
 800df5c:	f7fe f9d0 	bl	800c300 <ull_clearaonconfig>
 800df60:	2500      	movs	r5, #0
 800df62:	e4fb      	b.n	800d95c <dwt_ioctl+0x154>
 800df64:	2c00      	cmp	r4, #0
 800df66:	f001 8370 	beq.w	800f64a <dwt_ioctl+0x1e42>
 800df6a:	8861      	ldrh	r1, [r4, #2]
 800df6c:	f7fe fdf0 	bl	800cb50 <ull_calcbandwidthadj>
 800df70:	7020      	strb	r0, [r4, #0]
 800df72:	2500      	movs	r5, #0
 800df74:	e4f2      	b.n	800d95c <dwt_ioctl+0x154>
 800df76:	4621      	mov	r1, r4
 800df78:	f7fd fb9d 	bl	800b6b6 <ull_readdiagnostics>
 800df7c:	2500      	movs	r5, #0
 800df7e:	e4ed      	b.n	800d95c <dwt_ioctl+0x154>
 800df80:	2c00      	cmp	r4, #0
 800df82:	f001 8365 	beq.w	800f650 <dwt_ioctl+0x1e48>
 800df86:	2201      	movs	r2, #1
 800df88:	2170      	movs	r1, #112	; 0x70
 800df8a:	f7fd fb5e 	bl	800b64a <dwt_read32bitoffsetreg>
 800df8e:	6020      	str	r0, [r4, #0]
 800df90:	2500      	movs	r5, #0
 800df92:	e4e3      	b.n	800d95c <dwt_ioctl+0x154>
 800df94:	00110008 	.word	0x00110008
 800df98:	00d20874 	.word	0x00d20874
 800df9c:	00110010 	.word	0x00110010
 800dfa0:	04d28874 	.word	0x04d28874
 800dfa4:	0007001c 	.word	0x0007001c
 800dfa8:	00020004 	.word	0x00020004
 800dfac:	001f000c 	.word	0x001f000c
 800dfb0:	001f0010 	.word	0x001f0010
 800dfb4:	00010008 	.word	0x00010008
 800dfb8:	00010020 	.word	0x00010020
 800dfbc:	af5f35cc 	.word	0xaf5f35cc
 800dfc0:	af5f584c 	.word	0xaf5f584c
 800dfc4:	0006000c 	.word	0x0006000c
 800dfc8:	0018000c 	.word	0x0018000c
 800dfcc:	000c0020 	.word	0x000c0020
 800dfd0:	00060029 	.word	0x00060029
 800dfd4:	2c00      	cmp	r4, #0
 800dfd6:	f001 833e 	beq.w	800f656 <dwt_ioctl+0x1e4e>
 800dfda:	2200      	movs	r2, #0
 800dfdc:	2170      	movs	r1, #112	; 0x70
 800dfde:	f7fd fb34 	bl	800b64a <dwt_read32bitoffsetreg>
 800dfe2:	6020      	str	r0, [r4, #0]
 800dfe4:	2500      	movs	r5, #0
 800dfe6:	e4b9      	b.n	800d95c <dwt_ioctl+0x154>
 800dfe8:	9400      	str	r4, [sp, #0]
 800dfea:	2305      	movs	r3, #5
 800dfec:	2200      	movs	r2, #0
 800dfee:	2170      	movs	r1, #112	; 0x70
 800dff0:	f7fd fb21 	bl	800b636 <dwt_readfromdevice>
 800dff4:	2500      	movs	r5, #0
 800dff6:	e4b1      	b.n	800d95c <dwt_ioctl+0x154>
 800dff8:	2c00      	cmp	r4, #0
 800dffa:	f001 832f 	beq.w	800f65c <dwt_ioctl+0x1e54>
 800dffe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e000:	7b9b      	ldrb	r3, [r3, #14]
 800e002:	2b01      	cmp	r3, #1
 800e004:	d014      	beq.n	800e030 <dwt_ioctl+0x828>
 800e006:	2b03      	cmp	r3, #3
 800e008:	d119      	bne.n	800e03e <dwt_ioctl+0x836>
 800e00a:	2216      	movs	r2, #22
 800e00c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e010:	f7fd fb31 	bl	800b676 <dwt_read16bitoffsetreg>
 800e014:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800e018:	b283      	uxth	r3, r0
 800e01a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e01e:	d004      	beq.n	800e02a <dwt_ioctl+0x822>
 800e020:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800e024:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800e028:	b218      	sxth	r0, r3
 800e02a:	8020      	strh	r0, [r4, #0]
 800e02c:	2500      	movs	r5, #0
 800e02e:	e495      	b.n	800d95c <dwt_ioctl+0x154>
 800e030:	2202      	movs	r2, #2
 800e032:	49d1      	ldr	r1, [pc, #836]	; (800e378 <dwt_ioctl+0xb70>)
 800e034:	f7fd fb1f 	bl	800b676 <dwt_read16bitoffsetreg>
 800e038:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800e03c:	e7ec      	b.n	800e018 <dwt_ioctl+0x810>
 800e03e:	2202      	movs	r2, #2
 800e040:	49ce      	ldr	r1, [pc, #824]	; (800e37c <dwt_ioctl+0xb74>)
 800e042:	f7fd fb18 	bl	800b676 <dwt_read16bitoffsetreg>
 800e046:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800e04a:	e7e5      	b.n	800e018 <dwt_ioctl+0x810>
 800e04c:	9400      	str	r4, [sp, #0]
 800e04e:	2306      	movs	r3, #6
 800e050:	2200      	movs	r2, #0
 800e052:	49cb      	ldr	r1, [pc, #812]	; (800e380 <dwt_ioctl+0xb78>)
 800e054:	f7fd faef 	bl	800b636 <dwt_readfromdevice>
 800e058:	7963      	ldrb	r3, [r4, #5]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	7163      	strb	r3, [r4, #5]
 800e060:	2500      	movs	r5, #0
 800e062:	e47b      	b.n	800d95c <dwt_ioctl+0x154>
 800e064:	2c00      	cmp	r4, #0
 800e066:	f001 82fc 	beq.w	800f662 <dwt_ioctl+0x1e5a>
 800e06a:	2201      	movs	r2, #1
 800e06c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800e070:	f7fd fb13 	bl	800b69a <dwt_read8bitoffsetreg>
 800e074:	7020      	strb	r0, [r4, #0]
 800e076:	2500      	movs	r5, #0
 800e078:	e470      	b.n	800d95c <dwt_ioctl+0x154>
 800e07a:	2c00      	cmp	r4, #0
 800e07c:	f001 82f4 	beq.w	800f668 <dwt_ioctl+0x1e60>
 800e080:	2200      	movs	r2, #0
 800e082:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800e086:	f7fd fb08 	bl	800b69a <dwt_read8bitoffsetreg>
 800e08a:	7020      	strb	r0, [r4, #0]
 800e08c:	2500      	movs	r5, #0
 800e08e:	e465      	b.n	800d95c <dwt_ioctl+0x154>
 800e090:	2c00      	cmp	r4, #0
 800e092:	f001 82ec 	beq.w	800f66e <dwt_ioctl+0x1e66>
 800e096:	88a2      	ldrh	r2, [r4, #4]
 800e098:	6821      	ldr	r1, [r4, #0]
 800e09a:	f7fe fc07 	bl	800c8ac <_dwt_otpprogword32>
 800e09e:	2500      	movs	r5, #0
 800e0a0:	e45c      	b.n	800d95c <dwt_ioctl+0x154>
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	f001 82e6 	beq.w	800f674 <dwt_ioctl+0x1e6c>
 800e0a8:	6825      	ldr	r5, [r4, #0]
 800e0aa:	88a4      	ldrh	r4, [r4, #4]
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	f7fe fbfc 	bl	800c8ac <_dwt_otpprogword32>
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7fd ff1a 	bl	800bef0 <_dwt_otpread>
 800e0bc:	1a2d      	subs	r5, r5, r0
 800e0be:	bf18      	it	ne
 800e0c0:	f04f 35ff 	movne.w	r5, #4294967295
 800e0c4:	e44a      	b.n	800d95c <dwt_ioctl+0x154>
 800e0c6:	2a02      	cmp	r2, #2
 800e0c8:	d00e      	beq.n	800e0e8 <dwt_ioctl+0x8e0>
 800e0ca:	4cae      	ldr	r4, [pc, #696]	; (800e384 <dwt_ioctl+0xb7c>)
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f7fe f8bc 	bl	800c250 <dwt_write8bitoffsetreg>
 800e0d8:	2302      	movs	r3, #2
 800e0da:	2200      	movs	r2, #0
 800e0dc:	4621      	mov	r1, r4
 800e0de:	4630      	mov	r0, r6
 800e0e0:	f7fe f8b6 	bl	800c250 <dwt_write8bitoffsetreg>
 800e0e4:	2500      	movs	r5, #0
 800e0e6:	e439      	b.n	800d95c <dwt_ioctl+0x154>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	23fe      	movs	r3, #254	; 0xfe
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	49a5      	ldr	r1, [pc, #660]	; (800e388 <dwt_ioctl+0xb80>)
 800e0f2:	f7fe fce3 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e0f6:	e7e8      	b.n	800e0ca <dwt_ioctl+0x8c2>
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	f001 82be 	beq.w	800f67a <dwt_ioctl+0x1e72>
 800e0fe:	8824      	ldrh	r4, [r4, #0]
 800e100:	b2e2      	uxtb	r2, r4
 800e102:	f44f 7181 	mov.w	r1, #258	; 0x102
 800e106:	f7fe f94f 	bl	800c3a8 <ull_aon_write>
 800e10a:	0a22      	lsrs	r2, r4, #8
 800e10c:	f240 1103 	movw	r1, #259	; 0x103
 800e110:	4630      	mov	r0, r6
 800e112:	f7fe f949 	bl	800c3a8 <ull_aon_write>
 800e116:	2500      	movs	r5, #0
 800e118:	e420      	b.n	800d95c <dwt_ioctl+0x154>
 800e11a:	2c00      	cmp	r4, #0
 800e11c:	f001 82b0 	beq.w	800f680 <dwt_ioctl+0x1e78>
 800e120:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800e394 <dwt_ioctl+0xb8c>
 800e124:	2310      	movs	r3, #16
 800e126:	9300      	str	r3, [sp, #0]
 800e128:	23ff      	movs	r3, #255	; 0xff
 800e12a:	2200      	movs	r2, #0
 800e12c:	4641      	mov	r1, r8
 800e12e:	f7fe fcc5 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e132:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e136:	4630      	mov	r0, r6
 800e138:	f7fe f916 	bl	800c368 <ull_aon_read>
 800e13c:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800e140:	462a      	mov	r2, r5
 800e142:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e146:	4630      	mov	r0, r6
 800e148:	f7fe f92e 	bl	800c3a8 <ull_aon_write>
 800e14c:	f045 0204 	orr.w	r2, r5, #4
 800e150:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e154:	4630      	mov	r0, r6
 800e156:	f7fe f927 	bl	800c3a8 <ull_aon_write>
 800e15a:	2002      	movs	r0, #2
 800e15c:	f7f3 f99a 	bl	8001494 <deca_sleep>
 800e160:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800e164:	4630      	mov	r0, r6
 800e166:	f7fe f8ff 	bl	800c368 <ull_aon_read>
 800e16a:	4607      	mov	r7, r0
 800e16c:	f240 110f 	movw	r1, #271	; 0x10f
 800e170:	4630      	mov	r0, r6
 800e172:	f7fe f8f9 	bl	800c368 <ull_aon_read>
 800e176:	4681      	mov	r9, r0
 800e178:	462a      	mov	r2, r5
 800e17a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e17e:	4630      	mov	r0, r6
 800e180:	f7fe f912 	bl	800c3a8 <ull_aon_write>
 800e184:	2500      	movs	r5, #0
 800e186:	9500      	str	r5, [sp, #0]
 800e188:	23ef      	movs	r3, #239	; 0xef
 800e18a:	462a      	mov	r2, r5
 800e18c:	4641      	mov	r1, r8
 800e18e:	4630      	mov	r0, r6
 800e190:	f7fe fc94 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e194:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800e198:	8027      	strh	r7, [r4, #0]
 800e19a:	f7ff bbdf 	b.w	800d95c <dwt_ioctl+0x154>
 800e19e:	2c00      	cmp	r4, #0
 800e1a0:	f001 8271 	beq.w	800f686 <dwt_ioctl+0x1e7e>
 800e1a4:	78a2      	ldrb	r2, [r4, #2]
 800e1a6:	8821      	ldrh	r1, [r4, #0]
 800e1a8:	f7fe f926 	bl	800c3f8 <ull_configuresleep>
 800e1ac:	2500      	movs	r5, #0
 800e1ae:	f7ff bbd5 	b.w	800d95c <dwt_ioctl+0x154>
 800e1b2:	2c00      	cmp	r4, #0
 800e1b4:	f001 826a 	beq.w	800f68c <dwt_ioctl+0x1e84>
 800e1b8:	6824      	ldr	r4, [r4, #0]
 800e1ba:	f7fe f8a1 	bl	800c300 <ull_clearaonconfig>
 800e1be:	2001      	movs	r0, #1
 800e1c0:	f7f3 f968 	bl	8001494 <deca_sleep>
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	23ff      	movs	r3, #255	; 0xff
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	496f      	ldr	r1, [pc, #444]	; (800e38c <dwt_ioctl+0xb84>)
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f7fe fc74 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e1d4:	b97c      	cbnz	r4, 800e1f6 <dwt_ioctl+0x9ee>
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7ff faee 	bl	800d7b8 <ull_softreset_no_sema_fcmd>
 800e1dc:	2001      	movs	r0, #1
 800e1de:	f7f3 f959 	bl	8001494 <deca_sleep>
 800e1e2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e1e4:	2500      	movs	r5, #0
 800e1e6:	739d      	strb	r5, [r3, #14]
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	821a      	strh	r2, [r3, #16]
 800e1ec:	751d      	strb	r5, [r3, #20]
 800e1ee:	755d      	strb	r5, [r3, #21]
 800e1f0:	73dd      	strb	r5, [r3, #15]
 800e1f2:	f7ff bbb3 	b.w	800d95c <dwt_ioctl+0x154>
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f7ff faf2 	bl	800d7e0 <ull_softreset_fcmd>
 800e1fc:	e7ee      	b.n	800e1dc <dwt_ioctl+0x9d4>
 800e1fe:	2c00      	cmp	r4, #0
 800e200:	f001 8247 	beq.w	800f692 <dwt_ioctl+0x1e8a>
 800e204:	7823      	ldrb	r3, [r4, #0]
 800e206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e20a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e20c:	7353      	strb	r3, [r2, #13]
 800e20e:	2200      	movs	r2, #0
 800e210:	495f      	ldr	r1, [pc, #380]	; (800e390 <dwt_ioctl+0xb88>)
 800e212:	f7fe f81d 	bl	800c250 <dwt_write8bitoffsetreg>
 800e216:	2500      	movs	r5, #0
 800e218:	f7ff bba0 	b.w	800d95c <dwt_ioctl+0x154>
 800e21c:	2c00      	cmp	r4, #0
 800e21e:	f001 823b 	beq.w	800f698 <dwt_ioctl+0x1e90>
 800e222:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e224:	7b5b      	ldrb	r3, [r3, #13]
 800e226:	7023      	strb	r3, [r4, #0]
 800e228:	2500      	movs	r5, #0
 800e22a:	f7ff bb97 	b.w	800d95c <dwt_ioctl+0x154>
 800e22e:	2101      	movs	r1, #1
 800e230:	f7fe faf6 	bl	800c820 <ull_enable_rf_tx>
 800e234:	4630      	mov	r0, r6
 800e236:	f7fe fb27 	bl	800c888 <ull_enable_rftx_blocks>
 800e23a:	2101      	movs	r1, #1
 800e23c:	4630      	mov	r0, r6
 800e23e:	f7fd fe2d 	bl	800be9c <ull_force_clocks>
 800e242:	220f      	movs	r2, #15
 800e244:	2101      	movs	r1, #1
 800e246:	4630      	mov	r0, r6
 800e248:	f7fe ff48 	bl	800d0dc <ull_repeated_cw>
 800e24c:	2500      	movs	r5, #0
 800e24e:	f7ff bb85 	b.w	800d95c <dwt_ioctl+0x154>
 800e252:	2c00      	cmp	r4, #0
 800e254:	f001 8223 	beq.w	800f69e <dwt_ioctl+0x1e96>
 800e258:	6862      	ldr	r2, [r4, #4]
 800e25a:	6821      	ldr	r1, [r4, #0]
 800e25c:	f7fe ff3e 	bl	800d0dc <ull_repeated_cw>
 800e260:	2500      	movs	r5, #0
 800e262:	f7ff bb7b 	b.w	800d95c <dwt_ioctl+0x154>
 800e266:	2c00      	cmp	r4, #0
 800e268:	f001 821c 	beq.w	800f6a4 <dwt_ioctl+0x1e9c>
 800e26c:	4d49      	ldr	r5, [pc, #292]	; (800e394 <dwt_ioctl+0xb8c>)
 800e26e:	2200      	movs	r2, #0
 800e270:	4629      	mov	r1, r5
 800e272:	f7fd fa12 	bl	800b69a <dwt_read8bitoffsetreg>
 800e276:	4680      	mov	r8, r0
 800e278:	2302      	movs	r3, #2
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	23ff      	movs	r3, #255	; 0xff
 800e27e:	2200      	movs	r2, #0
 800e280:	4629      	mov	r1, r5
 800e282:	4630      	mov	r0, r6
 800e284:	f7fe fc1a 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e288:	2304      	movs	r3, #4
 800e28a:	2200      	movs	r2, #0
 800e28c:	4942      	ldr	r1, [pc, #264]	; (800e398 <dwt_ioctl+0xb90>)
 800e28e:	4630      	mov	r0, r6
 800e290:	f7fd ffde 	bl	800c250 <dwt_write8bitoffsetreg>
 800e294:	2301      	movs	r3, #1
 800e296:	2200      	movs	r2, #0
 800e298:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e29c:	4630      	mov	r0, r6
 800e29e:	f7fd ffd7 	bl	800c250 <dwt_write8bitoffsetreg>
 800e2a2:	4f3e      	ldr	r7, [pc, #248]	; (800e39c <dwt_ioctl+0xb94>)
 800e2a4:	2500      	movs	r5, #0
 800e2a6:	462a      	mov	r2, r5
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7fd f9f5 	bl	800b69a <dwt_read8bitoffsetreg>
 800e2b0:	f010 0f01 	tst.w	r0, #1
 800e2b4:	d0f7      	beq.n	800e2a6 <dwt_ioctl+0xa9e>
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7fd f9da 	bl	800b676 <dwt_read16bitoffsetreg>
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f7fd ffbf 	bl	800c250 <dwt_write8bitoffsetreg>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	4930      	ldr	r1, [pc, #192]	; (800e398 <dwt_ioctl+0xb90>)
 800e2d8:	4630      	mov	r0, r6
 800e2da:	f7fd ffb9 	bl	800c250 <dwt_write8bitoffsetreg>
 800e2de:	4643      	mov	r3, r8
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	492c      	ldr	r1, [pc, #176]	; (800e394 <dwt_ioctl+0xb8c>)
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f7fd ffb3 	bl	800c250 <dwt_write8bitoffsetreg>
 800e2ea:	8025      	strh	r5, [r4, #0]
 800e2ec:	2500      	movs	r5, #0
 800e2ee:	f7ff bb35 	b.w	800d95c <dwt_ioctl+0x154>
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	f001 81d9 	beq.w	800f6aa <dwt_ioctl+0x1ea2>
 800e2f8:	7920      	ldrb	r0, [r4, #4]
 800e2fa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e2fc:	7a9b      	ldrb	r3, [r3, #10]
 800e2fe:	1ac0      	subs	r0, r0, r3
 800e300:	f7f2 fd84 	bl	8000e0c <__aeabi_i2f>
 800e304:	4926      	ldr	r1, [pc, #152]	; (800e3a0 <dwt_ioctl+0xb98>)
 800e306:	f7f2 fdd5 	bl	8000eb4 <__aeabi_fmul>
 800e30a:	4926      	ldr	r1, [pc, #152]	; (800e3a4 <dwt_ioctl+0xb9c>)
 800e30c:	f7f2 fcca 	bl	8000ca4 <__addsf3>
 800e310:	6020      	str	r0, [r4, #0]
 800e312:	2500      	movs	r5, #0
 800e314:	f7ff bb22 	b.w	800d95c <dwt_ioctl+0x154>
 800e318:	2c00      	cmp	r4, #0
 800e31a:	f001 81c9 	beq.w	800f6b0 <dwt_ioctl+0x1ea8>
 800e31e:	7920      	ldrb	r0, [r4, #4]
 800e320:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e322:	7a5b      	ldrb	r3, [r3, #9]
 800e324:	1ac0      	subs	r0, r0, r3
 800e326:	f7f2 fd71 	bl	8000e0c <__aeabi_i2f>
 800e32a:	491f      	ldr	r1, [pc, #124]	; (800e3a8 <dwt_ioctl+0xba0>)
 800e32c:	f7f2 fdc2 	bl	8000eb4 <__aeabi_fmul>
 800e330:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800e334:	f7f2 fdbe 	bl	8000eb4 <__aeabi_fmul>
 800e338:	491c      	ldr	r1, [pc, #112]	; (800e3ac <dwt_ioctl+0xba4>)
 800e33a:	f7f2 fe6f 	bl	800101c <__aeabi_fdiv>
 800e33e:	491c      	ldr	r1, [pc, #112]	; (800e3b0 <dwt_ioctl+0xba8>)
 800e340:	f7f2 fcb0 	bl	8000ca4 <__addsf3>
 800e344:	6020      	str	r0, [r4, #0]
 800e346:	2500      	movs	r5, #0
 800e348:	f7ff bb08 	b.w	800d95c <dwt_ioctl+0x154>
 800e34c:	2c00      	cmp	r4, #0
 800e34e:	f001 81b2 	beq.w	800f6b6 <dwt_ioctl+0x1eae>
 800e352:	6824      	ldr	r4, [r4, #0]
 800e354:	2101      	movs	r1, #1
 800e356:	f7fe fa63 	bl	800c820 <ull_enable_rf_tx>
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7fe fa94 	bl	800c888 <ull_enable_rftx_blocks>
 800e360:	2101      	movs	r1, #1
 800e362:	4630      	mov	r0, r6
 800e364:	f7fd fd9a 	bl	800be9c <ull_force_clocks>
 800e368:	4621      	mov	r1, r4
 800e36a:	4630      	mov	r0, r6
 800e36c:	f7fe fc4c 	bl	800cc08 <ull_repeated_frames>
 800e370:	2500      	movs	r5, #0
 800e372:	f7ff baf3 	b.w	800d95c <dwt_ioctl+0x154>
 800e376:	bf00      	nop
 800e378:	00180014 	.word	0x00180014
 800e37c:	000c001c 	.word	0x000c001c
 800e380:	000c0018 	.word	0x000c0018
 800e384:	000a0004 	.word	0x000a0004
 800e388:	00110008 	.word	0x00110008
 800e38c:	00110004 	.word	0x00110004
 800e390:	00090014 	.word	0x00090014
 800e394:	00070048 	.word	0x00070048
 800e398:	00070034 	.word	0x00070034
 800e39c:	00080004 	.word	0x00080004
 800e3a0:	3f866666 	.word	0x3f866666
 800e3a4:	41b00000 	.word	0x41b00000
 800e3a8:	3ecccccd 	.word	0x3ecccccd
 800e3ac:	437f0000 	.word	0x437f0000
 800e3b0:	40400000 	.word	0x40400000
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	9500      	str	r5, [sp, #0]
 800e3b8:	23ef      	movs	r3, #239	; 0xef
 800e3ba:	462a      	mov	r2, r5
 800e3bc:	49c7      	ldr	r1, [pc, #796]	; (800e6dc <dwt_ioctl+0xed4>)
 800e3be:	f7fe fb7d 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e3c2:	2105      	movs	r1, #5
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f7fd fd69 	bl	800be9c <ull_force_clocks>
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7fd feeb 	bl	800c1a8 <ull_disable_rf_tx>
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7fd fede 	bl	800c194 <ull_disable_rftx_blocks>
 800e3d8:	f7ff bac0 	b.w	800d95c <dwt_ioctl+0x154>
 800e3dc:	2500      	movs	r5, #0
 800e3de:	9500      	str	r5, [sp, #0]
 800e3e0:	23ef      	movs	r3, #239	; 0xef
 800e3e2:	462a      	mov	r2, r5
 800e3e4:	49bd      	ldr	r1, [pc, #756]	; (800e6dc <dwt_ioctl+0xed4>)
 800e3e6:	f7fe fb69 	bl	800cabc <dwt_modify8bitoffsetreg>
 800e3ea:	f7ff bab7 	b.w	800d95c <dwt_ioctl+0x154>
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	f001 8164 	beq.w	800f6bc <dwt_ioctl+0x1eb4>
 800e3f4:	6821      	ldr	r1, [r4, #0]
 800e3f6:	f7fe fc07 	bl	800cc08 <ull_repeated_frames>
 800e3fa:	2500      	movs	r5, #0
 800e3fc:	f7ff baae 	b.w	800d95c <dwt_ioctl+0x154>
 800e400:	2200      	movs	r2, #0
 800e402:	49b7      	ldr	r1, [pc, #732]	; (800e6e0 <dwt_ioctl+0xed8>)
 800e404:	f7fd f937 	bl	800b676 <dwt_read16bitoffsetreg>
 800e408:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800e40c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800e410:	bf18      	it	ne
 800e412:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800e416:	b22d      	sxth	r5, r5
 800e418:	8025      	strh	r5, [r4, #0]
 800e41a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e41c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e420:	1aed      	subs	r5, r5, r3
 800e422:	f7ff ba9b 	b.w	800d95c <dwt_ioctl+0x154>
 800e426:	2c00      	cmp	r4, #0
 800e428:	f001 814b 	beq.w	800f6c2 <dwt_ioctl+0x1eba>
 800e42c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e430:	7a23      	ldrb	r3, [r4, #8]
 800e432:	f899 2013 	ldrb.w	r2, [r9, #19]
 800e436:	2aff      	cmp	r2, #255	; 0xff
 800e438:	f000 8122 	beq.w	800e680 <dwt_ioctl+0xe78>
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d136      	bne.n	800e4ae <dwt_ioctl+0xca6>
 800e440:	f8d9 3000 	ldr.w	r3, [r9]
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	230c      	movs	r3, #12
 800e448:	2200      	movs	r2, #0
 800e44a:	49a6      	ldr	r1, [pc, #664]	; (800e6e4 <dwt_ioctl+0xedc>)
 800e44c:	f7fd fd0a 	bl	800be64 <dwt_writetodevice>
 800e450:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e454:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800e458:	18d1      	adds	r1, r2, r3
 800e45a:	f899 2012 	ldrb.w	r2, [r9, #18]
 800e45e:	2a00      	cmp	r2, #0
 800e460:	d15f      	bne.n	800e522 <dwt_ioctl+0xd1a>
 800e462:	f899 0010 	ldrb.w	r0, [r9, #16]
 800e466:	2800      	cmp	r0, #0
 800e468:	bf0b      	itete	eq
 800e46a:	227f      	moveq	r2, #127	; 0x7f
 800e46c:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800e470:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800e474:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800e478:	f899 0013 	ldrb.w	r0, [r9, #19]
 800e47c:	1a12      	subs	r2, r2, r0
 800e47e:	3a02      	subs	r2, #2
 800e480:	4291      	cmp	r1, r2
 800e482:	f200 8103 	bhi.w	800e68c <dwt_ioctl+0xe84>
 800e486:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800e48a:	9200      	str	r2, [sp, #0]
 800e48c:	2200      	movs	r2, #0
 800e48e:	4629      	mov	r1, r5
 800e490:	4630      	mov	r0, r6
 800e492:	f7fd fce7 	bl	800be64 <dwt_writetodevice>
 800e496:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800e49a:	f899 200c 	ldrb.w	r2, [r9, #12]
 800e49e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e4a2:	9100      	str	r1, [sp, #0]
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f7fd fcdc 	bl	800be64 <dwt_writetodevice>
 800e4ac:	e04a      	b.n	800e544 <dwt_ioctl+0xd3c>
 800e4ae:	f8d9 3000 	ldr.w	r3, [r9]
 800e4b2:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800e4b6:	7a9a      	ldrb	r2, [r3, #10]
 800e4b8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800e4bc:	7a5a      	ldrb	r2, [r3, #9]
 800e4be:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800e4c2:	7a1a      	ldrb	r2, [r3, #8]
 800e4c4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800e4c8:	79da      	ldrb	r2, [r3, #7]
 800e4ca:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800e4ce:	799a      	ldrb	r2, [r3, #6]
 800e4d0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800e4d4:	795a      	ldrb	r2, [r3, #5]
 800e4d6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800e4da:	791a      	ldrb	r2, [r3, #4]
 800e4dc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800e4e0:	78da      	ldrb	r2, [r3, #3]
 800e4e2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800e4e6:	789a      	ldrb	r2, [r3, #2]
 800e4e8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800e4ec:	785a      	ldrb	r2, [r3, #1]
 800e4ee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800e4f2:	781a      	ldrb	r2, [r3, #0]
 800e4f4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800e4fe:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800e502:	0a09      	lsrs	r1, r1, #8
 800e504:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800e508:	7b19      	ldrb	r1, [r3, #12]
 800e50a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800e50e:	7adb      	ldrb	r3, [r3, #11]
 800e510:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800e514:	ab0c      	add	r3, sp, #48	; 0x30
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	2310      	movs	r3, #16
 800e51a:	4972      	ldr	r1, [pc, #456]	; (800e6e4 <dwt_ioctl+0xedc>)
 800e51c:	f7fd fca2 	bl	800be64 <dwt_writetodevice>
 800e520:	e796      	b.n	800e450 <dwt_ioctl+0xc48>
 800e522:	2a01      	cmp	r2, #1
 800e524:	f040 80af 	bne.w	800e686 <dwt_ioctl+0xe7e>
 800e528:	f899 3011 	ldrb.w	r3, [r9, #17]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e532:	bf08      	it	eq
 800e534:	237f      	moveq	r3, #127	; 0x7f
 800e536:	f899 2013 	ldrb.w	r2, [r9, #19]
 800e53a:	1a9b      	subs	r3, r3, r2
 800e53c:	3b02      	subs	r3, #2
 800e53e:	4299      	cmp	r1, r3
 800e540:	f200 80a7 	bhi.w	800e692 <dwt_ioctl+0xe8a>
 800e544:	f899 2010 	ldrb.w	r2, [r9, #16]
 800e548:	1e53      	subs	r3, r2, #1
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d940      	bls.n	800e5d2 <dwt_ioctl+0xdca>
 800e550:	f899 3011 	ldrb.w	r3, [r9, #17]
 800e554:	1e59      	subs	r1, r3, #1
 800e556:	b2c9      	uxtb	r1, r1
 800e558:	2901      	cmp	r1, #1
 800e55a:	d947      	bls.n	800e5ec <dwt_ioctl+0xde4>
 800e55c:	2b04      	cmp	r3, #4
 800e55e:	d04c      	beq.n	800e5fa <dwt_ioctl+0xdf2>
 800e560:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800e564:	2200      	movs	r2, #0
 800e566:	4960      	ldr	r1, [pc, #384]	; (800e6e8 <dwt_ioctl+0xee0>)
 800e568:	4630      	mov	r0, r6
 800e56a:	f7fd fce3 	bl	800bf34 <dwt_write32bitoffsetreg>
 800e56e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800e572:	4a5e      	ldr	r2, [pc, #376]	; (800e6ec <dwt_ioctl+0xee4>)
 800e574:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800e578:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e580:	4313      	orrs	r3, r2
 800e582:	2200      	movs	r2, #0
 800e584:	495a      	ldr	r1, [pc, #360]	; (800e6f0 <dwt_ioctl+0xee8>)
 800e586:	4630      	mov	r0, r6
 800e588:	f7fd fcd4 	bl	800bf34 <dwt_write32bitoffsetreg>
 800e58c:	2301      	movs	r3, #1
 800e58e:	2200      	movs	r2, #0
 800e590:	4958      	ldr	r1, [pc, #352]	; (800e6f4 <dwt_ioctl+0xeec>)
 800e592:	4630      	mov	r0, r6
 800e594:	f7fd fe5c 	bl	800c250 <dwt_write8bitoffsetreg>
 800e598:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800e6f8 <dwt_ioctl+0xef0>
 800e59c:	2700      	movs	r7, #0
 800e59e:	463a      	mov	r2, r7
 800e5a0:	4641      	mov	r1, r8
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f7fd f879 	bl	800b69a <dwt_read8bitoffsetreg>
 800e5a8:	f010 0f05 	tst.w	r0, #5
 800e5ac:	d0f7      	beq.n	800e59e <dwt_ioctl+0xd96>
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4950      	ldr	r1, [pc, #320]	; (800e6f8 <dwt_ioctl+0xef0>)
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f7fd fe4a 	bl	800c250 <dwt_write8bitoffsetreg>
 800e5bc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800e5c0:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d025      	beq.n	800e614 <dwt_ioctl+0xe0c>
 800e5c8:	b26b      	sxtb	r3, r5
 800e5ca:	7023      	strb	r3, [r4, #0]
 800e5cc:	2500      	movs	r5, #0
 800e5ce:	f7ff b9c5 	b.w	800d95c <dwt_ioctl+0x154>
 800e5d2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e5d4:	7b9b      	ldrb	r3, [r3, #14]
 800e5d6:	2b03      	cmp	r3, #3
 800e5d8:	f001 8123 	beq.w	800f822 <dwt_ioctl+0x201a>
 800e5dc:	f899 3011 	ldrb.w	r3, [r9, #17]
 800e5e0:	1e5a      	subs	r2, r3, #1
 800e5e2:	b2d2      	uxtb	r2, r2
 800e5e4:	2a01      	cmp	r2, #1
 800e5e6:	d912      	bls.n	800e60e <dwt_ioctl+0xe06>
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	e7b7      	b.n	800e55c <dwt_ioctl+0xd54>
 800e5ec:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e5ee:	7b9b      	ldrb	r3, [r3, #14]
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	bf0c      	ite	eq
 800e5f4:	2302      	moveq	r3, #2
 800e5f6:	2301      	movne	r3, #1
 800e5f8:	e7b2      	b.n	800e560 <dwt_ioctl+0xd58>
 800e5fa:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800e5fe:	2910      	cmp	r1, #16
 800e600:	d9ae      	bls.n	800e560 <dwt_ioctl+0xd58>
 800e602:	f06f 0303 	mvn.w	r3, #3
 800e606:	e7e0      	b.n	800e5ca <dwt_ioctl+0xdc2>
 800e608:	2202      	movs	r2, #2
 800e60a:	4613      	mov	r3, r2
 800e60c:	e7a8      	b.n	800e560 <dwt_ioctl+0xd58>
 800e60e:	2201      	movs	r2, #1
 800e610:	4613      	mov	r3, r2
 800e612:	e7a5      	b.n	800e560 <dwt_ioctl+0xd58>
 800e614:	f899 3012 	ldrb.w	r3, [r9, #18]
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d1d5      	bne.n	800e5c8 <dwt_ioctl+0xdc0>
 800e61c:	f899 2011 	ldrb.w	r2, [r9, #17]
 800e620:	1e53      	subs	r3, r2, #1
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b01      	cmp	r3, #1
 800e626:	d91b      	bls.n	800e660 <dwt_ioctl+0xe58>
 800e628:	2a03      	cmp	r2, #3
 800e62a:	bf0c      	ite	eq
 800e62c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800e630:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800e634:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800e638:	b112      	cbz	r2, 800e640 <dwt_ioctl+0xe38>
 800e63a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e63e:	b9c3      	cbnz	r3, 800e672 <dwt_ioctl+0xe6a>
 800e640:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e644:	2900      	cmp	r1, #0
 800e646:	d0bf      	beq.n	800e5c8 <dwt_ioctl+0xdc0>
 800e648:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d0bb      	beq.n	800e5c8 <dwt_ioctl+0xdc0>
 800e650:	f899 200c 	ldrb.w	r2, [r9, #12]
 800e654:	9100      	str	r1, [sp, #0]
 800e656:	4639      	mov	r1, r7
 800e658:	4630      	mov	r0, r6
 800e65a:	f7fc ffec 	bl	800b636 <dwt_readfromdevice>
 800e65e:	e7b3      	b.n	800e5c8 <dwt_ioctl+0xdc0>
 800e660:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800e662:	7b9b      	ldrb	r3, [r3, #14]
 800e664:	2b03      	cmp	r3, #3
 800e666:	bf0c      	ite	eq
 800e668:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800e66c:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800e670:	e7e0      	b.n	800e634 <dwt_ioctl+0xe2c>
 800e672:	9200      	str	r2, [sp, #0]
 800e674:	2200      	movs	r2, #0
 800e676:	4639      	mov	r1, r7
 800e678:	4630      	mov	r0, r6
 800e67a:	f7fc ffdc 	bl	800b636 <dwt_readfromdevice>
 800e67e:	e7df      	b.n	800e640 <dwt_ioctl+0xe38>
 800e680:	f06f 0302 	mvn.w	r3, #2
 800e684:	e7a1      	b.n	800e5ca <dwt_ioctl+0xdc2>
 800e686:	f06f 0301 	mvn.w	r3, #1
 800e68a:	e79e      	b.n	800e5ca <dwt_ioctl+0xdc2>
 800e68c:	f04f 33ff 	mov.w	r3, #4294967295
 800e690:	e79b      	b.n	800e5ca <dwt_ioctl+0xdc2>
 800e692:	f04f 33ff 	mov.w	r3, #4294967295
 800e696:	e798      	b.n	800e5ca <dwt_ioctl+0xdc2>
 800e698:	7a23      	ldrb	r3, [r4, #8]
 800e69a:	79e1      	ldrb	r1, [r4, #7]
 800e69c:	79a2      	ldrb	r2, [r4, #6]
 800e69e:	00d2      	lsls	r2, r2, #3
 800e6a0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	7962      	ldrb	r2, [r4, #5]
 800e6a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e6ac:	7922      	ldrb	r2, [r4, #4]
 800e6ae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e6b2:	78e2      	ldrb	r2, [r4, #3]
 800e6b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6b8:	78a2      	ldrb	r2, [r4, #2]
 800e6ba:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800e6be:	7862      	ldrb	r2, [r4, #1]
 800e6c0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e6c4:	7822      	ldrb	r2, [r4, #0]
 800e6c6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	490b      	ldr	r1, [pc, #44]	; (800e6fc <dwt_ioctl+0xef4>)
 800e6d0:	f7fd fbd3 	bl	800be7a <dwt_write16bitoffsetreg>
 800e6d4:	2500      	movs	r5, #0
 800e6d6:	f7ff b941 	b.w	800d95c <dwt_ioctl+0x154>
 800e6da:	bf00      	nop
 800e6dc:	000f0028 	.word	0x000f0028
 800e6e0:	00020008 	.word	0x00020008
 800e6e4:	00010034 	.word	0x00010034
 800e6e8:	00010044 	.word	0x00010044
 800e6ec:	0001ff80 	.word	0x0001ff80
 800e6f0:	00010048 	.word	0x00010048
 800e6f4:	0001004c 	.word	0x0001004c
 800e6f8:	00010050 	.word	0x00010050
 800e6fc:	00010030 	.word	0x00010030
 800e700:	2c00      	cmp	r4, #0
 800e702:	f000 87e1 	beq.w	800f6c8 <dwt_ioctl+0x1ec0>
 800e706:	7863      	ldrb	r3, [r4, #1]
 800e708:	b133      	cbz	r3, 800e718 <dwt_ioctl+0xf10>
 800e70a:	085b      	lsrs	r3, r3, #1
 800e70c:	3b01      	subs	r3, #1
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	7023      	strb	r3, [r4, #0]
 800e712:	2500      	movs	r5, #0
 800e714:	f7ff b922 	b.w	800d95c <dwt_ioctl+0x154>
 800e718:	2300      	movs	r3, #0
 800e71a:	e7f9      	b.n	800e710 <dwt_ioctl+0xf08>
 800e71c:	2200      	movs	r2, #0
 800e71e:	49d0      	ldr	r1, [pc, #832]	; (800ea60 <dwt_ioctl+0x1258>)
 800e720:	f7fc ff93 	bl	800b64a <dwt_read32bitoffsetreg>
 800e724:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800e728:	8023      	strh	r3, [r4, #0]
 800e72a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800e72e:	8060      	strh	r0, [r4, #2]
 800e730:	2200      	movs	r2, #0
 800e732:	49cc      	ldr	r1, [pc, #816]	; (800ea64 <dwt_ioctl+0x125c>)
 800e734:	4630      	mov	r0, r6
 800e736:	f7fc ff88 	bl	800b64a <dwt_read32bitoffsetreg>
 800e73a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800e73e:	80a3      	strh	r3, [r4, #4]
 800e740:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800e744:	80e0      	strh	r0, [r4, #6]
 800e746:	2200      	movs	r2, #0
 800e748:	49c7      	ldr	r1, [pc, #796]	; (800ea68 <dwt_ioctl+0x1260>)
 800e74a:	4630      	mov	r0, r6
 800e74c:	f7fc ff7d 	bl	800b64a <dwt_read32bitoffsetreg>
 800e750:	7220      	strb	r0, [r4, #8]
 800e752:	0c00      	lsrs	r0, r0, #16
 800e754:	7260      	strb	r0, [r4, #9]
 800e756:	2200      	movs	r2, #0
 800e758:	49c4      	ldr	r1, [pc, #784]	; (800ea6c <dwt_ioctl+0x1264>)
 800e75a:	4630      	mov	r0, r6
 800e75c:	f7fc ff75 	bl	800b64a <dwt_read32bitoffsetreg>
 800e760:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800e764:	81a3      	strh	r3, [r4, #12]
 800e766:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800e76a:	8160      	strh	r0, [r4, #10]
 800e76c:	2200      	movs	r2, #0
 800e76e:	49c0      	ldr	r1, [pc, #768]	; (800ea70 <dwt_ioctl+0x1268>)
 800e770:	4630      	mov	r0, r6
 800e772:	f7fc ff6a 	bl	800b64a <dwt_read32bitoffsetreg>
 800e776:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800e77a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800e77e:	73a0      	strb	r0, [r4, #14]
 800e780:	2200      	movs	r2, #0
 800e782:	49bc      	ldr	r1, [pc, #752]	; (800ea74 <dwt_ioctl+0x126c>)
 800e784:	4630      	mov	r0, r6
 800e786:	f7fc ff60 	bl	800b64a <dwt_read32bitoffsetreg>
 800e78a:	7460      	strb	r0, [r4, #17]
 800e78c:	0c00      	lsrs	r0, r0, #16
 800e78e:	74a0      	strb	r0, [r4, #18]
 800e790:	2200      	movs	r2, #0
 800e792:	49b9      	ldr	r1, [pc, #740]	; (800ea78 <dwt_ioctl+0x1270>)
 800e794:	4630      	mov	r0, r6
 800e796:	f7fc ff58 	bl	800b64a <dwt_read32bitoffsetreg>
 800e79a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800e79e:	f8a4 0013 	strh.w	r0, [r4, #19]
 800e7a2:	2500      	movs	r5, #0
 800e7a4:	7565      	strb	r5, [r4, #21]
 800e7a6:	75a5      	strb	r5, [r4, #22]
 800e7a8:	462a      	mov	r2, r5
 800e7aa:	49b4      	ldr	r1, [pc, #720]	; (800ea7c <dwt_ioctl+0x1274>)
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7fc ff74 	bl	800b69a <dwt_read8bitoffsetreg>
 800e7b2:	75e0      	strb	r0, [r4, #23]
 800e7b4:	f7ff b8d2 	b.w	800d95c <dwt_ioctl+0x154>
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	f7fd fdc1 	bl	800c340 <ull_configeventcounters>
 800e7be:	2500      	movs	r5, #0
 800e7c0:	f7ff b8cc 	b.w	800d95c <dwt_ioctl+0x154>
 800e7c4:	2c00      	cmp	r4, #0
 800e7c6:	f000 8782 	beq.w	800f6ce <dwt_ioctl+0x1ec6>
 800e7ca:	8823      	ldrh	r3, [r4, #0]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	49ac      	ldr	r1, [pc, #688]	; (800ea80 <dwt_ioctl+0x1278>)
 800e7d0:	f7fd fb53 	bl	800be7a <dwt_write16bitoffsetreg>
 800e7d4:	2500      	movs	r5, #0
 800e7d6:	f7ff b8c1 	b.w	800d95c <dwt_ioctl+0x154>
 800e7da:	2c00      	cmp	r4, #0
 800e7dc:	f000 877a 	beq.w	800f6d4 <dwt_ioctl+0x1ecc>
 800e7e0:	6825      	ldr	r5, [r4, #0]
 800e7e2:	b935      	cbnz	r5, 800e7f2 <dwt_ioctl+0xfea>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	49a6      	ldr	r1, [pc, #664]	; (800ea84 <dwt_ioctl+0x127c>)
 800e7ea:	f7fd fb46 	bl	800be7a <dwt_write16bitoffsetreg>
 800e7ee:	f7ff b8b5 	b.w	800d95c <dwt_ioctl+0x154>
 800e7f2:	7962      	ldrb	r2, [r4, #5]
 800e7f4:	7923      	ldrb	r3, [r4, #4]
 800e7f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e7fe:	2200      	movs	r2, #0
 800e800:	49a0      	ldr	r1, [pc, #640]	; (800ea84 <dwt_ioctl+0x127c>)
 800e802:	f7fd fb3a 	bl	800be7a <dwt_write16bitoffsetreg>
 800e806:	2500      	movs	r5, #0
 800e808:	f7ff b8a8 	b.w	800d95c <dwt_ioctl+0x154>
 800e80c:	2c00      	cmp	r4, #0
 800e80e:	f000 8764 	beq.w	800f6da <dwt_ioctl+0x1ed2>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	b94b      	cbnz	r3, 800e82a <dwt_ioctl+0x1022>
 800e816:	2500      	movs	r5, #0
 800e818:	9500      	str	r5, [sp, #0]
 800e81a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800e81e:	462a      	mov	r2, r5
 800e820:	2110      	movs	r1, #16
 800e822:	f7fe fb67 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800e826:	f7ff b899 	b.w	800d95c <dwt_ioctl+0x154>
 800e82a:	2200      	movs	r2, #0
 800e82c:	2134      	movs	r1, #52	; 0x34
 800e82e:	f7fd fb81 	bl	800bf34 <dwt_write32bitoffsetreg>
 800e832:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e83c:	2200      	movs	r2, #0
 800e83e:	2110      	movs	r1, #16
 800e840:	4630      	mov	r0, r6
 800e842:	f7fe fb57 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800e846:	2500      	movs	r5, #0
 800e848:	f7ff b888 	b.w	800d95c <dwt_ioctl+0x154>
 800e84c:	2c00      	cmp	r4, #0
 800e84e:	f000 8747 	beq.w	800f6e0 <dwt_ioctl+0x1ed8>
 800e852:	8861      	ldrh	r1, [r4, #2]
 800e854:	f7fd fd88 	bl	800c368 <ull_aon_read>
 800e858:	7020      	strb	r0, [r4, #0]
 800e85a:	2500      	movs	r5, #0
 800e85c:	f7ff b87e 	b.w	800d95c <dwt_ioctl+0x154>
 800e860:	2c00      	cmp	r4, #0
 800e862:	f000 8740 	beq.w	800f6e6 <dwt_ioctl+0x1ede>
 800e866:	78a2      	ldrb	r2, [r4, #2]
 800e868:	8821      	ldrh	r1, [r4, #0]
 800e86a:	f7fd fd9d 	bl	800c3a8 <ull_aon_write>
 800e86e:	2500      	movs	r5, #0
 800e870:	f7ff b874 	b.w	800d95c <dwt_ioctl+0x154>
 800e874:	4b84      	ldr	r3, [pc, #528]	; (800ea88 <dwt_ioctl+0x1280>)
 800e876:	4a85      	ldr	r2, [pc, #532]	; (800ea8c <dwt_ioctl+0x1284>)
 800e878:	2d01      	cmp	r5, #1
 800e87a:	bf18      	it	ne
 800e87c:	4613      	movne	r3, r2
 800e87e:	2d01      	cmp	r5, #1
 800e880:	4983      	ldr	r1, [pc, #524]	; (800ea90 <dwt_ioctl+0x1288>)
 800e882:	bf18      	it	ne
 800e884:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800e888:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e88a:	7b92      	ldrb	r2, [r2, #14]
 800e88c:	2a01      	cmp	r2, #1
 800e88e:	d012      	beq.n	800e8b6 <dwt_ioctl+0x10ae>
 800e890:	2a03      	cmp	r2, #3
 800e892:	d117      	bne.n	800e8c4 <dwt_ioctl+0x10bc>
 800e894:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800e898:	3a01      	subs	r2, #1
 800e89a:	441a      	add	r2, r3
 800e89c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e8a0:	f7fc fee9 	bl	800b676 <dwt_read16bitoffsetreg>
 800e8a4:	09c0      	lsrs	r0, r0, #7
 800e8a6:	8020      	strh	r0, [r4, #0]
 800e8a8:	8825      	ldrh	r5, [r4, #0]
 800e8aa:	3500      	adds	r5, #0
 800e8ac:	bf18      	it	ne
 800e8ae:	2501      	movne	r5, #1
 800e8b0:	426d      	negs	r5, r5
 800e8b2:	f7ff b853 	b.w	800d95c <dwt_ioctl+0x154>
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f7fc fedc 	bl	800b676 <dwt_read16bitoffsetreg>
 800e8be:	09c0      	lsrs	r0, r0, #7
 800e8c0:	8020      	strh	r0, [r4, #0]
 800e8c2:	e7f1      	b.n	800e8a8 <dwt_ioctl+0x10a0>
 800e8c4:	2202      	movs	r2, #2
 800e8c6:	f7fc fed6 	bl	800b676 <dwt_read16bitoffsetreg>
 800e8ca:	09c0      	lsrs	r0, r0, #7
 800e8cc:	8020      	strh	r0, [r4, #0]
 800e8ce:	e7eb      	b.n	800e8a8 <dwt_ioctl+0x10a0>
 800e8d0:	2c00      	cmp	r4, #0
 800e8d2:	f000 870b 	beq.w	800f6ec <dwt_ioctl+0x1ee4>
 800e8d6:	7821      	ldrb	r1, [r4, #0]
 800e8d8:	f7fe fb26 	bl	800cf28 <ull_setleds>
 800e8dc:	2500      	movs	r5, #0
 800e8de:	f7ff b83d 	b.w	800d95c <dwt_ioctl+0x154>
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	f7fe f9a8 	bl	800cc38 <ull_setdwstate>
 800e8e8:	2500      	movs	r5, #0
 800e8ea:	f7ff b837 	b.w	800d95c <dwt_ioctl+0x154>
 800e8ee:	9400      	str	r4, [sp, #0]
 800e8f0:	2304      	movs	r3, #4
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	211c      	movs	r1, #28
 800e8f6:	f7fc fe9e 	bl	800b636 <dwt_readfromdevice>
 800e8fa:	2500      	movs	r5, #0
 800e8fc:	f7ff b82e 	b.w	800d95c <dwt_ioctl+0x154>
 800e900:	2c00      	cmp	r4, #0
 800e902:	f000 86f6 	beq.w	800f6f2 <dwt_ioctl+0x1eea>
 800e906:	2202      	movs	r2, #2
 800e908:	2144      	movs	r1, #68	; 0x44
 800e90a:	f7fc feb4 	bl	800b676 <dwt_read16bitoffsetreg>
 800e90e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800e912:	7020      	strb	r0, [r4, #0]
 800e914:	2500      	movs	r5, #0
 800e916:	f7ff b821 	b.w	800d95c <dwt_ioctl+0x154>
 800e91a:	2c00      	cmp	r4, #0
 800e91c:	f000 86ec 	beq.w	800f6f8 <dwt_ioctl+0x1ef0>
 800e920:	2200      	movs	r2, #0
 800e922:	2144      	movs	r1, #68	; 0x44
 800e924:	f7fc feb9 	bl	800b69a <dwt_read8bitoffsetreg>
 800e928:	f000 0001 	and.w	r0, r0, #1
 800e92c:	7020      	strb	r0, [r4, #0]
 800e92e:	2500      	movs	r5, #0
 800e930:	f7ff b814 	b.w	800d95c <dwt_ioctl+0x154>
 800e934:	2c00      	cmp	r4, #0
 800e936:	f000 86e2 	beq.w	800f6fe <dwt_ioctl+0x1ef6>
 800e93a:	8862      	ldrh	r2, [r4, #2]
 800e93c:	8821      	ldrh	r1, [r4, #0]
 800e93e:	f7fe f9d7 	bl	800ccf0 <ull_configureframefilter>
 800e942:	2500      	movs	r5, #0
 800e944:	f7ff b80a 	b.w	800d95c <dwt_ioctl+0x154>
 800e948:	9400      	str	r4, [sp, #0]
 800e94a:	2308      	movs	r3, #8
 800e94c:	2200      	movs	r2, #0
 800e94e:	2104      	movs	r1, #4
 800e950:	f7fd fa88 	bl	800be64 <dwt_writetodevice>
 800e954:	2500      	movs	r5, #0
 800e956:	f7ff b801 	b.w	800d95c <dwt_ioctl+0x154>
 800e95a:	9400      	str	r4, [sp, #0]
 800e95c:	2308      	movs	r3, #8
 800e95e:	2200      	movs	r2, #0
 800e960:	2104      	movs	r1, #4
 800e962:	f7fc fe68 	bl	800b636 <dwt_readfromdevice>
 800e966:	2500      	movs	r5, #0
 800e968:	f7fe bff8 	b.w	800d95c <dwt_ioctl+0x154>
 800e96c:	2c00      	cmp	r4, #0
 800e96e:	f000 86c9 	beq.w	800f704 <dwt_ioctl+0x1efc>
 800e972:	8823      	ldrh	r3, [r4, #0]
 800e974:	2202      	movs	r2, #2
 800e976:	210c      	movs	r1, #12
 800e978:	f7fd fa7f 	bl	800be7a <dwt_write16bitoffsetreg>
 800e97c:	2500      	movs	r5, #0
 800e97e:	f7fe bfed 	b.w	800d95c <dwt_ioctl+0x154>
 800e982:	2c00      	cmp	r4, #0
 800e984:	f000 86c1 	beq.w	800f70a <dwt_ioctl+0x1f02>
 800e988:	8823      	ldrh	r3, [r4, #0]
 800e98a:	2200      	movs	r2, #0
 800e98c:	210c      	movs	r1, #12
 800e98e:	f7fd fa74 	bl	800be7a <dwt_write16bitoffsetreg>
 800e992:	2500      	movs	r5, #0
 800e994:	f7fe bfe2 	b.w	800d95c <dwt_ioctl+0x154>
 800e998:	4621      	mov	r1, r4
 800e99a:	f7fd fa41 	bl	800be20 <ull_readrxtimestamp>
 800e99e:	2500      	movs	r5, #0
 800e9a0:	f7fe bfdc 	b.w	800d95c <dwt_ioctl+0x154>
 800e9a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e9a6:	7b9b      	ldrb	r3, [r3, #14]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d00b      	beq.n	800e9c4 <dwt_ioctl+0x11bc>
 800e9ac:	2b03      	cmp	r3, #3
 800e9ae:	d112      	bne.n	800e9d6 <dwt_ioctl+0x11ce>
 800e9b0:	9400      	str	r4, [sp, #0]
 800e9b2:	2305      	movs	r3, #5
 800e9b4:	2220      	movs	r2, #32
 800e9b6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e9ba:	f7fc fe3c 	bl	800b636 <dwt_readfromdevice>
 800e9be:	2500      	movs	r5, #0
 800e9c0:	f7fe bfcc 	b.w	800d95c <dwt_ioctl+0x154>
 800e9c4:	9400      	str	r4, [sp, #0]
 800e9c6:	2305      	movs	r3, #5
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	4932      	ldr	r1, [pc, #200]	; (800ea94 <dwt_ioctl+0x128c>)
 800e9cc:	f7fc fe33 	bl	800b636 <dwt_readfromdevice>
 800e9d0:	2500      	movs	r5, #0
 800e9d2:	f7fe bfc3 	b.w	800d95c <dwt_ioctl+0x154>
 800e9d6:	9400      	str	r4, [sp, #0]
 800e9d8:	2305      	movs	r3, #5
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e9e0:	f7fc fe29 	bl	800b636 <dwt_readfromdevice>
 800e9e4:	2500      	movs	r5, #0
 800e9e6:	f7fe bfb9 	b.w	800d95c <dwt_ioctl+0x154>
 800e9ea:	2500      	movs	r5, #0
 800e9ec:	f804 5b01 	strb.w	r5, [r4], #1
 800e9f0:	9400      	str	r4, [sp, #0]
 800e9f2:	2304      	movs	r3, #4
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	216c      	movs	r1, #108	; 0x6c
 800e9f8:	f7fc fe1d 	bl	800b636 <dwt_readfromdevice>
 800e9fc:	f7fe bfae 	b.w	800d95c <dwt_ioctl+0x154>
 800ea00:	2c00      	cmp	r4, #0
 800ea02:	f000 8685 	beq.w	800f710 <dwt_ioctl+0x1f08>
 800ea06:	2201      	movs	r2, #1
 800ea08:	2160      	movs	r1, #96	; 0x60
 800ea0a:	f7fc fe1e 	bl	800b64a <dwt_read32bitoffsetreg>
 800ea0e:	6020      	str	r0, [r4, #0]
 800ea10:	2500      	movs	r5, #0
 800ea12:	f7fe bfa3 	b.w	800d95c <dwt_ioctl+0x154>
 800ea16:	2c00      	cmp	r4, #0
 800ea18:	f000 867d 	beq.w	800f716 <dwt_ioctl+0x1f0e>
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2160      	movs	r1, #96	; 0x60
 800ea20:	f7fc fe13 	bl	800b64a <dwt_read32bitoffsetreg>
 800ea24:	6020      	str	r0, [r4, #0]
 800ea26:	2500      	movs	r5, #0
 800ea28:	f7fe bf98 	b.w	800d95c <dwt_ioctl+0x154>
 800ea2c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ea2e:	7b9b      	ldrb	r3, [r3, #14]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d00b      	beq.n	800ea4c <dwt_ioctl+0x1244>
 800ea34:	2b03      	cmp	r3, #3
 800ea36:	d131      	bne.n	800ea9c <dwt_ioctl+0x1294>
 800ea38:	9400      	str	r4, [sp, #0]
 800ea3a:	2305      	movs	r3, #5
 800ea3c:	2228      	movs	r2, #40	; 0x28
 800ea3e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ea42:	f7fc fdf8 	bl	800b636 <dwt_readfromdevice>
 800ea46:	2500      	movs	r5, #0
 800ea48:	f7fe bf88 	b.w	800d95c <dwt_ioctl+0x154>
 800ea4c:	9400      	str	r4, [sp, #0]
 800ea4e:	2305      	movs	r3, #5
 800ea50:	2200      	movs	r2, #0
 800ea52:	4911      	ldr	r1, [pc, #68]	; (800ea98 <dwt_ioctl+0x1290>)
 800ea54:	f7fc fdef 	bl	800b636 <dwt_readfromdevice>
 800ea58:	2500      	movs	r5, #0
 800ea5a:	f7fe bf7f 	b.w	800d95c <dwt_ioctl+0x154>
 800ea5e:	bf00      	nop
 800ea60:	000f0004 	.word	0x000f0004
 800ea64:	000f0008 	.word	0x000f0008
 800ea68:	000f000c 	.word	0x000f000c
 800ea6c:	000f0010 	.word	0x000f0010
 800ea70:	000f0014 	.word	0x000f0014
 800ea74:	000f0018 	.word	0x000f0018
 800ea78:	000f001c 	.word	0x000f001c
 800ea7c:	000f0020 	.word	0x000f0020
 800ea80:	00060004 	.word	0x00060004
 800ea84:	0011001c 	.word	0x0011001c
 800ea88:	00180034 	.word	0x00180034
 800ea8c:	0018002c 	.word	0x0018002c
 800ea90:	000c0014 	.word	0x000c0014
 800ea94:	00180020 	.word	0x00180020
 800ea98:	00180028 	.word	0x00180028
 800ea9c:	9400      	str	r4, [sp, #0]
 800ea9e:	2305      	movs	r3, #5
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	49ce      	ldr	r1, [pc, #824]	; (800eddc <dwt_ioctl+0x15d4>)
 800eaa4:	f7fc fdc7 	bl	800b636 <dwt_readfromdevice>
 800eaa8:	2500      	movs	r5, #0
 800eaaa:	f7fe bf57 	b.w	800d95c <dwt_ioctl+0x154>
 800eaae:	2c00      	cmp	r4, #0
 800eab0:	f000 8634 	beq.w	800f71c <dwt_ioctl+0x1f14>
 800eab4:	2200      	movs	r2, #0
 800eab6:	211c      	movs	r1, #28
 800eab8:	f7fc fdc7 	bl	800b64a <dwt_read32bitoffsetreg>
 800eabc:	6020      	str	r0, [r4, #0]
 800eabe:	2500      	movs	r5, #0
 800eac0:	f7fe bf4c 	b.w	800d95c <dwt_ioctl+0x154>
 800eac4:	2c00      	cmp	r4, #0
 800eac6:	f000 862c 	beq.w	800f722 <dwt_ioctl+0x1f1a>
 800eaca:	8825      	ldrh	r5, [r4, #0]
 800eacc:	6867      	ldr	r7, [r4, #4]
 800eace:	7a23      	ldrb	r3, [r4, #8]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f000 8629 	beq.w	800f728 <dwt_ioctl+0x1f20>
 800ead6:	463c      	mov	r4, r7
 800ead8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800eadc:	4629      	mov	r1, r5
 800eade:	4630      	mov	r0, r6
 800eae0:	f7fd fa06 	bl	800bef0 <_dwt_otpread>
 800eae4:	f844 0b04 	str.w	r0, [r4], #4
 800eae8:	3501      	adds	r5, #1
 800eaea:	b2ad      	uxth	r5, r5
 800eaec:	42bc      	cmp	r4, r7
 800eaee:	d1f5      	bne.n	800eadc <dwt_ioctl+0x12d4>
 800eaf0:	2500      	movs	r5, #0
 800eaf2:	f7fe bf33 	b.w	800d95c <dwt_ioctl+0x154>
 800eaf6:	2c00      	cmp	r4, #0
 800eaf8:	f000 8619 	beq.w	800f72e <dwt_ioctl+0x1f26>
 800eafc:	7823      	ldrb	r3, [r4, #0]
 800eafe:	2201      	movs	r2, #1
 800eb00:	2124      	movs	r1, #36	; 0x24
 800eb02:	f7fd fba5 	bl	800c250 <dwt_write8bitoffsetreg>
 800eb06:	2500      	movs	r5, #0
 800eb08:	f7fe bf28 	b.w	800d95c <dwt_ioctl+0x154>
 800eb0c:	f7fe f914 	bl	800cd38 <ull_run_pgfcal>
 800eb10:	4605      	mov	r5, r0
 800eb12:	f7fe bf23 	b.w	800d95c <dwt_ioctl+0x154>
 800eb16:	4611      	mov	r1, r2
 800eb18:	f7fe fa54 	bl	800cfc4 <ull_pgf_cal>
 800eb1c:	4605      	mov	r5, r0
 800eb1e:	f7fe bf1d 	b.w	800d95c <dwt_ioctl+0x154>
 800eb22:	2c00      	cmp	r4, #0
 800eb24:	f000 8606 	beq.w	800f734 <dwt_ioctl+0x1f2c>
 800eb28:	78a5      	ldrb	r5, [r4, #2]
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	f7fd f9b6 	bl	800be9c <ull_force_clocks>
 800eb30:	2100      	movs	r1, #0
 800eb32:	4630      	mov	r0, r6
 800eb34:	f7fd fe74 	bl	800c820 <ull_enable_rf_tx>
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7fd fea5 	bl	800c888 <ull_enable_rftx_blocks>
 800eb3e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800eb42:	2200      	movs	r2, #0
 800eb44:	49a6      	ldr	r1, [pc, #664]	; (800ede0 <dwt_ioctl+0x15d8>)
 800eb46:	4630      	mov	r0, r6
 800eb48:	f7fd fb82 	bl	800c250 <dwt_write8bitoffsetreg>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	23ff      	movs	r3, #255	; 0xff
 800eb52:	2200      	movs	r2, #0
 800eb54:	49a3      	ldr	r1, [pc, #652]	; (800ede4 <dwt_ioctl+0x15dc>)
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7fd ffb0 	bl	800cabc <dwt_modify8bitoffsetreg>
 800eb5c:	4fa1      	ldr	r7, [pc, #644]	; (800ede4 <dwt_ioctl+0x15dc>)
 800eb5e:	2500      	movs	r5, #0
 800eb60:	462a      	mov	r2, r5
 800eb62:	4639      	mov	r1, r7
 800eb64:	4630      	mov	r0, r6
 800eb66:	f7fc fd98 	bl	800b69a <dwt_read8bitoffsetreg>
 800eb6a:	f010 0f01 	tst.w	r0, #1
 800eb6e:	d1f7      	bne.n	800eb60 <dwt_ioctl+0x1358>
 800eb70:	2200      	movs	r2, #0
 800eb72:	499d      	ldr	r1, [pc, #628]	; (800ede8 <dwt_ioctl+0x15e0>)
 800eb74:	4630      	mov	r0, r6
 800eb76:	f7fc fd7e 	bl	800b676 <dwt_read16bitoffsetreg>
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7fd fb09 	bl	800c194 <ull_disable_rftx_blocks>
 800eb82:	2100      	movs	r1, #0
 800eb84:	4630      	mov	r0, r6
 800eb86:	f7fd fb0f 	bl	800c1a8 <ull_disable_rf_tx>
 800eb8a:	2105      	movs	r1, #5
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f7fd f985 	bl	800be9c <ull_force_clocks>
 800eb92:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800eb96:	8025      	strh	r5, [r4, #0]
 800eb98:	2500      	movs	r5, #0
 800eb9a:	f7fe bedf 	b.w	800d95c <dwt_ioctl+0x154>
 800eb9e:	2102      	movs	r1, #2
 800eba0:	f7fe f84a 	bl	800cc38 <ull_setdwstate>
 800eba4:	2101      	movs	r1, #1
 800eba6:	4630      	mov	r0, r6
 800eba8:	f7fe f846 	bl	800cc38 <ull_setdwstate>
 800ebac:	2432      	movs	r4, #50	; 0x32
 800ebae:	f04f 0814 	mov.w	r8, #20
 800ebb2:	2700      	movs	r7, #0
 800ebb4:	2544      	movs	r5, #68	; 0x44
 800ebb6:	4640      	mov	r0, r8
 800ebb8:	f7f2 fc77 	bl	80014aa <deca_usleep>
 800ebbc:	463a      	mov	r2, r7
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7fc fd6a 	bl	800b69a <dwt_read8bitoffsetreg>
 800ebc6:	f010 0f02 	tst.w	r0, #2
 800ebca:	d105      	bne.n	800ebd8 <dwt_ioctl+0x13d0>
 800ebcc:	1e63      	subs	r3, r4, #1
 800ebce:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800ebd2:	d1f0      	bne.n	800ebb6 <dwt_ioctl+0x13ae>
 800ebd4:	2501      	movs	r5, #1
 800ebd6:	e000      	b.n	800ebda <dwt_ioctl+0x13d2>
 800ebd8:	2500      	movs	r5, #0
 800ebda:	426d      	negs	r5, r5
 800ebdc:	f7fe bebe 	b.w	800d95c <dwt_ioctl+0x154>
 800ebe0:	2c00      	cmp	r4, #0
 800ebe2:	f000 85aa 	beq.w	800f73a <dwt_ioctl+0x1f32>
 800ebe6:	7823      	ldrb	r3, [r4, #0]
 800ebe8:	031b      	lsls	r3, r3, #12
 800ebea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ebee:	7862      	ldrb	r2, [r4, #1]
 800ebf0:	2a01      	cmp	r2, #1
 800ebf2:	bf08      	it	eq
 800ebf4:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800ebfe:	2200      	movs	r2, #0
 800ec00:	497a      	ldr	r1, [pc, #488]	; (800edec <dwt_ioctl+0x15e4>)
 800ec02:	f7fd fde9 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ec06:	2500      	movs	r5, #0
 800ec08:	f7fe bea8 	b.w	800d95c <dwt_ioctl+0x154>
 800ec0c:	2c00      	cmp	r4, #0
 800ec0e:	f000 8597 	beq.w	800f740 <dwt_ioctl+0x1f38>
 800ec12:	6862      	ldr	r2, [r4, #4]
 800ec14:	6821      	ldr	r1, [r4, #0]
 800ec16:	f7fd ff01 	bl	800ca1c <ull_setgpiomode>
 800ec1a:	2500      	movs	r5, #0
 800ec1c:	f7fe be9e 	b.w	800d95c <dwt_ioctl+0x154>
 800ec20:	2c00      	cmp	r4, #0
 800ec22:	f000 8590 	beq.w	800f746 <dwt_ioctl+0x1f3e>
 800ec26:	8823      	ldrh	r3, [r4, #0]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4971      	ldr	r1, [pc, #452]	; (800edf0 <dwt_ioctl+0x15e8>)
 800ec2c:	f7fd f925 	bl	800be7a <dwt_write16bitoffsetreg>
 800ec30:	2500      	movs	r5, #0
 800ec32:	f7fe be93 	b.w	800d95c <dwt_ioctl+0x154>
 800ec36:	2c00      	cmp	r4, #0
 800ec38:	f000 8588 	beq.w	800f74c <dwt_ioctl+0x1f44>
 800ec3c:	6862      	ldr	r2, [r4, #4]
 800ec3e:	8821      	ldrh	r1, [r4, #0]
 800ec40:	f7fe f9f0 	bl	800d024 <ull_setgpiovalue>
 800ec44:	2500      	movs	r5, #0
 800ec46:	f7fe be89 	b.w	800d95c <dwt_ioctl+0x154>
 800ec4a:	2c00      	cmp	r4, #0
 800ec4c:	f000 8581 	beq.w	800f752 <dwt_ioctl+0x1f4a>
 800ec50:	7865      	ldrb	r5, [r4, #1]
 800ec52:	7823      	ldrb	r3, [r4, #0]
 800ec54:	b18b      	cbz	r3, 800ec7a <dwt_ioctl+0x1472>
 800ec56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ec58:	2200      	movs	r2, #0
 800ec5a:	739a      	strb	r2, [r3, #14]
 800ec5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec60:	2208      	movs	r2, #8
 800ec62:	b1e5      	cbz	r5, 800ec9e <dwt_ioctl+0x1496>
 800ec64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec68:	9200      	str	r2, [sp, #0]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2110      	movs	r1, #16
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f7fd fdb2 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800ec74:	2500      	movs	r5, #0
 800ec76:	f7fe be71 	b.w	800d95c <dwt_ioctl+0x154>
 800ec7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	739a      	strb	r2, [r3, #14]
 800ec80:	2318      	movs	r3, #24
 800ec82:	2200      	movs	r2, #0
 800ec84:	495b      	ldr	r1, [pc, #364]	; (800edf4 <dwt_ioctl+0x15ec>)
 800ec86:	f7fd f955 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ec8a:	23e8      	movs	r3, #232	; 0xe8
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	495a      	ldr	r1, [pc, #360]	; (800edf8 <dwt_ioctl+0x15f0>)
 800ec90:	4630      	mov	r0, r6
 800ec92:	f7fd f94f 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ec96:	f06f 0308 	mvn.w	r3, #8
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	e7e1      	b.n	800ec62 <dwt_ioctl+0x145a>
 800ec9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eca2:	e7e1      	b.n	800ec68 <dwt_ioctl+0x1460>
 800eca4:	2c00      	cmp	r4, #0
 800eca6:	f000 8557 	beq.w	800f758 <dwt_ioctl+0x1f50>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	2200      	movs	r2, #0
 800ecae:	2130      	movs	r1, #48	; 0x30
 800ecb0:	f7fd f940 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ecb4:	2500      	movs	r5, #0
 800ecb6:	f7fe be51 	b.w	800d95c <dwt_ioctl+0x154>
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	f000 854f 	beq.w	800f75e <dwt_ioctl+0x1f56>
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	f7fc fcc1 	bl	800b64a <dwt_read32bitoffsetreg>
 800ecc8:	6020      	str	r0, [r4, #0]
 800ecca:	2500      	movs	r5, #0
 800eccc:	f7fe be46 	b.w	800d95c <dwt_ioctl+0x154>
 800ecd0:	4623      	mov	r3, r4
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7fd f92d 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ecda:	2500      	movs	r5, #0
 800ecdc:	f7fe be3e 	b.w	800d95c <dwt_ioctl+0x154>
 800ece0:	2c00      	cmp	r4, #0
 800ece2:	f000 853f 	beq.w	800f764 <dwt_ioctl+0x1f5c>
 800ece6:	2203      	movs	r2, #3
 800ece8:	4944      	ldr	r1, [pc, #272]	; (800edfc <dwt_ioctl+0x15f4>)
 800ecea:	f7fc fcd6 	bl	800b69a <dwt_read8bitoffsetreg>
 800ecee:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ecf2:	7020      	strb	r0, [r4, #0]
 800ecf4:	2500      	movs	r5, #0
 800ecf6:	f7fe be31 	b.w	800d95c <dwt_ioctl+0x154>
 800ecfa:	2c00      	cmp	r4, #0
 800ecfc:	f000 8535 	beq.w	800f76a <dwt_ioctl+0x1f62>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	2200      	movs	r2, #0
 800ed04:	2144      	movs	r1, #68	; 0x44
 800ed06:	f7fd f915 	bl	800bf34 <dwt_write32bitoffsetreg>
 800ed0a:	2500      	movs	r5, #0
 800ed0c:	f7fe be26 	b.w	800d95c <dwt_ioctl+0x154>
 800ed10:	2c00      	cmp	r4, #0
 800ed12:	f000 852d 	beq.w	800f770 <dwt_ioctl+0x1f68>
 800ed16:	8823      	ldrh	r3, [r4, #0]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2148      	movs	r1, #72	; 0x48
 800ed1c:	f7fd f8ad 	bl	800be7a <dwt_write16bitoffsetreg>
 800ed20:	2500      	movs	r5, #0
 800ed22:	f7fe be1b 	b.w	800d95c <dwt_ioctl+0x154>
 800ed26:	2c00      	cmp	r4, #0
 800ed28:	f000 8525 	beq.w	800f776 <dwt_ioctl+0x1f6e>
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	2144      	movs	r1, #68	; 0x44
 800ed30:	f7fc fc8b 	bl	800b64a <dwt_read32bitoffsetreg>
 800ed34:	6020      	str	r0, [r4, #0]
 800ed36:	2500      	movs	r5, #0
 800ed38:	f7fe be10 	b.w	800d95c <dwt_ioctl+0x154>
 800ed3c:	2c00      	cmp	r4, #0
 800ed3e:	f000 851d 	beq.w	800f77c <dwt_ioctl+0x1f74>
 800ed42:	2200      	movs	r2, #0
 800ed44:	2148      	movs	r1, #72	; 0x48
 800ed46:	f7fc fc96 	bl	800b676 <dwt_read16bitoffsetreg>
 800ed4a:	6020      	str	r0, [r4, #0]
 800ed4c:	2500      	movs	r5, #0
 800ed4e:	f7fe be05 	b.w	800d95c <dwt_ioctl+0x154>
 800ed52:	2c00      	cmp	r4, #0
 800ed54:	f000 8515 	beq.w	800f782 <dwt_ioctl+0x1f7a>
 800ed58:	7823      	ldrb	r3, [r4, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4928      	ldr	r1, [pc, #160]	; (800ee00 <dwt_ioctl+0x15f8>)
 800ed5e:	f7fd fa77 	bl	800c250 <dwt_write8bitoffsetreg>
 800ed62:	2500      	movs	r5, #0
 800ed64:	f7fe bdfa 	b.w	800d95c <dwt_ioctl+0x154>
 800ed68:	2c00      	cmp	r4, #0
 800ed6a:	f000 850d 	beq.w	800f788 <dwt_ioctl+0x1f80>
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2144      	movs	r1, #68	; 0x44
 800ed72:	f7fc fc92 	bl	800b69a <dwt_read8bitoffsetreg>
 800ed76:	7020      	strb	r0, [r4, #0]
 800ed78:	2500      	movs	r5, #0
 800ed7a:	f7fe bdef 	b.w	800d95c <dwt_ioctl+0x154>
 800ed7e:	2c00      	cmp	r4, #0
 800ed80:	f000 8505 	beq.w	800f78e <dwt_ioctl+0x1f86>
 800ed84:	f7fd fa70 	bl	800c268 <ull_getframelength>
 800ed88:	6020      	str	r0, [r4, #0]
 800ed8a:	2500      	movs	r5, #0
 800ed8c:	f7fe bde6 	b.w	800d95c <dwt_ioctl+0x154>
 800ed90:	2c00      	cmp	r4, #0
 800ed92:	f000 84ff 	beq.w	800f794 <dwt_ioctl+0x1f8c>
 800ed96:	2200      	movs	r2, #0
 800ed98:	491a      	ldr	r1, [pc, #104]	; (800ee04 <dwt_ioctl+0x15fc>)
 800ed9a:	f7fc fc6c 	bl	800b676 <dwt_read16bitoffsetreg>
 800ed9e:	8020      	strh	r0, [r4, #0]
 800eda0:	2500      	movs	r5, #0
 800eda2:	f7fe bddb 	b.w	800d95c <dwt_ioctl+0x154>
 800eda6:	2c00      	cmp	r4, #0
 800eda8:	f000 84f7 	beq.w	800f79a <dwt_ioctl+0x1f92>
 800edac:	2200      	movs	r2, #0
 800edae:	4916      	ldr	r1, [pc, #88]	; (800ee08 <dwt_ioctl+0x1600>)
 800edb0:	f7fc fc4b 	bl	800b64a <dwt_read32bitoffsetreg>
 800edb4:	6020      	str	r0, [r4, #0]
 800edb6:	2500      	movs	r5, #0
 800edb8:	f7fe bdd0 	b.w	800d95c <dwt_ioctl+0x154>
 800edbc:	2c00      	cmp	r4, #0
 800edbe:	f000 84ef 	beq.w	800f7a0 <dwt_ioctl+0x1f98>
 800edc2:	8823      	ldrh	r3, [r4, #0]
 800edc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800edce:	2200      	movs	r2, #0
 800edd0:	490d      	ldr	r1, [pc, #52]	; (800ee08 <dwt_ioctl+0x1600>)
 800edd2:	f7fe f88f 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800edd6:	2500      	movs	r5, #0
 800edd8:	f7fe bdc0 	b.w	800d95c <dwt_ioctl+0x154>
 800eddc:	000c0008 	.word	0x000c0008
 800ede0:	0007001c 	.word	0x0007001c
 800ede4:	00080010 	.word	0x00080010
 800ede8:	00080014 	.word	0x00080014
 800edec:	00070014 	.word	0x00070014
 800edf0:	00050008 	.word	0x00050008
 800edf4:	001f000c 	.word	0x001f000c
 800edf8:	001f0010 	.word	0x001f0010
 800edfc:	00030060 	.word	0x00030060
 800ee00:	00010018 	.word	0x00010018
 800ee04:	0005002c 	.word	0x0005002c
 800ee08:	000e001c 	.word	0x000e001c
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	f000 84ca 	beq.w	800f7a6 <dwt_ioctl+0x1f9e>
 800ee12:	88a7      	ldrh	r7, [r4, #4]
 800ee14:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800ee18:	7b23      	ldrb	r3, [r4, #12]
 800ee1a:	9306      	str	r3, [sp, #24]
 800ee1c:	6922      	ldr	r2, [r4, #16]
 800ee1e:	9204      	str	r2, [sp, #16]
 800ee20:	6962      	ldr	r2, [r4, #20]
 800ee22:	9205      	str	r2, [sp, #20]
 800ee24:	f00b 0203 	and.w	r2, fp, #3
 800ee28:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800ee2c:	2b05      	cmp	r3, #5
 800ee2e:	d145      	bne.n	800eebc <dwt_ioctl+0x16b4>
 800ee30:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800ee34:	bf28      	it	cs
 800ee36:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800ee3a:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800f174 <dwt_ioctl+0x196c>
 800ee3e:	2f04      	cmp	r7, #4
 800ee40:	d805      	bhi.n	800ee4e <dwt_ioctl+0x1646>
 800ee42:	eb09 0300 	add.w	r3, r9, r0
 800ee46:	785b      	ldrb	r3, [r3, #1]
 800ee48:	3b05      	subs	r3, #5
 800ee4a:	429f      	cmp	r7, r3
 800ee4c:	db3e      	blt.n	800eecc <dwt_ioctl+0x16c4>
 800ee4e:	2a01      	cmp	r2, #1
 800ee50:	d87c      	bhi.n	800ef4c <dwt_ioctl+0x1744>
 800ee52:	4bc4      	ldr	r3, [pc, #784]	; (800f164 <dwt_ioctl+0x195c>)
 800ee54:	5c99      	ldrb	r1, [r3, r2]
 800ee56:	463e      	mov	r6, r7
 800ee58:	42b9      	cmp	r1, r7
 800ee5a:	da79      	bge.n	800ef50 <dwt_ioctl+0x1748>
 800ee5c:	1c55      	adds	r5, r2, #1
 800ee5e:	fa53 f585 	uxtab	r5, r3, r5
 800ee62:	2300      	movs	r3, #0
 800ee64:	440b      	add	r3, r1
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	3201      	adds	r2, #1
 800ee6a:	b2d2      	uxtb	r2, r2
 800ee6c:	2a02      	cmp	r2, #2
 800ee6e:	d005      	beq.n	800ee7c <dwt_ioctl+0x1674>
 800ee70:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ee74:	eba6 0c03 	sub.w	ip, r6, r3
 800ee78:	4561      	cmp	r1, ip
 800ee7a:	dbf3      	blt.n	800ee64 <dwt_ioctl+0x165c>
 800ee7c:	429f      	cmp	r7, r3
 800ee7e:	bf08      	it	eq
 800ee80:	9003      	streq	r0, [sp, #12]
 800ee82:	d069      	beq.n	800ef58 <dwt_ioctl+0x1750>
 800ee84:	f107 0805 	add.w	r8, r7, #5
 800ee88:	fa1f f888 	uxth.w	r8, r8
 800ee8c:	2580      	movs	r5, #128	; 0x80
 800ee8e:	2100      	movs	r1, #0
 800ee90:	9107      	str	r1, [sp, #28]
 800ee92:	9103      	str	r1, [sp, #12]
 800ee94:	9108      	str	r1, [sp, #32]
 800ee96:	460e      	mov	r6, r1
 800ee98:	2105      	movs	r1, #5
 800ee9a:	46be      	mov	lr, r7
 800ee9c:	428f      	cmp	r7, r1
 800ee9e:	bf38      	it	cc
 800eea0:	468e      	movcc	lr, r1
 800eea2:	f1ae 0e05 	sub.w	lr, lr, #5
 800eea6:	fa1f fe8e 	uxth.w	lr, lr
 800eeaa:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800f164 <dwt_ioctl+0x195c>
 800eeae:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800eeb2:	468b      	mov	fp, r1
 800eeb4:	46bc      	mov	ip, r7
 800eeb6:	4637      	mov	r7, r6
 800eeb8:	f000 bcec 	b.w	800f894 <dwt_ioctl+0x208c>
 800eebc:	f240 1331 	movw	r3, #305	; 0x131
 800eec0:	429f      	cmp	r7, r3
 800eec2:	bf28      	it	cs
 800eec4:	461f      	movcs	r7, r3
 800eec6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800f178 <dwt_ioctl+0x1970>
 800eeca:	e7b8      	b.n	800ee3e <dwt_ioctl+0x1636>
 800eecc:	2300      	movs	r3, #0
 800eece:	9a05      	ldr	r2, [sp, #20]
 800eed0:	8013      	strh	r3, [r2, #0]
 800eed2:	9a04      	ldr	r2, [sp, #16]
 800eed4:	f8c2 b000 	str.w	fp, [r2]
 800eed8:	e04d      	b.n	800ef76 <dwt_ioctl+0x176e>
 800eeda:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800eede:	2300      	movs	r3, #0
 800eee0:	9a05      	ldr	r2, [sp, #20]
 800eee2:	8013      	strh	r3, [r2, #0]
 800eee4:	9b04      	ldr	r3, [sp, #16]
 800eee6:	f8c3 b000 	str.w	fp, [r3]
 800eeea:	f04f 33ff 	mov.w	r3, #4294967295
 800eeee:	e042      	b.n	800ef76 <dwt_ioctl+0x176e>
 800eef0:	fa1f fb81 	uxth.w	fp, r1
 800eef4:	9207      	str	r2, [sp, #28]
 800eef6:	9003      	str	r0, [sp, #12]
 800eef8:	9308      	str	r3, [sp, #32]
 800eefa:	2701      	movs	r7, #1
 800eefc:	f000 bcdb 	b.w	800f8b6 <dwt_ioctl+0x20ae>
 800ef00:	2f00      	cmp	r7, #0
 800ef02:	f040 849b 	bne.w	800f83c <dwt_ioctl+0x2034>
 800ef06:	4598      	cmp	r8, r3
 800ef08:	f200 84b0 	bhi.w	800f86c <dwt_ioctl+0x2064>
 800ef0c:	2e00      	cmp	r6, #0
 800ef0e:	d039      	beq.n	800ef84 <dwt_ioctl+0x177c>
 800ef10:	283f      	cmp	r0, #63	; 0x3f
 800ef12:	f000 84d5 	beq.w	800f8c0 <dwt_ioctl+0x20b8>
 800ef16:	2700      	movs	r7, #0
 800ef18:	f819 1000 	ldrb.w	r1, [r9, r0]
 800ef1c:	1a5b      	subs	r3, r3, r1
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	1e46      	subs	r6, r0, #1
 800ef22:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800ef26:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800ef2a:	bf18      	it	ne
 800ef2c:	2601      	movne	r6, #1
 800ef2e:	f000 bca9 	b.w	800f884 <dwt_ioctl+0x207c>
 800ef32:	9906      	ldr	r1, [sp, #24]
 800ef34:	2909      	cmp	r1, #9
 800ef36:	f040 84c9 	bne.w	800f8cc <dwt_ioctl+0x20c4>
 800ef3a:	213f      	movs	r1, #63	; 0x3f
 800ef3c:	9103      	str	r1, [sp, #12]
 800ef3e:	e00b      	b.n	800ef58 <dwt_ioctl+0x1750>
 800ef40:	b2b3      	uxth	r3, r6
 800ef42:	3201      	adds	r2, #1
 800ef44:	b2d2      	uxtb	r2, r2
 800ef46:	213f      	movs	r1, #63	; 0x3f
 800ef48:	9103      	str	r1, [sp, #12]
 800ef4a:	e005      	b.n	800ef58 <dwt_ioctl+0x1750>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	e795      	b.n	800ee7c <dwt_ioctl+0x1674>
 800ef50:	2300      	movs	r3, #0
 800ef52:	e793      	b.n	800ee7c <dwt_ioctl+0x1674>
 800ef54:	9003      	str	r0, [sp, #12]
 800ef56:	4663      	mov	r3, ip
 800ef58:	9905      	ldr	r1, [sp, #20]
 800ef5a:	800b      	strh	r3, [r1, #0]
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800ef62:	b2d2      	uxtb	r2, r2
 800ef64:	0413      	lsls	r3, r2, #16
 800ef66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef70:	9a04      	ldr	r2, [sp, #16]
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	2300      	movs	r3, #0
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	2500      	movs	r5, #0
 800ef7a:	f7fe bcef 	b.w	800d95c <dwt_ioctl+0x154>
 800ef7e:	9a07      	ldr	r2, [sp, #28]
 800ef80:	9b08      	ldr	r3, [sp, #32]
 800ef82:	e7e9      	b.n	800ef58 <dwt_ioctl+0x1750>
 800ef84:	9003      	str	r0, [sp, #12]
 800ef86:	e7e7      	b.n	800ef58 <dwt_ioctl+0x1750>
 800ef88:	9a07      	ldr	r2, [sp, #28]
 800ef8a:	9b08      	ldr	r3, [sp, #32]
 800ef8c:	e7e4      	b.n	800ef58 <dwt_ioctl+0x1750>
 800ef8e:	213f      	movs	r1, #63	; 0x3f
 800ef90:	9103      	str	r1, [sp, #12]
 800ef92:	e7e1      	b.n	800ef58 <dwt_ioctl+0x1750>
 800ef94:	2c00      	cmp	r4, #0
 800ef96:	f000 8409 	beq.w	800f7ac <dwt_ioctl+0x1fa4>
 800ef9a:	7827      	ldrb	r7, [r4, #0]
 800ef9c:	7864      	ldrb	r4, [r4, #1]
 800ef9e:	f7f2 fa5b 	bl	8001458 <decamutexon>
 800efa2:	4605      	mov	r5, r0
 800efa4:	2c02      	cmp	r4, #2
 800efa6:	d00e      	beq.n	800efc6 <dwt_ioctl+0x17be>
 800efa8:	2c04      	cmp	r4, #4
 800efaa:	d00c      	beq.n	800efc6 <dwt_ioctl+0x17be>
 800efac:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800efb0:	2c01      	cmp	r4, #1
 800efb2:	d01a      	beq.n	800efea <dwt_ioctl+0x17e2>
 800efb4:	43fb      	mvns	r3, r7
 800efb6:	2200      	movs	r2, #0
 800efb8:	9200      	str	r2, [sp, #0]
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	496a      	ldr	r1, [pc, #424]	; (800f168 <dwt_ioctl+0x1960>)
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7fd fd7c 	bl	800cabc <dwt_modify8bitoffsetreg>
 800efc4:	e005      	b.n	800efd2 <dwt_ioctl+0x17ca>
 800efc6:	463b      	mov	r3, r7
 800efc8:	2200      	movs	r2, #0
 800efca:	4967      	ldr	r1, [pc, #412]	; (800f168 <dwt_ioctl+0x1960>)
 800efcc:	4630      	mov	r0, r6
 800efce:	f7fd f93f 	bl	800c250 <dwt_write8bitoffsetreg>
 800efd2:	463b      	mov	r3, r7
 800efd4:	2200      	movs	r2, #0
 800efd6:	4965      	ldr	r1, [pc, #404]	; (800f16c <dwt_ioctl+0x1964>)
 800efd8:	4630      	mov	r0, r6
 800efda:	f7fc ffab 	bl	800bf34 <dwt_write32bitoffsetreg>
 800efde:	4628      	mov	r0, r5
 800efe0:	f7f2 fa4b 	bl	800147a <decamutexoff>
 800efe4:	2500      	movs	r5, #0
 800efe6:	f7fe bcb9 	b.w	800d95c <dwt_ioctl+0x154>
 800efea:	9700      	str	r7, [sp, #0]
 800efec:	23ff      	movs	r3, #255	; 0xff
 800efee:	2200      	movs	r2, #0
 800eff0:	495d      	ldr	r1, [pc, #372]	; (800f168 <dwt_ioctl+0x1960>)
 800eff2:	4630      	mov	r0, r6
 800eff4:	f7fd fd62 	bl	800cabc <dwt_modify8bitoffsetreg>
 800eff8:	e7eb      	b.n	800efd2 <dwt_ioctl+0x17ca>
 800effa:	2302      	movs	r3, #2
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	2500      	movs	r5, #0
 800f000:	9500      	str	r5, [sp, #0]
 800f002:	462b      	mov	r3, r5
 800f004:	462a      	mov	r2, r5
 800f006:	211a      	movs	r1, #26
 800f008:	f7fc fa97 	bl	800b53a <dwt_xfer3xxx>
 800f00c:	f7fe bca6 	b.w	800d95c <dwt_ioctl+0x154>
 800f010:	f7fe fbe6 	bl	800d7e0 <ull_softreset_fcmd>
 800f014:	2500      	movs	r5, #0
 800f016:	f7fe bca1 	b.w	800d95c <dwt_ioctl+0x154>
 800f01a:	f7fe fbcd 	bl	800d7b8 <ull_softreset_no_sema_fcmd>
 800f01e:	2500      	movs	r5, #0
 800f020:	f7fe bc9c 	b.w	800d95c <dwt_ioctl+0x154>
 800f024:	2302      	movs	r3, #2
 800f026:	9301      	str	r3, [sp, #4]
 800f028:	2500      	movs	r5, #0
 800f02a:	9500      	str	r5, [sp, #0]
 800f02c:	462b      	mov	r3, r5
 800f02e:	462a      	mov	r2, r5
 800f030:	2114      	movs	r1, #20
 800f032:	f7fc fa82 	bl	800b53a <dwt_xfer3xxx>
 800f036:	f7fe bc91 	b.w	800d95c <dwt_ioctl+0x154>
 800f03a:	2402      	movs	r4, #2
 800f03c:	9401      	str	r4, [sp, #4]
 800f03e:	2500      	movs	r5, #0
 800f040:	9500      	str	r5, [sp, #0]
 800f042:	462b      	mov	r3, r5
 800f044:	462a      	mov	r2, r5
 800f046:	2115      	movs	r1, #21
 800f048:	f7fc fa77 	bl	800b53a <dwt_xfer3xxx>
 800f04c:	9401      	str	r4, [sp, #4]
 800f04e:	9500      	str	r5, [sp, #0]
 800f050:	462b      	mov	r3, r5
 800f052:	462a      	mov	r2, r5
 800f054:	2115      	movs	r1, #21
 800f056:	4630      	mov	r0, r6
 800f058:	f7fc fa6f 	bl	800b53a <dwt_xfer3xxx>
 800f05c:	f7fe bc7e 	b.w	800d95c <dwt_ioctl+0x154>
 800f060:	2302      	movs	r3, #2
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	2500      	movs	r5, #0
 800f066:	9500      	str	r5, [sp, #0]
 800f068:	462b      	mov	r3, r5
 800f06a:	462a      	mov	r2, r5
 800f06c:	2116      	movs	r1, #22
 800f06e:	f7fc fa64 	bl	800b53a <dwt_xfer3xxx>
 800f072:	f7fe bc73 	b.w	800d95c <dwt_ioctl+0x154>
 800f076:	2c00      	cmp	r4, #0
 800f078:	f000 839b 	beq.w	800f7b2 <dwt_ioctl+0x1faa>
 800f07c:	b93a      	cbnz	r2, 800f08e <dwt_ioctl+0x1886>
 800f07e:	2200      	movs	r2, #0
 800f080:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f084:	f7fc fb09 	bl	800b69a <dwt_read8bitoffsetreg>
 800f088:	7020      	strb	r0, [r4, #0]
 800f08a:	f7fe bc67 	b.w	800d95c <dwt_ioctl+0x154>
 800f08e:	2201      	movs	r2, #1
 800f090:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f094:	f7fc fb01 	bl	800b69a <dwt_read8bitoffsetreg>
 800f098:	7020      	strb	r0, [r4, #0]
 800f09a:	2500      	movs	r5, #0
 800f09c:	f7fe bc5e 	b.w	800d95c <dwt_ioctl+0x154>
 800f0a0:	2c00      	cmp	r4, #0
 800f0a2:	f000 8389 	beq.w	800f7b8 <dwt_ioctl+0x1fb0>
 800f0a6:	7824      	ldrb	r4, [r4, #0]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f0ae:	f7fc faf4 	bl	800b69a <dwt_read8bitoffsetreg>
 800f0b2:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800f0b6:	4323      	orrs	r3, r4
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f7fd f8c6 	bl	800c250 <dwt_write8bitoffsetreg>
 800f0c4:	2500      	movs	r5, #0
 800f0c6:	f7fe bc49 	b.w	800d95c <dwt_ioctl+0x154>
 800f0ca:	2c00      	cmp	r4, #0
 800f0cc:	f000 8377 	beq.w	800f7be <dwt_ioctl+0x1fb6>
 800f0d0:	7824      	ldrb	r4, [r4, #0]
 800f0d2:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800f0d6:	d01e      	beq.n	800f116 <dwt_ioctl+0x190e>
 800f0d8:	2d01      	cmp	r5, #1
 800f0da:	f040 8373 	bne.w	800f7c4 <dwt_ioctl+0x1fbc>
 800f0de:	2502      	movs	r5, #2
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f7fc fad7 	bl	800b69a <dwt_read8bitoffsetreg>
 800f0ec:	b9ac      	cbnz	r4, 800f11a <dwt_ioctl+0x1912>
 800f0ee:	ea20 0305 	bic.w	r3, r0, r5
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f7fd f8a8 	bl	800c250 <dwt_write8bitoffsetreg>
 800f100:	2200      	movs	r2, #0
 800f102:	2110      	movs	r1, #16
 800f104:	4630      	mov	r0, r6
 800f106:	f7fc faa0 	bl	800b64a <dwt_read32bitoffsetreg>
 800f10a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800f10e:	d00b      	beq.n	800f128 <dwt_ioctl+0x1920>
 800f110:	2500      	movs	r5, #0
 800f112:	f7fe bc23 	b.w	800d95c <dwt_ioctl+0x154>
 800f116:	2504      	movs	r5, #4
 800f118:	e7e2      	b.n	800f0e0 <dwt_ioctl+0x18d8>
 800f11a:	2c01      	cmp	r4, #1
 800f11c:	f040 8356 	bne.w	800f7cc <dwt_ioctl+0x1fc4>
 800f120:	ea40 0305 	orr.w	r3, r0, r5
 800f124:	b2db      	uxtb	r3, r3
 800f126:	e7e5      	b.n	800f0f4 <dwt_ioctl+0x18ec>
 800f128:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	f04f 33ff 	mov.w	r3, #4294967295
 800f132:	2200      	movs	r2, #0
 800f134:	2110      	movs	r1, #16
 800f136:	4630      	mov	r0, r6
 800f138:	f7fd fb4e 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800f13c:	2500      	movs	r5, #0
 800f13e:	f7fe bc0d 	b.w	800d95c <dwt_ioctl+0x154>
 800f142:	2c00      	cmp	r4, #0
 800f144:	f000 8346 	beq.w	800f7d4 <dwt_ioctl+0x1fcc>
 800f148:	7823      	ldrb	r3, [r4, #0]
 800f14a:	035b      	lsls	r3, r3, #13
 800f14c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800f156:	2200      	movs	r2, #0
 800f158:	4905      	ldr	r1, [pc, #20]	; (800f170 <dwt_ioctl+0x1968>)
 800f15a:	f7fd fecb 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800f15e:	2500      	movs	r5, #0
 800f160:	f7fe bbfc 	b.w	800d95c <dwt_ioctl+0x154>
 800f164:	08019aac 	.word	0x08019aac
 800f168:	0001001c 	.word	0x0001001c
 800f16c:	00010018 	.word	0x00010018
 800f170:	000e000c 	.word	0x000e000c
 800f174:	08019a2c 	.word	0x08019a2c
 800f178:	08019a6c 	.word	0x08019a6c
 800f17c:	2c00      	cmp	r4, #0
 800f17e:	f000 832c 	beq.w	800f7da <dwt_ioctl+0x1fd2>
 800f182:	7825      	ldrb	r5, [r4, #0]
 800f184:	6862      	ldr	r2, [r4, #4]
 800f186:	2a01      	cmp	r2, #1
 800f188:	bf15      	itete	ne
 800f18a:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800f18e:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800f192:	27df      	movne	r7, #223	; 0xdf
 800f194:	27ef      	moveq	r7, #239	; 0xef
 800f196:	bf14      	ite	ne
 800f198:	f04f 0820 	movne.w	r8, #32
 800f19c:	f04f 0810 	moveq.w	r8, #16
 800f1a0:	2400      	movs	r4, #0
 800f1a2:	9400      	str	r4, [sp, #0]
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f1aa:	f7fd fb15 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800f1ae:	9400      	str	r4, [sp, #0]
 800f1b0:	463b      	mov	r3, r7
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	49be      	ldr	r1, [pc, #760]	; (800f4b0 <dwt_ioctl+0x1ca8>)
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f7fd fc80 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f1bc:	2d01      	cmp	r5, #1
 800f1be:	d003      	beq.n	800f1c8 <dwt_ioctl+0x19c0>
 800f1c0:	b165      	cbz	r5, 800f1dc <dwt_ioctl+0x19d4>
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	f7fe bbca 	b.w	800d95c <dwt_ioctl+0x154>
 800f1c8:	4625      	mov	r5, r4
 800f1ca:	9400      	str	r4, [sp, #0]
 800f1cc:	463b      	mov	r3, r7
 800f1ce:	4622      	mov	r2, r4
 800f1d0:	49b8      	ldr	r1, [pc, #736]	; (800f4b4 <dwt_ioctl+0x1cac>)
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7fd fc72 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f1d8:	f7fe bbc0 	b.w	800d95c <dwt_ioctl+0x154>
 800f1dc:	f8cd 8000 	str.w	r8, [sp]
 800f1e0:	23ff      	movs	r3, #255	; 0xff
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	49b3      	ldr	r1, [pc, #716]	; (800f4b4 <dwt_ioctl+0x1cac>)
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7fd fc68 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f1ec:	f7fe bbb6 	b.w	800d95c <dwt_ioctl+0x154>
 800f1f0:	2c00      	cmp	r4, #0
 800f1f2:	f000 82f5 	beq.w	800f7e0 <dwt_ioctl+0x1fd8>
 800f1f6:	7822      	ldrb	r2, [r4, #0]
 800f1f8:	f012 0f01 	tst.w	r2, #1
 800f1fc:	d02d      	beq.n	800f25a <dwt_ioctl+0x1a52>
 800f1fe:	0157      	lsls	r7, r2, #5
 800f200:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800f204:	2440      	movs	r4, #64	; 0x40
 800f206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800f20a:	f012 0f04 	tst.w	r2, #4
 800f20e:	d028      	beq.n	800f262 <dwt_ioctl+0x1a5a>
 800f210:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800f214:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f218:	0112      	lsls	r2, r2, #4
 800f21a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800f21e:	4317      	orrs	r7, r2
 800f220:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f224:	9200      	str	r2, [sp, #0]
 800f226:	43db      	mvns	r3, r3
 800f228:	2200      	movs	r2, #0
 800f22a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f22e:	4630      	mov	r0, r6
 800f230:	f7fd fad2 	bl	800c7d8 <dwt_modify32bitoffsetreg>
 800f234:	43e4      	mvns	r4, r4
 800f236:	b2a4      	uxth	r4, r4
 800f238:	2500      	movs	r5, #0
 800f23a:	9500      	str	r5, [sp, #0]
 800f23c:	4623      	mov	r3, r4
 800f23e:	462a      	mov	r2, r5
 800f240:	499b      	ldr	r1, [pc, #620]	; (800f4b0 <dwt_ioctl+0x1ca8>)
 800f242:	4630      	mov	r0, r6
 800f244:	f7fd fe56 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800f248:	9700      	str	r7, [sp, #0]
 800f24a:	4623      	mov	r3, r4
 800f24c:	462a      	mov	r2, r5
 800f24e:	4999      	ldr	r1, [pc, #612]	; (800f4b4 <dwt_ioctl+0x1cac>)
 800f250:	4630      	mov	r0, r6
 800f252:	f7fd fe4f 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800f256:	f7fe bb81 	b.w	800d95c <dwt_ioctl+0x154>
 800f25a:	2700      	movs	r7, #0
 800f25c:	463c      	mov	r4, r7
 800f25e:	463b      	mov	r3, r7
 800f260:	e7d3      	b.n	800f20a <dwt_ioctl+0x1a02>
 800f262:	2200      	movs	r2, #0
 800f264:	e7de      	b.n	800f224 <dwt_ioctl+0x1a1c>
 800f266:	2308      	movs	r3, #8
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	23ff      	movs	r3, #255	; 0xff
 800f26c:	2201      	movs	r2, #1
 800f26e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800f272:	f7fd fc23 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f276:	4c90      	ldr	r4, [pc, #576]	; (800f4b8 <dwt_ioctl+0x1cb0>)
 800f278:	2302      	movs	r3, #2
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	23ff      	movs	r3, #255	; 0xff
 800f27e:	2203      	movs	r2, #3
 800f280:	4621      	mov	r1, r4
 800f282:	4630      	mov	r0, r6
 800f284:	f7fd fc1a 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f288:	2500      	movs	r5, #0
 800f28a:	9500      	str	r5, [sp, #0]
 800f28c:	23f7      	movs	r3, #247	; 0xf7
 800f28e:	2201      	movs	r2, #1
 800f290:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800f294:	4630      	mov	r0, r6
 800f296:	f7fd fc11 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f29a:	9500      	str	r5, [sp, #0]
 800f29c:	23fd      	movs	r3, #253	; 0xfd
 800f29e:	2203      	movs	r2, #3
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f7fd fc0a 	bl	800cabc <dwt_modify8bitoffsetreg>
 800f2a8:	f7fe bb58 	b.w	800d95c <dwt_ioctl+0x154>
 800f2ac:	2c00      	cmp	r4, #0
 800f2ae:	f000 829a 	beq.w	800f7e6 <dwt_ioctl+0x1fde>
 800f2b2:	8863      	ldrh	r3, [r4, #2]
 800f2b4:	00db      	lsls	r3, r3, #3
 800f2b6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800f2ba:	7822      	ldrb	r2, [r4, #0]
 800f2bc:	b10a      	cbz	r2, 800f2c2 <dwt_ioctl+0x1aba>
 800f2be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	f24f 0307 	movw	r3, #61447	; 0xf007
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f7fd fe10 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800f2d4:	2500      	movs	r5, #0
 800f2d6:	f7fe bb41 	b.w	800d95c <dwt_ioctl+0x154>
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	f000 8286 	beq.w	800f7ec <dwt_ioctl+0x1fe4>
 800f2e0:	b2e3      	uxtb	r3, r4
 800f2e2:	1c9a      	adds	r2, r3, #2
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	4093      	lsls	r3, r2
 800f2e8:	3b01      	subs	r3, #1
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f2f2:	f7fc ffad 	bl	800c250 <dwt_write8bitoffsetreg>
 800f2f6:	2500      	movs	r5, #0
 800f2f8:	f7fe bb30 	b.w	800d95c <dwt_ioctl+0x154>
 800f2fc:	2c00      	cmp	r4, #0
 800f2fe:	f000 8278 	beq.w	800f7f2 <dwt_ioctl+0x1fea>
 800f302:	7ae3      	ldrb	r3, [r4, #11]
 800f304:	2b00      	cmp	r3, #0
 800f306:	f000 8277 	beq.w	800f7f8 <dwt_ioctl+0x1ff0>
 800f30a:	7b63      	ldrb	r3, [r4, #13]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d921      	bls.n	800f354 <dwt_ioctl+0x1b4c>
 800f310:	7b22      	ldrb	r2, [r4, #12]
 800f312:	4b6a      	ldr	r3, [pc, #424]	; (800f4bc <dwt_ioctl+0x1cb4>)
 800f314:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f318:	0112      	lsls	r2, r2, #4
 800f31a:	0ad3      	lsrs	r3, r2, #11
 800f31c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800f320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f324:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800f328:	bf28      	it	cs
 800f32a:	3301      	addcs	r3, #1
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	f64f 7380 	movw	r3, #65408	; 0xff80
 800f338:	2202      	movs	r2, #2
 800f33a:	4961      	ldr	r1, [pc, #388]	; (800f4c0 <dwt_ioctl+0x1cb8>)
 800f33c:	4630      	mov	r0, r6
 800f33e:	f7fd fdd9 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800f342:	2394      	movs	r3, #148	; 0x94
 800f344:	2200      	movs	r2, #0
 800f346:	495f      	ldr	r1, [pc, #380]	; (800f4c4 <dwt_ioctl+0x1cbc>)
 800f348:	4630      	mov	r0, r6
 800f34a:	f7fc ff81 	bl	800c250 <dwt_write8bitoffsetreg>
 800f34e:	2500      	movs	r5, #0
 800f350:	f7fe bb04 	b.w	800d95c <dwt_ioctl+0x154>
 800f354:	7b22      	ldrb	r2, [r4, #12]
 800f356:	4b59      	ldr	r3, [pc, #356]	; (800f4bc <dwt_ioctl+0x1cb4>)
 800f358:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f35c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800f360:	fb02 f203 	mul.w	r2, r2, r3
 800f364:	0c93      	lsrs	r3, r2, #18
 800f366:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800f36a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f36e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800f372:	bf28      	it	cs
 800f374:	3301      	addcs	r3, #1
 800f376:	b29b      	uxth	r3, r3
 800f378:	e7d9      	b.n	800f32e <dwt_ioctl+0x1b26>
 800f37a:	2c00      	cmp	r4, #0
 800f37c:	f000 823f 	beq.w	800f7fe <dwt_ioctl+0x1ff6>
 800f380:	2200      	movs	r2, #0
 800f382:	4951      	ldr	r1, [pc, #324]	; (800f4c8 <dwt_ioctl+0x1cc0>)
 800f384:	f7fc f961 	bl	800b64a <dwt_read32bitoffsetreg>
 800f388:	6020      	str	r0, [r4, #0]
 800f38a:	2500      	movs	r5, #0
 800f38c:	f7fe bae6 	b.w	800d95c <dwt_ioctl+0x154>
 800f390:	2c00      	cmp	r4, #0
 800f392:	f000 8237 	beq.w	800f804 <dwt_ioctl+0x1ffc>
 800f396:	2200      	movs	r2, #0
 800f398:	494c      	ldr	r1, [pc, #304]	; (800f4cc <dwt_ioctl+0x1cc4>)
 800f39a:	f7fc f956 	bl	800b64a <dwt_read32bitoffsetreg>
 800f39e:	6020      	str	r0, [r4, #0]
 800f3a0:	2500      	movs	r5, #0
 800f3a2:	f7fe badb 	b.w	800d95c <dwt_ioctl+0x154>
 800f3a6:	2c00      	cmp	r4, #0
 800f3a8:	f000 822f 	beq.w	800f80a <dwt_ioctl+0x2002>
 800f3ac:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	2500      	movs	r5, #0
 800f3b4:	f7fe bad2 	b.w	800d95c <dwt_ioctl+0x154>
 800f3b8:	2c00      	cmp	r4, #0
 800f3ba:	f000 8229 	beq.w	800f810 <dwt_ioctl+0x2008>
 800f3be:	2500      	movs	r5, #0
 800f3c0:	950b      	str	r5, [sp, #44]	; 0x2c
 800f3c2:	af10      	add	r7, sp, #64	; 0x40
 800f3c4:	2319      	movs	r3, #25
 800f3c6:	f847 3d10 	str.w	r3, [r7, #-16]!
 800f3ca:	9700      	str	r7, [sp, #0]
 800f3cc:	2304      	movs	r3, #4
 800f3ce:	462a      	mov	r2, r5
 800f3d0:	493f      	ldr	r1, [pc, #252]	; (800f4d0 <dwt_ioctl+0x1cc8>)
 800f3d2:	f7fc fd47 	bl	800be64 <dwt_writetodevice>
 800f3d6:	f641 7348 	movw	r3, #8008	; 0x1f48
 800f3da:	930c      	str	r3, [sp, #48]	; 0x30
 800f3dc:	9700      	str	r7, [sp, #0]
 800f3de:	2304      	movs	r3, #4
 800f3e0:	462a      	mov	r2, r5
 800f3e2:	493c      	ldr	r1, [pc, #240]	; (800f4d4 <dwt_ioctl+0x1ccc>)
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f7fc fd3d 	bl	800be64 <dwt_writetodevice>
 800f3ea:	ab0b      	add	r3, sp, #44	; 0x2c
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	2304      	movs	r3, #4
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f7fc f91d 	bl	800b636 <dwt_readfromdevice>
 800f3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3fe:	6023      	str	r3, [r4, #0]
 800f400:	f7fe baac 	b.w	800d95c <dwt_ioctl+0x154>
 800f404:	2c00      	cmp	r4, #0
 800f406:	f000 8206 	beq.w	800f816 <dwt_ioctl+0x200e>
 800f40a:	2200      	movs	r2, #0
 800f40c:	4932      	ldr	r1, [pc, #200]	; (800f4d8 <dwt_ioctl+0x1cd0>)
 800f40e:	f7fc f91c 	bl	800b64a <dwt_read32bitoffsetreg>
 800f412:	b280      	uxth	r0, r0
 800f414:	6020      	str	r0, [r4, #0]
 800f416:	2200      	movs	r2, #0
 800f418:	4930      	ldr	r1, [pc, #192]	; (800f4dc <dwt_ioctl+0x1cd4>)
 800f41a:	4630      	mov	r0, r6
 800f41c:	f7fc f915 	bl	800b64a <dwt_read32bitoffsetreg>
 800f420:	0d43      	lsrs	r3, r0, #21
 800f422:	019b      	lsls	r3, r3, #6
 800f424:	b29b      	uxth	r3, r3
 800f426:	6063      	str	r3, [r4, #4]
 800f428:	2500      	movs	r5, #0
 800f42a:	f7fe ba97 	b.w	800d95c <dwt_ioctl+0x154>
 800f42e:	2c00      	cmp	r4, #0
 800f430:	f000 81f4 	beq.w	800f81c <dwt_ioctl+0x2014>
 800f434:	7d63      	ldrb	r3, [r4, #21]
 800f436:	b133      	cbz	r3, 800f446 <dwt_ioctl+0x1c3e>
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d05b      	beq.n	800f4f4 <dwt_ioctl+0x1cec>
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	f000 8082 	beq.w	800f546 <dwt_ioctl+0x1d3e>
 800f442:	23ff      	movs	r3, #255	; 0xff
 800f444:	e02f      	b.n	800f4a6 <dwt_ioctl+0x1c9e>
 800f446:	2200      	movs	r2, #0
 800f448:	4925      	ldr	r1, [pc, #148]	; (800f4e0 <dwt_ioctl+0x1cd8>)
 800f44a:	f7fc f8fe 	bl	800b64a <dwt_read32bitoffsetreg>
 800f44e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800f452:	6020      	str	r0, [r4, #0]
 800f454:	2200      	movs	r2, #0
 800f456:	4923      	ldr	r1, [pc, #140]	; (800f4e4 <dwt_ioctl+0x1cdc>)
 800f458:	4630      	mov	r0, r6
 800f45a:	f7fc f8f6 	bl	800b64a <dwt_read32bitoffsetreg>
 800f45e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f462:	6060      	str	r0, [r4, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	4920      	ldr	r1, [pc, #128]	; (800f4e8 <dwt_ioctl+0x1ce0>)
 800f468:	4630      	mov	r0, r6
 800f46a:	f7fc f8ee 	bl	800b64a <dwt_read32bitoffsetreg>
 800f46e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f472:	60a0      	str	r0, [r4, #8]
 800f474:	2200      	movs	r2, #0
 800f476:	491d      	ldr	r1, [pc, #116]	; (800f4ec <dwt_ioctl+0x1ce4>)
 800f478:	4630      	mov	r0, r6
 800f47a:	f7fc f8e6 	bl	800b64a <dwt_read32bitoffsetreg>
 800f47e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f482:	60e0      	str	r0, [r4, #12]
 800f484:	2200      	movs	r2, #0
 800f486:	491a      	ldr	r1, [pc, #104]	; (800f4f0 <dwt_ioctl+0x1ce8>)
 800f488:	4630      	mov	r0, r6
 800f48a:	f7fc f8de 	bl	800b64a <dwt_read32bitoffsetreg>
 800f48e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800f492:	6120      	str	r0, [r4, #16]
 800f494:	2203      	movs	r2, #3
 800f496:	490c      	ldr	r1, [pc, #48]	; (800f4c8 <dwt_ioctl+0x1cc0>)
 800f498:	4630      	mov	r0, r6
 800f49a:	f7fc f8fe 	bl	800b69a <dwt_read8bitoffsetreg>
 800f49e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800f4a2:	7520      	strb	r0, [r4, #20]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	75a3      	strb	r3, [r4, #22]
 800f4a8:	2500      	movs	r5, #0
 800f4aa:	f7fe ba57 	b.w	800d95c <dwt_ioctl+0x154>
 800f4ae:	bf00      	nop
 800f4b0:	00050008 	.word	0x00050008
 800f4b4:	0005000c 	.word	0x0005000c
 800f4b8:	00110008 	.word	0x00110008
 800f4bc:	08019ab8 	.word	0x08019ab8
 800f4c0:	000e0014 	.word	0x000e0014
 800f4c4:	000e0018 	.word	0x000e0018
 800f4c8:	00030060 	.word	0x00030060
 800f4cc:	000f004c 	.word	0x000f004c
 800f4d0:	001f0004 	.word	0x001f0004
 800f4d4:	001f0008 	.word	0x001f0008
 800f4d8:	000c0048 	.word	0x000c0048
 800f4dc:	000c0028 	.word	0x000c0028
 800f4e0:	000c0058 	.word	0x000c0058
 800f4e4:	000c0030 	.word	0x000c0030
 800f4e8:	000c0034 	.word	0x000c0034
 800f4ec:	000c0038 	.word	0x000c0038
 800f4f0:	000c002c 	.word	0x000c002c
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	49d4      	ldr	r1, [pc, #848]	; (800f848 <dwt_ioctl+0x2040>)
 800f4f8:	f7fc f8a7 	bl	800b64a <dwt_read32bitoffsetreg>
 800f4fc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800f500:	6020      	str	r0, [r4, #0]
 800f502:	2200      	movs	r2, #0
 800f504:	49d1      	ldr	r1, [pc, #836]	; (800f84c <dwt_ioctl+0x2044>)
 800f506:	4630      	mov	r0, r6
 800f508:	f7fc f89f 	bl	800b64a <dwt_read32bitoffsetreg>
 800f50c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f510:	6060      	str	r0, [r4, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	49ce      	ldr	r1, [pc, #824]	; (800f850 <dwt_ioctl+0x2048>)
 800f516:	4630      	mov	r0, r6
 800f518:	f7fc f897 	bl	800b64a <dwt_read32bitoffsetreg>
 800f51c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f520:	60a0      	str	r0, [r4, #8]
 800f522:	2200      	movs	r2, #0
 800f524:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800f528:	4630      	mov	r0, r6
 800f52a:	f7fc f88e 	bl	800b64a <dwt_read32bitoffsetreg>
 800f52e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f532:	60e0      	str	r0, [r4, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	49c7      	ldr	r1, [pc, #796]	; (800f854 <dwt_ioctl+0x204c>)
 800f538:	4630      	mov	r0, r6
 800f53a:	f7fc f886 	bl	800b64a <dwt_read32bitoffsetreg>
 800f53e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800f542:	6120      	str	r0, [r4, #16]
 800f544:	e7a6      	b.n	800f494 <dwt_ioctl+0x1c8c>
 800f546:	2200      	movs	r2, #0
 800f548:	49c3      	ldr	r1, [pc, #780]	; (800f858 <dwt_ioctl+0x2050>)
 800f54a:	f7fc f87e 	bl	800b64a <dwt_read32bitoffsetreg>
 800f54e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800f552:	6020      	str	r0, [r4, #0]
 800f554:	2200      	movs	r2, #0
 800f556:	49c1      	ldr	r1, [pc, #772]	; (800f85c <dwt_ioctl+0x2054>)
 800f558:	4630      	mov	r0, r6
 800f55a:	f7fc f876 	bl	800b64a <dwt_read32bitoffsetreg>
 800f55e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f562:	6060      	str	r0, [r4, #4]
 800f564:	2200      	movs	r2, #0
 800f566:	49be      	ldr	r1, [pc, #760]	; (800f860 <dwt_ioctl+0x2058>)
 800f568:	4630      	mov	r0, r6
 800f56a:	f7fc f86e 	bl	800b64a <dwt_read32bitoffsetreg>
 800f56e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f572:	60a0      	str	r0, [r4, #8]
 800f574:	2200      	movs	r2, #0
 800f576:	49bb      	ldr	r1, [pc, #748]	; (800f864 <dwt_ioctl+0x205c>)
 800f578:	4630      	mov	r0, r6
 800f57a:	f7fc f866 	bl	800b64a <dwt_read32bitoffsetreg>
 800f57e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800f582:	60e0      	str	r0, [r4, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	49b8      	ldr	r1, [pc, #736]	; (800f868 <dwt_ioctl+0x2060>)
 800f588:	4630      	mov	r0, r6
 800f58a:	f7fc f85e 	bl	800b64a <dwt_read32bitoffsetreg>
 800f58e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800f592:	6120      	str	r0, [r4, #16]
 800f594:	e77e      	b.n	800f494 <dwt_ioctl+0x1c8c>
 800f596:	2500      	movs	r5, #0
 800f598:	f7fe b9e0 	b.w	800d95c <dwt_ioctl+0x154>
 800f59c:	2500      	movs	r5, #0
 800f59e:	f7fe b9dd 	b.w	800d95c <dwt_ioctl+0x154>
 800f5a2:	2500      	movs	r5, #0
 800f5a4:	f7fe b9da 	b.w	800d95c <dwt_ioctl+0x154>
 800f5a8:	2500      	movs	r5, #0
 800f5aa:	f7fe b9d7 	b.w	800d95c <dwt_ioctl+0x154>
 800f5ae:	2500      	movs	r5, #0
 800f5b0:	f7fe b9d4 	b.w	800d95c <dwt_ioctl+0x154>
 800f5b4:	2500      	movs	r5, #0
 800f5b6:	f7fe b9d1 	b.w	800d95c <dwt_ioctl+0x154>
 800f5ba:	2500      	movs	r5, #0
 800f5bc:	f7fe b9ce 	b.w	800d95c <dwt_ioctl+0x154>
 800f5c0:	2500      	movs	r5, #0
 800f5c2:	f7fe b9cb 	b.w	800d95c <dwt_ioctl+0x154>
 800f5c6:	2500      	movs	r5, #0
 800f5c8:	f7fe b9c8 	b.w	800d95c <dwt_ioctl+0x154>
 800f5cc:	2500      	movs	r5, #0
 800f5ce:	f7fe b9c5 	b.w	800d95c <dwt_ioctl+0x154>
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	f7fe b9c2 	b.w	800d95c <dwt_ioctl+0x154>
 800f5d8:	2500      	movs	r5, #0
 800f5da:	f7fe b9bf 	b.w	800d95c <dwt_ioctl+0x154>
 800f5de:	2500      	movs	r5, #0
 800f5e0:	f7fe b9bc 	b.w	800d95c <dwt_ioctl+0x154>
 800f5e4:	2500      	movs	r5, #0
 800f5e6:	f7fe b9b9 	b.w	800d95c <dwt_ioctl+0x154>
 800f5ea:	2500      	movs	r5, #0
 800f5ec:	f7fe b9b6 	b.w	800d95c <dwt_ioctl+0x154>
 800f5f0:	2500      	movs	r5, #0
 800f5f2:	f7fe b9b3 	b.w	800d95c <dwt_ioctl+0x154>
 800f5f6:	2500      	movs	r5, #0
 800f5f8:	f7fe b9b0 	b.w	800d95c <dwt_ioctl+0x154>
 800f5fc:	2500      	movs	r5, #0
 800f5fe:	f7fe b9ad 	b.w	800d95c <dwt_ioctl+0x154>
 800f602:	2500      	movs	r5, #0
 800f604:	f7fe b9aa 	b.w	800d95c <dwt_ioctl+0x154>
 800f608:	2500      	movs	r5, #0
 800f60a:	f7fe b9a7 	b.w	800d95c <dwt_ioctl+0x154>
 800f60e:	2500      	movs	r5, #0
 800f610:	f7fe b9a4 	b.w	800d95c <dwt_ioctl+0x154>
 800f614:	2500      	movs	r5, #0
 800f616:	f7fe b9a1 	b.w	800d95c <dwt_ioctl+0x154>
 800f61a:	2500      	movs	r5, #0
 800f61c:	f7fe b99e 	b.w	800d95c <dwt_ioctl+0x154>
 800f620:	2500      	movs	r5, #0
 800f622:	f7fe b99b 	b.w	800d95c <dwt_ioctl+0x154>
 800f626:	2500      	movs	r5, #0
 800f628:	f7fe b998 	b.w	800d95c <dwt_ioctl+0x154>
 800f62c:	2500      	movs	r5, #0
 800f62e:	f7fe b995 	b.w	800d95c <dwt_ioctl+0x154>
 800f632:	2500      	movs	r5, #0
 800f634:	f7fe b992 	b.w	800d95c <dwt_ioctl+0x154>
 800f638:	2500      	movs	r5, #0
 800f63a:	f7fe b98f 	b.w	800d95c <dwt_ioctl+0x154>
 800f63e:	2500      	movs	r5, #0
 800f640:	f7fe b98c 	b.w	800d95c <dwt_ioctl+0x154>
 800f644:	2500      	movs	r5, #0
 800f646:	f7fe b989 	b.w	800d95c <dwt_ioctl+0x154>
 800f64a:	2500      	movs	r5, #0
 800f64c:	f7fe b986 	b.w	800d95c <dwt_ioctl+0x154>
 800f650:	2500      	movs	r5, #0
 800f652:	f7fe b983 	b.w	800d95c <dwt_ioctl+0x154>
 800f656:	2500      	movs	r5, #0
 800f658:	f7fe b980 	b.w	800d95c <dwt_ioctl+0x154>
 800f65c:	2500      	movs	r5, #0
 800f65e:	f7fe b97d 	b.w	800d95c <dwt_ioctl+0x154>
 800f662:	2500      	movs	r5, #0
 800f664:	f7fe b97a 	b.w	800d95c <dwt_ioctl+0x154>
 800f668:	2500      	movs	r5, #0
 800f66a:	f7fe b977 	b.w	800d95c <dwt_ioctl+0x154>
 800f66e:	2500      	movs	r5, #0
 800f670:	f7fe b974 	b.w	800d95c <dwt_ioctl+0x154>
 800f674:	2500      	movs	r5, #0
 800f676:	f7fe b971 	b.w	800d95c <dwt_ioctl+0x154>
 800f67a:	2500      	movs	r5, #0
 800f67c:	f7fe b96e 	b.w	800d95c <dwt_ioctl+0x154>
 800f680:	2500      	movs	r5, #0
 800f682:	f7fe b96b 	b.w	800d95c <dwt_ioctl+0x154>
 800f686:	2500      	movs	r5, #0
 800f688:	f7fe b968 	b.w	800d95c <dwt_ioctl+0x154>
 800f68c:	2500      	movs	r5, #0
 800f68e:	f7fe b965 	b.w	800d95c <dwt_ioctl+0x154>
 800f692:	2500      	movs	r5, #0
 800f694:	f7fe b962 	b.w	800d95c <dwt_ioctl+0x154>
 800f698:	2500      	movs	r5, #0
 800f69a:	f7fe b95f 	b.w	800d95c <dwt_ioctl+0x154>
 800f69e:	2500      	movs	r5, #0
 800f6a0:	f7fe b95c 	b.w	800d95c <dwt_ioctl+0x154>
 800f6a4:	2500      	movs	r5, #0
 800f6a6:	f7fe b959 	b.w	800d95c <dwt_ioctl+0x154>
 800f6aa:	2500      	movs	r5, #0
 800f6ac:	f7fe b956 	b.w	800d95c <dwt_ioctl+0x154>
 800f6b0:	2500      	movs	r5, #0
 800f6b2:	f7fe b953 	b.w	800d95c <dwt_ioctl+0x154>
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	f7fe b950 	b.w	800d95c <dwt_ioctl+0x154>
 800f6bc:	2500      	movs	r5, #0
 800f6be:	f7fe b94d 	b.w	800d95c <dwt_ioctl+0x154>
 800f6c2:	2500      	movs	r5, #0
 800f6c4:	f7fe b94a 	b.w	800d95c <dwt_ioctl+0x154>
 800f6c8:	2500      	movs	r5, #0
 800f6ca:	f7fe b947 	b.w	800d95c <dwt_ioctl+0x154>
 800f6ce:	2500      	movs	r5, #0
 800f6d0:	f7fe b944 	b.w	800d95c <dwt_ioctl+0x154>
 800f6d4:	2500      	movs	r5, #0
 800f6d6:	f7fe b941 	b.w	800d95c <dwt_ioctl+0x154>
 800f6da:	2500      	movs	r5, #0
 800f6dc:	f7fe b93e 	b.w	800d95c <dwt_ioctl+0x154>
 800f6e0:	2500      	movs	r5, #0
 800f6e2:	f7fe b93b 	b.w	800d95c <dwt_ioctl+0x154>
 800f6e6:	2500      	movs	r5, #0
 800f6e8:	f7fe b938 	b.w	800d95c <dwt_ioctl+0x154>
 800f6ec:	2500      	movs	r5, #0
 800f6ee:	f7fe b935 	b.w	800d95c <dwt_ioctl+0x154>
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	f7fe b932 	b.w	800d95c <dwt_ioctl+0x154>
 800f6f8:	2500      	movs	r5, #0
 800f6fa:	f7fe b92f 	b.w	800d95c <dwt_ioctl+0x154>
 800f6fe:	2500      	movs	r5, #0
 800f700:	f7fe b92c 	b.w	800d95c <dwt_ioctl+0x154>
 800f704:	2500      	movs	r5, #0
 800f706:	f7fe b929 	b.w	800d95c <dwt_ioctl+0x154>
 800f70a:	2500      	movs	r5, #0
 800f70c:	f7fe b926 	b.w	800d95c <dwt_ioctl+0x154>
 800f710:	2500      	movs	r5, #0
 800f712:	f7fe b923 	b.w	800d95c <dwt_ioctl+0x154>
 800f716:	2500      	movs	r5, #0
 800f718:	f7fe b920 	b.w	800d95c <dwt_ioctl+0x154>
 800f71c:	2500      	movs	r5, #0
 800f71e:	f7fe b91d 	b.w	800d95c <dwt_ioctl+0x154>
 800f722:	2500      	movs	r5, #0
 800f724:	f7fe b91a 	b.w	800d95c <dwt_ioctl+0x154>
 800f728:	2500      	movs	r5, #0
 800f72a:	f7fe b917 	b.w	800d95c <dwt_ioctl+0x154>
 800f72e:	2500      	movs	r5, #0
 800f730:	f7fe b914 	b.w	800d95c <dwt_ioctl+0x154>
 800f734:	2500      	movs	r5, #0
 800f736:	f7fe b911 	b.w	800d95c <dwt_ioctl+0x154>
 800f73a:	2500      	movs	r5, #0
 800f73c:	f7fe b90e 	b.w	800d95c <dwt_ioctl+0x154>
 800f740:	2500      	movs	r5, #0
 800f742:	f7fe b90b 	b.w	800d95c <dwt_ioctl+0x154>
 800f746:	2500      	movs	r5, #0
 800f748:	f7fe b908 	b.w	800d95c <dwt_ioctl+0x154>
 800f74c:	2500      	movs	r5, #0
 800f74e:	f7fe b905 	b.w	800d95c <dwt_ioctl+0x154>
 800f752:	2500      	movs	r5, #0
 800f754:	f7fe b902 	b.w	800d95c <dwt_ioctl+0x154>
 800f758:	2500      	movs	r5, #0
 800f75a:	f7fe b8ff 	b.w	800d95c <dwt_ioctl+0x154>
 800f75e:	2500      	movs	r5, #0
 800f760:	f7fe b8fc 	b.w	800d95c <dwt_ioctl+0x154>
 800f764:	2500      	movs	r5, #0
 800f766:	f7fe b8f9 	b.w	800d95c <dwt_ioctl+0x154>
 800f76a:	2500      	movs	r5, #0
 800f76c:	f7fe b8f6 	b.w	800d95c <dwt_ioctl+0x154>
 800f770:	2500      	movs	r5, #0
 800f772:	f7fe b8f3 	b.w	800d95c <dwt_ioctl+0x154>
 800f776:	2500      	movs	r5, #0
 800f778:	f7fe b8f0 	b.w	800d95c <dwt_ioctl+0x154>
 800f77c:	2500      	movs	r5, #0
 800f77e:	f7fe b8ed 	b.w	800d95c <dwt_ioctl+0x154>
 800f782:	2500      	movs	r5, #0
 800f784:	f7fe b8ea 	b.w	800d95c <dwt_ioctl+0x154>
 800f788:	2500      	movs	r5, #0
 800f78a:	f7fe b8e7 	b.w	800d95c <dwt_ioctl+0x154>
 800f78e:	2500      	movs	r5, #0
 800f790:	f7fe b8e4 	b.w	800d95c <dwt_ioctl+0x154>
 800f794:	2500      	movs	r5, #0
 800f796:	f7fe b8e1 	b.w	800d95c <dwt_ioctl+0x154>
 800f79a:	2500      	movs	r5, #0
 800f79c:	f7fe b8de 	b.w	800d95c <dwt_ioctl+0x154>
 800f7a0:	2500      	movs	r5, #0
 800f7a2:	f7fe b8db 	b.w	800d95c <dwt_ioctl+0x154>
 800f7a6:	2500      	movs	r5, #0
 800f7a8:	f7fe b8d8 	b.w	800d95c <dwt_ioctl+0x154>
 800f7ac:	2500      	movs	r5, #0
 800f7ae:	f7fe b8d5 	b.w	800d95c <dwt_ioctl+0x154>
 800f7b2:	2500      	movs	r5, #0
 800f7b4:	f7fe b8d2 	b.w	800d95c <dwt_ioctl+0x154>
 800f7b8:	2500      	movs	r5, #0
 800f7ba:	f7fe b8cf 	b.w	800d95c <dwt_ioctl+0x154>
 800f7be:	2500      	movs	r5, #0
 800f7c0:	f7fe b8cc 	b.w	800d95c <dwt_ioctl+0x154>
 800f7c4:	f04f 35ff 	mov.w	r5, #4294967295
 800f7c8:	f7fe b8c8 	b.w	800d95c <dwt_ioctl+0x154>
 800f7cc:	f04f 35ff 	mov.w	r5, #4294967295
 800f7d0:	f7fe b8c4 	b.w	800d95c <dwt_ioctl+0x154>
 800f7d4:	2500      	movs	r5, #0
 800f7d6:	f7fe b8c1 	b.w	800d95c <dwt_ioctl+0x154>
 800f7da:	2500      	movs	r5, #0
 800f7dc:	f7fe b8be 	b.w	800d95c <dwt_ioctl+0x154>
 800f7e0:	2500      	movs	r5, #0
 800f7e2:	f7fe b8bb 	b.w	800d95c <dwt_ioctl+0x154>
 800f7e6:	2500      	movs	r5, #0
 800f7e8:	f7fe b8b8 	b.w	800d95c <dwt_ioctl+0x154>
 800f7ec:	2500      	movs	r5, #0
 800f7ee:	f7fe b8b5 	b.w	800d95c <dwt_ioctl+0x154>
 800f7f2:	2500      	movs	r5, #0
 800f7f4:	f7fe b8b2 	b.w	800d95c <dwt_ioctl+0x154>
 800f7f8:	2500      	movs	r5, #0
 800f7fa:	f7fe b8af 	b.w	800d95c <dwt_ioctl+0x154>
 800f7fe:	2500      	movs	r5, #0
 800f800:	f7fe b8ac 	b.w	800d95c <dwt_ioctl+0x154>
 800f804:	2500      	movs	r5, #0
 800f806:	f7fe b8a9 	b.w	800d95c <dwt_ioctl+0x154>
 800f80a:	2500      	movs	r5, #0
 800f80c:	f7fe b8a6 	b.w	800d95c <dwt_ioctl+0x154>
 800f810:	2500      	movs	r5, #0
 800f812:	f7fe b8a3 	b.w	800d95c <dwt_ioctl+0x154>
 800f816:	2500      	movs	r5, #0
 800f818:	f7fe b8a0 	b.w	800d95c <dwt_ioctl+0x154>
 800f81c:	2500      	movs	r5, #0
 800f81e:	f7fe b89d 	b.w	800d95c <dwt_ioctl+0x154>
 800f822:	f899 3011 	ldrb.w	r3, [r9, #17]
 800f826:	1e5a      	subs	r2, r3, #1
 800f828:	b2d2      	uxtb	r2, r2
 800f82a:	2a01      	cmp	r2, #1
 800f82c:	f67e aeec 	bls.w	800e608 <dwt_ioctl+0xe00>
 800f830:	2202      	movs	r2, #2
 800f832:	f7fe be93 	b.w	800e55c <dwt_ioctl+0xd54>
 800f836:	2f00      	cmp	r7, #0
 800f838:	f43f ab68 	beq.w	800ef0c <dwt_ioctl+0x1704>
 800f83c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800f840:	1a5b      	subs	r3, r3, r1
 800f842:	b29b      	uxth	r3, r3
 800f844:	f7ff bb88 	b.w	800ef58 <dwt_ioctl+0x1750>
 800f848:	000d0020 	.word	0x000d0020
 800f84c:	000c0064 	.word	0x000c0064
 800f850:	000c0068 	.word	0x000c0068
 800f854:	000c0060 	.word	0x000c0060
 800f858:	000d0068 	.word	0x000d0068
 800f85c:	000d0040 	.word	0x000d0040
 800f860:	000d0044 	.word	0x000d0044
 800f864:	000d0048 	.word	0x000d0048
 800f868:	000d003c 	.word	0x000d003c
 800f86c:	283f      	cmp	r0, #63	; 0x3f
 800f86e:	d027      	beq.n	800f8c0 <dwt_ioctl+0x20b8>
 800f870:	2e00      	cmp	r6, #0
 800f872:	f47f ab51 	bne.w	800ef18 <dwt_ioctl+0x1710>
 800f876:	3001      	adds	r0, #1
 800f878:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f87c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800f880:	440b      	add	r3, r1
 800f882:	b29b      	uxth	r3, r3
 800f884:	459c      	cmp	ip, r3
 800f886:	f43f ab65 	beq.w	800ef54 <dwt_ioctl+0x174c>
 800f88a:	3d01      	subs	r5, #1
 800f88c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800f890:	f43f ab23 	beq.w	800eeda <dwt_ioctl+0x16d2>
 800f894:	459e      	cmp	lr, r3
 800f896:	f4bf ab33 	bcs.w	800ef00 <dwt_ioctl+0x16f8>
 800f89a:	4598      	cmp	r8, r3
 800f89c:	d9cb      	bls.n	800f836 <dwt_ioctl+0x202e>
 800f89e:	ebac 0103 	sub.w	r1, ip, r3
 800f8a2:	b209      	sxth	r1, r1
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	bfb8      	it	lt
 800f8a8:	4249      	neglt	r1, r1
 800f8aa:	4559      	cmp	r1, fp
 800f8ac:	f77f ab20 	ble.w	800eef0 <dwt_ioctl+0x16e8>
 800f8b0:	2f00      	cmp	r7, #0
 800f8b2:	f47f ab64 	bne.w	800ef7e <dwt_ioctl+0x1776>
 800f8b6:	283f      	cmp	r0, #63	; 0x3f
 800f8b8:	d1da      	bne.n	800f870 <dwt_ioctl+0x2068>
 800f8ba:	2f00      	cmp	r7, #0
 800f8bc:	f47f ab64 	bne.w	800ef88 <dwt_ioctl+0x1780>
 800f8c0:	2a03      	cmp	r2, #3
 800f8c2:	f43f ab64 	beq.w	800ef8e <dwt_ioctl+0x1786>
 800f8c6:	2a02      	cmp	r2, #2
 800f8c8:	f43f ab33 	beq.w	800ef32 <dwt_ioctl+0x172a>
 800f8cc:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800f8d0:	185e      	adds	r6, r3, r1
 800f8d2:	4566      	cmp	r6, ip
 800f8d4:	f77f ab34 	ble.w	800ef40 <dwt_ioctl+0x1738>
 800f8d8:	440b      	add	r3, r1
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	3201      	adds	r2, #1
 800f8de:	b2d2      	uxtb	r2, r2
 800f8e0:	2700      	movs	r7, #0
 800f8e2:	f7ff bb19 	b.w	800ef18 <dwt_ioctl+0x1710>
 800f8e6:	bf00      	nop

0800f8e8 <_init>:
 800f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f8f0:	6819      	ldr	r1, [r3, #0]
 800f8f2:	f7fd fe5d 	bl	800d5b0 <ull_initialise>
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	4798      	blx	r3
 800f8fe:	ab03      	add	r3, sp, #12
 800f900:	2200      	movs	r2, #0
 800f902:	4611      	mov	r1, r2
 800f904:	4620      	mov	r0, r4
 800f906:	f7fd ff7f 	bl	800d808 <dwt_ioctl>
 800f90a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f90e:	6819      	ldr	r1, [r3, #0]
 800f910:	4620      	mov	r0, r4
 800f912:	f7fd fc0d 	bl	800d130 <ull_configure>
 800f916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f91a:	6859      	ldr	r1, [r3, #4]
 800f91c:	4620      	mov	r0, r4
 800f91e:	f7fd f959 	bl	800cbd4 <ull_configuretxrf>
 800f922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f926:	89db      	ldrh	r3, [r3, #14]
 800f928:	2200      	movs	r2, #0
 800f92a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f92e:	4620      	mov	r0, r4
 800f930:	f7fc faa3 	bl	800be7a <dwt_write16bitoffsetreg>
 800f934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f938:	899b      	ldrh	r3, [r3, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	217c      	movs	r1, #124	; 0x7c
 800f93e:	4620      	mov	r0, r4
 800f940:	f7fc fa9b 	bl	800be7a <dwt_write16bitoffsetreg>
 800f944:	2100      	movs	r1, #0
 800f946:	4620      	mov	r0, r4
 800f948:	f7fc fb2f 	bl	800bfaa <ull_setrxaftertxdelay>
 800f94c:	2500      	movs	r5, #0
 800f94e:	9500      	str	r5, [sp, #0]
 800f950:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800f954:	462a      	mov	r2, r5
 800f956:	2110      	movs	r1, #16
 800f958:	4620      	mov	r0, r4
 800f95a:	f7fd facb 	bl	800cef4 <dwt_modify16bitoffsetreg>
 800f95e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f962:	895a      	ldrh	r2, [r3, #10]
 800f964:	8919      	ldrh	r1, [r3, #8]
 800f966:	4620      	mov	r0, r4
 800f968:	f7fd f9c2 	bl	800ccf0 <ull_configureframefilter>
 800f96c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f970:	8a1b      	ldrh	r3, [r3, #16]
 800f972:	2202      	movs	r2, #2
 800f974:	210c      	movs	r1, #12
 800f976:	4620      	mov	r0, r4
 800f978:	f7fc fa7f 	bl	800be7a <dwt_write16bitoffsetreg>
 800f97c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f980:	8a5b      	ldrh	r3, [r3, #18]
 800f982:	462a      	mov	r2, r5
 800f984:	210c      	movs	r1, #12
 800f986:	4620      	mov	r0, r4
 800f988:	f7fc fa77 	bl	800be7a <dwt_write16bitoffsetreg>
 800f98c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f98e:	7a19      	ldrb	r1, [r3, #8]
 800f990:	4620      	mov	r0, r4
 800f992:	f7fd fac9 	bl	800cf28 <ull_setleds>
 800f996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f998:	68d9      	ldr	r1, [r3, #12]
 800f99a:	4620      	mov	r0, r4
 800f99c:	f7fc fb19 	bl	800bfd2 <ull_setlnapamode>
 800f9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9a2:	7e0b      	ldrb	r3, [r1, #24]
 800f9a4:	694a      	ldr	r2, [r1, #20]
 800f9a6:	6909      	ldr	r1, [r1, #16]
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f7fd fa27 	bl	800cdfc <ull_setinterrupt>
 800f9ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9b0:	7f9a      	ldrb	r2, [r3, #30]
 800f9b2:	8b99      	ldrh	r1, [r3, #28]
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f7fc fd1f 	bl	800c3f8 <ull_configuresleep>
 800f9ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f9bc:	7b53      	ldrb	r3, [r2, #13]
 800f9be:	2b2e      	cmp	r3, #46	; 0x2e
 800f9c0:	d005      	beq.n	800f9ce <_init+0xe6>
 800f9c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9c8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800f9cc:	d00a      	beq.n	800f9e4 <_init+0xfc>
 800f9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9d8:	7353      	strb	r3, [r2, #13]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	492a      	ldr	r1, [pc, #168]	; (800fa88 <_init+0x1a0>)
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f7fc fc36 	bl	800c250 <dwt_write8bitoffsetreg>
 800f9e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9e6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f7fd f87a 	bl	800cae4 <ull_configciadiag>
 800f9f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9f2:	6a19      	ldr	r1, [r3, #32]
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f7fc fb0d 	bl	800c014 <ull_configurestskey>
 800f9fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f7fc fb2c 	bl	800c05c <ull_configurestsiv>
 800fa04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fa0a:	bb9b      	cbnz	r3, 800fa74 <_init+0x18c>
 800fa0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa0e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7fc fc94 	bl	800c340 <ull_configeventcounters>
 800fa18:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800fa1c:	2d00      	cmp	r5, #0
 800fa1e:	db26      	blt.n	800fa6e <_init+0x186>
 800fa20:	2301      	movs	r3, #1
 800fa22:	fa03 f505 	lsl.w	r5, r3, r5
 800fa26:	b2af      	uxth	r7, r5
 800fa28:	4a18      	ldr	r2, [pc, #96]	; (800fa8c <_init+0x1a4>)
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f7fc fff5 	bl	800ca1c <ull_setgpiomode>
 800fa32:	f10d 030a 	add.w	r3, sp, #10
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	2302      	movs	r3, #2
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fa40:	4620      	mov	r0, r4
 800fa42:	f7fb fdf8 	bl	800b636 <dwt_readfromdevice>
 800fa46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fa4a:	ea23 0305 	bic.w	r3, r3, r5
 800fa4e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800fa52:	2200      	movs	r2, #0
 800fa54:	490e      	ldr	r1, [pc, #56]	; (800fa90 <_init+0x1a8>)
 800fa56:	4620      	mov	r0, r4
 800fa58:	f7fc fa0f 	bl	800be7a <dwt_write16bitoffsetreg>
 800fa5c:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800fa60:	fab2 f282 	clz	r2, r2
 800fa64:	0952      	lsrs	r2, r2, #5
 800fa66:	4639      	mov	r1, r7
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f7fd fadb 	bl	800d024 <ull_setgpiovalue>
 800fa6e:	4630      	mov	r0, r6
 800fa70:	b005      	add	sp, #20
 800fa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa74:	2301      	movs	r3, #1
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	23ff      	movs	r3, #255	; 0xff
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	4905      	ldr	r1, [pc, #20]	; (800fa94 <_init+0x1ac>)
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f7fd f81c 	bl	800cabc <dwt_modify8bitoffsetreg>
 800fa84:	e7c2      	b.n	800fa0c <_init+0x124>
 800fa86:	bf00      	nop
 800fa88:	00090014 	.word	0x00090014
 800fa8c:	01200492 	.word	0x01200492
 800fa90:	00050008 	.word	0x00050008
 800fa94:	00020004 	.word	0x00020004

0800fa98 <ull_wakeup_ic>:
 800fa98:	b508      	push	{r3, lr}
 800fa9a:	6843      	ldr	r3, [r0, #4]
 800fa9c:	4798      	blx	r3
 800fa9e:	bd08      	pop	{r3, pc}

0800faa0 <get_sts_mnth>:
 800faa0:	fb01 f100 	mul.w	r1, r1, r0
 800faa4:	2a03      	cmp	r2, #3
 800faa6:	d00a      	beq.n	800fabe <get_sts_mnth+0x1e>
 800faa8:	0ac8      	lsrs	r0, r1, #11
 800faaa:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800faae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fab2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800fab6:	bf28      	it	cs
 800fab8:	3001      	addcs	r0, #1
 800faba:	b280      	uxth	r0, r0
 800fabc:	4770      	bx	lr
 800fabe:	20b5      	movs	r0, #181	; 0xb5
 800fac0:	fb00 f101 	mul.w	r1, r0, r1
 800fac4:	09c9      	lsrs	r1, r1, #7
 800fac6:	e7ef      	b.n	800faa8 <get_sts_mnth+0x8>

0800fac8 <dwt_dbg_fn>:
 800fac8:	2998      	cmp	r1, #152	; 0x98
 800faca:	4802      	ldr	r0, [pc, #8]	; (800fad4 <dwt_dbg_fn+0xc>)
 800facc:	bf18      	it	ne
 800face:	2000      	movne	r0, #0
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	08019bc0 	.word	0x08019bc0

0800fad8 <_deinit>:
 800fad8:	4770      	bx	lr

0800fada <dwt_xfer3xxx>:
 800fada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	4605      	mov	r5, r0
 800fae2:	460f      	mov	r7, r1
 800fae4:	461e      	mov	r6, r3
 800fae6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800faea:	1e59      	subs	r1, r3, #1
 800faec:	b289      	uxth	r1, r1
 800faee:	2901      	cmp	r1, #1
 800faf0:	d91c      	bls.n	800fb2c <dwt_xfer3xxx+0x52>
 800faf2:	19d0      	adds	r0, r2, r7
 800faf4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800faf8:	443a      	add	r2, r7
 800fafa:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800fafe:	0082      	lsls	r2, r0, #2
 800fb00:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800fb04:	ea43 0102 	orr.w	r1, r3, r2
 800fb08:	0a09      	lsrs	r1, r1, #8
 800fb0a:	f88d 100c 	strb.w	r1, [sp, #12]
 800fb0e:	b920      	cbnz	r0, 800fb1a <dwt_xfer3xxx+0x40>
 800fb10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb14:	d018      	beq.n	800fb48 <dwt_xfer3xxx+0x6e>
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d037      	beq.n	800fb8a <dwt_xfer3xxx+0xb0>
 800fb1a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800fb1e:	f88d 100c 	strb.w	r1, [sp, #12]
 800fb22:	431a      	orrs	r2, r3
 800fb24:	f88d 200d 	strb.w	r2, [sp, #13]
 800fb28:	2402      	movs	r4, #2
 800fb2a:	e005      	b.n	800fb38 <dwt_xfer3xxx+0x5e>
 800fb2c:	007a      	lsls	r2, r7, #1
 800fb2e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800fb32:	f88d 200c 	strb.w	r2, [sp, #12]
 800fb36:	2401      	movs	r4, #1
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d006      	beq.n	800fb4a <dwt_xfer3xxx+0x70>
 800fb3c:	d326      	bcc.n	800fb8c <dwt_xfer3xxx+0xb2>
 800fb3e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800fb42:	2b03      	cmp	r3, #3
 800fb44:	d901      	bls.n	800fb4a <dwt_xfer3xxx+0x70>
 800fb46:	e7fe      	b.n	800fb46 <dwt_xfer3xxx+0x6c>
 800fb48:	2401      	movs	r4, #1
 800fb4a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fb4c:	7d1b      	ldrb	r3, [r3, #20]
 800fb4e:	b94b      	cbnz	r3, 800fb64 <dwt_xfer3xxx+0x8a>
 800fb50:	682b      	ldr	r3, [r5, #0]
 800fb52:	685d      	ldr	r5, [r3, #4]
 800fb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb56:	4632      	mov	r2, r6
 800fb58:	a903      	add	r1, sp, #12
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	47a8      	blx	r5
 800fb5e:	b004      	add	sp, #16
 800fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb64:	2200      	movs	r2, #0
 800fb66:	4621      	mov	r1, r4
 800fb68:	a803      	add	r0, sp, #12
 800fb6a:	f7f7 fadf 	bl	800712c <dwt_generatecrc8>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	4631      	mov	r1, r6
 800fb72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb74:	f7f7 fada 	bl	800712c <dwt_generatecrc8>
 800fb78:	682b      	ldr	r3, [r5, #0]
 800fb7a:	9000      	str	r0, [sp, #0]
 800fb7c:	689d      	ldr	r5, [r3, #8]
 800fb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb80:	4632      	mov	r2, r6
 800fb82:	a903      	add	r1, sp, #12
 800fb84:	4620      	mov	r0, r4
 800fb86:	47a8      	blx	r5
 800fb88:	e7e9      	b.n	800fb5e <dwt_xfer3xxx+0x84>
 800fb8a:	2401      	movs	r4, #1
 800fb8c:	682b      	ldr	r3, [r5, #0]
 800fb8e:	f8d3 8000 	ldr.w	r8, [r3]
 800fb92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb94:	4632      	mov	r2, r6
 800fb96:	a903      	add	r1, sp, #12
 800fb98:	4620      	mov	r0, r4
 800fb9a:	47c0      	blx	r8
 800fb9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fb9e:	7d1b      	ldrb	r3, [r3, #20]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d1dc      	bne.n	800fb5e <dwt_xfer3xxx+0x84>
 800fba4:	2f18      	cmp	r7, #24
 800fba6:	d0da      	beq.n	800fb5e <dwt_xfer3xxx+0x84>
 800fba8:	2200      	movs	r2, #0
 800fbaa:	4621      	mov	r1, r4
 800fbac:	a803      	add	r0, sp, #12
 800fbae:	f7f7 fabd 	bl	800712c <dwt_generatecrc8>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbb8:	f7f7 fab8 	bl	800712c <dwt_generatecrc8>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2118      	movs	r1, #24
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f000 f866 	bl	800fc94 <dwt_read8bitoffsetreg>
 800fbc8:	4284      	cmp	r4, r0
 800fbca:	d0c8      	beq.n	800fb5e <dwt_xfer3xxx+0x84>
 800fbcc:	68eb      	ldr	r3, [r5, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0c5      	beq.n	800fb5e <dwt_xfer3xxx+0x84>
 800fbd2:	4798      	blx	r3
 800fbd4:	e7c3      	b.n	800fb5e <dwt_xfer3xxx+0x84>

0800fbd6 <dwt_readfromdevice>:
 800fbd6:	b510      	push	{r4, lr}
 800fbd8:	b082      	sub	sp, #8
 800fbda:	2400      	movs	r4, #0
 800fbdc:	9401      	str	r4, [sp, #4]
 800fbde:	9c04      	ldr	r4, [sp, #16]
 800fbe0:	9400      	str	r4, [sp, #0]
 800fbe2:	f7ff ff7a 	bl	800fada <dwt_xfer3xxx>
 800fbe6:	b002      	add	sp, #8
 800fbe8:	bd10      	pop	{r4, pc}

0800fbea <dwt_read32bitoffsetreg>:
 800fbea:	b500      	push	{lr}
 800fbec:	b085      	sub	sp, #20
 800fbee:	ab03      	add	r3, sp, #12
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	2304      	movs	r3, #4
 800fbf4:	b292      	uxth	r2, r2
 800fbf6:	f7ff ffee 	bl	800fbd6 <dwt_readfromdevice>
 800fbfa:	f10d 030f 	add.w	r3, sp, #15
 800fbfe:	f10d 010b 	add.w	r1, sp, #11
 800fc02:	2000      	movs	r0, #0
 800fc04:	f813 2901 	ldrb.w	r2, [r3], #-1
 800fc08:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800fc0c:	428b      	cmp	r3, r1
 800fc0e:	d1f9      	bne.n	800fc04 <dwt_read32bitoffsetreg+0x1a>
 800fc10:	b005      	add	sp, #20
 800fc12:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc16 <dwt_read16bitoffsetreg>:
 800fc16:	b500      	push	{lr}
 800fc18:	b085      	sub	sp, #20
 800fc1a:	ab03      	add	r3, sp, #12
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	2302      	movs	r3, #2
 800fc20:	b292      	uxth	r2, r2
 800fc22:	f7ff ffd8 	bl	800fbd6 <dwt_readfromdevice>
 800fc26:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800fc2a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800fc2e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800fc32:	b280      	uxth	r0, r0
 800fc34:	b005      	add	sp, #20
 800fc36:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc3a <ull_getrxantennadelay>:
 800fc3a:	b508      	push	{r3, lr}
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800fc42:	f7ff ffe8 	bl	800fc16 <dwt_read16bitoffsetreg>
 800fc46:	bd08      	pop	{r3, pc}

0800fc48 <ull_gettxantennadelay>:
 800fc48:	b508      	push	{r3, lr}
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	217c      	movs	r1, #124	; 0x7c
 800fc4e:	f7ff ffe2 	bl	800fc16 <dwt_read16bitoffsetreg>
 800fc52:	bd08      	pop	{r3, pc}

0800fc54 <ull_readclockoffset>:
 800fc54:	b508      	push	{r3, lr}
 800fc56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc58:	7b9b      	ldrb	r3, [r3, #14]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d00a      	beq.n	800fc74 <ull_readclockoffset+0x20>
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d10e      	bne.n	800fc80 <ull_readclockoffset+0x2c>
 800fc62:	220c      	movs	r2, #12
 800fc64:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fc68:	f7ff ffd5 	bl	800fc16 <dwt_read16bitoffsetreg>
 800fc6c:	b200      	sxth	r0, r0
 800fc6e:	f340 000c 	sbfx	r0, r0, #0, #13
 800fc72:	bd08      	pop	{r3, pc}
 800fc74:	2200      	movs	r2, #0
 800fc76:	4905      	ldr	r1, [pc, #20]	; (800fc8c <ull_readclockoffset+0x38>)
 800fc78:	f7ff ffcd 	bl	800fc16 <dwt_read16bitoffsetreg>
 800fc7c:	b200      	sxth	r0, r0
 800fc7e:	e7f6      	b.n	800fc6e <ull_readclockoffset+0x1a>
 800fc80:	2200      	movs	r2, #0
 800fc82:	4903      	ldr	r1, [pc, #12]	; (800fc90 <ull_readclockoffset+0x3c>)
 800fc84:	f7ff ffc7 	bl	800fc16 <dwt_read16bitoffsetreg>
 800fc88:	b200      	sxth	r0, r0
 800fc8a:	e7f0      	b.n	800fc6e <ull_readclockoffset+0x1a>
 800fc8c:	0018000c 	.word	0x0018000c
 800fc90:	000c0020 	.word	0x000c0020

0800fc94 <dwt_read8bitoffsetreg>:
 800fc94:	b500      	push	{lr}
 800fc96:	b085      	sub	sp, #20
 800fc98:	f10d 030f 	add.w	r3, sp, #15
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	2301      	movs	r3, #1
 800fca0:	b292      	uxth	r2, r2
 800fca2:	f7ff ff98 	bl	800fbd6 <dwt_readfromdevice>
 800fca6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800fcaa:	b005      	add	sp, #20
 800fcac:	f85d fb04 	ldr.w	pc, [sp], #4

0800fcb0 <ull_readcarrierintegrator>:
 800fcb0:	b500      	push	{lr}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	ab03      	add	r3, sp, #12
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	2303      	movs	r3, #3
 800fcba:	2200      	movs	r2, #0
 800fcbc:	490b      	ldr	r1, [pc, #44]	; (800fcec <ull_readcarrierintegrator+0x3c>)
 800fcbe:	f7ff ff8a 	bl	800fbd6 <dwt_readfromdevice>
 800fcc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fcc6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800fcca:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800fcce:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800fcd2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800fcd6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800fcda:	bf1c      	itt	ne
 800fcdc:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800fce0:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800fce4:	b005      	add	sp, #20
 800fce6:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcea:	bf00      	nop
 800fcec:	00060029 	.word	0x00060029

0800fcf0 <ull_readdiagnostics>:
 800fcf0:	b530      	push	{r4, r5, lr}
 800fcf2:	b0bd      	sub	sp, #244	; 0xf4
 800fcf4:	4605      	mov	r5, r0
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fcfa:	7b9a      	ldrb	r2, [r3, #14]
 800fcfc:	2a01      	cmp	r2, #1
 800fcfe:	d01c      	beq.n	800fd3a <ull_readdiagnostics+0x4a>
 800fd00:	2a03      	cmp	r2, #3
 800fd02:	f040 81f1 	bne.w	80100e8 <ull_readdiagnostics+0x3f8>
 800fd06:	7d9b      	ldrb	r3, [r3, #22]
 800fd08:	f013 0f08 	tst.w	r3, #8
 800fd0c:	d10c      	bne.n	800fd28 <ull_readdiagnostics+0x38>
 800fd0e:	f013 0f04 	tst.w	r3, #4
 800fd12:	ab02      	add	r3, sp, #8
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	bf14      	ite	ne
 800fd18:	2338      	movne	r3, #56	; 0x38
 800fd1a:	2320      	moveq	r3, #32
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fd22:	f7ff ff58 	bl	800fbd6 <dwt_readfromdevice>
 800fd26:	e019      	b.n	800fd5c <ull_readdiagnostics+0x6c>
 800fd28:	ab02      	add	r3, sp, #8
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	23e8      	movs	r3, #232	; 0xe8
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fd34:	f7ff ff4f 	bl	800fbd6 <dwt_readfromdevice>
 800fd38:	e010      	b.n	800fd5c <ull_readdiagnostics+0x6c>
 800fd3a:	7d9b      	ldrb	r3, [r3, #22]
 800fd3c:	f013 0f08 	tst.w	r3, #8
 800fd40:	f040 81c9 	bne.w	80100d6 <ull_readdiagnostics+0x3e6>
 800fd44:	f013 0f04 	tst.w	r3, #4
 800fd48:	ab02      	add	r3, sp, #8
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	bf14      	ite	ne
 800fd4e:	2338      	movne	r3, #56	; 0x38
 800fd50:	2320      	moveq	r3, #32
 800fd52:	2200      	movs	r2, #0
 800fd54:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800fd58:	f7ff ff3d 	bl	800fbd6 <dwt_readfromdevice>
 800fd5c:	f10d 0217 	add.w	r2, sp, #23
 800fd60:	f104 031a 	add.w	r3, r4, #26
 800fd64:	f104 0020 	add.w	r0, r4, #32
 800fd68:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fd6c:	f803 1b01 	strb.w	r1, [r3], #1
 800fd70:	4283      	cmp	r3, r0
 800fd72:	d1f9      	bne.n	800fd68 <ull_readdiagnostics+0x78>
 800fd74:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800fd78:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800fd7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd84:	8463      	strh	r3, [r4, #34]	; 0x22
 800fd86:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fd8a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fd8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fd92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fd96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800fd9a:	bf1c      	itt	ne
 800fd9c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800fda0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800fda4:	8423      	strh	r3, [r4, #32]
 800fda6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800fdaa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800fdae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fdb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800fdb8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fdba:	7d9b      	ldrb	r3, [r3, #22]
 800fdbc:	f013 0f02 	tst.w	r3, #2
 800fdc0:	f040 817e 	bne.w	80100c0 <ull_readdiagnostics+0x3d0>
 800fdc4:	aa0a      	add	r2, sp, #40	; 0x28
 800fdc6:	1e63      	subs	r3, r4, #1
 800fdc8:	1d20      	adds	r0, r4, #4
 800fdca:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fdce:	f803 1f01 	strb.w	r1, [r3, #1]!
 800fdd2:	79d1      	ldrb	r1, [r2, #7]
 800fdd4:	7219      	strb	r1, [r3, #8]
 800fdd6:	7bd1      	ldrb	r1, [r2, #15]
 800fdd8:	7459      	strb	r1, [r3, #17]
 800fdda:	4283      	cmp	r3, r0
 800fddc:	d1f5      	bne.n	800fdca <ull_readdiagnostics+0xda>
 800fdde:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800fde2:	7163      	strb	r3, [r4, #5]
 800fde4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800fde8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800fdec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fdf0:	80e3      	strh	r3, [r4, #6]
 800fdf2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800fdf6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800fdfa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fdfe:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800fe02:	f8a4 300d 	strh.w	r3, [r4, #13]
 800fe06:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800fe0a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800fe0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fe12:	f8a4 300f 	strh.w	r3, [r4, #15]
 800fe16:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800fe1a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800fe1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe22:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800fe26:	82e3      	strh	r3, [r4, #22]
 800fe28:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800fe2c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800fe30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fe34:	8323      	strh	r3, [r4, #24]
 800fe36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fe38:	7d9b      	ldrb	r3, [r3, #22]
 800fe3a:	f013 0f04 	tst.w	r3, #4
 800fe3e:	f040 813f 	bne.w	80100c0 <ull_readdiagnostics+0x3d0>
 800fe42:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800fe46:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800fe4a:	041b      	lsls	r3, r3, #16
 800fe4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fe50:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800fe54:	4313      	orrs	r3, r2
 800fe56:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800fe5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fe5e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800fe62:	6263      	str	r3, [r4, #36]	; 0x24
 800fe64:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800fe68:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800fe6c:	041b      	lsls	r3, r3, #16
 800fe6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fe72:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800fe76:	4313      	orrs	r3, r2
 800fe78:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800fe7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fe80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe84:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe86:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800fe8a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800fe8e:	041b      	lsls	r3, r3, #16
 800fe90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fe94:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800fe9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fea6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fea8:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800feac:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800feb0:	041b      	lsls	r3, r3, #16
 800feb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800feb6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800feba:	4313      	orrs	r3, r2
 800febc:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800fec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fec4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fec8:	6323      	str	r3, [r4, #48]	; 0x30
 800feca:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800fece:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800fed2:	041b      	lsls	r3, r3, #16
 800fed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fed8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800fedc:	4313      	orrs	r3, r2
 800fede:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800fee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fee6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800feea:	6363      	str	r3, [r4, #52]	; 0x34
 800feec:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800fef0:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800fef4:	041b      	lsls	r3, r3, #16
 800fef6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fefa:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800fefe:	4313      	orrs	r3, r2
 800ff00:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800ff04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff0e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800ff12:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800ff16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff1a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800ff1c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800ff20:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800ff24:	041b      	lsls	r3, r3, #16
 800ff26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ff2a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800ff34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ff3c:	6423      	str	r3, [r4, #64]	; 0x40
 800ff3e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800ff42:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800ff46:	041b      	lsls	r3, r3, #16
 800ff48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ff4c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800ff50:	4313      	orrs	r3, r2
 800ff52:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800ff56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff5e:	6463      	str	r3, [r4, #68]	; 0x44
 800ff60:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800ff64:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800ff68:	041b      	lsls	r3, r3, #16
 800ff6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ff6e:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800ff72:	4313      	orrs	r3, r2
 800ff74:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800ff78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff80:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff82:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800ff86:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800ff8a:	041b      	lsls	r3, r3, #16
 800ff8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ff90:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800ff94:	4313      	orrs	r3, r2
 800ff96:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800ff9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff9e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ffa2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ffa4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800ffa8:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800ffac:	041b      	lsls	r3, r3, #16
 800ffae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ffb2:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800ffbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ffc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ffc4:	6523      	str	r3, [r4, #80]	; 0x50
 800ffc6:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800ffca:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800ffce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ffd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ffd6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800ffda:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800ffde:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800ffe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ffe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ffea:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800ffee:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800fff2:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800fff6:	041b      	lsls	r3, r3, #16
 800fff8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fffc:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8010000:	4313      	orrs	r3, r2
 8010002:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8010006:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801000a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801000e:	65a3      	str	r3, [r4, #88]	; 0x58
 8010010:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8010014:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8010018:	041b      	lsls	r3, r3, #16
 801001a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801001e:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8010022:	4313      	orrs	r3, r2
 8010024:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8010028:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801002c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010030:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010032:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8010036:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 801003a:	041b      	lsls	r3, r3, #16
 801003c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010040:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8010044:	4313      	orrs	r3, r2
 8010046:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 801004a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801004e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010052:	6623      	str	r3, [r4, #96]	; 0x60
 8010054:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8010058:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 801005c:	041b      	lsls	r3, r3, #16
 801005e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010062:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8010066:	4313      	orrs	r3, r2
 8010068:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 801006c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010070:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010074:	6663      	str	r3, [r4, #100]	; 0x64
 8010076:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 801007a:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 801007e:	041b      	lsls	r3, r3, #16
 8010080:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010084:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8010088:	4313      	orrs	r3, r2
 801008a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 801008e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010092:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010096:	66a3      	str	r3, [r4, #104]	; 0x68
 8010098:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 801009c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80100a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80100a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80100a8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 80100ac:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 80100b0:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80100b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80100b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100bc:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80100c0:	f994 301b 	ldrsb.w	r3, [r4, #27]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f2c0 81d0 	blt.w	801046a <ull_readdiagnostics+0x77a>
 80100ca:	7fe3      	ldrb	r3, [r4, #31]
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	77e3      	strb	r3, [r4, #31]
 80100d2:	b03d      	add	sp, #244	; 0xf4
 80100d4:	bd30      	pop	{r4, r5, pc}
 80100d6:	ab02      	add	r3, sp, #8
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	23e8      	movs	r3, #232	; 0xe8
 80100dc:	2200      	movs	r2, #0
 80100de:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80100e2:	f7ff fd78 	bl	800fbd6 <dwt_readfromdevice>
 80100e6:	e639      	b.n	800fd5c <ull_readdiagnostics+0x6c>
 80100e8:	7d9b      	ldrb	r3, [r3, #22]
 80100ea:	f013 0f01 	tst.w	r3, #1
 80100ee:	f000 81b3 	beq.w	8010458 <ull_readdiagnostics+0x768>
 80100f2:	ab02      	add	r3, sp, #8
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	236c      	movs	r3, #108	; 0x6c
 80100f8:	2200      	movs	r2, #0
 80100fa:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80100fe:	f7ff fd6a 	bl	800fbd6 <dwt_readfromdevice>
 8010102:	ab1d      	add	r3, sp, #116	; 0x74
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	236c      	movs	r3, #108	; 0x6c
 8010108:	2200      	movs	r2, #0
 801010a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 801010e:	4628      	mov	r0, r5
 8010110:	f7ff fd61 	bl	800fbd6 <dwt_readfromdevice>
 8010114:	aa02      	add	r2, sp, #8
 8010116:	1e63      	subs	r3, r4, #1
 8010118:	1d20      	adds	r0, r4, #4
 801011a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801011e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8010122:	79d1      	ldrb	r1, [r2, #7]
 8010124:	7219      	strb	r1, [r3, #8]
 8010126:	7bd1      	ldrb	r1, [r2, #15]
 8010128:	7459      	strb	r1, [r3, #17]
 801012a:	7dd1      	ldrb	r1, [r2, #23]
 801012c:	7699      	strb	r1, [r3, #26]
 801012e:	4283      	cmp	r3, r0
 8010130:	d1f3      	bne.n	801011a <ull_readdiagnostics+0x42a>
 8010132:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8010136:	77e3      	strb	r3, [r4, #31]
 8010138:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801013c:	7163      	strb	r3, [r4, #5]
 801013e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010142:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8010146:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801014a:	80e3      	strh	r3, [r4, #6]
 801014c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010150:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010154:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010158:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 801015c:	f8a4 200d 	strh.w	r2, [r4, #13]
 8010160:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8010164:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8010168:	f8a4 200f 	strh.w	r2, [r4, #15]
 801016c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010174:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8010178:	82e3      	strh	r3, [r4, #22]
 801017a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 801017e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010182:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010186:	8323      	strh	r3, [r4, #24]
 8010188:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801018c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8010190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010194:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010198:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801019c:	bf1c      	itt	ne
 801019e:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80101a2:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80101a6:	8423      	strh	r3, [r4, #32]
 80101a8:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80101ac:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80101b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80101b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101b8:	8463      	strh	r3, [r4, #34]	; 0x22
 80101ba:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80101be:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80101c2:	041b      	lsls	r3, r3, #16
 80101c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101c8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80101cc:	4313      	orrs	r3, r2
 80101ce:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80101d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80101d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80101da:	6263      	str	r3, [r4, #36]	; 0x24
 80101dc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80101de:	7d9b      	ldrb	r3, [r3, #22]
 80101e0:	f013 0f01 	tst.w	r3, #1
 80101e4:	f43f af6c 	beq.w	80100c0 <ull_readdiagnostics+0x3d0>
 80101e8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80101ec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80101f0:	041b      	lsls	r3, r3, #16
 80101f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101f6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80101fa:	4313      	orrs	r3, r2
 80101fc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8010200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010208:	62a3      	str	r3, [r4, #40]	; 0x28
 801020a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 801020e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8010212:	041b      	lsls	r3, r3, #16
 8010214:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010218:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801021c:	4313      	orrs	r3, r2
 801021e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8010222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801022a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801022c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8010230:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8010234:	041b      	lsls	r3, r3, #16
 8010236:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801023a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801023e:	4313      	orrs	r3, r2
 8010240:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8010244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010248:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801024c:	6323      	str	r3, [r4, #48]	; 0x30
 801024e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8010252:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8010256:	041b      	lsls	r3, r3, #16
 8010258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801025c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8010260:	4313      	orrs	r3, r2
 8010262:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8010266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801026a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801026e:	6363      	str	r3, [r4, #52]	; 0x34
 8010270:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8010274:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8010278:	041b      	lsls	r3, r3, #16
 801027a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801027e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8010282:	4313      	orrs	r3, r2
 8010284:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8010288:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801028c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010290:	63a3      	str	r3, [r4, #56]	; 0x38
 8010292:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8010296:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801029e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80102a0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80102a4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80102a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80102ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80102b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80102b2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80102b6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80102ba:	041b      	lsls	r3, r3, #16
 80102bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80102c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80102c4:	4313      	orrs	r3, r2
 80102c6:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80102ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80102ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80102d2:	6423      	str	r3, [r4, #64]	; 0x40
 80102d4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80102d8:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 80102dc:	041b      	lsls	r3, r3, #16
 80102de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80102e2:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 80102e6:	4313      	orrs	r3, r2
 80102e8:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80102ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80102f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102f4:	6463      	str	r3, [r4, #68]	; 0x44
 80102f6:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 80102fa:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 80102fe:	041b      	lsls	r3, r3, #16
 8010300:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010304:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8010308:	4313      	orrs	r3, r2
 801030a:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 801030e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010312:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010316:	64a3      	str	r3, [r4, #72]	; 0x48
 8010318:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 801031c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8010320:	041b      	lsls	r3, r3, #16
 8010322:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010326:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 801032a:	4313      	orrs	r3, r2
 801032c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8010330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010334:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010338:	64e3      	str	r3, [r4, #76]	; 0x4c
 801033a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 801033e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8010342:	041b      	lsls	r3, r3, #16
 8010344:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010348:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801034c:	4313      	orrs	r3, r2
 801034e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8010352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010356:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801035a:	6523      	str	r3, [r4, #80]	; 0x50
 801035c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8010360:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8010364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010368:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801036c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8010370:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8010374:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8010378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801037c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010380:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8010384:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8010388:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 801038c:	041b      	lsls	r3, r3, #16
 801038e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010392:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8010396:	4313      	orrs	r3, r2
 8010398:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 801039c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80103a0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80103a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80103a6:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 80103aa:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 80103ae:	041b      	lsls	r3, r3, #16
 80103b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80103b4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80103b8:	4313      	orrs	r3, r2
 80103ba:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80103be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80103c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103c6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80103c8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80103cc:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80103d0:	041b      	lsls	r3, r3, #16
 80103d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80103d6:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80103da:	4313      	orrs	r3, r2
 80103dc:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80103e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80103e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80103e8:	6623      	str	r3, [r4, #96]	; 0x60
 80103ea:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80103ee:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80103f2:	041b      	lsls	r3, r3, #16
 80103f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80103f8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80103fc:	4313      	orrs	r3, r2
 80103fe:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8010402:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010406:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801040a:	6663      	str	r3, [r4, #100]	; 0x64
 801040c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8010410:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8010414:	041b      	lsls	r3, r3, #16
 8010416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801041a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 801041e:	4313      	orrs	r3, r2
 8010420:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8010424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010428:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801042c:	66a3      	str	r3, [r4, #104]	; 0x68
 801042e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8010432:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8010436:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801043a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801043e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8010442:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8010446:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801044a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801044e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010452:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8010456:	e633      	b.n	80100c0 <ull_readdiagnostics+0x3d0>
 8010458:	ab02      	add	r3, sp, #8
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	2328      	movs	r3, #40	; 0x28
 801045e:	2200      	movs	r2, #0
 8010460:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8010464:	f7ff fbb7 	bl	800fbd6 <dwt_readfromdevice>
 8010468:	e654      	b.n	8010114 <ull_readdiagnostics+0x424>
 801046a:	23ff      	movs	r3, #255	; 0xff
 801046c:	7723      	strb	r3, [r4, #28]
 801046e:	7763      	strb	r3, [r4, #29]
 8010470:	77a3      	strb	r3, [r4, #30]
 8010472:	77e3      	strb	r3, [r4, #31]
 8010474:	e629      	b.n	80100ca <ull_readdiagnostics+0x3da>
	...

08010478 <ull_readrxtimestamp>:
 8010478:	b500      	push	{lr}
 801047a:	b083      	sub	sp, #12
 801047c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801047e:	7b9b      	ldrb	r3, [r3, #14]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d00b      	beq.n	801049c <ull_readrxtimestamp+0x24>
 8010484:	2b03      	cmp	r3, #3
 8010486:	d110      	bne.n	80104aa <ull_readrxtimestamp+0x32>
 8010488:	9100      	str	r1, [sp, #0]
 801048a:	2305      	movs	r3, #5
 801048c:	2204      	movs	r2, #4
 801048e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010492:	f7ff fba0 	bl	800fbd6 <dwt_readfromdevice>
 8010496:	b003      	add	sp, #12
 8010498:	f85d fb04 	ldr.w	pc, [sp], #4
 801049c:	9100      	str	r1, [sp, #0]
 801049e:	2305      	movs	r3, #5
 80104a0:	2200      	movs	r2, #0
 80104a2:	4905      	ldr	r1, [pc, #20]	; (80104b8 <ull_readrxtimestamp+0x40>)
 80104a4:	f7ff fb97 	bl	800fbd6 <dwt_readfromdevice>
 80104a8:	e7f5      	b.n	8010496 <ull_readrxtimestamp+0x1e>
 80104aa:	9100      	str	r1, [sp, #0]
 80104ac:	2305      	movs	r3, #5
 80104ae:	2200      	movs	r2, #0
 80104b0:	2160      	movs	r1, #96	; 0x60
 80104b2:	f7ff fb90 	bl	800fbd6 <dwt_readfromdevice>
 80104b6:	e7ee      	b.n	8010496 <ull_readrxtimestamp+0x1e>
 80104b8:	00180004 	.word	0x00180004

080104bc <dwt_writetodevice>:
 80104bc:	b510      	push	{r4, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80104c4:	9401      	str	r4, [sp, #4]
 80104c6:	9c04      	ldr	r4, [sp, #16]
 80104c8:	9400      	str	r4, [sp, #0]
 80104ca:	f7ff fb06 	bl	800fada <dwt_xfer3xxx>
 80104ce:	b002      	add	sp, #8
 80104d0:	bd10      	pop	{r4, pc}

080104d2 <dwt_write16bitoffsetreg>:
 80104d2:	b500      	push	{lr}
 80104d4:	b085      	sub	sp, #20
 80104d6:	f88d 300c 	strb.w	r3, [sp, #12]
 80104da:	0a1b      	lsrs	r3, r3, #8
 80104dc:	f88d 300d 	strb.w	r3, [sp, #13]
 80104e0:	ab03      	add	r3, sp, #12
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	2302      	movs	r3, #2
 80104e6:	b292      	uxth	r2, r2
 80104e8:	f7ff ffe8 	bl	80104bc <dwt_writetodevice>
 80104ec:	b005      	add	sp, #20
 80104ee:	f85d fb04 	ldr.w	pc, [sp], #4

080104f2 <ull_setrxantennadelay>:
 80104f2:	b508      	push	{r3, lr}
 80104f4:	460b      	mov	r3, r1
 80104f6:	2200      	movs	r2, #0
 80104f8:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80104fc:	f7ff ffe9 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010500:	bd08      	pop	{r3, pc}

08010502 <ull_settxantennadelay>:
 8010502:	b508      	push	{r3, lr}
 8010504:	460b      	mov	r3, r1
 8010506:	2200      	movs	r2, #0
 8010508:	217c      	movs	r1, #124	; 0x7c
 801050a:	f7ff ffe2 	bl	80104d2 <dwt_write16bitoffsetreg>
 801050e:	bd08      	pop	{r3, pc}

08010510 <ull_force_clocks>:
 8010510:	b508      	push	{r3, lr}
 8010512:	2901      	cmp	r1, #1
 8010514:	d002      	beq.n	801051c <ull_force_clocks+0xc>
 8010516:	2905      	cmp	r1, #5
 8010518:	d007      	beq.n	801052a <ull_force_clocks+0x1a>
 801051a:	bd08      	pop	{r3, pc}
 801051c:	f641 0322 	movw	r3, #6178	; 0x1822
 8010520:	2200      	movs	r2, #0
 8010522:	4905      	ldr	r1, [pc, #20]	; (8010538 <ull_force_clocks+0x28>)
 8010524:	f7ff ffd5 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010528:	e7f7      	b.n	801051a <ull_force_clocks+0xa>
 801052a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801052e:	2200      	movs	r2, #0
 8010530:	4901      	ldr	r1, [pc, #4]	; (8010538 <ull_force_clocks+0x28>)
 8010532:	f7ff ffce 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010536:	e7f0      	b.n	801051a <ull_force_clocks+0xa>
 8010538:	00110004 	.word	0x00110004

0801053c <__dwt_otp_write_wdata_id_reg>:
 801053c:	b538      	push	{r3, r4, r5, lr}
 801053e:	4605      	mov	r5, r0
 8010540:	460c      	mov	r4, r1
 8010542:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8010546:	b29b      	uxth	r3, r3
 8010548:	2200      	movs	r2, #0
 801054a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801054e:	f7ff ffc0 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010552:	b2a3      	uxth	r3, r4
 8010554:	2200      	movs	r2, #0
 8010556:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801055a:	4628      	mov	r0, r5
 801055c:	f7ff ffb9 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010560:	bd38      	pop	{r3, r4, r5, pc}
	...

08010564 <_dwt_otpread>:
 8010564:	b570      	push	{r4, r5, r6, lr}
 8010566:	4604      	mov	r4, r0
 8010568:	460e      	mov	r6, r1
 801056a:	4d0c      	ldr	r5, [pc, #48]	; (801059c <_dwt_otpread+0x38>)
 801056c:	2301      	movs	r3, #1
 801056e:	2200      	movs	r2, #0
 8010570:	4629      	mov	r1, r5
 8010572:	f7ff ffae 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010576:	4633      	mov	r3, r6
 8010578:	2200      	movs	r2, #0
 801057a:	4909      	ldr	r1, [pc, #36]	; (80105a0 <_dwt_otpread+0x3c>)
 801057c:	4620      	mov	r0, r4
 801057e:	f7ff ffa8 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010582:	2302      	movs	r3, #2
 8010584:	2200      	movs	r2, #0
 8010586:	4629      	mov	r1, r5
 8010588:	4620      	mov	r0, r4
 801058a:	f7ff ffa2 	bl	80104d2 <dwt_write16bitoffsetreg>
 801058e:	2200      	movs	r2, #0
 8010590:	4904      	ldr	r1, [pc, #16]	; (80105a4 <_dwt_otpread+0x40>)
 8010592:	4620      	mov	r0, r4
 8010594:	f7ff fb29 	bl	800fbea <dwt_read32bitoffsetreg>
 8010598:	bd70      	pop	{r4, r5, r6, pc}
 801059a:	bf00      	nop
 801059c:	000b0008 	.word	0x000b0008
 80105a0:	000b0004 	.word	0x000b0004
 80105a4:	000b0010 	.word	0x000b0010

080105a8 <dwt_write32bitoffsetreg>:
 80105a8:	b510      	push	{r4, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	f88d 300c 	strb.w	r3, [sp, #12]
 80105b0:	0a1c      	lsrs	r4, r3, #8
 80105b2:	f88d 400d 	strb.w	r4, [sp, #13]
 80105b6:	0c1c      	lsrs	r4, r3, #16
 80105b8:	f88d 400e 	strb.w	r4, [sp, #14]
 80105bc:	0e1b      	lsrs	r3, r3, #24
 80105be:	f88d 300f 	strb.w	r3, [sp, #15]
 80105c2:	ab03      	add	r3, sp, #12
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	2304      	movs	r3, #4
 80105c8:	b292      	uxth	r2, r2
 80105ca:	f7ff ff77 	bl	80104bc <dwt_writetodevice>
 80105ce:	b004      	add	sp, #16
 80105d0:	bd10      	pop	{r4, pc}

080105d2 <_dwt_adjust_delaytime>:
 80105d2:	b538      	push	{r3, r4, r5, lr}
 80105d4:	4604      	mov	r4, r0
 80105d6:	b989      	cbnz	r1, 80105fc <_dwt_adjust_delaytime+0x2a>
 80105d8:	2200      	movs	r2, #0
 80105da:	2128      	movs	r1, #40	; 0x28
 80105dc:	f7ff fb05 	bl	800fbea <dwt_read32bitoffsetreg>
 80105e0:	4605      	mov	r5, r0
 80105e2:	2201      	movs	r2, #1
 80105e4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80105e8:	4620      	mov	r0, r4
 80105ea:	f7ff fb53 	bl	800fc94 <dwt_read8bitoffsetreg>
 80105ee:	1a2b      	subs	r3, r5, r0
 80105f0:	2200      	movs	r2, #0
 80105f2:	2128      	movs	r1, #40	; 0x28
 80105f4:	4620      	mov	r0, r4
 80105f6:	f7ff ffd7 	bl	80105a8 <dwt_write32bitoffsetreg>
 80105fa:	bd38      	pop	{r3, r4, r5, pc}
 80105fc:	2200      	movs	r2, #0
 80105fe:	2128      	movs	r1, #40	; 0x28
 8010600:	f7ff faf3 	bl	800fbea <dwt_read32bitoffsetreg>
 8010604:	4605      	mov	r5, r0
 8010606:	2201      	movs	r2, #1
 8010608:	217c      	movs	r1, #124	; 0x7c
 801060a:	4620      	mov	r0, r4
 801060c:	f7ff fb42 	bl	800fc94 <dwt_read8bitoffsetreg>
 8010610:	1a2b      	subs	r3, r5, r0
 8010612:	2200      	movs	r2, #0
 8010614:	2128      	movs	r1, #40	; 0x28
 8010616:	4620      	mov	r0, r4
 8010618:	f7ff ffc6 	bl	80105a8 <dwt_write32bitoffsetreg>
 801061c:	e7ed      	b.n	80105fa <_dwt_adjust_delaytime+0x28>

0801061e <ull_setrxaftertxdelay>:
 801061e:	b538      	push	{r3, r4, r5, lr}
 8010620:	4605      	mov	r5, r0
 8010622:	460c      	mov	r4, r1
 8010624:	2200      	movs	r2, #0
 8010626:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801062a:	f7ff fade 	bl	800fbea <dwt_read32bitoffsetreg>
 801062e:	0d00      	lsrs	r0, r0, #20
 8010630:	0500      	lsls	r0, r0, #20
 8010632:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010636:	4303      	orrs	r3, r0
 8010638:	2200      	movs	r2, #0
 801063a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801063e:	4628      	mov	r0, r5
 8010640:	f7ff ffb2 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010644:	bd38      	pop	{r3, r4, r5, pc}
	...

08010648 <ull_setfinegraintxseq>:
 8010648:	b508      	push	{r3, lr}
 801064a:	b929      	cbnz	r1, 8010658 <ull_setfinegraintxseq+0x10>
 801064c:	4b05      	ldr	r3, [pc, #20]	; (8010664 <ull_setfinegraintxseq+0x1c>)
 801064e:	2202      	movs	r2, #2
 8010650:	4905      	ldr	r1, [pc, #20]	; (8010668 <ull_setfinegraintxseq+0x20>)
 8010652:	f7ff ffa9 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010656:	bd08      	pop	{r3, pc}
 8010658:	4b04      	ldr	r3, [pc, #16]	; (801066c <ull_setfinegraintxseq+0x24>)
 801065a:	2202      	movs	r2, #2
 801065c:	4902      	ldr	r1, [pc, #8]	; (8010668 <ull_setfinegraintxseq+0x20>)
 801065e:	f7ff ffa3 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010662:	e7f8      	b.n	8010656 <ull_setfinegraintxseq+0xe>
 8010664:	00d20874 	.word	0x00d20874
 8010668:	00110010 	.word	0x00110010
 801066c:	04d28874 	.word	0x04d28874

08010670 <ull_setlnapamode>:
 8010670:	b538      	push	{r3, r4, r5, lr}
 8010672:	4605      	mov	r5, r0
 8010674:	460c      	mov	r4, r1
 8010676:	2200      	movs	r2, #0
 8010678:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801067c:	f7ff fab5 	bl	800fbea <dwt_read32bitoffsetreg>
 8010680:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 8010684:	f014 0f01 	tst.w	r4, #1
 8010688:	bf18      	it	ne
 801068a:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 801068e:	f014 0f02 	tst.w	r4, #2
 8010692:	bf18      	it	ne
 8010694:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 8010698:	f014 0f04 	tst.w	r4, #4
 801069c:	bf18      	it	ne
 801069e:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 80106a2:	2200      	movs	r2, #0
 80106a4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80106a8:	4628      	mov	r0, r5
 80106aa:	f7ff ff7d 	bl	80105a8 <dwt_write32bitoffsetreg>
 80106ae:	bd38      	pop	{r3, r4, r5, pc}

080106b0 <ull_configurestskey>:
 80106b0:	b538      	push	{r3, r4, r5, lr}
 80106b2:	4605      	mov	r5, r0
 80106b4:	460c      	mov	r4, r1
 80106b6:	680b      	ldr	r3, [r1, #0]
 80106b8:	2200      	movs	r2, #0
 80106ba:	490b      	ldr	r1, [pc, #44]	; (80106e8 <ull_configurestskey+0x38>)
 80106bc:	f7ff ff74 	bl	80105a8 <dwt_write32bitoffsetreg>
 80106c0:	6863      	ldr	r3, [r4, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	4909      	ldr	r1, [pc, #36]	; (80106ec <ull_configurestskey+0x3c>)
 80106c6:	4628      	mov	r0, r5
 80106c8:	f7ff ff6e 	bl	80105a8 <dwt_write32bitoffsetreg>
 80106cc:	68a3      	ldr	r3, [r4, #8]
 80106ce:	2200      	movs	r2, #0
 80106d0:	4907      	ldr	r1, [pc, #28]	; (80106f0 <ull_configurestskey+0x40>)
 80106d2:	4628      	mov	r0, r5
 80106d4:	f7ff ff68 	bl	80105a8 <dwt_write32bitoffsetreg>
 80106d8:	68e3      	ldr	r3, [r4, #12]
 80106da:	2200      	movs	r2, #0
 80106dc:	4905      	ldr	r1, [pc, #20]	; (80106f4 <ull_configurestskey+0x44>)
 80106de:	4628      	mov	r0, r5
 80106e0:	f7ff ff62 	bl	80105a8 <dwt_write32bitoffsetreg>
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
 80106e6:	bf00      	nop
 80106e8:	0002000c 	.word	0x0002000c
 80106ec:	00020010 	.word	0x00020010
 80106f0:	00020014 	.word	0x00020014
 80106f4:	00020018 	.word	0x00020018

080106f8 <ull_configurestsiv>:
 80106f8:	b538      	push	{r3, r4, r5, lr}
 80106fa:	4605      	mov	r5, r0
 80106fc:	460c      	mov	r4, r1
 80106fe:	680b      	ldr	r3, [r1, #0]
 8010700:	2200      	movs	r2, #0
 8010702:	490b      	ldr	r1, [pc, #44]	; (8010730 <ull_configurestsiv+0x38>)
 8010704:	f7ff ff50 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010708:	6863      	ldr	r3, [r4, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	4909      	ldr	r1, [pc, #36]	; (8010734 <ull_configurestsiv+0x3c>)
 801070e:	4628      	mov	r0, r5
 8010710:	f7ff ff4a 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010714:	68a3      	ldr	r3, [r4, #8]
 8010716:	2200      	movs	r2, #0
 8010718:	4907      	ldr	r1, [pc, #28]	; (8010738 <ull_configurestsiv+0x40>)
 801071a:	4628      	mov	r0, r5
 801071c:	f7ff ff44 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010720:	68e3      	ldr	r3, [r4, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	4905      	ldr	r1, [pc, #20]	; (801073c <ull_configurestsiv+0x44>)
 8010726:	4628      	mov	r0, r5
 8010728:	f7ff ff3e 	bl	80105a8 <dwt_write32bitoffsetreg>
 801072c:	bd38      	pop	{r3, r4, r5, pc}
 801072e:	bf00      	nop
 8010730:	0002001c 	.word	0x0002001c
 8010734:	00020020 	.word	0x00020020
 8010738:	00020024 	.word	0x00020024
 801073c:	00020028 	.word	0x00020028

08010740 <ull_configmrxlut>:
 8010740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	4604      	mov	r4, r0
 8010746:	4d35      	ldr	r5, [pc, #212]	; (801081c <ull_configmrxlut+0xdc>)
 8010748:	4b35      	ldr	r3, [pc, #212]	; (8010820 <ull_configmrxlut+0xe0>)
 801074a:	2905      	cmp	r1, #5
 801074c:	bf18      	it	ne
 801074e:	461d      	movne	r5, r3
 8010750:	4e34      	ldr	r6, [pc, #208]	; (8010824 <ull_configmrxlut+0xe4>)
 8010752:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010756:	2905      	cmp	r1, #5
 8010758:	bf18      	it	ne
 801075a:	461e      	movne	r6, r3
 801075c:	4f32      	ldr	r7, [pc, #200]	; (8010828 <ull_configmrxlut+0xe8>)
 801075e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010762:	2905      	cmp	r1, #5
 8010764:	bf18      	it	ne
 8010766:	461f      	movne	r7, r3
 8010768:	4a30      	ldr	r2, [pc, #192]	; (801082c <ull_configmrxlut+0xec>)
 801076a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801076e:	2905      	cmp	r1, #5
 8010770:	bf0c      	ite	eq
 8010772:	4690      	moveq	r8, r2
 8010774:	4698      	movne	r8, r3
 8010776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801077a:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 801077e:	2905      	cmp	r1, #5
 8010780:	bf0c      	ite	eq
 8010782:	4691      	moveq	r9, r2
 8010784:	4699      	movne	r9, r3
 8010786:	4a2a      	ldr	r2, [pc, #168]	; (8010830 <ull_configmrxlut+0xf0>)
 8010788:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 801078c:	2905      	cmp	r1, #5
 801078e:	bf0c      	ite	eq
 8010790:	4692      	moveq	sl, r2
 8010792:	469a      	movne	sl, r3
 8010794:	4b27      	ldr	r3, [pc, #156]	; (8010834 <ull_configmrxlut+0xf4>)
 8010796:	4a28      	ldr	r2, [pc, #160]	; (8010838 <ull_configmrxlut+0xf8>)
 8010798:	2905      	cmp	r1, #5
 801079a:	bf0c      	ite	eq
 801079c:	469b      	moveq	fp, r3
 801079e:	4693      	movne	fp, r2
 80107a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80107a4:	2200      	movs	r2, #0
 80107a6:	4925      	ldr	r1, [pc, #148]	; (801083c <ull_configmrxlut+0xfc>)
 80107a8:	f7ff fefe 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107ac:	4b24      	ldr	r3, [pc, #144]	; (8010840 <ull_configmrxlut+0x100>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	4924      	ldr	r1, [pc, #144]	; (8010844 <ull_configmrxlut+0x104>)
 80107b2:	4620      	mov	r0, r4
 80107b4:	f7ff fef8 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107b8:	4b23      	ldr	r3, [pc, #140]	; (8010848 <ull_configmrxlut+0x108>)
 80107ba:	2200      	movs	r2, #0
 80107bc:	4923      	ldr	r1, [pc, #140]	; (801084c <ull_configmrxlut+0x10c>)
 80107be:	4620      	mov	r0, r4
 80107c0:	f7ff fef2 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107c4:	465b      	mov	r3, fp
 80107c6:	2200      	movs	r2, #0
 80107c8:	4921      	ldr	r1, [pc, #132]	; (8010850 <ull_configmrxlut+0x110>)
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7ff feec 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107d0:	4653      	mov	r3, sl
 80107d2:	2200      	movs	r2, #0
 80107d4:	491f      	ldr	r1, [pc, #124]	; (8010854 <ull_configmrxlut+0x114>)
 80107d6:	4620      	mov	r0, r4
 80107d8:	f7ff fee6 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107dc:	464b      	mov	r3, r9
 80107de:	2200      	movs	r2, #0
 80107e0:	491d      	ldr	r1, [pc, #116]	; (8010858 <ull_configmrxlut+0x118>)
 80107e2:	4620      	mov	r0, r4
 80107e4:	f7ff fee0 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107e8:	4643      	mov	r3, r8
 80107ea:	2200      	movs	r2, #0
 80107ec:	491b      	ldr	r1, [pc, #108]	; (801085c <ull_configmrxlut+0x11c>)
 80107ee:	4620      	mov	r0, r4
 80107f0:	f7ff feda 	bl	80105a8 <dwt_write32bitoffsetreg>
 80107f4:	463b      	mov	r3, r7
 80107f6:	2200      	movs	r2, #0
 80107f8:	4919      	ldr	r1, [pc, #100]	; (8010860 <ull_configmrxlut+0x120>)
 80107fa:	4620      	mov	r0, r4
 80107fc:	f7ff fed4 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010800:	4633      	mov	r3, r6
 8010802:	2200      	movs	r2, #0
 8010804:	4917      	ldr	r1, [pc, #92]	; (8010864 <ull_configmrxlut+0x124>)
 8010806:	4620      	mov	r0, r4
 8010808:	f7ff fece 	bl	80105a8 <dwt_write32bitoffsetreg>
 801080c:	462b      	mov	r3, r5
 801080e:	2200      	movs	r2, #0
 8010810:	4915      	ldr	r1, [pc, #84]	; (8010868 <ull_configmrxlut+0x128>)
 8010812:	4620      	mov	r0, r4
 8010814:	f7ff fec8 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081c:	00039ff6 	.word	0x00039ff6
 8010820:	00055ffe 	.word	0x00055ffe
 8010824:	00039dfe 	.word	0x00039dfe
 8010828:	00039c7e 	.word	0x00039c7e
 801082c:	00038efe 	.word	0x00038efe
 8010830:	0003876e 	.word	0x0003876e
 8010834:	0003803e 	.word	0x0003803e
 8010838:	0005407e 	.word	0x0005407e
 801083c:	0003001c 	.word	0x0003001c
 8010840:	1a491248 	.word	0x1a491248
 8010844:	00030020 	.word	0x00030020
 8010848:	2db248db 	.word	0x2db248db
 801084c:	00030024 	.word	0x00030024
 8010850:	0003002c 	.word	0x0003002c
 8010854:	00030030 	.word	0x00030030
 8010858:	00030034 	.word	0x00030034
 801085c:	00030038 	.word	0x00030038
 8010860:	0003003c 	.word	0x0003003c
 8010864:	00030040 	.word	0x00030040
 8010868:	00030044 	.word	0x00030044

0801086c <ull_disable_rftx_blocks>:
 801086c:	b508      	push	{r3, lr}
 801086e:	2300      	movs	r3, #0
 8010870:	461a      	mov	r2, r3
 8010872:	4902      	ldr	r1, [pc, #8]	; (801087c <ull_disable_rftx_blocks+0x10>)
 8010874:	f7ff fe98 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010878:	bd08      	pop	{r3, pc}
 801087a:	bf00      	nop
 801087c:	00070004 	.word	0x00070004

08010880 <ull_disable_rf_tx>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4604      	mov	r4, r0
 8010884:	460d      	mov	r5, r1
 8010886:	2300      	movs	r3, #0
 8010888:	461a      	mov	r2, r3
 801088a:	490a      	ldr	r1, [pc, #40]	; (80108b4 <ull_disable_rf_tx+0x34>)
 801088c:	f7ff fe8c 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010890:	2300      	movs	r3, #0
 8010892:	461a      	mov	r2, r3
 8010894:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8010898:	4620      	mov	r0, r4
 801089a:	f7ff fe85 	bl	80105a8 <dwt_write32bitoffsetreg>
 801089e:	b905      	cbnz	r5, 80108a2 <ull_disable_rf_tx+0x22>
 80108a0:	bd38      	pop	{r3, r4, r5, pc}
 80108a2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80108a6:	2200      	movs	r2, #0
 80108a8:	4903      	ldr	r1, [pc, #12]	; (80108b8 <ull_disable_rf_tx+0x38>)
 80108aa:	4620      	mov	r0, r4
 80108ac:	f7ff fe7c 	bl	80105a8 <dwt_write32bitoffsetreg>
 80108b0:	e7f6      	b.n	80108a0 <ull_disable_rf_tx+0x20>
 80108b2:	bf00      	nop
 80108b4:	00070048 	.word	0x00070048
 80108b8:	00070014 	.word	0x00070014

080108bc <ull_repeated_cw>:
 80108bc:	b570      	push	{r4, r5, r6, lr}
 80108be:	4606      	mov	r6, r0
 80108c0:	460c      	mov	r4, r1
 80108c2:	4615      	mov	r5, r2
 80108c4:	2100      	movs	r1, #0
 80108c6:	f7ff febf 	bl	8010648 <ull_setfinegraintxseq>
 80108ca:	2d0f      	cmp	r5, #15
 80108cc:	bfa8      	it	ge
 80108ce:	250f      	movge	r5, #15
 80108d0:	1e63      	subs	r3, r4, #1
 80108d2:	2b03      	cmp	r3, #3
 80108d4:	bf28      	it	cs
 80108d6:	2404      	movcs	r4, #4
 80108d8:	2310      	movs	r3, #16
 80108da:	4123      	asrs	r3, r4
 80108dc:	2200      	movs	r2, #0
 80108de:	4907      	ldr	r1, [pc, #28]	; (80108fc <ull_repeated_cw+0x40>)
 80108e0:	4630      	mov	r0, r6
 80108e2:	f7ff fe61 	bl	80105a8 <dwt_write32bitoffsetreg>
 80108e6:	1e63      	subs	r3, r4, #1
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	fa05 f303 	lsl.w	r3, r5, r3
 80108ee:	2200      	movs	r2, #0
 80108f0:	4903      	ldr	r1, [pc, #12]	; (8010900 <ull_repeated_cw+0x44>)
 80108f2:	4630      	mov	r0, r6
 80108f4:	f7ff fe58 	bl	80105a8 <dwt_write32bitoffsetreg>
 80108f8:	bd70      	pop	{r4, r5, r6, pc}
 80108fa:	bf00      	nop
 80108fc:	00070028 	.word	0x00070028
 8010900:	00080018 	.word	0x00080018

08010904 <ull_readrxdata>:
 8010904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010906:	b083      	sub	sp, #12
 8010908:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801090a:	7ba4      	ldrb	r4, [r4, #14]
 801090c:	2c03      	cmp	r4, #3
 801090e:	bf0c      	ite	eq
 8010910:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8010914:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8010918:	189c      	adds	r4, r3, r2
 801091a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801091e:	da19      	bge.n	8010954 <ull_readrxdata+0x50>
 8010920:	461d      	mov	r5, r3
 8010922:	4616      	mov	r6, r2
 8010924:	460f      	mov	r7, r1
 8010926:	4604      	mov	r4, r0
 8010928:	2b7f      	cmp	r3, #127	; 0x7f
 801092a:	d915      	bls.n	8010958 <ull_readrxdata+0x54>
 801092c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8010930:	2200      	movs	r2, #0
 8010932:	490d      	ldr	r1, [pc, #52]	; (8010968 <ull_readrxdata+0x64>)
 8010934:	f7ff fe38 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010938:	462b      	mov	r3, r5
 801093a:	2200      	movs	r2, #0
 801093c:	490b      	ldr	r1, [pc, #44]	; (801096c <ull_readrxdata+0x68>)
 801093e:	4620      	mov	r0, r4
 8010940:	f7ff fe32 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010944:	9700      	str	r7, [sp, #0]
 8010946:	4633      	mov	r3, r6
 8010948:	2200      	movs	r2, #0
 801094a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801094e:	4620      	mov	r0, r4
 8010950:	f7ff f941 	bl	800fbd6 <dwt_readfromdevice>
 8010954:	b003      	add	sp, #12
 8010956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010958:	9100      	str	r1, [sp, #0]
 801095a:	4613      	mov	r3, r2
 801095c:	462a      	mov	r2, r5
 801095e:	4661      	mov	r1, ip
 8010960:	f7ff f939 	bl	800fbd6 <dwt_readfromdevice>
 8010964:	e7f6      	b.n	8010954 <ull_readrxdata+0x50>
 8010966:	bf00      	nop
 8010968:	001f0004 	.word	0x001f0004
 801096c:	001f0008 	.word	0x001f0008

08010970 <dwt_write8bitoffsetreg>:
 8010970:	b510      	push	{r4, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	ac04      	add	r4, sp, #16
 8010976:	f804 3d01 	strb.w	r3, [r4, #-1]!
 801097a:	9400      	str	r4, [sp, #0]
 801097c:	2301      	movs	r3, #1
 801097e:	b292      	uxth	r2, r2
 8010980:	f7ff fd9c 	bl	80104bc <dwt_writetodevice>
 8010984:	b004      	add	sp, #16
 8010986:	bd10      	pop	{r4, pc}

08010988 <ull_getframelength>:
 8010988:	b510      	push	{r4, lr}
 801098a:	4604      	mov	r4, r0
 801098c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801098e:	7b9b      	ldrb	r3, [r3, #14]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d013      	beq.n	80109bc <ull_getframelength+0x34>
 8010994:	2b03      	cmp	r3, #3
 8010996:	d11d      	bne.n	80109d4 <ull_getframelength+0x4c>
 8010998:	23f0      	movs	r3, #240	; 0xf0
 801099a:	2200      	movs	r2, #0
 801099c:	4912      	ldr	r1, [pc, #72]	; (80109e8 <ull_getframelength+0x60>)
 801099e:	f7ff ffe7 	bl	8010970 <dwt_write8bitoffsetreg>
 80109a2:	2200      	movs	r2, #0
 80109a4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80109a8:	4620      	mov	r0, r4
 80109aa:	f7ff f934 	bl	800fc16 <dwt_read16bitoffsetreg>
 80109ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80109b0:	7ada      	ldrb	r2, [r3, #11]
 80109b2:	b1a2      	cbz	r2, 80109de <ull_getframelength+0x56>
 80109b4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80109b8:	83d8      	strh	r0, [r3, #30]
 80109ba:	bd10      	pop	{r4, pc}
 80109bc:	230f      	movs	r3, #15
 80109be:	2200      	movs	r2, #0
 80109c0:	4909      	ldr	r1, [pc, #36]	; (80109e8 <ull_getframelength+0x60>)
 80109c2:	f7ff ffd5 	bl	8010970 <dwt_write8bitoffsetreg>
 80109c6:	2200      	movs	r2, #0
 80109c8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80109cc:	4620      	mov	r0, r4
 80109ce:	f7ff f922 	bl	800fc16 <dwt_read16bitoffsetreg>
 80109d2:	e7ec      	b.n	80109ae <ull_getframelength+0x26>
 80109d4:	2200      	movs	r2, #0
 80109d6:	214c      	movs	r1, #76	; 0x4c
 80109d8:	f7ff f91d 	bl	800fc16 <dwt_read16bitoffsetreg>
 80109dc:	e7e7      	b.n	80109ae <ull_getframelength+0x26>
 80109de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80109e2:	83d8      	strh	r0, [r3, #30]
 80109e4:	e7e9      	b.n	80109ba <ull_getframelength+0x32>
 80109e6:	bf00      	nop
 80109e8:	00010018 	.word	0x00010018

080109ec <_dwt_clear_db_events>:
 80109ec:	b510      	push	{r4, lr}
 80109ee:	4604      	mov	r4, r0
 80109f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80109f2:	7b9b      	ldrb	r3, [r3, #14]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d004      	beq.n	8010a02 <_dwt_clear_db_events+0x16>
 80109f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80109fa:	7b9b      	ldrb	r3, [r3, #14]
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d006      	beq.n	8010a0e <_dwt_clear_db_events+0x22>
 8010a00:	bd10      	pop	{r4, pc}
 8010a02:	230f      	movs	r3, #15
 8010a04:	2200      	movs	r2, #0
 8010a06:	4905      	ldr	r1, [pc, #20]	; (8010a1c <_dwt_clear_db_events+0x30>)
 8010a08:	f7ff ffb2 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a0c:	e7f4      	b.n	80109f8 <_dwt_clear_db_events+0xc>
 8010a0e:	23f0      	movs	r3, #240	; 0xf0
 8010a10:	2200      	movs	r2, #0
 8010a12:	4902      	ldr	r1, [pc, #8]	; (8010a1c <_dwt_clear_db_events+0x30>)
 8010a14:	4620      	mov	r0, r4
 8010a16:	f7ff ffab 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a1a:	e7f1      	b.n	8010a00 <_dwt_clear_db_events+0x14>
 8010a1c:	00010018 	.word	0x00010018

08010a20 <ull_clearaonconfig>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4604      	mov	r4, r0
 8010a24:	2300      	movs	r3, #0
 8010a26:	461a      	mov	r2, r3
 8010a28:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8010a2c:	f7ff fd51 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010a30:	2300      	movs	r3, #0
 8010a32:	461a      	mov	r2, r3
 8010a34:	4908      	ldr	r1, [pc, #32]	; (8010a58 <ull_clearaonconfig+0x38>)
 8010a36:	4620      	mov	r0, r4
 8010a38:	f7ff ff9a 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a3c:	4d07      	ldr	r5, [pc, #28]	; (8010a5c <ull_clearaonconfig+0x3c>)
 8010a3e:	2300      	movs	r3, #0
 8010a40:	461a      	mov	r2, r3
 8010a42:	4629      	mov	r1, r5
 8010a44:	4620      	mov	r0, r4
 8010a46:	f7ff ff93 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a4a:	2302      	movs	r3, #2
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	4629      	mov	r1, r5
 8010a50:	4620      	mov	r0, r4
 8010a52:	f7ff ff8d 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
 8010a58:	000a0014 	.word	0x000a0014
 8010a5c:	000a0004 	.word	0x000a0004

08010a60 <ull_configeventcounters>:
 8010a60:	b538      	push	{r3, r4, r5, lr}
 8010a62:	4605      	mov	r5, r0
 8010a64:	460c      	mov	r4, r1
 8010a66:	2302      	movs	r3, #2
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8010a6e:	f7ff ff7f 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a72:	b904      	cbnz	r4, 8010a76 <ull_configeventcounters+0x16>
 8010a74:	bd38      	pop	{r3, r4, r5, pc}
 8010a76:	2301      	movs	r3, #1
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f7ff ff76 	bl	8010970 <dwt_write8bitoffsetreg>
 8010a84:	e7f6      	b.n	8010a74 <ull_configeventcounters+0x14>
	...

08010a88 <ull_aon_read>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	2200      	movs	r2, #0
 8010a90:	490a      	ldr	r1, [pc, #40]	; (8010abc <ull_aon_read+0x34>)
 8010a92:	f7ff fd1e 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010a96:	4d0a      	ldr	r5, [pc, #40]	; (8010ac0 <ull_aon_read+0x38>)
 8010a98:	2388      	movs	r3, #136	; 0x88
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	f7ff ff66 	bl	8010970 <dwt_write8bitoffsetreg>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	4629      	mov	r1, r5
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f7ff ff60 	bl	8010970 <dwt_write8bitoffsetreg>
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	4904      	ldr	r1, [pc, #16]	; (8010ac4 <ull_aon_read+0x3c>)
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f7ff f8ed 	bl	800fc94 <dwt_read8bitoffsetreg>
 8010aba:	bd38      	pop	{r3, r4, r5, pc}
 8010abc:	000a000c 	.word	0x000a000c
 8010ac0:	000a0004 	.word	0x000a0004
 8010ac4:	000a0008 	.word	0x000a0008

08010ac8 <ull_aon_write>:
 8010ac8:	b570      	push	{r4, r5, r6, lr}
 8010aca:	4604      	mov	r4, r0
 8010acc:	460b      	mov	r3, r1
 8010ace:	4615      	mov	r5, r2
 8010ad0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8010ad4:	bf34      	ite	cc
 8010ad6:	2600      	movcc	r6, #0
 8010ad8:	2620      	movcs	r6, #32
 8010ada:	2200      	movs	r2, #0
 8010adc:	490b      	ldr	r1, [pc, #44]	; (8010b0c <ull_aon_write+0x44>)
 8010ade:	f7ff fcf8 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010ae2:	462b      	mov	r3, r5
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	490a      	ldr	r1, [pc, #40]	; (8010b10 <ull_aon_write+0x48>)
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f7ff ff41 	bl	8010970 <dwt_write8bitoffsetreg>
 8010aee:	4d09      	ldr	r5, [pc, #36]	; (8010b14 <ull_aon_write+0x4c>)
 8010af0:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8010af4:	2200      	movs	r2, #0
 8010af6:	4629      	mov	r1, r5
 8010af8:	4620      	mov	r0, r4
 8010afa:	f7ff ff39 	bl	8010970 <dwt_write8bitoffsetreg>
 8010afe:	2300      	movs	r3, #0
 8010b00:	461a      	mov	r2, r3
 8010b02:	4629      	mov	r1, r5
 8010b04:	4620      	mov	r0, r4
 8010b06:	f7ff ff33 	bl	8010970 <dwt_write8bitoffsetreg>
 8010b0a:	bd70      	pop	{r4, r5, r6, pc}
 8010b0c:	000a000c 	.word	0x000a000c
 8010b10:	000a0010 	.word	0x000a0010
 8010b14:	000a0004 	.word	0x000a0004

08010b18 <ull_configuresleep>:
 8010b18:	b570      	push	{r4, r5, r6, lr}
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	460d      	mov	r5, r1
 8010b1e:	4616      	mov	r6, r2
 8010b20:	2200      	movs	r2, #0
 8010b22:	f240 110b 	movw	r1, #267	; 0x10b
 8010b26:	f7ff ffcf 	bl	8010ac8 <ull_aon_write>
 8010b2a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7ff ffaa 	bl	8010a88 <ull_aon_read>
 8010b34:	f000 021f 	and.w	r2, r0, #31
 8010b38:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f7ff ffc3 	bl	8010ac8 <ull_aon_write>
 8010b42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010b44:	8a1a      	ldrh	r2, [r3, #16]
 8010b46:	4315      	orrs	r5, r2
 8010b48:	821d      	strh	r5, [r3, #16]
 8010b4a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010b4c:	8a13      	ldrh	r3, [r2, #16]
 8010b4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8010b52:	bf1c      	itt	ne
 8010b54:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 8010b58:	8213      	strhne	r3, [r2, #16]
 8010b5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010b5c:	8a1b      	ldrh	r3, [r3, #16]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8010b64:	4620      	mov	r0, r4
 8010b66:	f7ff fcb4 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010b6a:	4633      	mov	r3, r6
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	4902      	ldr	r1, [pc, #8]	; (8010b78 <ull_configuresleep+0x60>)
 8010b70:	4620      	mov	r0, r4
 8010b72:	f7ff fefd 	bl	8010970 <dwt_write8bitoffsetreg>
 8010b76:	bd70      	pop	{r4, r5, r6, pc}
 8010b78:	000a0014 	.word	0x000a0014

08010b7c <ull_setplenfine>:
 8010b7c:	b508      	push	{r3, lr}
 8010b7e:	460b      	mov	r3, r1
 8010b80:	2201      	movs	r2, #1
 8010b82:	2124      	movs	r1, #36	; 0x24
 8010b84:	f7ff fef4 	bl	8010970 <dwt_write8bitoffsetreg>
 8010b88:	bd08      	pop	{r3, pc}
	...

08010b8c <ull_update_nonce_GCM>:
 8010b8c:	b500      	push	{lr}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	9100      	str	r1, [sp, #0]
 8010b92:	230c      	movs	r3, #12
 8010b94:	2200      	movs	r2, #0
 8010b96:	4903      	ldr	r1, [pc, #12]	; (8010ba4 <ull_update_nonce_GCM+0x18>)
 8010b98:	f7ff fc90 	bl	80104bc <dwt_writetodevice>
 8010b9c:	b003      	add	sp, #12
 8010b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ba2:	bf00      	nop
 8010ba4:	00010034 	.word	0x00010034

08010ba8 <ull_update_nonce_CCM>:
 8010ba8:	b500      	push	{lr}
 8010baa:	b087      	sub	sp, #28
 8010bac:	4613      	mov	r3, r2
 8010bae:	7a8a      	ldrb	r2, [r1, #10]
 8010bb0:	f88d 2008 	strb.w	r2, [sp, #8]
 8010bb4:	7a4a      	ldrb	r2, [r1, #9]
 8010bb6:	f88d 2009 	strb.w	r2, [sp, #9]
 8010bba:	7a0a      	ldrb	r2, [r1, #8]
 8010bbc:	f88d 200a 	strb.w	r2, [sp, #10]
 8010bc0:	79ca      	ldrb	r2, [r1, #7]
 8010bc2:	f88d 200b 	strb.w	r2, [sp, #11]
 8010bc6:	798a      	ldrb	r2, [r1, #6]
 8010bc8:	f88d 200c 	strb.w	r2, [sp, #12]
 8010bcc:	794a      	ldrb	r2, [r1, #5]
 8010bce:	f88d 200d 	strb.w	r2, [sp, #13]
 8010bd2:	790a      	ldrb	r2, [r1, #4]
 8010bd4:	f88d 200e 	strb.w	r2, [sp, #14]
 8010bd8:	78ca      	ldrb	r2, [r1, #3]
 8010bda:	f88d 200f 	strb.w	r2, [sp, #15]
 8010bde:	788a      	ldrb	r2, [r1, #2]
 8010be0:	f88d 2010 	strb.w	r2, [sp, #16]
 8010be4:	784a      	ldrb	r2, [r1, #1]
 8010be6:	f88d 2011 	strb.w	r2, [sp, #17]
 8010bea:	780a      	ldrb	r2, [r1, #0]
 8010bec:	f88d 2012 	strb.w	r2, [sp, #18]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f88d 2013 	strb.w	r2, [sp, #19]
 8010bf6:	f88d 3014 	strb.w	r3, [sp, #20]
 8010bfa:	0a1b      	lsrs	r3, r3, #8
 8010bfc:	f88d 3015 	strb.w	r3, [sp, #21]
 8010c00:	7b0b      	ldrb	r3, [r1, #12]
 8010c02:	f88d 3016 	strb.w	r3, [sp, #22]
 8010c06:	7acb      	ldrb	r3, [r1, #11]
 8010c08:	f88d 3017 	strb.w	r3, [sp, #23]
 8010c0c:	ab02      	add	r3, sp, #8
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	2310      	movs	r3, #16
 8010c12:	4903      	ldr	r1, [pc, #12]	; (8010c20 <ull_update_nonce_CCM+0x78>)
 8010c14:	f7ff fc52 	bl	80104bc <dwt_writetodevice>
 8010c18:	b007      	add	sp, #28
 8010c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c1e:	bf00      	nop
 8010c20:	00010034 	.word	0x00010034

08010c24 <ull_writetxdata>:
 8010c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c26:	b083      	sub	sp, #12
 8010c28:	185c      	adds	r4, r3, r1
 8010c2a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010c2e:	da24      	bge.n	8010c7a <ull_writetxdata+0x56>
 8010c30:	461c      	mov	r4, r3
 8010c32:	4617      	mov	r7, r2
 8010c34:	460e      	mov	r6, r1
 8010c36:	4605      	mov	r5, r0
 8010c38:	2b7f      	cmp	r3, #127	; 0x7f
 8010c3a:	d915      	bls.n	8010c68 <ull_writetxdata+0x44>
 8010c3c:	2314      	movs	r3, #20
 8010c3e:	2200      	movs	r2, #0
 8010c40:	490f      	ldr	r1, [pc, #60]	; (8010c80 <ull_writetxdata+0x5c>)
 8010c42:	f7ff fcb1 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010c46:	4623      	mov	r3, r4
 8010c48:	2200      	movs	r2, #0
 8010c4a:	490e      	ldr	r1, [pc, #56]	; (8010c84 <ull_writetxdata+0x60>)
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f7ff fcab 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010c52:	9700      	str	r7, [sp, #0]
 8010c54:	4633      	mov	r3, r6
 8010c56:	2200      	movs	r2, #0
 8010c58:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	f7ff fc2d 	bl	80104bc <dwt_writetodevice>
 8010c62:	2000      	movs	r0, #0
 8010c64:	b003      	add	sp, #12
 8010c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c68:	9200      	str	r2, [sp, #0]
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	4622      	mov	r2, r4
 8010c6e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8010c72:	f7ff fc23 	bl	80104bc <dwt_writetodevice>
 8010c76:	2000      	movs	r0, #0
 8010c78:	e7f4      	b.n	8010c64 <ull_writetxdata+0x40>
 8010c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7e:	e7f1      	b.n	8010c64 <ull_writetxdata+0x40>
 8010c80:	001f0004 	.word	0x001f0004
 8010c84:	001f0008 	.word	0x001f0008

08010c88 <ull_signal_rx_buff_free>:
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	2302      	movs	r3, #2
 8010c90:	9301      	str	r3, [sp, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	9200      	str	r2, [sp, #0]
 8010c96:	4613      	mov	r3, r2
 8010c98:	2113      	movs	r1, #19
 8010c9a:	f7fe ff1e 	bl	800fada <dwt_xfer3xxx>
 8010c9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010ca0:	7b9a      	ldrb	r2, [r3, #14]
 8010ca2:	2a03      	cmp	r2, #3
 8010ca4:	bf0c      	ite	eq
 8010ca6:	2201      	moveq	r2, #1
 8010ca8:	2203      	movne	r2, #3
 8010caa:	739a      	strb	r2, [r3, #14]
 8010cac:	b002      	add	sp, #8
 8010cae:	bd10      	pop	{r4, pc}

08010cb0 <ull_isr>:
 8010cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8010cbc:	f7fe ffea 	bl	800fc94 <dwt_read8bitoffsetreg>
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2144      	movs	r1, #68	; 0x44
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f7fe ff8f 	bl	800fbea <dwt_read32bitoffsetreg>
 8010ccc:	4606      	mov	r6, r0
 8010cce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	83da      	strh	r2, [r3, #30]
 8010cd4:	f883 2020 	strb.w	r2, [r3, #32]
 8010cd8:	619a      	str	r2, [r3, #24]
 8010cda:	839a      	strh	r2, [r3, #28]
 8010cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8010ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8010ce2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010ce4:	625c      	str	r4, [r3, #36]	; 0x24
 8010ce6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010ce8:	7b9f      	ldrb	r7, [r3, #14]
 8010cea:	2f00      	cmp	r7, #0
 8010cec:	d17f      	bne.n	8010dee <ull_isr+0x13e>
 8010cee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010cf0:	619e      	str	r6, [r3, #24]
 8010cf2:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 8010cf6:	f898 3015 	ldrb.w	r3, [r8, #21]
 8010cfa:	f003 0303 	and.w	r3, r3, #3
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	f000 8090 	beq.w	8010e24 <ull_isr+0x174>
 8010d04:	f015 0f80 	tst.w	r5, #128	; 0x80
 8010d08:	f040 8093 	bne.w	8010e32 <ull_isr+0x182>
 8010d0c:	f015 0f01 	tst.w	r5, #1
 8010d10:	f040 80c1 	bne.w	8010e96 <ull_isr+0x1e6>
 8010d14:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010d18:	d00b      	beq.n	8010d32 <ull_isr+0x82>
 8010d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d1c:	b113      	cbz	r3, 8010d24 <ull_isr+0x74>
 8010d1e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010d20:	3018      	adds	r0, #24
 8010d22:	4798      	blx	r3
 8010d24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8010d28:	2202      	movs	r2, #2
 8010d2a:	2144      	movs	r1, #68	; 0x44
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f7ff fbd0 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010d32:	f015 0f08 	tst.w	r5, #8
 8010d36:	d107      	bne.n	8010d48 <ull_isr+0x98>
 8010d38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010d3a:	7b9b      	ldrb	r3, [r3, #14]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f000 80ea 	beq.w	8010f16 <ull_isr+0x266>
 8010d42:	2f00      	cmp	r7, #0
 8010d44:	f000 80e7 	beq.w	8010f16 <ull_isr+0x266>
 8010d48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f883 2020 	strb.w	r2, [r3, #32]
 8010d50:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8010d54:	f000 80ad 	beq.w	8010eb2 <ull_isr+0x202>
 8010d58:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010d5a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8010d5e:	f043 0308 	orr.w	r3, r3, #8
 8010d62:	f882 3020 	strb.w	r3, [r2, #32]
 8010d66:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8010d6a:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8010d6e:	d008      	beq.n	8010d82 <ull_isr+0xd2>
 8010d70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010d72:	f892 3020 	ldrb.w	r3, [r2, #32]
 8010d76:	f043 0310 	orr.w	r3, r3, #16
 8010d7a:	f882 3020 	strb.w	r3, [r2, #32]
 8010d7e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8010d82:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8010d86:	d006      	beq.n	8010d96 <ull_isr+0xe6>
 8010d88:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010d8a:	7d53      	ldrb	r3, [r2, #21]
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	2b03      	cmp	r3, #3
 8010d92:	f000 809a 	beq.w	8010eca <ull_isr+0x21a>
 8010d96:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8010d9a:	f040 80a2 	bne.w	8010ee2 <ull_isr+0x232>
 8010d9e:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8010da2:	2200      	movs	r2, #0
 8010da4:	2144      	movs	r1, #68	; 0x44
 8010da6:	4620      	mov	r0, r4
 8010da8:	f7ff fbfe 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010dac:	4620      	mov	r0, r4
 8010dae:	f7ff fe1d 	bl	80109ec <_dwt_clear_db_events>
 8010db2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010db4:	8bc3      	ldrh	r3, [r0, #30]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f040 80a2 	bne.w	8010f00 <ull_isr+0x250>
 8010dbc:	7d43      	ldrb	r3, [r0, #21]
 8010dbe:	f003 0303 	and.w	r3, r3, #3
 8010dc2:	2b03      	cmp	r3, #3
 8010dc4:	f000 809c 	beq.w	8010f00 <ull_isr+0x250>
 8010dc8:	6983      	ldr	r3, [r0, #24]
 8010dca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8010dce:	6183      	str	r3, [r0, #24]
 8010dd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010dd2:	6993      	ldr	r3, [r2, #24]
 8010dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010dd8:	6193      	str	r3, [r2, #24]
 8010dda:	69e3      	ldr	r3, [r4, #28]
 8010ddc:	b113      	cbz	r3, 8010de4 <ull_isr+0x134>
 8010dde:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010de0:	3018      	adds	r0, #24
 8010de2:	4798      	blx	r3
 8010de4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010de6:	2200      	movs	r2, #0
 8010de8:	f883 2020 	strb.w	r2, [r3, #32]
 8010dec:	e08c      	b.n	8010f08 <ull_isr+0x258>
 8010dee:	496d      	ldr	r1, [pc, #436]	; (8010fa4 <ull_isr+0x2f4>)
 8010df0:	4620      	mov	r0, r4
 8010df2:	f7fe ff4f 	bl	800fc94 <dwt_read8bitoffsetreg>
 8010df6:	4607      	mov	r7, r0
 8010df8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010dfa:	7b9b      	ldrb	r3, [r3, #14]
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	bf08      	it	eq
 8010e00:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8010e04:	f017 0f01 	tst.w	r7, #1
 8010e08:	bf18      	it	ne
 8010e0a:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8010e0e:	f017 0f02 	tst.w	r7, #2
 8010e12:	bf18      	it	ne
 8010e14:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8010e18:	f017 0f04 	tst.w	r7, #4
 8010e1c:	bf18      	it	ne
 8010e1e:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8010e22:	e764      	b.n	8010cee <ull_isr+0x3e>
 8010e24:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8010e28:	bf1c      	itt	ne
 8010e2a:	f045 0508 	orrne.w	r5, r5, #8
 8010e2e:	b2ed      	uxtbne	r5, r5
 8010e30:	e768      	b.n	8010d04 <ull_isr+0x54>
 8010e32:	2200      	movs	r2, #0
 8010e34:	2148      	movs	r1, #72	; 0x48
 8010e36:	4620      	mov	r0, r4
 8010e38:	f7fe feed 	bl	800fc16 <dwt_read16bitoffsetreg>
 8010e3c:	f8a8 001c 	strh.w	r0, [r8, #28]
 8010e40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010e42:	7d1a      	ldrb	r2, [r3, #20]
 8010e44:	b11a      	cbz	r2, 8010e4e <ull_isr+0x19e>
 8010e46:	699a      	ldr	r2, [r3, #24]
 8010e48:	f012 0f04 	tst.w	r2, #4
 8010e4c:	d103      	bne.n	8010e56 <ull_isr+0x1a6>
 8010e4e:	8b9b      	ldrh	r3, [r3, #28]
 8010e50:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8010e54:	b18b      	cbz	r3, 8010e7a <ull_isr+0x1ca>
 8010e56:	2304      	movs	r3, #4
 8010e58:	2200      	movs	r2, #0
 8010e5a:	2144      	movs	r1, #68	; 0x44
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7ff fd87 	bl	8010970 <dwt_write8bitoffsetreg>
 8010e62:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8010e66:	2200      	movs	r2, #0
 8010e68:	2148      	movs	r1, #72	; 0x48
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f7ff fb31 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010e70:	6a23      	ldr	r3, [r4, #32]
 8010e72:	b113      	cbz	r3, 8010e7a <ull_isr+0x1ca>
 8010e74:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010e76:	3018      	adds	r0, #24
 8010e78:	4798      	blx	r3
 8010e7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010e7c:	8b9b      	ldrh	r3, [r3, #28]
 8010e7e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8010e82:	f43f af43 	beq.w	8010d0c <ull_isr+0x5c>
 8010e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	2148      	movs	r1, #72	; 0x48
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f7ff fb1f 	bl	80104d2 <dwt_write16bitoffsetreg>
 8010e94:	e73a      	b.n	8010d0c <ull_isr+0x5c>
 8010e96:	23f8      	movs	r3, #248	; 0xf8
 8010e98:	2200      	movs	r2, #0
 8010e9a:	2144      	movs	r1, #68	; 0x44
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f7ff fd67 	bl	8010970 <dwt_write8bitoffsetreg>
 8010ea2:	6923      	ldr	r3, [r4, #16]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f43f af35 	beq.w	8010d14 <ull_isr+0x64>
 8010eaa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010eac:	3018      	adds	r0, #24
 8010eae:	4798      	blx	r3
 8010eb0:	e730      	b.n	8010d14 <ull_isr+0x64>
 8010eb2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8010eb6:	bf1f      	itttt	ne
 8010eb8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8010eba:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8010ebe:	f043 0304 	orrne.w	r3, r3, #4
 8010ec2:	f882 3020 	strbne.w	r3, [r2, #32]
 8010ec6:	2700      	movs	r7, #0
 8010ec8:	e74f      	b.n	8010d6a <ull_isr+0xba>
 8010eca:	f892 3020 	ldrb.w	r3, [r2, #32]
 8010ece:	f043 0302 	orr.w	r3, r3, #2
 8010ed2:	f882 3020 	strb.w	r3, [r2, #32]
 8010ed6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010ed8:	2200      	movs	r2, #0
 8010eda:	83da      	strh	r2, [r3, #30]
 8010edc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8010ee0:	e75d      	b.n	8010d9e <ull_isr+0xee>
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f7ff fd50 	bl	8010988 <ull_getframelength>
 8010ee8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8010eec:	f43f af57 	beq.w	8010d9e <ull_isr+0xee>
 8010ef0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010ef2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8010ef6:	f043 0301 	orr.w	r3, r3, #1
 8010efa:	f882 3020 	strb.w	r3, [r2, #32]
 8010efe:	e74e      	b.n	8010d9e <ull_isr+0xee>
 8010f00:	6963      	ldr	r3, [r4, #20]
 8010f02:	b10b      	cbz	r3, 8010f08 <ull_isr+0x258>
 8010f04:	3018      	adds	r0, #24
 8010f06:	4798      	blx	r3
 8010f08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010f0a:	7b9b      	ldrb	r3, [r3, #14]
 8010f0c:	bb03      	cbnz	r3, 8010f50 <ull_isr+0x2a0>
 8010f0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010f10:	2200      	movs	r2, #0
 8010f12:	f883 2020 	strb.w	r2, [r3, #32]
 8010f16:	f015 0f10 	tst.w	r5, #16
 8010f1a:	d11d      	bne.n	8010f58 <ull_isr+0x2a8>
 8010f1c:	f015 0f20 	tst.w	r5, #32
 8010f20:	d12d      	bne.n	8010f7e <ull_isr+0x2ce>
 8010f22:	2200      	movs	r2, #0
 8010f24:	4920      	ldr	r1, [pc, #128]	; (8010fa8 <ull_isr+0x2f8>)
 8010f26:	4620      	mov	r0, r4
 8010f28:	f7fe feb4 	bl	800fc94 <dwt_read8bitoffsetreg>
 8010f2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010f2e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8010f32:	f010 0303 	ands.w	r3, r0, #3
 8010f36:	d009      	beq.n	8010f4c <ull_isr+0x29c>
 8010f38:	2200      	movs	r2, #0
 8010f3a:	491b      	ldr	r1, [pc, #108]	; (8010fa8 <ull_isr+0x2f8>)
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f7ff fd17 	bl	8010970 <dwt_write8bitoffsetreg>
 8010f42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f44:	b113      	cbz	r3, 8010f4c <ull_isr+0x29c>
 8010f46:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010f48:	3018      	adds	r0, #24
 8010f4a:	4798      	blx	r3
 8010f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7ff fe99 	bl	8010c88 <ull_signal_rx_buff_free>
 8010f56:	e7da      	b.n	8010f0e <ull_isr+0x25e>
 8010f58:	4b14      	ldr	r3, [pc, #80]	; (8010fac <ull_isr+0x2fc>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	2144      	movs	r1, #68	; 0x44
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff fb22 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010f64:	4620      	mov	r0, r4
 8010f66:	f7ff fd41 	bl	80109ec <_dwt_clear_db_events>
 8010f6a:	69e3      	ldr	r3, [r4, #28]
 8010f6c:	b113      	cbz	r3, 8010f74 <ull_isr+0x2c4>
 8010f6e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010f70:	3018      	adds	r0, #24
 8010f72:	4798      	blx	r3
 8010f74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010f76:	2200      	movs	r2, #0
 8010f78:	f883 2020 	strb.w	r2, [r3, #32]
 8010f7c:	e7ce      	b.n	8010f1c <ull_isr+0x26c>
 8010f7e:	4b0c      	ldr	r3, [pc, #48]	; (8010fb0 <ull_isr+0x300>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	2144      	movs	r1, #68	; 0x44
 8010f84:	4620      	mov	r0, r4
 8010f86:	f7ff fb0f 	bl	80105a8 <dwt_write32bitoffsetreg>
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f7ff fd2e 	bl	80109ec <_dwt_clear_db_events>
 8010f90:	69a3      	ldr	r3, [r4, #24]
 8010f92:	b113      	cbz	r3, 8010f9a <ull_isr+0x2ea>
 8010f94:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010f96:	3018      	adds	r0, #24
 8010f98:	4798      	blx	r3
 8010f9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 2020 	strb.w	r2, [r3, #32]
 8010fa2:	e7be      	b.n	8010f22 <ull_isr+0x272>
 8010fa4:	00010018 	.word	0x00010018
 8010fa8:	00110038 	.word	0x00110038
 8010fac:	34059400 	.word	0x34059400
 8010fb0:	10220400 	.word	0x10220400

08010fb4 <dwt_modify32bitoffsetreg>:
 8010fb4:	b530      	push	{r4, r5, lr}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	9c08      	ldr	r4, [sp, #32]
 8010fba:	f88d 3008 	strb.w	r3, [sp, #8]
 8010fbe:	0a1d      	lsrs	r5, r3, #8
 8010fc0:	f88d 5009 	strb.w	r5, [sp, #9]
 8010fc4:	0c1d      	lsrs	r5, r3, #16
 8010fc6:	f88d 500a 	strb.w	r5, [sp, #10]
 8010fca:	0e1b      	lsrs	r3, r3, #24
 8010fcc:	f88d 300b 	strb.w	r3, [sp, #11]
 8010fd0:	f88d 400c 	strb.w	r4, [sp, #12]
 8010fd4:	0a23      	lsrs	r3, r4, #8
 8010fd6:	f88d 300d 	strb.w	r3, [sp, #13]
 8010fda:	0c23      	lsrs	r3, r4, #16
 8010fdc:	f88d 300e 	strb.w	r3, [sp, #14]
 8010fe0:	0e24      	lsrs	r4, r4, #24
 8010fe2:	f88d 400f 	strb.w	r4, [sp, #15]
 8010fe6:	f248 0303 	movw	r3, #32771	; 0x8003
 8010fea:	9301      	str	r3, [sp, #4]
 8010fec:	ab02      	add	r3, sp, #8
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	2308      	movs	r3, #8
 8010ff2:	b292      	uxth	r2, r2
 8010ff4:	f7fe fd71 	bl	800fada <dwt_xfer3xxx>
 8010ff8:	b005      	add	sp, #20
 8010ffa:	bd30      	pop	{r4, r5, pc}

08010ffc <ull_enablegpioclocks>:
 8010ffc:	b500      	push	{lr}
 8010ffe:	b083      	sub	sp, #12
 8011000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	f04f 33ff 	mov.w	r3, #4294967295
 801100a:	2200      	movs	r2, #0
 801100c:	4902      	ldr	r1, [pc, #8]	; (8011018 <ull_enablegpioclocks+0x1c>)
 801100e:	f7ff ffd1 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011012:	b003      	add	sp, #12
 8011014:	f85d fb04 	ldr.w	pc, [sp], #4
 8011018:	00110004 	.word	0x00110004

0801101c <ull_enable_rf_tx>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	4604      	mov	r4, r0
 8011022:	460e      	mov	r6, r1
 8011024:	4d13      	ldr	r5, [pc, #76]	; (8011074 <ull_enable_rf_tx+0x58>)
 8011026:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	f04f 33ff 	mov.w	r3, #4294967295
 8011030:	2200      	movs	r2, #0
 8011032:	4629      	mov	r1, r5
 8011034:	f7ff ffbe 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011038:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	f04f 33ff 	mov.w	r3, #4294967295
 8011042:	2200      	movs	r2, #0
 8011044:	4629      	mov	r1, r5
 8011046:	4620      	mov	r0, r4
 8011048:	f7ff ffb4 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 801104c:	4b0a      	ldr	r3, [pc, #40]	; (8011078 <ull_enable_rf_tx+0x5c>)
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	f04f 33ff 	mov.w	r3, #4294967295
 8011054:	2200      	movs	r2, #0
 8011056:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801105a:	4620      	mov	r0, r4
 801105c:	f7ff ffaa 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011060:	b90e      	cbnz	r6, 8011066 <ull_enable_rf_tx+0x4a>
 8011062:	b002      	add	sp, #8
 8011064:	bd70      	pop	{r4, r5, r6, pc}
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <ull_enable_rf_tx+0x60>)
 8011068:	2200      	movs	r2, #0
 801106a:	4905      	ldr	r1, [pc, #20]	; (8011080 <ull_enable_rf_tx+0x64>)
 801106c:	4620      	mov	r0, r4
 801106e:	f7ff fa9b 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011072:	e7f6      	b.n	8011062 <ull_enable_rf_tx+0x46>
 8011074:	00070048 	.word	0x00070048
 8011078:	02003c00 	.word	0x02003c00
 801107c:	01011100 	.word	0x01011100
 8011080:	00070014 	.word	0x00070014

08011084 <ull_enable_rftx_blocks>:
 8011084:	b500      	push	{lr}
 8011086:	b083      	sub	sp, #12
 8011088:	4b05      	ldr	r3, [pc, #20]	; (80110a0 <ull_enable_rftx_blocks+0x1c>)
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	f04f 33ff 	mov.w	r3, #4294967295
 8011090:	2200      	movs	r2, #0
 8011092:	4904      	ldr	r1, [pc, #16]	; (80110a4 <ull_enable_rftx_blocks+0x20>)
 8011094:	f7ff ff8e 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011098:	b003      	add	sp, #12
 801109a:	f85d fb04 	ldr.w	pc, [sp], #4
 801109e:	bf00      	nop
 80110a0:	02003c00 	.word	0x02003c00
 80110a4:	00070004 	.word	0x00070004

080110a8 <_dwt_otpprogword32>:
 80110a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110ac:	b083      	sub	sp, #12
 80110ae:	4604      	mov	r4, r0
 80110b0:	460d      	mov	r5, r1
 80110b2:	4617      	mov	r7, r2
 80110b4:	4e56      	ldr	r6, [pc, #344]	; (8011210 <_dwt_otpprogword32+0x168>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	4631      	mov	r1, r6
 80110ba:	f7fe fd96 	bl	800fbea <dwt_read32bitoffsetreg>
 80110be:	4681      	mov	r9, r0
 80110c0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	f04f 33ff 	mov.w	r3, #4294967295
 80110ca:	2200      	movs	r2, #0
 80110cc:	4631      	mov	r1, r6
 80110ce:	4620      	mov	r0, r4
 80110d0:	f7ff ff70 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 80110d4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8011214 <_dwt_otpprogword32+0x16c>
 80110d8:	2318      	movs	r3, #24
 80110da:	2200      	movs	r2, #0
 80110dc:	4641      	mov	r1, r8
 80110de:	4620      	mov	r0, r4
 80110e0:	f7ff f9f7 	bl	80104d2 <dwt_write16bitoffsetreg>
 80110e4:	2125      	movs	r1, #37	; 0x25
 80110e6:	4620      	mov	r0, r4
 80110e8:	f7ff fa28 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 80110ec:	2102      	movs	r1, #2
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff fa24 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 80110f4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 80110f8:	4620      	mov	r0, r4
 80110fa:	f7ff fa1f 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 80110fe:	b2f9      	uxtb	r1, r7
 8011100:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011104:	4620      	mov	r0, r4
 8011106:	f7ff fa19 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801110e:	4620      	mov	r0, r4
 8011110:	f7ff fa14 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011114:	2100      	movs	r1, #0
 8011116:	4620      	mov	r0, r4
 8011118:	f7ff fa10 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801111c:	2102      	movs	r1, #2
 801111e:	4620      	mov	r0, r4
 8011120:	f7ff fa0c 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011124:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8011128:	4620      	mov	r0, r4
 801112a:	f7ff fa07 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801112e:	b2e9      	uxtb	r1, r5
 8011130:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011134:	4620      	mov	r0, r4
 8011136:	f7ff fa01 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801113a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801113e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011142:	4620      	mov	r0, r4
 8011144:	f7ff f9fa 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011148:	f3c5 4107 	ubfx	r1, r5, #16, #8
 801114c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8011150:	4620      	mov	r0, r4
 8011152:	f7ff f9f3 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011156:	0e29      	lsrs	r1, r5, #24
 8011158:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801115c:	4620      	mov	r0, r4
 801115e:	f7ff f9ed 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011162:	2100      	movs	r1, #0
 8011164:	4620      	mov	r0, r4
 8011166:	f7ff f9e9 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801116a:	213a      	movs	r1, #58	; 0x3a
 801116c:	4620      	mov	r0, r4
 801116e:	f7ff f9e5 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011176:	4620      	mov	r0, r4
 8011178:	f7ff f9e0 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801117c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8011180:	4620      	mov	r0, r4
 8011182:	f7ff f9db 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011186:	2100      	movs	r1, #0
 8011188:	4620      	mov	r0, r4
 801118a:	f7ff f9d7 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 801118e:	213a      	movs	r1, #58	; 0x3a
 8011190:	4620      	mov	r0, r4
 8011192:	f7ff f9d3 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 8011196:	f240 1101 	movw	r1, #257	; 0x101
 801119a:	4620      	mov	r0, r4
 801119c:	f7ff f9ce 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 80111a0:	2302      	movs	r3, #2
 80111a2:	2200      	movs	r2, #0
 80111a4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80111a8:	4620      	mov	r0, r4
 80111aa:	f7ff f992 	bl	80104d2 <dwt_write16bitoffsetreg>
 80111ae:	2300      	movs	r3, #0
 80111b0:	461a      	mov	r2, r3
 80111b2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80111b6:	4620      	mov	r0, r4
 80111b8:	f7ff f98b 	bl	80104d2 <dwt_write16bitoffsetreg>
 80111bc:	2002      	movs	r0, #2
 80111be:	f7f0 f969 	bl	8001494 <deca_sleep>
 80111c2:	213a      	movs	r1, #58	; 0x3a
 80111c4:	4620      	mov	r0, r4
 80111c6:	f7ff f9b9 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 80111ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 80111ce:	4620      	mov	r0, r4
 80111d0:	f7ff f9b4 	bl	801053c <__dwt_otp_write_wdata_id_reg>
 80111d4:	2302      	movs	r3, #2
 80111d6:	2200      	movs	r2, #0
 80111d8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80111dc:	4620      	mov	r0, r4
 80111de:	f7ff f978 	bl	80104d2 <dwt_write16bitoffsetreg>
 80111e2:	2300      	movs	r3, #0
 80111e4:	461a      	mov	r2, r3
 80111e6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80111ea:	4620      	mov	r0, r4
 80111ec:	f7ff f971 	bl	80104d2 <dwt_write16bitoffsetreg>
 80111f0:	2300      	movs	r3, #0
 80111f2:	461a      	mov	r2, r3
 80111f4:	4641      	mov	r1, r8
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7ff f96b 	bl	80104d2 <dwt_write16bitoffsetreg>
 80111fc:	464b      	mov	r3, r9
 80111fe:	2200      	movs	r2, #0
 8011200:	4631      	mov	r1, r6
 8011202:	4620      	mov	r0, r4
 8011204:	f7ff f9d0 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011208:	b003      	add	sp, #12
 801120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120e:	bf00      	nop
 8011210:	00070044 	.word	0x00070044
 8011214:	000b0008 	.word	0x000b0008

08011218 <ull_setgpiomode>:
 8011218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801121a:	b083      	sub	sp, #12
 801121c:	2400      	movs	r4, #0
 801121e:	4623      	mov	r3, r4
 8011220:	2601      	movs	r6, #1
 8011222:	2707      	movs	r7, #7
 8011224:	e002      	b.n	801122c <ull_setgpiomode+0x14>
 8011226:	3401      	adds	r4, #1
 8011228:	2c09      	cmp	r4, #9
 801122a:	d009      	beq.n	8011240 <ull_setgpiomode+0x28>
 801122c:	fa06 f504 	lsl.w	r5, r6, r4
 8011230:	420d      	tst	r5, r1
 8011232:	d0f8      	beq.n	8011226 <ull_setgpiomode+0xe>
 8011234:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011238:	fa07 f505 	lsl.w	r5, r7, r5
 801123c:	432b      	orrs	r3, r5
 801123e:	e7f2      	b.n	8011226 <ull_setgpiomode+0xe>
 8011240:	401a      	ands	r2, r3
 8011242:	9200      	str	r2, [sp, #0]
 8011244:	43db      	mvns	r3, r3
 8011246:	2200      	movs	r2, #0
 8011248:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801124c:	f7ff feb2 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011250:	b003      	add	sp, #12
 8011252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011254 <ull_writetxfctrl>:
 8011254:	b500      	push	{lr}
 8011256:	b083      	sub	sp, #12
 8011258:	2a7f      	cmp	r2, #127	; 0x7f
 801125a:	bf88      	it	hi
 801125c:	3280      	addhi	r2, #128	; 0x80
 801125e:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8011262:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011266:	9100      	str	r1, [sp, #0]
 8011268:	4b03      	ldr	r3, [pc, #12]	; (8011278 <ull_writetxfctrl+0x24>)
 801126a:	2200      	movs	r2, #0
 801126c:	2120      	movs	r1, #32
 801126e:	f7ff fea1 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011272:	b003      	add	sp, #12
 8011274:	f85d fb04 	ldr.w	pc, [sp], #4
 8011278:	fc00f400 	.word	0xfc00f400

0801127c <prs_sys_status_and_or>:
 801127c:	b500      	push	{lr}
 801127e:	b083      	sub	sp, #12
 8011280:	9200      	str	r2, [sp, #0]
 8011282:	460b      	mov	r3, r1
 8011284:	2200      	movs	r2, #0
 8011286:	2144      	movs	r1, #68	; 0x44
 8011288:	f7ff fe94 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 801128c:	2000      	movs	r0, #0
 801128e:	b003      	add	sp, #12
 8011290:	f85d fb04 	ldr.w	pc, [sp], #4

08011294 <dwt_modify8bitoffsetreg>:
 8011294:	b500      	push	{lr}
 8011296:	b085      	sub	sp, #20
 8011298:	f88d 300c 	strb.w	r3, [sp, #12]
 801129c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80112a0:	f88d 300d 	strb.w	r3, [sp, #13]
 80112a4:	f248 0301 	movw	r3, #32769	; 0x8001
 80112a8:	9301      	str	r3, [sp, #4]
 80112aa:	ab03      	add	r3, sp, #12
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	2302      	movs	r3, #2
 80112b0:	b292      	uxth	r2, r2
 80112b2:	f7fe fc12 	bl	800fada <dwt_xfer3xxx>
 80112b6:	b005      	add	sp, #20
 80112b8:	f85d fb04 	ldr.w	pc, [sp], #4

080112bc <ull_enablespicrccheck>:
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	4604      	mov	r4, r0
 80112c2:	460d      	mov	r5, r1
 80112c4:	b159      	cbz	r1, 80112de <ull_enablespicrccheck+0x22>
 80112c6:	4616      	mov	r6, r2
 80112c8:	2340      	movs	r3, #64	; 0x40
 80112ca:	9300      	str	r3, [sp, #0]
 80112cc:	23ff      	movs	r3, #255	; 0xff
 80112ce:	2200      	movs	r2, #0
 80112d0:	2110      	movs	r1, #16
 80112d2:	f7ff ffdf 	bl	8011294 <dwt_modify8bitoffsetreg>
 80112d6:	2d02      	cmp	r5, #2
 80112d8:	d107      	bne.n	80112ea <ull_enablespicrccheck+0x2e>
 80112da:	60e6      	str	r6, [r4, #12]
 80112dc:	e005      	b.n	80112ea <ull_enablespicrccheck+0x2e>
 80112de:	2200      	movs	r2, #0
 80112e0:	9200      	str	r2, [sp, #0]
 80112e2:	23bf      	movs	r3, #191	; 0xbf
 80112e4:	2110      	movs	r1, #16
 80112e6:	f7ff ffd5 	bl	8011294 <dwt_modify8bitoffsetreg>
 80112ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80112ec:	751d      	strb	r5, [r3, #20]
 80112ee:	b002      	add	sp, #8
 80112f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080112f4 <ull_configciadiag>:
 80112f4:	b530      	push	{r4, r5, lr}
 80112f6:	b083      	sub	sp, #12
 80112f8:	4604      	mov	r4, r0
 80112fa:	460d      	mov	r5, r1
 80112fc:	f011 0f01 	tst.w	r1, #1
 8011300:	d015      	beq.n	801132e <ull_configciadiag+0x3a>
 8011302:	2300      	movs	r3, #0
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	23ef      	movs	r3, #239	; 0xef
 8011308:	2202      	movs	r2, #2
 801130a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801130e:	f7ff ffc1 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011312:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011314:	759d      	strb	r5, [r3, #22]
 8011316:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011318:	7d9b      	ldrb	r3, [r3, #22]
 801131a:	085b      	lsrs	r3, r3, #1
 801131c:	d010      	beq.n	8011340 <ull_configciadiag+0x4c>
 801131e:	086b      	lsrs	r3, r5, #1
 8011320:	2200      	movs	r2, #0
 8011322:	490e      	ldr	r1, [pc, #56]	; (801135c <ull_configciadiag+0x68>)
 8011324:	4620      	mov	r0, r4
 8011326:	f7ff fb23 	bl	8010970 <dwt_write8bitoffsetreg>
 801132a:	b003      	add	sp, #12
 801132c:	bd30      	pop	{r4, r5, pc}
 801132e:	2310      	movs	r3, #16
 8011330:	9300      	str	r3, [sp, #0]
 8011332:	23ff      	movs	r3, #255	; 0xff
 8011334:	2202      	movs	r2, #2
 8011336:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801133a:	f7ff ffab 	bl	8011294 <dwt_modify8bitoffsetreg>
 801133e:	e7e8      	b.n	8011312 <ull_configciadiag+0x1e>
 8011340:	2301      	movs	r3, #1
 8011342:	9300      	str	r3, [sp, #0]
 8011344:	23ff      	movs	r3, #255	; 0xff
 8011346:	2200      	movs	r2, #0
 8011348:	4904      	ldr	r1, [pc, #16]	; (801135c <ull_configciadiag+0x68>)
 801134a:	4620      	mov	r0, r4
 801134c:	f7ff ffa2 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011350:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011352:	7d93      	ldrb	r3, [r2, #22]
 8011354:	f043 0302 	orr.w	r3, r3, #2
 8011358:	7593      	strb	r3, [r2, #22]
 801135a:	e7e6      	b.n	801132a <ull_configciadiag+0x36>
 801135c:	00010020 	.word	0x00010020

08011360 <ull_configurestsloadiv>:
 8011360:	b500      	push	{lr}
 8011362:	b083      	sub	sp, #12
 8011364:	2301      	movs	r3, #1
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	23ff      	movs	r3, #255	; 0xff
 801136a:	2200      	movs	r2, #0
 801136c:	4902      	ldr	r1, [pc, #8]	; (8011378 <ull_configurestsloadiv+0x18>)
 801136e:	f7ff ff91 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011372:	b003      	add	sp, #12
 8011374:	f85d fb04 	ldr.w	pc, [sp], #4
 8011378:	00020004 	.word	0x00020004

0801137c <ull_adcoffsetscalibration>:
 801137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011380:	b08b      	sub	sp, #44	; 0x2c
 8011382:	4607      	mov	r7, r0
 8011384:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80115a8 <ull_adcoffsetscalibration+0x22c>
 8011388:	2200      	movs	r2, #0
 801138a:	4641      	mov	r1, r8
 801138c:	f7fe fc2d 	bl	800fbea <dwt_read32bitoffsetreg>
 8011390:	9004      	str	r0, [sp, #16]
 8011392:	4c7d      	ldr	r4, [pc, #500]	; (8011588 <ull_adcoffsetscalibration+0x20c>)
 8011394:	2200      	movs	r2, #0
 8011396:	4621      	mov	r1, r4
 8011398:	4638      	mov	r0, r7
 801139a:	f7fe fc26 	bl	800fbea <dwt_read32bitoffsetreg>
 801139e:	9005      	str	r0, [sp, #20]
 80113a0:	4d7a      	ldr	r5, [pc, #488]	; (801158c <ull_adcoffsetscalibration+0x210>)
 80113a2:	2200      	movs	r2, #0
 80113a4:	4629      	mov	r1, r5
 80113a6:	4638      	mov	r0, r7
 80113a8:	f7fe fc74 	bl	800fc94 <dwt_read8bitoffsetreg>
 80113ac:	9006      	str	r0, [sp, #24]
 80113ae:	4e78      	ldr	r6, [pc, #480]	; (8011590 <ull_adcoffsetscalibration+0x214>)
 80113b0:	2200      	movs	r2, #0
 80113b2:	4631      	mov	r1, r6
 80113b4:	4638      	mov	r0, r7
 80113b6:	f7fe fc18 	bl	800fbea <dwt_read32bitoffsetreg>
 80113ba:	4682      	mov	sl, r0
 80113bc:	9007      	str	r0, [sp, #28]
 80113be:	2200      	movs	r2, #0
 80113c0:	4974      	ldr	r1, [pc, #464]	; (8011594 <ull_adcoffsetscalibration+0x218>)
 80113c2:	4638      	mov	r0, r7
 80113c4:	f7fe fc11 	bl	800fbea <dwt_read32bitoffsetreg>
 80113c8:	4681      	mov	r9, r0
 80113ca:	4b73      	ldr	r3, [pc, #460]	; (8011598 <ull_adcoffsetscalibration+0x21c>)
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 80113d2:	2200      	movs	r2, #0
 80113d4:	4641      	mov	r1, r8
 80113d6:	4638      	mov	r0, r7
 80113d8:	f7ff fdec 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 80113dc:	464b      	mov	r3, r9
 80113de:	2200      	movs	r2, #0
 80113e0:	4631      	mov	r1, r6
 80113e2:	4638      	mov	r0, r7
 80113e4:	f7ff f8e0 	bl	80105a8 <dwt_write32bitoffsetreg>
 80113e8:	4653      	mov	r3, sl
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	2386      	movs	r3, #134	; 0x86
 80113f8:	2200      	movs	r2, #0
 80113fa:	4621      	mov	r1, r4
 80113fc:	4638      	mov	r0, r7
 80113fe:	f7ff ff49 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011402:	2300      	movs	r3, #0
 8011404:	2203      	movs	r2, #3
 8011406:	4621      	mov	r1, r4
 8011408:	4638      	mov	r0, r7
 801140a:	f7ff fab1 	bl	8010970 <dwt_write8bitoffsetreg>
 801140e:	f04f 0900 	mov.w	r9, #0
 8011412:	f8cd 9000 	str.w	r9, [sp]
 8011416:	23fe      	movs	r3, #254	; 0xfe
 8011418:	464a      	mov	r2, r9
 801141a:	4629      	mov	r1, r5
 801141c:	4638      	mov	r0, r7
 801141e:	f7ff ff39 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011422:	464a      	mov	r2, r9
 8011424:	213c      	movs	r1, #60	; 0x3c
 8011426:	4638      	mov	r0, r7
 8011428:	f7fe fbdf 	bl	800fbea <dwt_read32bitoffsetreg>
 801142c:	9008      	str	r0, [sp, #32]
 801142e:	464a      	mov	r2, r9
 8011430:	2140      	movs	r1, #64	; 0x40
 8011432:	4638      	mov	r0, r7
 8011434:	f7fe fbd9 	bl	800fbea <dwt_read32bitoffsetreg>
 8011438:	9009      	str	r0, [sp, #36]	; 0x24
 801143a:	464b      	mov	r3, r9
 801143c:	464a      	mov	r2, r9
 801143e:	213c      	movs	r1, #60	; 0x3c
 8011440:	4638      	mov	r0, r7
 8011442:	f7ff f8b1 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011446:	464b      	mov	r3, r9
 8011448:	464a      	mov	r2, r9
 801144a:	2140      	movs	r1, #64	; 0x40
 801144c:	4638      	mov	r0, r7
 801144e:	f7ff f8ab 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011452:	f7f5 fe3f 	bl	80070d4 <dwt_forcetrxoff>
 8011456:	f04f 0b02 	mov.w	fp, #2
 801145a:	464c      	mov	r4, r9
 801145c:	464d      	mov	r5, r9
 801145e:	464e      	mov	r6, r9
 8011460:	46c8      	mov	r8, r9
 8011462:	f8cd 900c 	str.w	r9, [sp, #12]
 8011466:	46ca      	mov	sl, r9
 8011468:	e00e      	b.n	8011488 <ull_adcoffsetscalibration+0x10c>
 801146a:	f7f5 fe33 	bl	80070d4 <dwt_forcetrxoff>
 801146e:	9b03      	ldr	r3, [sp, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 8082 	beq.w	801157a <ull_adcoffsetscalibration+0x1fe>
 8011476:	f1bb 0f01 	cmp.w	fp, #1
 801147a:	f000 8081 	beq.w	8011580 <ull_adcoffsetscalibration+0x204>
 801147e:	2301      	movs	r3, #1
 8011480:	9303      	str	r3, [sp, #12]
 8011482:	f1bb 0b01 	subs.w	fp, fp, #1
 8011486:	d043      	beq.n	8011510 <ull_adcoffsetscalibration+0x194>
 8011488:	4650      	mov	r0, sl
 801148a:	f7f5 fe31 	bl	80070f0 <dwt_rxenable>
 801148e:	2014      	movs	r0, #20
 8011490:	f7f0 f80b 	bl	80014aa <deca_usleep>
 8011494:	f04f 0904 	mov.w	r9, #4
 8011498:	f8cd a000 	str.w	sl, [sp]
 801149c:	23fe      	movs	r3, #254	; 0xfe
 801149e:	4652      	mov	r2, sl
 80114a0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80114a4:	4638      	mov	r0, r7
 80114a6:	f7ff fef5 	bl	8011294 <dwt_modify8bitoffsetreg>
 80114aa:	2301      	movs	r3, #1
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	23fe      	movs	r3, #254	; 0xfe
 80114b0:	4652      	mov	r2, sl
 80114b2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80114b6:	4638      	mov	r0, r7
 80114b8:	f7ff feec 	bl	8011294 <dwt_modify8bitoffsetreg>
 80114bc:	4652      	mov	r2, sl
 80114be:	4937      	ldr	r1, [pc, #220]	; (801159c <ull_adcoffsetscalibration+0x220>)
 80114c0:	4638      	mov	r0, r7
 80114c2:	f7fe fb92 	bl	800fbea <dwt_read32bitoffsetreg>
 80114c6:	fa58 f880 	uxtab	r8, r8, r0
 80114ca:	fa1f f888 	uxth.w	r8, r8
 80114ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80114d2:	441e      	add	r6, r3
 80114d4:	b2b6      	uxth	r6, r6
 80114d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80114da:	441d      	add	r5, r3
 80114dc:	b2ad      	uxth	r5, r5
 80114de:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 80114e2:	b2a4      	uxth	r4, r4
 80114e4:	f1b9 0901 	subs.w	r9, r9, #1
 80114e8:	d1d6      	bne.n	8011498 <ull_adcoffsetscalibration+0x11c>
 80114ea:	f3c8 0887 	ubfx	r8, r8, #2, #8
 80114ee:	f3c6 0687 	ubfx	r6, r6, #2, #8
 80114f2:	f3c5 0587 	ubfx	r5, r5, #2, #8
 80114f6:	f3c4 0487 	ubfx	r4, r4, #2, #8
 80114fa:	4652      	mov	r2, sl
 80114fc:	2144      	movs	r1, #68	; 0x44
 80114fe:	4638      	mov	r0, r7
 8011500:	f7fe fb73 	bl	800fbea <dwt_read32bitoffsetreg>
 8011504:	4b26      	ldr	r3, [pc, #152]	; (80115a0 <ull_adcoffsetscalibration+0x224>)
 8011506:	4218      	tst	r0, r3
 8011508:	d0af      	beq.n	801146a <ull_adcoffsetscalibration+0xee>
 801150a:	f7f5 fde3 	bl	80070d4 <dwt_forcetrxoff>
 801150e:	e7b2      	b.n	8011476 <ull_adcoffsetscalibration+0xfa>
 8011510:	f04f 0900 	mov.w	r9, #0
 8011514:	9b08      	ldr	r3, [sp, #32]
 8011516:	2200      	movs	r2, #0
 8011518:	213c      	movs	r1, #60	; 0x3c
 801151a:	4638      	mov	r0, r7
 801151c:	f7ff f844 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011522:	2200      	movs	r2, #0
 8011524:	2140      	movs	r1, #64	; 0x40
 8011526:	4638      	mov	r0, r7
 8011528:	f7ff f83e 	bl	80105a8 <dwt_write32bitoffsetreg>
 801152c:	042b      	lsls	r3, r5, #16
 801152e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 8011532:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8011536:	4443      	add	r3, r8
 8011538:	2200      	movs	r2, #0
 801153a:	491a      	ldr	r1, [pc, #104]	; (80115a4 <ull_adcoffsetscalibration+0x228>)
 801153c:	4638      	mov	r0, r7
 801153e:	f7ff f833 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011542:	9b04      	ldr	r3, [sp, #16]
 8011544:	2200      	movs	r2, #0
 8011546:	4918      	ldr	r1, [pc, #96]	; (80115a8 <ull_adcoffsetscalibration+0x22c>)
 8011548:	4638      	mov	r0, r7
 801154a:	f7ff f82d 	bl	80105a8 <dwt_write32bitoffsetreg>
 801154e:	9b05      	ldr	r3, [sp, #20]
 8011550:	2200      	movs	r2, #0
 8011552:	490d      	ldr	r1, [pc, #52]	; (8011588 <ull_adcoffsetscalibration+0x20c>)
 8011554:	4638      	mov	r0, r7
 8011556:	f7ff f827 	bl	80105a8 <dwt_write32bitoffsetreg>
 801155a:	9b06      	ldr	r3, [sp, #24]
 801155c:	2200      	movs	r2, #0
 801155e:	490b      	ldr	r1, [pc, #44]	; (801158c <ull_adcoffsetscalibration+0x210>)
 8011560:	4638      	mov	r0, r7
 8011562:	f7ff fa05 	bl	8010970 <dwt_write8bitoffsetreg>
 8011566:	9b07      	ldr	r3, [sp, #28]
 8011568:	2200      	movs	r2, #0
 801156a:	4909      	ldr	r1, [pc, #36]	; (8011590 <ull_adcoffsetscalibration+0x214>)
 801156c:	4638      	mov	r0, r7
 801156e:	f7ff f81b 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011572:	4648      	mov	r0, r9
 8011574:	b00b      	add	sp, #44	; 0x2c
 8011576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157a:	f04f 0900 	mov.w	r9, #0
 801157e:	e7c9      	b.n	8011514 <ull_adcoffsetscalibration+0x198>
 8011580:	f06f 0905 	mvn.w	r9, #5
 8011584:	e7c6      	b.n	8011514 <ull_adcoffsetscalibration+0x198>
 8011586:	bf00      	nop
 8011588:	00030014 	.word	0x00030014
 801158c:	00030018 	.word	0x00030018
 8011590:	0003002c 	.word	0x0003002c
 8011594:	00030044 	.word	0x00030044
 8011598:	38010000 	.word	0x38010000
 801159c:	0003004c 	.word	0x0003004c
 80115a0:	3427ff00 	.word	0x3427ff00
 80115a4:	00030010 	.word	0x00030010
 80115a8:	00070014 	.word	0x00070014

080115ac <ull_restoreconfig>:
 80115ac:	b510      	push	{r4, lr}
 80115ae:	4604      	mov	r4, r0
 80115b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80115b2:	7d9b      	ldrb	r3, [r3, #22]
 80115b4:	085b      	lsrs	r3, r3, #1
 80115b6:	d01a      	beq.n	80115ee <ull_restoreconfig+0x42>
 80115b8:	2200      	movs	r2, #0
 80115ba:	4912      	ldr	r1, [pc, #72]	; (8011604 <ull_restoreconfig+0x58>)
 80115bc:	4620      	mov	r0, r4
 80115be:	f7fe fb2a 	bl	800fc16 <dwt_read16bitoffsetreg>
 80115c2:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 80115c6:	3b09      	subs	r3, #9
 80115c8:	2b0f      	cmp	r3, #15
 80115ca:	d80c      	bhi.n	80115e6 <ull_restoreconfig+0x3a>
 80115cc:	f000 0001 	and.w	r0, r0, #1
 80115d0:	2800      	cmp	r0, #0
 80115d2:	bf0c      	ite	eq
 80115d4:	2105      	moveq	r1, #5
 80115d6:	2109      	movne	r1, #9
 80115d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80115da:	7a1b      	ldrb	r3, [r3, #8]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d002      	beq.n	80115e6 <ull_restoreconfig+0x3a>
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7ff f8ad 	bl	8010740 <ull_configmrxlut>
 80115e6:	4620      	mov	r0, r4
 80115e8:	f7ff fec8 	bl	801137c <ull_adcoffsetscalibration>
 80115ec:	bd10      	pop	{r4, pc}
 80115ee:	2301      	movs	r3, #1
 80115f0:	2200      	movs	r2, #0
 80115f2:	4905      	ldr	r1, [pc, #20]	; (8011608 <ull_restoreconfig+0x5c>)
 80115f4:	f7ff f9bc 	bl	8010970 <dwt_write8bitoffsetreg>
 80115f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80115fa:	7d93      	ldrb	r3, [r2, #22]
 80115fc:	f043 0302 	orr.w	r3, r3, #2
 8011600:	7593      	strb	r3, [r2, #22]
 8011602:	e7d9      	b.n	80115b8 <ull_restoreconfig+0xc>
 8011604:	00010008 	.word	0x00010008
 8011608:	00010020 	.word	0x00010020

0801160c <ull_calcbandwidthadj>:
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	4604      	mov	r4, r0
 8011612:	460d      	mov	r5, r1
 8011614:	2101      	movs	r1, #1
 8011616:	f7fe ff7b 	bl	8010510 <ull_force_clocks>
 801161a:	2100      	movs	r1, #0
 801161c:	4620      	mov	r0, r4
 801161e:	f7ff fcfd 	bl	801101c <ull_enable_rf_tx>
 8011622:	4620      	mov	r0, r4
 8011624:	f7ff fd2e 	bl	8011084 <ull_enable_rftx_blocks>
 8011628:	f3c5 030b 	ubfx	r3, r5, #0, #12
 801162c:	2200      	movs	r2, #0
 801162e:	4915      	ldr	r1, [pc, #84]	; (8011684 <ull_calcbandwidthadj+0x78>)
 8011630:	4620      	mov	r0, r4
 8011632:	f7fe ff4e 	bl	80104d2 <dwt_write16bitoffsetreg>
 8011636:	2303      	movs	r3, #3
 8011638:	9300      	str	r3, [sp, #0]
 801163a:	23ff      	movs	r3, #255	; 0xff
 801163c:	2200      	movs	r2, #0
 801163e:	4912      	ldr	r1, [pc, #72]	; (8011688 <ull_calcbandwidthadj+0x7c>)
 8011640:	4620      	mov	r0, r4
 8011642:	f7ff fe27 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011646:	4e10      	ldr	r6, [pc, #64]	; (8011688 <ull_calcbandwidthadj+0x7c>)
 8011648:	2500      	movs	r5, #0
 801164a:	462a      	mov	r2, r5
 801164c:	4631      	mov	r1, r6
 801164e:	4620      	mov	r0, r4
 8011650:	f7fe fb20 	bl	800fc94 <dwt_read8bitoffsetreg>
 8011654:	f010 0f01 	tst.w	r0, #1
 8011658:	d1f7      	bne.n	801164a <ull_calcbandwidthadj+0x3e>
 801165a:	4620      	mov	r0, r4
 801165c:	f7ff f906 	bl	801086c <ull_disable_rftx_blocks>
 8011660:	2100      	movs	r1, #0
 8011662:	4620      	mov	r0, r4
 8011664:	f7ff f90c 	bl	8010880 <ull_disable_rf_tx>
 8011668:	2105      	movs	r1, #5
 801166a:	4620      	mov	r0, r4
 801166c:	f7fe ff50 	bl	8010510 <ull_force_clocks>
 8011670:	2200      	movs	r2, #0
 8011672:	4906      	ldr	r1, [pc, #24]	; (801168c <ull_calcbandwidthadj+0x80>)
 8011674:	4620      	mov	r0, r4
 8011676:	f7fe fb0d 	bl	800fc94 <dwt_read8bitoffsetreg>
 801167a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801167e:	b002      	add	sp, #8
 8011680:	bd70      	pop	{r4, r5, r6, pc}
 8011682:	bf00      	nop
 8011684:	0008001c 	.word	0x0008001c
 8011688:	00080010 	.word	0x00080010
 801168c:	0007001c 	.word	0x0007001c

08011690 <ull_configuretxrf>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	4605      	mov	r5, r0
 8011694:	460c      	mov	r4, r1
 8011696:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 801169a:	b149      	cbz	r1, 80116b0 <ull_configuretxrf+0x20>
 801169c:	f7ff ffb6 	bl	801160c <ull_calcbandwidthadj>
 80116a0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 80116a4:	2200      	movs	r2, #0
 80116a6:	4905      	ldr	r1, [pc, #20]	; (80116bc <ull_configuretxrf+0x2c>)
 80116a8:	4628      	mov	r0, r5
 80116aa:	f7fe ff7d 	bl	80105a8 <dwt_write32bitoffsetreg>
 80116ae:	bd38      	pop	{r3, r4, r5, pc}
 80116b0:	7823      	ldrb	r3, [r4, #0]
 80116b2:	2200      	movs	r2, #0
 80116b4:	4902      	ldr	r1, [pc, #8]	; (80116c0 <ull_configuretxrf+0x30>)
 80116b6:	f7ff f95b 	bl	8010970 <dwt_write8bitoffsetreg>
 80116ba:	e7f1      	b.n	80116a0 <ull_configuretxrf+0x10>
 80116bc:	00010004 	.word	0x00010004
 80116c0:	0007001c 	.word	0x0007001c

080116c4 <ull_repeated_frames>:
 80116c4:	b530      	push	{r4, r5, lr}
 80116c6:	b083      	sub	sp, #12
 80116c8:	4604      	mov	r4, r0
 80116ca:	460d      	mov	r5, r1
 80116cc:	2310      	movs	r3, #16
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	23ff      	movs	r3, #255	; 0xff
 80116d2:	2200      	movs	r2, #0
 80116d4:	4906      	ldr	r1, [pc, #24]	; (80116f0 <ull_repeated_frames+0x2c>)
 80116d6:	f7ff fddd 	bl	8011294 <dwt_modify8bitoffsetreg>
 80116da:	462b      	mov	r3, r5
 80116dc:	2d02      	cmp	r5, #2
 80116de:	bf38      	it	cc
 80116e0:	2302      	movcc	r3, #2
 80116e2:	2200      	movs	r2, #0
 80116e4:	2128      	movs	r1, #40	; 0x28
 80116e6:	4620      	mov	r0, r4
 80116e8:	f7fe ff5e 	bl	80105a8 <dwt_write32bitoffsetreg>
 80116ec:	b003      	add	sp, #12
 80116ee:	bd30      	pop	{r4, r5, pc}
 80116f0:	000f0028 	.word	0x000f0028

080116f4 <ull_setdwstate>:
 80116f4:	b530      	push	{r4, r5, lr}
 80116f6:	b083      	sub	sp, #12
 80116f8:	4604      	mov	r4, r0
 80116fa:	2901      	cmp	r1, #1
 80116fc:	d01d      	beq.n	801173a <ull_setdwstate+0x46>
 80116fe:	2902      	cmp	r1, #2
 8011700:	d030      	beq.n	8011764 <ull_setdwstate+0x70>
 8011702:	2301      	movs	r3, #1
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	23ff      	movs	r3, #255	; 0xff
 8011708:	2200      	movs	r2, #0
 801170a:	4926      	ldr	r1, [pc, #152]	; (80117a4 <ull_setdwstate+0xb0>)
 801170c:	f7ff fdc2 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011710:	4d25      	ldr	r5, [pc, #148]	; (80117a8 <ull_setdwstate+0xb4>)
 8011712:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801171c:	2200      	movs	r2, #0
 801171e:	4629      	mov	r1, r5
 8011720:	4620      	mov	r0, r4
 8011722:	f7ff fc47 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011726:	2300      	movs	r3, #0
 8011728:	9300      	str	r3, [sp, #0]
 801172a:	237f      	movs	r3, #127	; 0x7f
 801172c:	2202      	movs	r2, #2
 801172e:	4629      	mov	r1, r5
 8011730:	4620      	mov	r0, r4
 8011732:	f7ff fdaf 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011736:	b003      	add	sp, #12
 8011738:	bd30      	pop	{r4, r5, pc}
 801173a:	2105      	movs	r1, #5
 801173c:	f7fe fee8 	bl	8010510 <ull_force_clocks>
 8011740:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011744:	9300      	str	r3, [sp, #0]
 8011746:	f04f 33ff 	mov.w	r3, #4294967295
 801174a:	2200      	movs	r2, #0
 801174c:	4917      	ldr	r1, [pc, #92]	; (80117ac <ull_setdwstate+0xb8>)
 801174e:	4620      	mov	r0, r4
 8011750:	f7ff fc30 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011754:	2201      	movs	r2, #1
 8011756:	9200      	str	r2, [sp, #0]
 8011758:	23ff      	movs	r3, #255	; 0xff
 801175a:	4913      	ldr	r1, [pc, #76]	; (80117a8 <ull_setdwstate+0xb4>)
 801175c:	4620      	mov	r0, r4
 801175e:	f7ff fd99 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011762:	e7e8      	b.n	8011736 <ull_setdwstate+0x42>
 8011764:	2303      	movs	r3, #3
 8011766:	9300      	str	r3, [sp, #0]
 8011768:	23ff      	movs	r3, #255	; 0xff
 801176a:	2200      	movs	r2, #0
 801176c:	490d      	ldr	r1, [pc, #52]	; (80117a4 <ull_setdwstate+0xb0>)
 801176e:	f7ff fd91 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011772:	4d0d      	ldr	r5, [pc, #52]	; (80117a8 <ull_setdwstate+0xb4>)
 8011774:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801177e:	2200      	movs	r2, #0
 8011780:	4629      	mov	r1, r5
 8011782:	4620      	mov	r0, r4
 8011784:	f7ff fc16 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011788:	2300      	movs	r3, #0
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	237f      	movs	r3, #127	; 0x7f
 801178e:	2202      	movs	r2, #2
 8011790:	4629      	mov	r1, r5
 8011792:	4620      	mov	r0, r4
 8011794:	f7ff fd7e 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011798:	2105      	movs	r1, #5
 801179a:	4620      	mov	r0, r4
 801179c:	f7fe feb8 	bl	8010510 <ull_force_clocks>
 80117a0:	e7c9      	b.n	8011736 <ull_setdwstate+0x42>
 80117a2:	bf00      	nop
 80117a4:	00110004 	.word	0x00110004
 80117a8:	00110008 	.word	0x00110008
 80117ac:	00090008 	.word	0x00090008

080117b0 <ull_configureframefilter>:
 80117b0:	b530      	push	{r4, r5, lr}
 80117b2:	b083      	sub	sp, #12
 80117b4:	4605      	mov	r5, r0
 80117b6:	2902      	cmp	r1, #2
 80117b8:	d00e      	beq.n	80117d8 <ull_configureframefilter+0x28>
 80117ba:	2400      	movs	r4, #0
 80117bc:	9400      	str	r4, [sp, #0]
 80117be:	23fe      	movs	r3, #254	; 0xfe
 80117c0:	4622      	mov	r2, r4
 80117c2:	2110      	movs	r1, #16
 80117c4:	f7ff fd66 	bl	8011294 <dwt_modify8bitoffsetreg>
 80117c8:	4623      	mov	r3, r4
 80117ca:	4622      	mov	r2, r4
 80117cc:	2114      	movs	r1, #20
 80117ce:	4628      	mov	r0, r5
 80117d0:	f7fe fe7f 	bl	80104d2 <dwt_write16bitoffsetreg>
 80117d4:	b003      	add	sp, #12
 80117d6:	bd30      	pop	{r4, r5, pc}
 80117d8:	4614      	mov	r4, r2
 80117da:	2301      	movs	r3, #1
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	23ff      	movs	r3, #255	; 0xff
 80117e0:	2200      	movs	r2, #0
 80117e2:	2110      	movs	r1, #16
 80117e4:	f7ff fd56 	bl	8011294 <dwt_modify8bitoffsetreg>
 80117e8:	4623      	mov	r3, r4
 80117ea:	2200      	movs	r2, #0
 80117ec:	2114      	movs	r1, #20
 80117ee:	4628      	mov	r0, r5
 80117f0:	f7fe fe6f 	bl	80104d2 <dwt_write16bitoffsetreg>
 80117f4:	e7ee      	b.n	80117d4 <ull_configureframefilter+0x24>
	...

080117f8 <ull_run_pgfcal>:
 80117f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fc:	b082      	sub	sp, #8
 80117fe:	4605      	mov	r5, r0
 8011800:	4c2a      	ldr	r4, [pc, #168]	; (80118ac <ull_run_pgfcal+0xb4>)
 8011802:	2301      	movs	r3, #1
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	23ff      	movs	r3, #255	; 0xff
 8011808:	2200      	movs	r2, #0
 801180a:	4621      	mov	r1, r4
 801180c:	f7ff fd42 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011810:	2310      	movs	r3, #16
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	23ff      	movs	r3, #255	; 0xff
 8011816:	2200      	movs	r2, #0
 8011818:	4621      	mov	r1, r4
 801181a:	4628      	mov	r0, r5
 801181c:	f7ff fd3a 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011820:	2403      	movs	r4, #3
 8011822:	f04f 0814 	mov.w	r8, #20
 8011826:	4f22      	ldr	r7, [pc, #136]	; (80118b0 <ull_run_pgfcal+0xb8>)
 8011828:	2600      	movs	r6, #0
 801182a:	4640      	mov	r0, r8
 801182c:	f7ef fe3d 	bl	80014aa <deca_usleep>
 8011830:	4632      	mov	r2, r6
 8011832:	4639      	mov	r1, r7
 8011834:	4628      	mov	r0, r5
 8011836:	f7fe fa2d 	bl	800fc94 <dwt_read8bitoffsetreg>
 801183a:	2801      	cmp	r0, #1
 801183c:	d034      	beq.n	80118a8 <ull_run_pgfcal+0xb0>
 801183e:	1e63      	subs	r3, r4, #1
 8011840:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8011844:	d1f1      	bne.n	801182a <ull_run_pgfcal+0x32>
 8011846:	f06f 0402 	mvn.w	r4, #2
 801184a:	4e18      	ldr	r6, [pc, #96]	; (80118ac <ull_run_pgfcal+0xb4>)
 801184c:	2300      	movs	r3, #0
 801184e:	461a      	mov	r2, r3
 8011850:	4631      	mov	r1, r6
 8011852:	4628      	mov	r0, r5
 8011854:	f7ff f88c 	bl	8010970 <dwt_write8bitoffsetreg>
 8011858:	2301      	movs	r3, #1
 801185a:	2200      	movs	r2, #0
 801185c:	4914      	ldr	r1, [pc, #80]	; (80118b0 <ull_run_pgfcal+0xb8>)
 801185e:	4628      	mov	r0, r5
 8011860:	f7ff f886 	bl	8010970 <dwt_write8bitoffsetreg>
 8011864:	2301      	movs	r3, #1
 8011866:	9300      	str	r3, [sp, #0]
 8011868:	23ff      	movs	r3, #255	; 0xff
 801186a:	2202      	movs	r2, #2
 801186c:	4631      	mov	r1, r6
 801186e:	4628      	mov	r0, r5
 8011870:	f7ff fd10 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011874:	2200      	movs	r2, #0
 8011876:	490f      	ldr	r1, [pc, #60]	; (80118b4 <ull_run_pgfcal+0xbc>)
 8011878:	4628      	mov	r0, r5
 801187a:	f7fe f9b6 	bl	800fbea <dwt_read32bitoffsetreg>
 801187e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011882:	4298      	cmp	r0, r3
 8011884:	bf08      	it	eq
 8011886:	f06f 0403 	mvneq.w	r4, #3
 801188a:	2200      	movs	r2, #0
 801188c:	490a      	ldr	r1, [pc, #40]	; (80118b8 <ull_run_pgfcal+0xc0>)
 801188e:	4628      	mov	r0, r5
 8011890:	f7fe f9ab 	bl	800fbea <dwt_read32bitoffsetreg>
 8011894:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011898:	4298      	cmp	r0, r3
 801189a:	bf14      	ite	ne
 801189c:	4620      	movne	r0, r4
 801189e:	f06f 0004 	mvneq.w	r0, #4
 80118a2:	b002      	add	sp, #8
 80118a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a8:	2400      	movs	r4, #0
 80118aa:	e7ce      	b.n	801184a <ull_run_pgfcal+0x52>
 80118ac:	0004000c 	.word	0x0004000c
 80118b0:	00040020 	.word	0x00040020
 80118b4:	00040014 	.word	0x00040014
 80118b8:	0004001c 	.word	0x0004001c

080118bc <ull_setinterrupt>:
 80118bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118c0:	b083      	sub	sp, #12
 80118c2:	4605      	mov	r5, r0
 80118c4:	4688      	mov	r8, r1
 80118c6:	4617      	mov	r7, r2
 80118c8:	461c      	mov	r4, r3
 80118ca:	f7ef fdc5 	bl	8001458 <decamutexon>
 80118ce:	4606      	mov	r6, r0
 80118d0:	2c02      	cmp	r4, #2
 80118d2:	d019      	beq.n	8011908 <ull_setinterrupt+0x4c>
 80118d4:	2c04      	cmp	r4, #4
 80118d6:	d017      	beq.n	8011908 <ull_setinterrupt+0x4c>
 80118d8:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d03f      	beq.n	8011960 <ull_setinterrupt+0xa4>
 80118e0:	f04f 0900 	mov.w	r9, #0
 80118e4:	f8cd 9000 	str.w	r9, [sp]
 80118e8:	ea6f 0308 	mvn.w	r3, r8
 80118ec:	464a      	mov	r2, r9
 80118ee:	213c      	movs	r1, #60	; 0x3c
 80118f0:	4628      	mov	r0, r5
 80118f2:	f7ff fb5f 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 80118f6:	f8cd 9000 	str.w	r9, [sp]
 80118fa:	43fb      	mvns	r3, r7
 80118fc:	464a      	mov	r2, r9
 80118fe:	2140      	movs	r1, #64	; 0x40
 8011900:	4628      	mov	r0, r5
 8011902:	f7ff fb57 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011906:	e00b      	b.n	8011920 <ull_setinterrupt+0x64>
 8011908:	4643      	mov	r3, r8
 801190a:	2200      	movs	r2, #0
 801190c:	213c      	movs	r1, #60	; 0x3c
 801190e:	4628      	mov	r0, r5
 8011910:	f7fe fe4a 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011914:	463b      	mov	r3, r7
 8011916:	2200      	movs	r2, #0
 8011918:	2140      	movs	r1, #64	; 0x40
 801191a:	4628      	mov	r0, r5
 801191c:	f7fe fe44 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011920:	3c03      	subs	r4, #3
 8011922:	b2e4      	uxtb	r4, r4
 8011924:	2c01      	cmp	r4, #1
 8011926:	d92d      	bls.n	8011984 <ull_setinterrupt+0xc8>
 8011928:	2200      	movs	r2, #0
 801192a:	213c      	movs	r1, #60	; 0x3c
 801192c:	4628      	mov	r0, r5
 801192e:	f7fe f95c 	bl	800fbea <dwt_read32bitoffsetreg>
 8011932:	4603      	mov	r3, r0
 8011934:	2200      	movs	r2, #0
 8011936:	2144      	movs	r1, #68	; 0x44
 8011938:	4628      	mov	r0, r5
 801193a:	f7fe fe35 	bl	80105a8 <dwt_write32bitoffsetreg>
 801193e:	2200      	movs	r2, #0
 8011940:	2140      	movs	r1, #64	; 0x40
 8011942:	4628      	mov	r0, r5
 8011944:	f7fe f951 	bl	800fbea <dwt_read32bitoffsetreg>
 8011948:	4603      	mov	r3, r0
 801194a:	2200      	movs	r2, #0
 801194c:	2148      	movs	r1, #72	; 0x48
 801194e:	4628      	mov	r0, r5
 8011950:	f7fe fe2a 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011954:	4630      	mov	r0, r6
 8011956:	f7ef fd90 	bl	800147a <decamutexoff>
 801195a:	b003      	add	sp, #12
 801195c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011960:	f8cd 8000 	str.w	r8, [sp]
 8011964:	f04f 33ff 	mov.w	r3, #4294967295
 8011968:	2200      	movs	r2, #0
 801196a:	213c      	movs	r1, #60	; 0x3c
 801196c:	4628      	mov	r0, r5
 801196e:	f7ff fb21 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011972:	9700      	str	r7, [sp, #0]
 8011974:	f04f 33ff 	mov.w	r3, #4294967295
 8011978:	2200      	movs	r2, #0
 801197a:	2140      	movs	r1, #64	; 0x40
 801197c:	4628      	mov	r0, r5
 801197e:	f7ff fb19 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011982:	e7cd      	b.n	8011920 <ull_setinterrupt+0x64>
 8011984:	2110      	movs	r1, #16
 8011986:	9100      	str	r1, [sp, #0]
 8011988:	23ff      	movs	r3, #255	; 0xff
 801198a:	2202      	movs	r2, #2
 801198c:	4628      	mov	r0, r5
 801198e:	f7ff fc81 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011992:	e7c9      	b.n	8011928 <ull_setinterrupt+0x6c>

08011994 <prs_ack_enable>:
 8011994:	b500      	push	{lr}
 8011996:	b083      	sub	sp, #12
 8011998:	2900      	cmp	r1, #0
 801199a:	bf0b      	itete	eq
 801199c:	23ff      	moveq	r3, #255	; 0xff
 801199e:	23f7      	movne	r3, #247	; 0xf7
 80119a0:	2200      	moveq	r2, #0
 80119a2:	2208      	movne	r2, #8
 80119a4:	9200      	str	r2, [sp, #0]
 80119a6:	2201      	movs	r2, #1
 80119a8:	2110      	movs	r1, #16
 80119aa:	f7ff fc73 	bl	8011294 <dwt_modify8bitoffsetreg>
 80119ae:	b003      	add	sp, #12
 80119b0:	f85d fb04 	ldr.w	pc, [sp], #4

080119b4 <dwt_modify16bitoffsetreg>:
 80119b4:	b510      	push	{r4, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80119bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80119c0:	0a1b      	lsrs	r3, r3, #8
 80119c2:	f88d 300d 	strb.w	r3, [sp, #13]
 80119c6:	f88d 400e 	strb.w	r4, [sp, #14]
 80119ca:	0a24      	lsrs	r4, r4, #8
 80119cc:	f88d 400f 	strb.w	r4, [sp, #15]
 80119d0:	f248 0302 	movw	r3, #32770	; 0x8002
 80119d4:	9301      	str	r3, [sp, #4]
 80119d6:	ab03      	add	r3, sp, #12
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	2304      	movs	r3, #4
 80119dc:	b292      	uxth	r2, r2
 80119de:	f7fe f87c 	bl	800fada <dwt_xfer3xxx>
 80119e2:	b004      	add	sp, #16
 80119e4:	bd10      	pop	{r4, pc}
	...

080119e8 <ull_configurestsmode>:
 80119e8:	b530      	push	{r4, r5, lr}
 80119ea:	b083      	sub	sp, #12
 80119ec:	4605      	mov	r5, r0
 80119ee:	460c      	mov	r4, r1
 80119f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80119f2:	7559      	strb	r1, [r3, #21]
 80119f4:	030b      	lsls	r3, r1, #12
 80119f6:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8011a00:	2200      	movs	r2, #0
 8011a02:	2110      	movs	r1, #16
 8011a04:	f7ff ffd6 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011a08:	f004 0403 	and.w	r4, r4, #3
 8011a0c:	2c03      	cmp	r4, #3
 8011a0e:	bf0c      	ite	eq
 8011a10:	4b04      	ldreq	r3, [pc, #16]	; (8011a24 <ull_configurestsmode+0x3c>)
 8011a12:	4b05      	ldrne	r3, [pc, #20]	; (8011a28 <ull_configurestsmode+0x40>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	4905      	ldr	r1, [pc, #20]	; (8011a2c <ull_configurestsmode+0x44>)
 8011a18:	4628      	mov	r0, r5
 8011a1a:	f7fe fdc5 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011a1e:	b003      	add	sp, #12
 8011a20:	bd30      	pop	{r4, r5, pc}
 8011a22:	bf00      	nop
 8011a24:	af5f35cc 	.word	0xaf5f35cc
 8011a28:	af5f584c 	.word	0xaf5f584c
 8011a2c:	0006000c 	.word	0x0006000c

08011a30 <ull_setleds>:
 8011a30:	b530      	push	{r4, r5, lr}
 8011a32:	b083      	sub	sp, #12
 8011a34:	4604      	mov	r4, r0
 8011a36:	f011 0f01 	tst.w	r1, #1
 8011a3a:	d01f      	beq.n	8011a7c <ull_setleds+0x4c>
 8011a3c:	460d      	mov	r5, r1
 8011a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011a42:	9300      	str	r3, [sp, #0]
 8011a44:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011a4e:	f7ff fab1 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011a52:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	4918      	ldr	r1, [pc, #96]	; (8011ac0 <ull_setleds+0x90>)
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff faa7 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011a66:	f015 0f02 	tst.w	r5, #2
 8011a6a:	d11a      	bne.n	8011aa2 <ull_setleds+0x72>
 8011a6c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011a70:	2200      	movs	r2, #0
 8011a72:	4914      	ldr	r1, [pc, #80]	; (8011ac4 <ull_setleds+0x94>)
 8011a74:	4620      	mov	r0, r4
 8011a76:	f7fe fd97 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011a7a:	e010      	b.n	8011a9e <ull_setleds+0x6e>
 8011a7c:	2500      	movs	r5, #0
 8011a7e:	9500      	str	r5, [sp, #0]
 8011a80:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8011a84:	462a      	mov	r2, r5
 8011a86:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011a8a:	f7ff fa93 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011a8e:	9500      	str	r5, [sp, #0]
 8011a90:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011a94:	462a      	mov	r2, r5
 8011a96:	490b      	ldr	r1, [pc, #44]	; (8011ac4 <ull_setleds+0x94>)
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f7ff ff8b 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011a9e:	b003      	add	sp, #12
 8011aa0:	bd30      	pop	{r4, r5, pc}
 8011aa2:	4d08      	ldr	r5, [pc, #32]	; (8011ac4 <ull_setleds+0x94>)
 8011aa4:	4b08      	ldr	r3, [pc, #32]	; (8011ac8 <ull_setleds+0x98>)
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f7fe fd7c 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011ab0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f7fe fd75 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011abe:	e7ee      	b.n	8011a9e <ull_setleds+0x6e>
 8011ac0:	00110004 	.word	0x00110004
 8011ac4:	00110018 	.word	0x00110018
 8011ac8:	000f0110 	.word	0x000f0110

08011acc <ull_pgf_cal>:
 8011acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	2901      	cmp	r1, #1
 8011ad4:	d009      	beq.n	8011aea <ull_pgf_cal+0x1e>
 8011ad6:	2014      	movs	r0, #20
 8011ad8:	f7ef fce7 	bl	80014aa <deca_usleep>
 8011adc:	4620      	mov	r0, r4
 8011ade:	f7ff fe8b 	bl	80117f8 <ull_run_pgfcal>
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	b003      	add	sp, #12
 8011ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aea:	4e0f      	ldr	r6, [pc, #60]	; (8011b28 <ull_pgf_cal+0x5c>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	4631      	mov	r1, r6
 8011af0:	f7fe f891 	bl	800fc16 <dwt_read16bitoffsetreg>
 8011af4:	4607      	mov	r7, r0
 8011af6:	f240 1307 	movw	r3, #263	; 0x107
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b00:	2200      	movs	r2, #0
 8011b02:	4631      	mov	r1, r6
 8011b04:	4620      	mov	r0, r4
 8011b06:	f7ff ff55 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011b0a:	2014      	movs	r0, #20
 8011b0c:	f7ef fccd 	bl	80014aa <deca_usleep>
 8011b10:	4620      	mov	r0, r4
 8011b12:	f7ff fe71 	bl	80117f8 <ull_run_pgfcal>
 8011b16:	4605      	mov	r5, r0
 8011b18:	2200      	movs	r2, #0
 8011b1a:	9200      	str	r2, [sp, #0]
 8011b1c:	463b      	mov	r3, r7
 8011b1e:	4631      	mov	r1, r6
 8011b20:	4620      	mov	r0, r4
 8011b22:	f7ff ff47 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011b26:	e7dd      	b.n	8011ae4 <ull_pgf_cal+0x18>
 8011b28:	00070048 	.word	0x00070048

08011b2c <ull_setgpiovalue>:
 8011b2c:	b500      	push	{lr}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	2a01      	cmp	r2, #1
 8011b32:	d009      	beq.n	8011b48 <ull_setgpiovalue+0x1c>
 8011b34:	43cb      	mvns	r3, r1
 8011b36:	2200      	movs	r2, #0
 8011b38:	9200      	str	r2, [sp, #0]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	4906      	ldr	r1, [pc, #24]	; (8011b58 <ull_setgpiovalue+0x2c>)
 8011b3e:	f7ff ff39 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011b42:	b003      	add	sp, #12
 8011b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b48:	9100      	str	r1, [sp, #0]
 8011b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b4e:	2200      	movs	r2, #0
 8011b50:	4901      	ldr	r1, [pc, #4]	; (8011b58 <ull_setgpiovalue+0x2c>)
 8011b52:	f7ff ff2f 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011b56:	e7f4      	b.n	8011b42 <ull_setgpiovalue+0x16>
 8011b58:	0005000c 	.word	0x0005000c

08011b5c <ull_readaccdata>:
 8011b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	4604      	mov	r4, r0
 8011b62:	460f      	mov	r7, r1
 8011b64:	4616      	mov	r6, r2
 8011b66:	461d      	mov	r5, r3
 8011b68:	f248 0340 	movw	r3, #32832	; 0x8040
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b72:	2200      	movs	r2, #0
 8011b74:	4918      	ldr	r1, [pc, #96]	; (8011bd8 <ull_readaccdata+0x7c>)
 8011b76:	f7ff ff1d 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011b7a:	19aa      	adds	r2, r5, r6
 8011b7c:	f243 0301 	movw	r3, #12289	; 0x3001
 8011b80:	429a      	cmp	r2, r3
 8011b82:	dc15      	bgt.n	8011bb0 <ull_readaccdata+0x54>
 8011b84:	2d7f      	cmp	r5, #127	; 0x7f
 8011b86:	d91d      	bls.n	8011bc4 <ull_readaccdata+0x68>
 8011b88:	2315      	movs	r3, #21
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	4913      	ldr	r1, [pc, #76]	; (8011bdc <ull_readaccdata+0x80>)
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f7fe fd0a 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011b94:	462b      	mov	r3, r5
 8011b96:	2200      	movs	r2, #0
 8011b98:	4911      	ldr	r1, [pc, #68]	; (8011be0 <ull_readaccdata+0x84>)
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f7fe fd04 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011ba0:	9700      	str	r7, [sp, #0]
 8011ba2:	4633      	mov	r3, r6
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8011baa:	4620      	mov	r0, r4
 8011bac:	f7fe f813 	bl	800fbd6 <dwt_readfromdevice>
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	9200      	str	r2, [sp, #0]
 8011bb4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8011bb8:	4907      	ldr	r1, [pc, #28]	; (8011bd8 <ull_readaccdata+0x7c>)
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff fefa 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011bc0:	b003      	add	sp, #12
 8011bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc4:	9700      	str	r7, [sp, #0]
 8011bc6:	4633      	mov	r3, r6
 8011bc8:	462a      	mov	r2, r5
 8011bca:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7fe f801 	bl	800fbd6 <dwt_readfromdevice>
 8011bd4:	e7ec      	b.n	8011bb0 <ull_readaccdata+0x54>
 8011bd6:	bf00      	nop
 8011bd8:	00110004 	.word	0x00110004
 8011bdc:	001f0004 	.word	0x001f0004
 8011be0:	001f0008 	.word	0x001f0008

08011be4 <ull_configure>:
 8011be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be8:	b083      	sub	sp, #12
 8011bea:	4604      	mov	r4, r0
 8011bec:	460d      	mov	r5, r1
 8011bee:	f891 9000 	ldrb.w	r9, [r1]
 8011bf2:	790b      	ldrb	r3, [r1, #4]
 8011bf4:	2b18      	cmp	r3, #24
 8011bf6:	d814      	bhi.n	8011c22 <ull_configure+0x3e>
 8011bf8:	78cf      	ldrb	r7, [r1, #3]
 8011bfa:	2f18      	cmp	r7, #24
 8011bfc:	bf94      	ite	ls
 8011bfe:	2700      	movls	r7, #0
 8011c00:	2701      	movhi	r7, #1
 8011c02:	b2ff      	uxtb	r7, r7
 8011c04:	79eb      	ldrb	r3, [r5, #7]
 8011c06:	2b01      	cmp	r3, #1
 8011c08:	bf0c      	ite	eq
 8011c0a:	2110      	moveq	r1, #16
 8011c0c:	2100      	movne	r1, #0
 8011c0e:	786b      	ldrb	r3, [r5, #1]
 8011c10:	3b01      	subs	r3, #1
 8011c12:	2b06      	cmp	r3, #6
 8011c14:	d810      	bhi.n	8011c38 <ull_configure+0x54>
 8011c16:	e8df f003 	tbb	[pc, r3]
 8011c1a:	0f06      	.short	0x0f06
 8011c1c:	0f0c120f 	.word	0x0f0c120f
 8011c20:	09          	.byte	0x09
 8011c21:	00          	.byte	0x00
 8011c22:	2701      	movs	r7, #1
 8011c24:	e7ed      	b.n	8011c02 <ull_configure+0x1e>
 8011c26:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8011c2a:	e00a      	b.n	8011c42 <ull_configure+0x5e>
 8011c2c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8011c30:	e007      	b.n	8011c42 <ull_configure+0x5e>
 8011c32:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8011c36:	e004      	b.n	8011c42 <ull_configure+0x5e>
 8011c38:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8011c3c:	e001      	b.n	8011c42 <ull_configure+0x5e>
 8011c3e:	f04f 0a20 	mov.w	sl, #32
 8011c42:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011c44:	8a13      	ldrh	r3, [r2, #16]
 8011c46:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8011c4a:	8213      	strh	r3, [r2, #16]
 8011c4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011c4e:	79ea      	ldrb	r2, [r5, #7]
 8011c50:	72da      	strb	r2, [r3, #11]
 8011c52:	7b2e      	ldrb	r6, [r5, #12]
 8011c54:	1cb3      	adds	r3, r6, #2
 8011c56:	2601      	movs	r6, #1
 8011c58:	409e      	lsls	r6, r3
 8011c5a:	fa1f f886 	uxth.w	r8, r6
 8011c5e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011c60:	4bca      	ldr	r3, [pc, #808]	; (8011f8c <ull_configure+0x3a8>)
 8011c62:	fb03 f308 	mul.w	r3, r3, r8
 8011c66:	0bdb      	lsrs	r3, r3, #15
 8011c68:	8253      	strh	r3, [r2, #18]
 8011c6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011c6c:	7aea      	ldrb	r2, [r5, #11]
 8011c6e:	755a      	strb	r2, [r3, #21]
 8011c70:	7a2b      	ldrb	r3, [r5, #8]
 8011c72:	015b      	lsls	r3, r3, #5
 8011c74:	f003 0320 	and.w	r3, r3, #32
 8011c78:	7b6a      	ldrb	r2, [r5, #13]
 8011c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c7e:	7aea      	ldrb	r2, [r5, #11]
 8011c80:	0312      	lsls	r2, r2, #12
 8011c82:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8011c86:	4313      	orrs	r3, r2
 8011c88:	430b      	orrs	r3, r1
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	4bc0      	ldr	r3, [pc, #768]	; (8011f90 <ull_configure+0x3ac>)
 8011c8e:	2200      	movs	r2, #0
 8011c90:	2110      	movs	r1, #16
 8011c92:	4620      	mov	r0, r4
 8011c94:	f7ff f98e 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011c98:	2f00      	cmp	r7, #0
 8011c9a:	f040 80fe 	bne.w	8011e9a <ull_configure+0x2b6>
 8011c9e:	7aeb      	ldrb	r3, [r5, #11]
 8011ca0:	b1bb      	cbz	r3, 8011cd2 <ull_configure+0xee>
 8011ca2:	7b6b      	ldrb	r3, [r5, #13]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	7b28      	ldrb	r0, [r5, #12]
 8011ca8:	bf94      	ite	ls
 8011caa:	2203      	movls	r2, #3
 8011cac:	2204      	movhi	r2, #4
 8011cae:	2110      	movs	r1, #16
 8011cb0:	4bb8      	ldr	r3, [pc, #736]	; (8011f94 <ull_configure+0x3b0>)
 8011cb2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011cb6:	f7fd fef3 	bl	800faa0 <get_sts_mnth>
 8011cba:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8011cbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011cc2:	9000      	str	r0, [sp, #0]
 8011cc4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8011cc8:	2202      	movs	r2, #2
 8011cca:	49b3      	ldr	r1, [pc, #716]	; (8011f98 <ull_configure+0x3b4>)
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f7ff fe71 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011cd2:	2394      	movs	r3, #148	; 0x94
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	4bb1      	ldr	r3, [pc, #708]	; (8011f9c <ull_configure+0x3b8>)
 8011cd8:	2200      	movs	r2, #0
 8011cda:	49b1      	ldr	r1, [pc, #708]	; (8011fa0 <ull_configure+0x3bc>)
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f7ff f969 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011ce2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8011ce6:	f340 8103 	ble.w	8011ef0 <ull_configure+0x30c>
 8011cea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011cec:	8a13      	ldrh	r3, [r2, #16]
 8011cee:	f043 0320 	orr.w	r3, r3, #32
 8011cf2:	8213      	strh	r3, [r2, #16]
 8011cf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8011cfe:	2200      	movs	r2, #0
 8011d00:	49a8      	ldr	r1, [pc, #672]	; (8011fa4 <ull_configure+0x3c0>)
 8011d02:	4620      	mov	r0, r4
 8011d04:	f7ff fe56 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011d08:	7b6b      	ldrb	r3, [r5, #13]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	f000 80fb 	beq.w	8011f06 <ull_configure+0x322>
 8011d10:	78ab      	ldrb	r3, [r5, #2]
 8011d12:	f043 0310 	orr.w	r3, r3, #16
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	23fc      	movs	r3, #252	; 0xfc
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7ff fab7 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011d26:	1e73      	subs	r3, r6, #1
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8011d30:	4620      	mov	r0, r4
 8011d32:	f7fe fe1d 	bl	8010970 <dwt_write8bitoffsetreg>
 8011d36:	786b      	ldrb	r3, [r5, #1]
 8011d38:	2b07      	cmp	r3, #7
 8011d3a:	bf0c      	ite	eq
 8011d3c:	2108      	moveq	r1, #8
 8011d3e:	2100      	movne	r1, #0
 8011d40:	4620      	mov	r0, r4
 8011d42:	f7fe ff1b 	bl	8010b7c <ull_setplenfine>
 8011d46:	7aeb      	ldrb	r3, [r5, #11]
 8011d48:	f003 0303 	and.w	r3, r3, #3
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	bf0c      	ite	eq
 8011d50:	4b95      	ldreq	r3, [pc, #596]	; (8011fa8 <ull_configure+0x3c4>)
 8011d52:	4b96      	ldrne	r3, [pc, #600]	; (8011fac <ull_configure+0x3c8>)
 8011d54:	2200      	movs	r2, #0
 8011d56:	4996      	ldr	r1, [pc, #600]	; (8011fb0 <ull_configure+0x3cc>)
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f7fe fc25 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011d5e:	2200      	movs	r2, #0
 8011d60:	4994      	ldr	r1, [pc, #592]	; (8011fb4 <ull_configure+0x3d0>)
 8011d62:	4620      	mov	r0, r4
 8011d64:	f7fd ff41 	bl	800fbea <dwt_read32bitoffsetreg>
 8011d68:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 8011d6c:	f020 001f 	bic.w	r0, r0, #31
 8011d70:	f1b9 0f09 	cmp.w	r9, #9
 8011d74:	bf08      	it	eq
 8011d76:	f040 0001 	orreq.w	r0, r0, #1
 8011d7a:	792a      	ldrb	r2, [r5, #4]
 8011d7c:	0212      	lsls	r2, r2, #8
 8011d7e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8011d82:	78eb      	ldrb	r3, [r5, #3]
 8011d84:	00db      	lsls	r3, r3, #3
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	431a      	orrs	r2, r3
 8011d8a:	796b      	ldrb	r3, [r5, #5]
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	f003 0306 	and.w	r3, r3, #6
 8011d92:	4313      	orrs	r3, r2
 8011d94:	4303      	orrs	r3, r0
 8011d96:	2200      	movs	r2, #0
 8011d98:	4986      	ldr	r1, [pc, #536]	; (8011fb4 <ull_configure+0x3d0>)
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f7fe fc04 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011da0:	79aa      	ldrb	r2, [r5, #6]
 8011da2:	786b      	ldrb	r3, [r5, #1]
 8011da4:	031b      	lsls	r3, r3, #12
 8011da6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8011db0:	2200      	movs	r2, #0
 8011db2:	2120      	movs	r1, #32
 8011db4:	4620      	mov	r0, r4
 8011db6:	f7ff f8fd 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011dba:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8011dbe:	b923      	cbnz	r3, 8011dca <ull_configure+0x1e6>
 8011dc0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8011dc4:	726b      	strb	r3, [r5, #9]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	72ab      	strb	r3, [r5, #10]
 8011dca:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8011dce:	2202      	movs	r2, #2
 8011dd0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f7fe fb7c 	bl	80104d2 <dwt_write16bitoffsetreg>
 8011dda:	2202      	movs	r2, #2
 8011ddc:	4976      	ldr	r1, [pc, #472]	; (8011fb8 <ull_configure+0x3d4>)
 8011dde:	4620      	mov	r0, r4
 8011de0:	f7fd ff58 	bl	800fc94 <dwt_read8bitoffsetreg>
 8011de4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011de6:	7bdb      	ldrb	r3, [r3, #15]
 8011de8:	454b      	cmp	r3, r9
 8011dea:	f000 8096 	beq.w	8011f1a <ull_configure+0x336>
 8011dee:	2803      	cmp	r0, #3
 8011df0:	f000 8097 	beq.w	8011f22 <ull_configure+0x33e>
 8011df4:	f1b9 0f09 	cmp.w	r9, #9
 8011df8:	f000 8098 	beq.w	8011f2c <ull_configure+0x348>
 8011dfc:	4b6f      	ldr	r3, [pc, #444]	; (8011fbc <ull_configure+0x3d8>)
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e04:	2200      	movs	r2, #0
 8011e06:	496e      	ldr	r1, [pc, #440]	; (8011fc0 <ull_configure+0x3dc>)
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f7ff f8d3 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011e0e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8011e12:	2200      	movs	r2, #0
 8011e14:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f7fe fb5a 	bl	80104d2 <dwt_write16bitoffsetreg>
 8011e1e:	2314      	movs	r3, #20
 8011e20:	2201      	movs	r2, #1
 8011e22:	4968      	ldr	r1, [pc, #416]	; (8011fc4 <ull_configure+0x3e0>)
 8011e24:	4620      	mov	r0, r4
 8011e26:	f7fe fda3 	bl	8010970 <dwt_write8bitoffsetreg>
 8011e2a:	230e      	movs	r3, #14
 8011e2c:	2202      	movs	r2, #2
 8011e2e:	4966      	ldr	r1, [pc, #408]	; (8011fc8 <ull_configure+0x3e4>)
 8011e30:	4620      	mov	r0, r4
 8011e32:	f7fe fd9d 	bl	8010970 <dwt_write8bitoffsetreg>
 8011e36:	2381      	movs	r3, #129	; 0x81
 8011e38:	2200      	movs	r2, #0
 8011e3a:	4964      	ldr	r1, [pc, #400]	; (8011fcc <ull_configure+0x3e8>)
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f7fe fd97 	bl	8010970 <dwt_write8bitoffsetreg>
 8011e42:	2600      	movs	r6, #0
 8011e44:	9600      	str	r6, [sp, #0]
 8011e46:	23fc      	movs	r3, #252	; 0xfc
 8011e48:	2203      	movs	r2, #3
 8011e4a:	4961      	ldr	r1, [pc, #388]	; (8011fd0 <ull_configure+0x3ec>)
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7ff fa21 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011e52:	2302      	movs	r3, #2
 8011e54:	4632      	mov	r2, r6
 8011e56:	2144      	movs	r1, #68	; 0x44
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f7fe fd89 	bl	8010970 <dwt_write8bitoffsetreg>
 8011e5e:	2101      	movs	r1, #1
 8011e60:	4620      	mov	r0, r4
 8011e62:	f7ff fc47 	bl	80116f4 <ull_setdwstate>
 8011e66:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8011e6a:	f04f 0814 	mov.w	r8, #20
 8011e6e:	4637      	mov	r7, r6
 8011e70:	2644      	movs	r6, #68	; 0x44
 8011e72:	4640      	mov	r0, r8
 8011e74:	f7ef fb19 	bl	80014aa <deca_usleep>
 8011e78:	463a      	mov	r2, r7
 8011e7a:	4631      	mov	r1, r6
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f7fd ff09 	bl	800fc94 <dwt_read8bitoffsetreg>
 8011e82:	f010 0f02 	tst.w	r0, #2
 8011e86:	f040 80af 	bne.w	8011fe8 <ull_configure+0x404>
 8011e8a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011e8e:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 8011e92:	d1ee      	bne.n	8011e72 <ull_configure+0x28e>
 8011e94:	f06f 0001 	mvn.w	r0, #1
 8011e98:	e0e6      	b.n	8012068 <ull_configure+0x484>
 8011e9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011e9c:	8a13      	ldrh	r3, [r2, #16]
 8011e9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011ea2:	8213      	strh	r3, [r2, #16]
 8011ea4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8011eae:	2200      	movs	r2, #0
 8011eb0:	493c      	ldr	r1, [pc, #240]	; (8011fa4 <ull_configure+0x3c0>)
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	f7ff f87e 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011eb8:	f240 3306 	movw	r3, #774	; 0x306
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	4945      	ldr	r1, [pc, #276]	; (8011fd4 <ull_configure+0x3f0>)
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f7fe fb71 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	461a      	mov	r2, r3
 8011eca:	4943      	ldr	r1, [pc, #268]	; (8011fd8 <ull_configure+0x3f4>)
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f7fe fb6b 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011ed2:	4b42      	ldr	r3, [pc, #264]	; (8011fdc <ull_configure+0x3f8>)
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	4930      	ldr	r1, [pc, #192]	; (8011f98 <ull_configure+0x3b4>)
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7fe fb65 	bl	80105a8 <dwt_write32bitoffsetreg>
 8011ede:	239d      	movs	r3, #157	; 0x9d
 8011ee0:	9300      	str	r3, [sp, #0]
 8011ee2:	4b2e      	ldr	r3, [pc, #184]	; (8011f9c <ull_configure+0x3b8>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	492e      	ldr	r1, [pc, #184]	; (8011fa0 <ull_configure+0x3bc>)
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f7ff f863 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011eee:	e70b      	b.n	8011d08 <ull_configure+0x124>
 8011ef0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8011efa:	2200      	movs	r2, #0
 8011efc:	4929      	ldr	r1, [pc, #164]	; (8011fa4 <ull_configure+0x3c0>)
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff fd58 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011f04:	e700      	b.n	8011d08 <ull_configure+0x124>
 8011f06:	78ab      	ldrb	r3, [r5, #2]
 8011f08:	9300      	str	r3, [sp, #0]
 8011f0a:	23ec      	movs	r3, #236	; 0xec
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8011f12:	4620      	mov	r0, r4
 8011f14:	f7ff f9be 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011f18:	e705      	b.n	8011d26 <ull_configure+0x142>
 8011f1a:	2803      	cmp	r0, #3
 8011f1c:	f47f af6a 	bne.w	8011df4 <ull_configure+0x210>
 8011f20:	e065      	b.n	8011fee <ull_configure+0x40a>
 8011f22:	2102      	movs	r1, #2
 8011f24:	4620      	mov	r0, r4
 8011f26:	f7ff fbe5 	bl	80116f4 <ull_setdwstate>
 8011f2a:	e763      	b.n	8011df4 <ull_configure+0x210>
 8011f2c:	4b2c      	ldr	r3, [pc, #176]	; (8011fe0 <ull_configure+0x3fc>)
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f34:	2200      	movs	r2, #0
 8011f36:	4922      	ldr	r1, [pc, #136]	; (8011fc0 <ull_configure+0x3dc>)
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f7ff f83b 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8011f3e:	f640 733c 	movw	r3, #3900	; 0xf3c
 8011f42:	2200      	movs	r2, #0
 8011f44:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f7fe fac2 	bl	80104d2 <dwt_write16bitoffsetreg>
 8011f4e:	e766      	b.n	8011e1e <ull_configure+0x23a>
 8011f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f54:	9300      	str	r3, [sp, #0]
 8011f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	4911      	ldr	r1, [pc, #68]	; (8011fa4 <ull_configure+0x3c0>)
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f7ff fd28 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8011f64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011f66:	8a13      	ldrh	r3, [r2, #16]
 8011f68:	f043 0308 	orr.w	r3, r3, #8
 8011f6c:	8213      	strh	r3, [r2, #16]
 8011f6e:	e050      	b.n	8012012 <ull_configure+0x42e>
 8011f70:	2200      	movs	r2, #0
 8011f72:	9200      	str	r2, [sp, #0]
 8011f74:	23fe      	movs	r3, #254	; 0xfe
 8011f76:	491b      	ldr	r1, [pc, #108]	; (8011fe4 <ull_configure+0x400>)
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f7ff f98b 	bl	8011294 <dwt_modify8bitoffsetreg>
 8011f7e:	e052      	b.n	8012026 <ull_configure+0x442>
 8011f80:	2101      	movs	r1, #1
 8011f82:	4620      	mov	r0, r4
 8011f84:	f7ff fda2 	bl	8011acc <ull_pgf_cal>
 8011f88:	e06b      	b.n	8012062 <ull_configure+0x47e>
 8011f8a:	bf00      	nop
 8011f8c:	00026668 	.word	0x00026668
 8011f90:	fffc4fcf 	.word	0xfffc4fcf
 8011f94:	08019bc8 	.word	0x08019bc8
 8011f98:	000e0014 	.word	0x000e0014
 8011f9c:	bfffff00 	.word	0xbfffff00
 8011fa0:	000e0018 	.word	0x000e0018
 8011fa4:	000b0008 	.word	0x000b0008
 8011fa8:	af5f35cc 	.word	0xaf5f35cc
 8011fac:	af5f584c 	.word	0xaf5f584c
 8011fb0:	0006000c 	.word	0x0006000c
 8011fb4:	00010008 	.word	0x00010008
 8011fb8:	000f0030 	.word	0x000f0030
 8011fbc:	1c071134 	.word	0x1c071134
 8011fc0:	0007001c 	.word	0x0007001c
 8011fc4:	00070050 	.word	0x00070050
 8011fc8:	00070018 	.word	0x00070018
 8011fcc:	00090008 	.word	0x00090008
 8011fd0:	00090004 	.word	0x00090004
 8011fd4:	000e000c 	.word	0x000e000c
 8011fd8:	000e0010 	.word	0x000e0010
 8011fdc:	000c5a0a 	.word	0x000c5a0a
 8011fe0:	1c010034 	.word	0x1c010034
 8011fe4:	00030018 	.word	0x00030018
 8011fe8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011fea:	f883 900f 	strb.w	r9, [r3, #15]
 8011fee:	792b      	ldrb	r3, [r5, #4]
 8011ff0:	3b09      	subs	r3, #9
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	2b0f      	cmp	r3, #15
 8011ff6:	d8bb      	bhi.n	8011f70 <ull_configure+0x38c>
 8011ff8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011ffa:	7a1b      	ldrb	r3, [r3, #8]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d0a7      	beq.n	8011f50 <ull_configure+0x36c>
 8012000:	4649      	mov	r1, r9
 8012002:	4620      	mov	r0, r4
 8012004:	f7fe fb9c 	bl	8010740 <ull_configmrxlut>
 8012008:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801200a:	8a13      	ldrh	r3, [r2, #16]
 801200c:	f023 0308 	bic.w	r3, r3, #8
 8012010:	8213      	strh	r3, [r2, #16]
 8012012:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012016:	9300      	str	r3, [sp, #0]
 8012018:	f248 13ff 	movw	r3, #33279	; 0x81ff
 801201c:	2200      	movs	r2, #0
 801201e:	4914      	ldr	r1, [pc, #80]	; (8012070 <ull_configure+0x48c>)
 8012020:	4620      	mov	r0, r4
 8012022:	f7ff fcc7 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8012026:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801202a:	bfcc      	ite	gt
 801202c:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8012030:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801203a:	2200      	movs	r2, #0
 801203c:	490d      	ldr	r1, [pc, #52]	; (8012074 <ull_configure+0x490>)
 801203e:	4620      	mov	r0, r4
 8012040:	f7fe ffb8 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8012044:	2301      	movs	r3, #1
 8012046:	9300      	str	r3, [sp, #0]
 8012048:	23ff      	movs	r3, #255	; 0xff
 801204a:	2202      	movs	r2, #2
 801204c:	490a      	ldr	r1, [pc, #40]	; (8012078 <ull_configure+0x494>)
 801204e:	4620      	mov	r0, r4
 8012050:	f7ff f920 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012054:	2200      	movs	r2, #0
 8012056:	4909      	ldr	r1, [pc, #36]	; (801207c <ull_configure+0x498>)
 8012058:	4620      	mov	r0, r4
 801205a:	f7fd fdc6 	bl	800fbea <dwt_read32bitoffsetreg>
 801205e:	2800      	cmp	r0, #0
 8012060:	d08e      	beq.n	8011f80 <ull_configure+0x39c>
 8012062:	4620      	mov	r0, r4
 8012064:	f7ff f98a 	bl	801137c <ull_adcoffsetscalibration>
 8012068:	b003      	add	sp, #12
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	bf00      	nop
 8012070:	00030018 	.word	0x00030018
 8012074:	00060010 	.word	0x00060010
 8012078:	0004000c 	.word	0x0004000c
 801207c:	00040014 	.word	0x00040014

08012080 <ull_initialise>:
 8012080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012084:	b082      	sub	sp, #8
 8012086:	4605      	mov	r5, r0
 8012088:	460e      	mov	r6, r1
 801208a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801208c:	2b00      	cmp	r3, #0
 801208e:	d05b      	beq.n	8012148 <ull_initialise+0xc8>
 8012090:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8012092:	2300      	movs	r3, #0
 8012094:	73a3      	strb	r3, [r4, #14]
 8012096:	2202      	movs	r2, #2
 8012098:	8222      	strh	r2, [r4, #16]
 801209a:	7523      	strb	r3, [r4, #20]
 801209c:	7563      	strb	r3, [r4, #21]
 801209e:	73e3      	strb	r3, [r4, #15]
 80120a0:	7263      	strb	r3, [r4, #9]
 80120a2:	72a3      	strb	r3, [r4, #10]
 80120a4:	2104      	movs	r1, #4
 80120a6:	4628      	mov	r0, r5
 80120a8:	f7fe fa5c 	bl	8010564 <_dwt_otpread>
 80120ac:	4607      	mov	r7, r0
 80120ae:	2105      	movs	r1, #5
 80120b0:	4628      	mov	r0, r5
 80120b2:	f7fe fa57 	bl	8010564 <_dwt_otpread>
 80120b6:	4680      	mov	r8, r0
 80120b8:	210a      	movs	r1, #10
 80120ba:	4628      	mov	r0, r5
 80120bc:	f7fe fa52 	bl	8010564 <_dwt_otpread>
 80120c0:	b12f      	cbz	r7, 80120ce <ull_initialise+0x4e>
 80120c2:	f1b8 0f00 	cmp.w	r8, #0
 80120c6:	d002      	beq.n	80120ce <ull_initialise+0x4e>
 80120c8:	b280      	uxth	r0, r0
 80120ca:	2800      	cmp	r0, #0
 80120cc:	d141      	bne.n	8012152 <ull_initialise+0xd2>
 80120ce:	2120      	movs	r1, #32
 80120d0:	4628      	mov	r0, r5
 80120d2:	f7fe fa47 	bl	8010564 <_dwt_otpread>
 80120d6:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 80120da:	bf0c      	ite	eq
 80120dc:	2301      	moveq	r3, #1
 80120de:	2300      	movne	r3, #0
 80120e0:	7223      	strb	r3, [r4, #8]
 80120e2:	f016 0f10 	tst.w	r6, #16
 80120e6:	d143      	bne.n	8012170 <ull_initialise+0xf0>
 80120e8:	f016 0f20 	tst.w	r6, #32
 80120ec:	d146      	bne.n	801217c <ull_initialise+0xfc>
 80120ee:	f016 0f40 	tst.w	r6, #64	; 0x40
 80120f2:	d149      	bne.n	8012188 <ull_initialise+0x108>
 80120f4:	f016 0f80 	tst.w	r6, #128	; 0x80
 80120f8:	d14d      	bne.n	8012196 <ull_initialise+0x116>
 80120fa:	7aa3      	ldrb	r3, [r4, #10]
 80120fc:	b90b      	cbnz	r3, 8012102 <ull_initialise+0x82>
 80120fe:	2385      	movs	r3, #133	; 0x85
 8012100:	72a3      	strb	r3, [r4, #10]
 8012102:	7a63      	ldrb	r3, [r4, #9]
 8012104:	b90b      	cbnz	r3, 801210a <ull_initialise+0x8a>
 8012106:	2374      	movs	r3, #116	; 0x74
 8012108:	7263      	strb	r3, [r4, #9]
 801210a:	211f      	movs	r1, #31
 801210c:	4628      	mov	r0, r5
 801210e:	f7fe fa29 	bl	8010564 <_dwt_otpread>
 8012112:	7320      	strb	r0, [r4, #12]
 8012114:	211e      	movs	r1, #30
 8012116:	4628      	mov	r0, r5
 8012118:	f7fe fa24 	bl	8010564 <_dwt_otpread>
 801211c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8012120:	bf12      	itee	ne
 8012122:	7360      	strbne	r0, [r4, #13]
 8012124:	232e      	moveq	r3, #46	; 0x2e
 8012126:	7363      	strbeq	r3, [r4, #13]
 8012128:	7b63      	ldrb	r3, [r4, #13]
 801212a:	2200      	movs	r2, #0
 801212c:	4920      	ldr	r1, [pc, #128]	; (80121b0 <ull_initialise+0x130>)
 801212e:	4628      	mov	r0, r5
 8012130:	f7fe fc1e 	bl	8010970 <dwt_write8bitoffsetreg>
 8012134:	2135      	movs	r1, #53	; 0x35
 8012136:	4628      	mov	r0, r5
 8012138:	f7fe fa14 	bl	8010564 <_dwt_otpread>
 801213c:	4603      	mov	r3, r0
 801213e:	bb80      	cbnz	r0, 80121a2 <ull_initialise+0x122>
 8012140:	2000      	movs	r0, #0
 8012142:	b002      	add	sp, #8
 8012144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012148:	2028      	movs	r0, #40	; 0x28
 801214a:	f002 f9e1 	bl	8014510 <malloc>
 801214e:	6528      	str	r0, [r5, #80]	; 0x50
 8012150:	e79e      	b.n	8012090 <ull_initialise+0x10>
 8012152:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801215c:	2200      	movs	r2, #0
 801215e:	4915      	ldr	r1, [pc, #84]	; (80121b4 <ull_initialise+0x134>)
 8012160:	4628      	mov	r0, r5
 8012162:	f7ff fc27 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8012166:	8a23      	ldrh	r3, [r4, #16]
 8012168:	f043 0314 	orr.w	r3, r3, #20
 801216c:	8223      	strh	r3, [r4, #16]
 801216e:	e7ae      	b.n	80120ce <ull_initialise+0x4e>
 8012170:	2106      	movs	r1, #6
 8012172:	4628      	mov	r0, r5
 8012174:	f7fe f9f6 	bl	8010564 <_dwt_otpread>
 8012178:	6020      	str	r0, [r4, #0]
 801217a:	e7b5      	b.n	80120e8 <ull_initialise+0x68>
 801217c:	2107      	movs	r1, #7
 801217e:	4628      	mov	r0, r5
 8012180:	f7fe f9f0 	bl	8010564 <_dwt_otpread>
 8012184:	6060      	str	r0, [r4, #4]
 8012186:	e7b2      	b.n	80120ee <ull_initialise+0x6e>
 8012188:	2108      	movs	r1, #8
 801218a:	4628      	mov	r0, r5
 801218c:	f7fe f9ea 	bl	8010564 <_dwt_otpread>
 8012190:	0c00      	lsrs	r0, r0, #16
 8012192:	7260      	strb	r0, [r4, #9]
 8012194:	e7ae      	b.n	80120f4 <ull_initialise+0x74>
 8012196:	2109      	movs	r1, #9
 8012198:	4628      	mov	r0, r5
 801219a:	f7fe f9e3 	bl	8010564 <_dwt_otpread>
 801219e:	72a0      	strb	r0, [r4, #10]
 80121a0:	e7ab      	b.n	80120fa <ull_initialise+0x7a>
 80121a2:	2200      	movs	r2, #0
 80121a4:	4904      	ldr	r1, [pc, #16]	; (80121b8 <ull_initialise+0x138>)
 80121a6:	4628      	mov	r0, r5
 80121a8:	f7fe f9fe 	bl	80105a8 <dwt_write32bitoffsetreg>
 80121ac:	e7c8      	b.n	8012140 <ull_initialise+0xc0>
 80121ae:	bf00      	nop
 80121b0:	00090014 	.word	0x00090014
 80121b4:	000b0008 	.word	0x000b0008
 80121b8:	00090004 	.word	0x00090004

080121bc <ull_rxenable>:
 80121bc:	b530      	push	{r4, r5, lr}
 80121be:	b083      	sub	sp, #12
 80121c0:	4605      	mov	r5, r0
 80121c2:	460c      	mov	r4, r1
 80121c4:	b171      	cbz	r1, 80121e4 <ull_rxenable+0x28>
 80121c6:	f021 0302 	bic.w	r3, r1, #2
 80121ca:	3b01      	subs	r3, #1
 80121cc:	2b0f      	cmp	r3, #15
 80121ce:	d862      	bhi.n	8012296 <ull_rxenable+0xda>
 80121d0:	e8df f003 	tbb	[pc, r3]
 80121d4:	24616111 	.word	0x24616111
 80121d8:	2d616161 	.word	0x2d616161
 80121dc:	61616161 	.word	0x61616161
 80121e0:	3a616161 	.word	0x3a616161
 80121e4:	2102      	movs	r1, #2
 80121e6:	9101      	str	r1, [sp, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	9200      	str	r2, [sp, #0]
 80121ec:	4613      	mov	r3, r2
 80121ee:	f7fd fc74 	bl	800fada <dwt_xfer3xxx>
 80121f2:	4620      	mov	r0, r4
 80121f4:	e010      	b.n	8012218 <ull_rxenable+0x5c>
 80121f6:	2302      	movs	r3, #2
 80121f8:	9301      	str	r3, [sp, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	9200      	str	r2, [sp, #0]
 80121fe:	4613      	mov	r3, r2
 8012200:	2104      	movs	r1, #4
 8012202:	f7fd fc6a 	bl	800fada <dwt_xfer3xxx>
 8012206:	2203      	movs	r2, #3
 8012208:	2144      	movs	r1, #68	; 0x44
 801220a:	4628      	mov	r0, r5
 801220c:	f7fd fd42 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012210:	f010 0f08 	tst.w	r0, #8
 8012214:	d125      	bne.n	8012262 <ull_rxenable+0xa6>
 8012216:	2000      	movs	r0, #0
 8012218:	b003      	add	sp, #12
 801221a:	bd30      	pop	{r4, r5, pc}
 801221c:	2302      	movs	r3, #2
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	2200      	movs	r2, #0
 8012222:	9200      	str	r2, [sp, #0]
 8012224:	4613      	mov	r3, r2
 8012226:	210a      	movs	r1, #10
 8012228:	f7fd fc57 	bl	800fada <dwt_xfer3xxx>
 801222c:	e7eb      	b.n	8012206 <ull_rxenable+0x4a>
 801222e:	2100      	movs	r1, #0
 8012230:	f7fe f9cf 	bl	80105d2 <_dwt_adjust_delaytime>
 8012234:	2302      	movs	r3, #2
 8012236:	9301      	str	r3, [sp, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	9200      	str	r2, [sp, #0]
 801223c:	4613      	mov	r3, r2
 801223e:	2108      	movs	r1, #8
 8012240:	4628      	mov	r0, r5
 8012242:	f7fd fc4a 	bl	800fada <dwt_xfer3xxx>
 8012246:	e7de      	b.n	8012206 <ull_rxenable+0x4a>
 8012248:	2101      	movs	r1, #1
 801224a:	f7fe f9c2 	bl	80105d2 <_dwt_adjust_delaytime>
 801224e:	2302      	movs	r3, #2
 8012250:	9301      	str	r3, [sp, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	9200      	str	r2, [sp, #0]
 8012256:	4613      	mov	r3, r2
 8012258:	2106      	movs	r1, #6
 801225a:	4628      	mov	r0, r5
 801225c:	f7fd fc3d 	bl	800fada <dwt_xfer3xxx>
 8012260:	e7d1      	b.n	8012206 <ull_rxenable+0x4a>
 8012262:	2302      	movs	r3, #2
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	2100      	movs	r1, #0
 8012268:	9100      	str	r1, [sp, #0]
 801226a:	460b      	mov	r3, r1
 801226c:	460a      	mov	r2, r1
 801226e:	4628      	mov	r0, r5
 8012270:	f7fd fc33 	bl	800fada <dwt_xfer3xxx>
 8012274:	f014 0f02 	tst.w	r4, #2
 8012278:	d002      	beq.n	8012280 <ull_rxenable+0xc4>
 801227a:	f04f 30ff 	mov.w	r0, #4294967295
 801227e:	e7cb      	b.n	8012218 <ull_rxenable+0x5c>
 8012280:	2102      	movs	r1, #2
 8012282:	9101      	str	r1, [sp, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	9200      	str	r2, [sp, #0]
 8012288:	4613      	mov	r3, r2
 801228a:	4628      	mov	r0, r5
 801228c:	f7fd fc25 	bl	800fada <dwt_xfer3xxx>
 8012290:	f04f 30ff 	mov.w	r0, #4294967295
 8012294:	e7c0      	b.n	8012218 <ull_rxenable+0x5c>
 8012296:	f04f 30ff 	mov.w	r0, #4294967295
 801229a:	e7bd      	b.n	8012218 <ull_rxenable+0x5c>

0801229c <ull_softreset_no_sema_fcmd>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	4606      	mov	r6, r0
 80122a2:	2502      	movs	r5, #2
 80122a4:	9501      	str	r5, [sp, #4]
 80122a6:	2400      	movs	r4, #0
 80122a8:	9400      	str	r4, [sp, #0]
 80122aa:	4623      	mov	r3, r4
 80122ac:	4622      	mov	r2, r4
 80122ae:	2119      	movs	r1, #25
 80122b0:	f7fd fc13 	bl	800fada <dwt_xfer3xxx>
 80122b4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80122b6:	739c      	strb	r4, [r3, #14]
 80122b8:	821d      	strh	r5, [r3, #16]
 80122ba:	751c      	strb	r4, [r3, #20]
 80122bc:	755c      	strb	r4, [r3, #21]
 80122be:	73dc      	strb	r4, [r3, #15]
 80122c0:	b002      	add	sp, #8
 80122c2:	bd70      	pop	{r4, r5, r6, pc}

080122c4 <ull_softreset_fcmd>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	4606      	mov	r6, r0
 80122ca:	2502      	movs	r5, #2
 80122cc:	9501      	str	r5, [sp, #4]
 80122ce:	2400      	movs	r4, #0
 80122d0:	9400      	str	r4, [sp, #0]
 80122d2:	4623      	mov	r3, r4
 80122d4:	4622      	mov	r2, r4
 80122d6:	2118      	movs	r1, #24
 80122d8:	f7fd fbff 	bl	800fada <dwt_xfer3xxx>
 80122dc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80122de:	739c      	strb	r4, [r3, #14]
 80122e0:	821d      	strh	r5, [r3, #16]
 80122e2:	751c      	strb	r4, [r3, #20]
 80122e4:	755c      	strb	r4, [r3, #21]
 80122e6:	73dc      	strb	r4, [r3, #15]
 80122e8:	b002      	add	sp, #8
 80122ea:	bd70      	pop	{r4, r5, r6, pc}

080122ec <dwt_ioctl>:
 80122ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f0:	b08d      	sub	sp, #52	; 0x34
 80122f2:	4606      	mov	r6, r0
 80122f4:	4615      	mov	r5, r2
 80122f6:	461c      	mov	r4, r3
 80122f8:	299c      	cmp	r1, #156	; 0x9c
 80122fa:	f200 809f 	bhi.w	801243c <dwt_ioctl+0x150>
 80122fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012302:	09b3      	.short	0x09b3
 8012304:	00a109be 	.word	0x00a109be
 8012308:	00c100a6 	.word	0x00c100a6
 801230c:	019d0151 	.word	0x019d0151
 8012310:	015c0176 	.word	0x015c0176
 8012314:	01b301ae 	.word	0x01b301ae
 8012318:	01c501bc 	.word	0x01c501bc
 801231c:	01d701ce 	.word	0x01d701ce
 8012320:	01e501e0 	.word	0x01e501e0
 8012324:	027201ee 	.word	0x027201ee
 8012328:	027e0278 	.word	0x027e0278
 801232c:	028f0289 	.word	0x028f0289
 8012330:	029a0295 	.word	0x029a0295
 8012334:	02a502a0 	.word	0x02a502a0
 8012338:	02b702ae 	.word	0x02b702ae
 801233c:	02c902c0 	.word	0x02c902c0
 8012340:	02f90304 	.word	0x02f90304
 8012344:	02d202ee 	.word	0x02d202ee
 8012348:	031e02e0 	.word	0x031e02e0
 801234c:	021a01f8 	.word	0x021a01f8
 8012350:	02420239 	.word	0x02420239
 8012354:	08b40258 	.word	0x08b40258
 8012358:	031508b9 	.word	0x031508b9
 801235c:	032c0327 	.word	0x032c0327
 8012360:	033c0336 	.word	0x033c0336
 8012364:	03520347 	.word	0x03520347
 8012368:	0386035b 	.word	0x0386035b
 801236c:	03a9039d 	.word	0x03a9039d
 8012370:	03b5030a 	.word	0x03b5030a
 8012374:	03d203bf 	.word	0x03d203bf
 8012378:	040b03f9 	.word	0x040b03f9
 801237c:	0457044d 	.word	0x0457044d
 8012380:	048c047d 	.word	0x048c047d
 8012384:	049504a7 	.word	0x049504a7
 8012388:	04f704b1 	.word	0x04f704b1
 801238c:	0524050a 	.word	0x0524050a
 8012390:	054d0539 	.word	0x054d0539
 8012394:	05720556 	.word	0x05720556
 8012398:	068c055f 	.word	0x068c055f
 801239c:	070b06bb 	.word	0x070b06bb
 80123a0:	071c0711 	.word	0x071c0711
 80123a4:	07550735 	.word	0x07550735
 80123a8:	0789075f 	.word	0x0789075f
 80123ac:	07c007b7 	.word	0x07c007b7
 80123b0:	07cf07c6 	.word	0x07cf07c6
 80123b4:	07e907dc 	.word	0x07e907dc
 80123b8:	07fc07f3 	.word	0x07fc07f3
 80123bc:	08100805 	.word	0x08100805
 80123c0:	0821081b 	.word	0x0821081b
 80123c4:	084f0844 	.word	0x084f0844
 80123c8:	0865085a 	.word	0x0865085a
 80123cc:	08920887 	.word	0x08920887
 80123d0:	08bf08ab 	.word	0x08bf08ab
 80123d4:	09530949 	.word	0x09530949
 80123d8:	09c6095e 	.word	0x09c6095e
 80123dc:	09a80968 	.word	0x09a80968
 80123e0:	08fd06ad 	.word	0x08fd06ad
 80123e4:	0a34091e 	.word	0x0a34091e
 80123e8:	09d30a29 	.word	0x09d30a29
 80123ec:	09e909de 	.word	0x09e909de
 80123f0:	09ff09f4 	.word	0x09ff09f4
 80123f4:	0a150a0a 	.word	0x0a150a0a
 80123f8:	0c2c0a1e 	.word	0x0c2c0a1e
 80123fc:	0c9d0c63 	.word	0x0c9d0c63
 8012400:	0e270cbf 	.word	0x0e270cbf
 8012404:	0a440e3b 	.word	0x0a440e3b
 8012408:	0b830b51 	.word	0x0b830b51
 801240c:	0b910b8d 	.word	0x0b910b8d
 8012410:	0b9f0b95 	.word	0x0b9f0b95
 8012414:	0bbb0bb1 	.word	0x0bbb0bb1
 8012418:	0be20bce 	.word	0x0be20bce
 801241c:	0cd50c1c 	.word	0x0cd50c1c
 8012420:	0cf70cdf 	.word	0x0cf70cdf
 8012424:	0d270d12 	.word	0x0d270d12
 8012428:	0d830d47 	.word	0x0d830d47
 801242c:	0db10d9b 	.word	0x0db10d9b
 8012430:	0ef60dc1 	.word	0x0ef60dc1
 8012434:	0de60df0 	.word	0x0de60df0
 8012438:	0dfa0e02 	.word	0x0dfa0e02
 801243c:	f04f 35ff 	mov.w	r5, #4294967295
 8012440:	f001 be56 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012444:	f7fd fb28 	bl	800fa98 <ull_wakeup_ic>
 8012448:	2500      	movs	r5, #0
 801244a:	f001 be51 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801244e:	2202      	movs	r2, #2
 8012450:	49c0      	ldr	r1, [pc, #768]	; (8012754 <dwt_ioctl+0x468>)
 8012452:	f7fd fc1f 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012456:	2803      	cmp	r0, #3
 8012458:	d802      	bhi.n	8012460 <dwt_ioctl+0x174>
 801245a:	2500      	movs	r5, #0
 801245c:	f001 be48 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012460:	f7ee fffa 	bl	8001458 <decamutexon>
 8012464:	4604      	mov	r4, r0
 8012466:	2302      	movs	r3, #2
 8012468:	9301      	str	r3, [sp, #4]
 801246a:	2500      	movs	r5, #0
 801246c:	9500      	str	r5, [sp, #0]
 801246e:	462b      	mov	r3, r5
 8012470:	462a      	mov	r2, r5
 8012472:	4629      	mov	r1, r5
 8012474:	4630      	mov	r0, r6
 8012476:	f7fd fb30 	bl	800fada <dwt_xfer3xxx>
 801247a:	4620      	mov	r0, r4
 801247c:	f7ee fffd 	bl	800147a <decamutexoff>
 8012480:	f001 be36 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012484:	2c00      	cmp	r4, #0
 8012486:	f001 8637 	beq.w	80140f8 <dwt_ioctl+0x1e0c>
 801248a:	7824      	ldrb	r4, [r4, #0]
 801248c:	f014 0f1d 	tst.w	r4, #29
 8012490:	d063      	beq.n	801255a <dwt_ioctl+0x26e>
 8012492:	f014 0f01 	tst.w	r4, #1
 8012496:	d025      	beq.n	80124e4 <dwt_ioctl+0x1f8>
 8012498:	f014 0f02 	tst.w	r4, #2
 801249c:	f04f 0302 	mov.w	r3, #2
 80124a0:	9301      	str	r3, [sp, #4]
 80124a2:	f04f 0200 	mov.w	r2, #0
 80124a6:	9200      	str	r2, [sp, #0]
 80124a8:	4613      	mov	r3, r2
 80124aa:	bf14      	ite	ne
 80124ac:	210d      	movne	r1, #13
 80124ae:	2103      	moveq	r1, #3
 80124b0:	f7fd fb13 	bl	800fada <dwt_xfer3xxx>
 80124b4:	2203      	movs	r2, #3
 80124b6:	2144      	movs	r1, #68	; 0x44
 80124b8:	4630      	mov	r0, r6
 80124ba:	f7fd fbeb 	bl	800fc94 <dwt_read8bitoffsetreg>
 80124be:	f010 0f08 	tst.w	r0, #8
 80124c2:	bf08      	it	eq
 80124c4:	2500      	moveq	r5, #0
 80124c6:	f001 8613 	beq.w	80140f0 <dwt_ioctl+0x1e04>
 80124ca:	2302      	movs	r3, #2
 80124cc:	9301      	str	r3, [sp, #4]
 80124ce:	2100      	movs	r1, #0
 80124d0:	9100      	str	r1, [sp, #0]
 80124d2:	460b      	mov	r3, r1
 80124d4:	460a      	mov	r2, r1
 80124d6:	4630      	mov	r0, r6
 80124d8:	f7fd faff 	bl	800fada <dwt_xfer3xxx>
 80124dc:	f04f 35ff 	mov.w	r5, #4294967295
 80124e0:	f001 be06 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80124e4:	f014 0f08 	tst.w	r4, #8
 80124e8:	d111      	bne.n	801250e <dwt_ioctl+0x222>
 80124ea:	f014 0f10 	tst.w	r4, #16
 80124ee:	d121      	bne.n	8012534 <dwt_ioctl+0x248>
 80124f0:	f014 0f02 	tst.w	r4, #2
 80124f4:	f04f 0302 	mov.w	r3, #2
 80124f8:	9301      	str	r3, [sp, #4]
 80124fa:	f04f 0200 	mov.w	r2, #0
 80124fe:	9200      	str	r2, [sp, #0]
 8012500:	4613      	mov	r3, r2
 8012502:	bf14      	ite	ne
 8012504:	2110      	movne	r1, #16
 8012506:	2109      	moveq	r1, #9
 8012508:	f7fd fae7 	bl	800fada <dwt_xfer3xxx>
 801250c:	e7d2      	b.n	80124b4 <dwt_ioctl+0x1c8>
 801250e:	2100      	movs	r1, #0
 8012510:	f7fe f85f 	bl	80105d2 <_dwt_adjust_delaytime>
 8012514:	f014 0f02 	tst.w	r4, #2
 8012518:	f04f 0302 	mov.w	r3, #2
 801251c:	9301      	str	r3, [sp, #4]
 801251e:	f04f 0200 	mov.w	r2, #0
 8012522:	9200      	str	r2, [sp, #0]
 8012524:	4613      	mov	r3, r2
 8012526:	bf14      	ite	ne
 8012528:	210f      	movne	r1, #15
 801252a:	2107      	moveq	r1, #7
 801252c:	4630      	mov	r0, r6
 801252e:	f7fd fad4 	bl	800fada <dwt_xfer3xxx>
 8012532:	e7bf      	b.n	80124b4 <dwt_ioctl+0x1c8>
 8012534:	2101      	movs	r1, #1
 8012536:	f7fe f84c 	bl	80105d2 <_dwt_adjust_delaytime>
 801253a:	f014 0f02 	tst.w	r4, #2
 801253e:	f04f 0302 	mov.w	r3, #2
 8012542:	9301      	str	r3, [sp, #4]
 8012544:	f04f 0200 	mov.w	r2, #0
 8012548:	9200      	str	r2, [sp, #0]
 801254a:	4613      	mov	r3, r2
 801254c:	bf14      	ite	ne
 801254e:	210e      	movne	r1, #14
 8012550:	2105      	moveq	r1, #5
 8012552:	4630      	mov	r0, r6
 8012554:	f7fd fac1 	bl	800fada <dwt_xfer3xxx>
 8012558:	e7ac      	b.n	80124b4 <dwt_ioctl+0x1c8>
 801255a:	f014 0f20 	tst.w	r4, #32
 801255e:	d010      	beq.n	8012582 <dwt_ioctl+0x296>
 8012560:	f014 0f02 	tst.w	r4, #2
 8012564:	f04f 0302 	mov.w	r3, #2
 8012568:	9301      	str	r3, [sp, #4]
 801256a:	f04f 0500 	mov.w	r5, #0
 801256e:	9500      	str	r5, [sp, #0]
 8012570:	462b      	mov	r3, r5
 8012572:	462a      	mov	r2, r5
 8012574:	bf14      	ite	ne
 8012576:	2111      	movne	r1, #17
 8012578:	210b      	moveq	r1, #11
 801257a:	f7fd faae 	bl	800fada <dwt_xfer3xxx>
 801257e:	f001 bdb7 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012582:	f014 0f02 	tst.w	r4, #2
 8012586:	f04f 0302 	mov.w	r3, #2
 801258a:	9301      	str	r3, [sp, #4]
 801258c:	f04f 0500 	mov.w	r5, #0
 8012590:	9500      	str	r5, [sp, #0]
 8012592:	462b      	mov	r3, r5
 8012594:	462a      	mov	r2, r5
 8012596:	bf14      	ite	ne
 8012598:	210c      	movne	r1, #12
 801259a:	2101      	moveq	r1, #1
 801259c:	f7fd fa9d 	bl	800fada <dwt_xfer3xxx>
 80125a0:	f001 bda6 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80125a4:	2c00      	cmp	r4, #0
 80125a6:	f001 85a9 	beq.w	80140fc <dwt_ioctl+0x1e10>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	2200      	movs	r2, #0
 80125ae:	2128      	movs	r1, #40	; 0x28
 80125b0:	f7fd fffa 	bl	80105a8 <dwt_write32bitoffsetreg>
 80125b4:	2500      	movs	r5, #0
 80125b6:	f001 bd9b 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80125ba:	6823      	ldr	r3, [r4, #0]
 80125bc:	2200      	movs	r2, #0
 80125be:	4966      	ldr	r1, [pc, #408]	; (8012758 <dwt_ioctl+0x46c>)
 80125c0:	f7fd fff2 	bl	80105a8 <dwt_write32bitoffsetreg>
 80125c4:	6863      	ldr	r3, [r4, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	4964      	ldr	r1, [pc, #400]	; (801275c <dwt_ioctl+0x470>)
 80125ca:	4630      	mov	r0, r6
 80125cc:	f7fd ffec 	bl	80105a8 <dwt_write32bitoffsetreg>
 80125d0:	68a3      	ldr	r3, [r4, #8]
 80125d2:	2200      	movs	r2, #0
 80125d4:	4962      	ldr	r1, [pc, #392]	; (8012760 <dwt_ioctl+0x474>)
 80125d6:	4630      	mov	r0, r6
 80125d8:	f7fd ffe6 	bl	80105a8 <dwt_write32bitoffsetreg>
 80125dc:	68e3      	ldr	r3, [r4, #12]
 80125de:	2200      	movs	r2, #0
 80125e0:	4960      	ldr	r1, [pc, #384]	; (8012764 <dwt_ioctl+0x478>)
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7fd ffe0 	bl	80105a8 <dwt_write32bitoffsetreg>
 80125e8:	2500      	movs	r5, #0
 80125ea:	f001 bd81 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80125ee:	2c00      	cmp	r4, #0
 80125f0:	f001 8586 	beq.w	8014100 <dwt_ioctl+0x1e14>
 80125f4:	8823      	ldrh	r3, [r4, #0]
 80125f6:	6865      	ldr	r5, [r4, #4]
 80125f8:	2d03      	cmp	r5, #3
 80125fa:	f201 8583 	bhi.w	8014104 <dwt_ioctl+0x1e18>
 80125fe:	e8df f005 	tbb	[pc, r5]
 8012602:	0802      	.short	0x0802
 8012604:	160f      	.short	0x160f
 8012606:	2200      	movs	r2, #0
 8012608:	4957      	ldr	r1, [pc, #348]	; (8012768 <dwt_ioctl+0x47c>)
 801260a:	f7fd ff62 	bl	80104d2 <dwt_write16bitoffsetreg>
 801260e:	f001 bd6f 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012612:	2202      	movs	r2, #2
 8012614:	4954      	ldr	r1, [pc, #336]	; (8012768 <dwt_ioctl+0x47c>)
 8012616:	f7fd ff5c 	bl	80104d2 <dwt_write16bitoffsetreg>
 801261a:	2500      	movs	r5, #0
 801261c:	f001 bd68 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012620:	2200      	movs	r2, #0
 8012622:	4952      	ldr	r1, [pc, #328]	; (801276c <dwt_ioctl+0x480>)
 8012624:	f7fd ff55 	bl	80104d2 <dwt_write16bitoffsetreg>
 8012628:	2500      	movs	r5, #0
 801262a:	f001 bd61 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801262e:	2202      	movs	r2, #2
 8012630:	494e      	ldr	r1, [pc, #312]	; (801276c <dwt_ioctl+0x480>)
 8012632:	f7fd ff4e 	bl	80104d2 <dwt_write16bitoffsetreg>
 8012636:	2500      	movs	r5, #0
 8012638:	f001 bd5a 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801263c:	2c00      	cmp	r4, #0
 801263e:	f001 8563 	beq.w	8014108 <dwt_ioctl+0x1e1c>
 8012642:	7823      	ldrb	r3, [r4, #0]
 8012644:	005b      	lsls	r3, r3, #1
 8012646:	f003 0306 	and.w	r3, r3, #6
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	f06f 0306 	mvn.w	r3, #6
 8012650:	2200      	movs	r2, #0
 8012652:	4947      	ldr	r1, [pc, #284]	; (8012770 <dwt_ioctl+0x484>)
 8012654:	f7fe fcae 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8012658:	2500      	movs	r5, #0
 801265a:	f001 bd49 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801265e:	f7fe fccd 	bl	8010ffc <ull_enablegpioclocks>
 8012662:	2500      	movs	r5, #0
 8012664:	f001 bd44 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012668:	2c00      	cmp	r4, #0
 801266a:	f001 854f 	beq.w	801410c <dwt_ioctl+0x1e20>
 801266e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012670:	7b1b      	ldrb	r3, [r3, #12]
 8012672:	7023      	strb	r3, [r4, #0]
 8012674:	2500      	movs	r5, #0
 8012676:	f001 bd3b 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801267a:	2c00      	cmp	r4, #0
 801267c:	f001 8548 	beq.w	8014110 <dwt_ioctl+0x1e24>
 8012680:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012682:	7a5b      	ldrb	r3, [r3, #9]
 8012684:	7023      	strb	r3, [r4, #0]
 8012686:	2500      	movs	r5, #0
 8012688:	f001 bd32 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801268c:	2c00      	cmp	r4, #0
 801268e:	f001 8541 	beq.w	8014114 <dwt_ioctl+0x1e28>
 8012692:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012694:	7a9b      	ldrb	r3, [r3, #10]
 8012696:	7023      	strb	r3, [r4, #0]
 8012698:	2500      	movs	r5, #0
 801269a:	f001 bd29 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801269e:	2c00      	cmp	r4, #0
 80126a0:	f001 853a 	beq.w	8014118 <dwt_ioctl+0x1e2c>
 80126a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	2500      	movs	r5, #0
 80126ac:	f001 bd20 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80126b0:	2c00      	cmp	r4, #0
 80126b2:	f001 8533 	beq.w	801411c <dwt_ioctl+0x1e30>
 80126b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	6023      	str	r3, [r4, #0]
 80126bc:	2500      	movs	r5, #0
 80126be:	f001 bd17 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80126c2:	f7fe fae1 	bl	8010c88 <ull_signal_rx_buff_free>
 80126c6:	2500      	movs	r5, #0
 80126c8:	f001 bd12 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80126cc:	2c00      	cmp	r4, #0
 80126ce:	f001 8527 	beq.w	8014120 <dwt_ioctl+0x1e34>
 80126d2:	6821      	ldr	r1, [r4, #0]
 80126d4:	f7fd ffa3 	bl	801061e <ull_setrxaftertxdelay>
 80126d8:	2500      	movs	r5, #0
 80126da:	f001 bd09 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80126de:	2c00      	cmp	r4, #0
 80126e0:	f001 8520 	beq.w	8014124 <dwt_ioctl+0x1e38>
 80126e4:	6862      	ldr	r2, [r4, #4]
 80126e6:	7821      	ldrb	r1, [r4, #0]
 80126e8:	f7fe fde8 	bl	80112bc <ull_enablespicrccheck>
 80126ec:	2500      	movs	r5, #0
 80126ee:	f001 bcff 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80126f2:	2c00      	cmp	r4, #0
 80126f4:	f001 8518 	beq.w	8014128 <dwt_ioctl+0x1e3c>
 80126f8:	6865      	ldr	r5, [r4, #4]
 80126fa:	7823      	ldrb	r3, [r4, #0]
 80126fc:	2203      	movs	r2, #3
 80126fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8012702:	f7fe f935 	bl	8010970 <dwt_write8bitoffsetreg>
 8012706:	b94d      	cbnz	r5, 801271c <dwt_ioctl+0x430>
 8012708:	2200      	movs	r2, #0
 801270a:	9200      	str	r2, [sp, #0]
 801270c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8012710:	2110      	movs	r1, #16
 8012712:	4630      	mov	r0, r6
 8012714:	f7ff f94e 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8012718:	f001 bcea 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801271c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	f04f 33ff 	mov.w	r3, #4294967295
 8012726:	2200      	movs	r2, #0
 8012728:	2110      	movs	r1, #16
 801272a:	4630      	mov	r0, r6
 801272c:	f7fe fc42 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8012730:	2500      	movs	r5, #0
 8012732:	f001 bcdd 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012736:	2200      	movs	r2, #0
 8012738:	4611      	mov	r1, r2
 801273a:	f7fd fa56 	bl	800fbea <dwt_read32bitoffsetreg>
 801273e:	68b2      	ldr	r2, [r6, #8]
 8012740:	6813      	ldr	r3, [r2, #0]
 8012742:	4043      	eors	r3, r0
 8012744:	6852      	ldr	r2, [r2, #4]
 8012746:	4213      	tst	r3, r2
 8012748:	bf14      	ite	ne
 801274a:	f04f 35ff 	movne.w	r5, #4294967295
 801274e:	2500      	moveq	r5, #0
 8012750:	f001 bcce 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012754:	000f0030 	.word	0x000f0030
 8012758:	00010054 	.word	0x00010054
 801275c:	00010058 	.word	0x00010058
 8012760:	0001005c 	.word	0x0001005c
 8012764:	00010060 	.word	0x00010060
 8012768:	0001000c 	.word	0x0001000c
 801276c:	00010010 	.word	0x00010010
 8012770:	00010008 	.word	0x00010008
 8012774:	2c00      	cmp	r4, #0
 8012776:	f001 84d9 	beq.w	801412c <dwt_ioctl+0x1e40>
 801277a:	7821      	ldrb	r1, [r4, #0]
 801277c:	f7fe fdba 	bl	80112f4 <ull_configciadiag>
 8012780:	2500      	movs	r5, #0
 8012782:	f001 bcb5 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012786:	b942      	cbnz	r2, 801279a <dwt_ioctl+0x4ae>
 8012788:	2200      	movs	r2, #0
 801278a:	9200      	str	r2, [sp, #0]
 801278c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8012790:	49d2      	ldr	r1, [pc, #840]	; (8012adc <dwt_ioctl+0x7f0>)
 8012792:	f7ff f90f 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8012796:	f001 bcab 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801279a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127a4:	2200      	movs	r2, #0
 80127a6:	49cd      	ldr	r1, [pc, #820]	; (8012adc <dwt_ioctl+0x7f0>)
 80127a8:	f7ff f904 	bl	80119b4 <dwt_modify16bitoffsetreg>
 80127ac:	2500      	movs	r5, #0
 80127ae:	f001 bc9f 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80127b2:	f002 0201 	and.w	r2, r2, #1
 80127b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127ba:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80127be:	2a00      	cmp	r2, #0
 80127c0:	bf08      	it	eq
 80127c2:	460b      	moveq	r3, r1
 80127c4:	02d2      	lsls	r2, r2, #11
 80127c6:	f015 0f02 	tst.w	r5, #2
 80127ca:	bf12      	itee	ne
 80127cc:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80127d0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127d4:	b29b      	uxtheq	r3, r3
 80127d6:	9200      	str	r2, [sp, #0]
 80127d8:	2200      	movs	r2, #0
 80127da:	49c0      	ldr	r1, [pc, #768]	; (8012adc <dwt_ioctl+0x7f0>)
 80127dc:	f7ff f8ea 	bl	80119b4 <dwt_modify16bitoffsetreg>
 80127e0:	2500      	movs	r5, #0
 80127e2:	f001 bc85 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80127e6:	4611      	mov	r1, r2
 80127e8:	f7fd ff2e 	bl	8010648 <ull_setfinegraintxseq>
 80127ec:	2500      	movs	r5, #0
 80127ee:	f001 bc7f 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80127f2:	4611      	mov	r1, r2
 80127f4:	f7fd ff3c 	bl	8010670 <ull_setlnapamode>
 80127f8:	2500      	movs	r5, #0
 80127fa:	f001 bc79 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80127fe:	2c00      	cmp	r4, #0
 8012800:	f001 8496 	beq.w	8014130 <dwt_ioctl+0x1e44>
 8012804:	2200      	movs	r2, #0
 8012806:	49b6      	ldr	r1, [pc, #728]	; (8012ae0 <dwt_ioctl+0x7f4>)
 8012808:	f7fd fa44 	bl	800fc94 <dwt_read8bitoffsetreg>
 801280c:	7020      	strb	r0, [r4, #0]
 801280e:	2500      	movs	r5, #0
 8012810:	f001 bc6e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012814:	4621      	mov	r1, r4
 8012816:	f7fd ff4b 	bl	80106b0 <ull_configurestskey>
 801281a:	2500      	movs	r5, #0
 801281c:	f001 bc68 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012820:	4621      	mov	r1, r4
 8012822:	f7fd ff69 	bl	80106f8 <ull_configurestsiv>
 8012826:	2500      	movs	r5, #0
 8012828:	f001 bc62 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801282c:	f7fe fd98 	bl	8011360 <ull_configurestsloadiv>
 8012830:	2500      	movs	r5, #0
 8012832:	f001 bc5d 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012836:	4611      	mov	r1, r2
 8012838:	f7fd ff82 	bl	8010740 <ull_configmrxlut>
 801283c:	2500      	movs	r5, #0
 801283e:	f001 bc57 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012842:	f7fe feb3 	bl	80115ac <ull_restoreconfig>
 8012846:	2500      	movs	r5, #0
 8012848:	f001 bc52 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801284c:	2c00      	cmp	r4, #0
 801284e:	f001 8471 	beq.w	8014134 <dwt_ioctl+0x1e48>
 8012852:	7821      	ldrb	r1, [r4, #0]
 8012854:	f7ff f8c8 	bl	80119e8 <ull_configurestsmode>
 8012858:	2500      	movs	r5, #0
 801285a:	f001 bc49 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801285e:	2c00      	cmp	r4, #0
 8012860:	f001 846a 	beq.w	8014138 <dwt_ioctl+0x1e4c>
 8012864:	8821      	ldrh	r1, [r4, #0]
 8012866:	f7fd fe44 	bl	80104f2 <ull_setrxantennadelay>
 801286a:	2500      	movs	r5, #0
 801286c:	f001 bc40 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012870:	2c00      	cmp	r4, #0
 8012872:	f001 8463 	beq.w	801413c <dwt_ioctl+0x1e50>
 8012876:	f7fd f9e0 	bl	800fc3a <ull_getrxantennadelay>
 801287a:	8020      	strh	r0, [r4, #0]
 801287c:	2500      	movs	r5, #0
 801287e:	f001 bc37 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012882:	2c00      	cmp	r4, #0
 8012884:	f001 845c 	beq.w	8014140 <dwt_ioctl+0x1e54>
 8012888:	8821      	ldrh	r1, [r4, #0]
 801288a:	f7fd fe3a 	bl	8010502 <ull_settxantennadelay>
 801288e:	2500      	movs	r5, #0
 8012890:	f001 bc2e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012894:	2c00      	cmp	r4, #0
 8012896:	f001 8455 	beq.w	8014144 <dwt_ioctl+0x1e58>
 801289a:	f7fd f9d5 	bl	800fc48 <ull_gettxantennadelay>
 801289e:	8020      	strh	r0, [r4, #0]
 80128a0:	2500      	movs	r5, #0
 80128a2:	f001 bc25 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80128a6:	2c00      	cmp	r4, #0
 80128a8:	f001 844e 	beq.w	8014148 <dwt_ioctl+0x1e5c>
 80128ac:	88a3      	ldrh	r3, [r4, #4]
 80128ae:	88e2      	ldrh	r2, [r4, #6]
 80128b0:	6821      	ldr	r1, [r4, #0]
 80128b2:	9100      	str	r1, [sp, #0]
 80128b4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80128b8:	f7fd fe00 	bl	80104bc <dwt_writetodevice>
 80128bc:	2500      	movs	r5, #0
 80128be:	f001 bc17 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80128c2:	2c00      	cmp	r4, #0
 80128c4:	f001 8442 	beq.w	801414c <dwt_ioctl+0x1e60>
 80128c8:	88a3      	ldrh	r3, [r4, #4]
 80128ca:	88e2      	ldrh	r2, [r4, #6]
 80128cc:	6821      	ldr	r1, [r4, #0]
 80128ce:	9100      	str	r1, [sp, #0]
 80128d0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80128d4:	f7fd f97f 	bl	800fbd6 <dwt_readfromdevice>
 80128d8:	2500      	movs	r5, #0
 80128da:	f001 bc09 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80128de:	2c00      	cmp	r4, #0
 80128e0:	f001 8436 	beq.w	8014150 <dwt_ioctl+0x1e64>
 80128e4:	88e3      	ldrh	r3, [r4, #6]
 80128e6:	88a2      	ldrh	r2, [r4, #4]
 80128e8:	6821      	ldr	r1, [r4, #0]
 80128ea:	f7fe f80b 	bl	8010904 <ull_readrxdata>
 80128ee:	2500      	movs	r5, #0
 80128f0:	f001 bbfe 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80128f4:	2c00      	cmp	r4, #0
 80128f6:	f001 842d 	beq.w	8014154 <dwt_ioctl+0x1e68>
 80128fa:	88e3      	ldrh	r3, [r4, #6]
 80128fc:	6822      	ldr	r2, [r4, #0]
 80128fe:	88a1      	ldrh	r1, [r4, #4]
 8012900:	f7fe f990 	bl	8010c24 <ull_writetxdata>
 8012904:	2500      	movs	r5, #0
 8012906:	f001 bbf3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801290a:	4611      	mov	r1, r2
 801290c:	f7ff fc56 	bl	80121bc <ull_rxenable>
 8012910:	2500      	movs	r5, #0
 8012912:	f001 bbed 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012916:	2c00      	cmp	r4, #0
 8012918:	f001 841e 	beq.w	8014158 <dwt_ioctl+0x1e6c>
 801291c:	7923      	ldrb	r3, [r4, #4]
 801291e:	8862      	ldrh	r2, [r4, #2]
 8012920:	8821      	ldrh	r1, [r4, #0]
 8012922:	f7fe fc97 	bl	8011254 <ull_writetxfctrl>
 8012926:	2500      	movs	r5, #0
 8012928:	f001 bbe2 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801292c:	2c00      	cmp	r4, #0
 801292e:	f001 8415 	beq.w	801415c <dwt_ioctl+0x1e70>
 8012932:	f7fd f98f 	bl	800fc54 <ull_readclockoffset>
 8012936:	8020      	strh	r0, [r4, #0]
 8012938:	2500      	movs	r5, #0
 801293a:	f001 bbd9 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801293e:	2c00      	cmp	r4, #0
 8012940:	f001 840e 	beq.w	8014160 <dwt_ioctl+0x1e74>
 8012944:	f7fd f9b4 	bl	800fcb0 <ull_readcarrierintegrator>
 8012948:	6020      	str	r0, [r4, #0]
 801294a:	2500      	movs	r5, #0
 801294c:	f001 bbd0 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012950:	f7fe f866 	bl	8010a20 <ull_clearaonconfig>
 8012954:	2500      	movs	r5, #0
 8012956:	f001 bbcb 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801295a:	2c00      	cmp	r4, #0
 801295c:	f001 8402 	beq.w	8014164 <dwt_ioctl+0x1e78>
 8012960:	8861      	ldrh	r1, [r4, #2]
 8012962:	f7fe fe53 	bl	801160c <ull_calcbandwidthadj>
 8012966:	7020      	strb	r0, [r4, #0]
 8012968:	2500      	movs	r5, #0
 801296a:	f001 bbc1 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801296e:	4621      	mov	r1, r4
 8012970:	f7fd f9be 	bl	800fcf0 <ull_readdiagnostics>
 8012974:	2500      	movs	r5, #0
 8012976:	f001 bbbb 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801297a:	2c00      	cmp	r4, #0
 801297c:	f001 83f4 	beq.w	8014168 <dwt_ioctl+0x1e7c>
 8012980:	2201      	movs	r2, #1
 8012982:	2170      	movs	r1, #112	; 0x70
 8012984:	f7fd f931 	bl	800fbea <dwt_read32bitoffsetreg>
 8012988:	6020      	str	r0, [r4, #0]
 801298a:	2500      	movs	r5, #0
 801298c:	f001 bbb0 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012990:	2c00      	cmp	r4, #0
 8012992:	f001 83eb 	beq.w	801416c <dwt_ioctl+0x1e80>
 8012996:	2200      	movs	r2, #0
 8012998:	2170      	movs	r1, #112	; 0x70
 801299a:	f7fd f926 	bl	800fbea <dwt_read32bitoffsetreg>
 801299e:	6020      	str	r0, [r4, #0]
 80129a0:	2500      	movs	r5, #0
 80129a2:	f001 bba5 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80129a6:	9400      	str	r4, [sp, #0]
 80129a8:	2305      	movs	r3, #5
 80129aa:	2200      	movs	r2, #0
 80129ac:	2170      	movs	r1, #112	; 0x70
 80129ae:	f7fd f912 	bl	800fbd6 <dwt_readfromdevice>
 80129b2:	2500      	movs	r5, #0
 80129b4:	f001 bb9c 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80129b8:	2c00      	cmp	r4, #0
 80129ba:	f001 83d9 	beq.w	8014170 <dwt_ioctl+0x1e84>
 80129be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80129c0:	7b9b      	ldrb	r3, [r3, #14]
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d015      	beq.n	80129f2 <dwt_ioctl+0x706>
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	d11a      	bne.n	8012a00 <dwt_ioctl+0x714>
 80129ca:	2216      	movs	r2, #22
 80129cc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80129d0:	f7fd f921 	bl	800fc16 <dwt_read16bitoffsetreg>
 80129d4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80129d8:	b283      	uxth	r3, r0
 80129da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80129de:	d004      	beq.n	80129ea <dwt_ioctl+0x6fe>
 80129e0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80129e4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80129e8:	b218      	sxth	r0, r3
 80129ea:	8020      	strh	r0, [r4, #0]
 80129ec:	2500      	movs	r5, #0
 80129ee:	f001 bb7f 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80129f2:	2202      	movs	r2, #2
 80129f4:	493b      	ldr	r1, [pc, #236]	; (8012ae4 <dwt_ioctl+0x7f8>)
 80129f6:	f7fd f90e 	bl	800fc16 <dwt_read16bitoffsetreg>
 80129fa:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80129fe:	e7eb      	b.n	80129d8 <dwt_ioctl+0x6ec>
 8012a00:	2202      	movs	r2, #2
 8012a02:	4939      	ldr	r1, [pc, #228]	; (8012ae8 <dwt_ioctl+0x7fc>)
 8012a04:	f7fd f907 	bl	800fc16 <dwt_read16bitoffsetreg>
 8012a08:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8012a0c:	e7e4      	b.n	80129d8 <dwt_ioctl+0x6ec>
 8012a0e:	9400      	str	r4, [sp, #0]
 8012a10:	2306      	movs	r3, #6
 8012a12:	2200      	movs	r2, #0
 8012a14:	4935      	ldr	r1, [pc, #212]	; (8012aec <dwt_ioctl+0x800>)
 8012a16:	f7fd f8de 	bl	800fbd6 <dwt_readfromdevice>
 8012a1a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	db06      	blt.n	8012a30 <dwt_ioctl+0x744>
 8012a22:	7963      	ldrb	r3, [r4, #5]
 8012a24:	f003 0301 	and.w	r3, r3, #1
 8012a28:	7163      	strb	r3, [r4, #5]
 8012a2a:	2500      	movs	r5, #0
 8012a2c:	f001 bb60 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012a30:	23ff      	movs	r3, #255	; 0xff
 8012a32:	70a3      	strb	r3, [r4, #2]
 8012a34:	70e3      	strb	r3, [r4, #3]
 8012a36:	7123      	strb	r3, [r4, #4]
 8012a38:	7163      	strb	r3, [r4, #5]
 8012a3a:	e7f2      	b.n	8012a22 <dwt_ioctl+0x736>
 8012a3c:	2c00      	cmp	r4, #0
 8012a3e:	f001 8399 	beq.w	8014174 <dwt_ioctl+0x1e88>
 8012a42:	2201      	movs	r2, #1
 8012a44:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8012a48:	f7fd f924 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012a4c:	7020      	strb	r0, [r4, #0]
 8012a4e:	2500      	movs	r5, #0
 8012a50:	f001 bb4e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012a54:	2c00      	cmp	r4, #0
 8012a56:	f001 838f 	beq.w	8014178 <dwt_ioctl+0x1e8c>
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8012a60:	f7fd f918 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012a64:	7020      	strb	r0, [r4, #0]
 8012a66:	2500      	movs	r5, #0
 8012a68:	f001 bb42 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012a6c:	2c00      	cmp	r4, #0
 8012a6e:	f001 8385 	beq.w	801417c <dwt_ioctl+0x1e90>
 8012a72:	88a2      	ldrh	r2, [r4, #4]
 8012a74:	6821      	ldr	r1, [r4, #0]
 8012a76:	f7fe fb17 	bl	80110a8 <_dwt_otpprogword32>
 8012a7a:	2500      	movs	r5, #0
 8012a7c:	f001 bb38 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012a80:	2c00      	cmp	r4, #0
 8012a82:	f001 837d 	beq.w	8014180 <dwt_ioctl+0x1e94>
 8012a86:	6825      	ldr	r5, [r4, #0]
 8012a88:	88a4      	ldrh	r4, [r4, #4]
 8012a8a:	4622      	mov	r2, r4
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	f7fe fb0b 	bl	80110a8 <_dwt_otpprogword32>
 8012a92:	4621      	mov	r1, r4
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7fd fd65 	bl	8010564 <_dwt_otpread>
 8012a9a:	1a2d      	subs	r5, r5, r0
 8012a9c:	bf18      	it	ne
 8012a9e:	f04f 35ff 	movne.w	r5, #4294967295
 8012aa2:	f001 bb25 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012aa6:	2a02      	cmp	r2, #2
 8012aa8:	d00f      	beq.n	8012aca <dwt_ioctl+0x7de>
 8012aaa:	4c11      	ldr	r4, [pc, #68]	; (8012af0 <dwt_ioctl+0x804>)
 8012aac:	2300      	movs	r3, #0
 8012aae:	461a      	mov	r2, r3
 8012ab0:	4621      	mov	r1, r4
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f7fd ff5c 	bl	8010970 <dwt_write8bitoffsetreg>
 8012ab8:	2302      	movs	r3, #2
 8012aba:	2200      	movs	r2, #0
 8012abc:	4621      	mov	r1, r4
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f7fd ff56 	bl	8010970 <dwt_write8bitoffsetreg>
 8012ac4:	2500      	movs	r5, #0
 8012ac6:	f001 bb13 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012aca:	2300      	movs	r3, #0
 8012acc:	9300      	str	r3, [sp, #0]
 8012ace:	23fe      	movs	r3, #254	; 0xfe
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	4902      	ldr	r1, [pc, #8]	; (8012adc <dwt_ioctl+0x7f0>)
 8012ad4:	f7fe fbde 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012ad8:	e7e7      	b.n	8012aaa <dwt_ioctl+0x7be>
 8012ada:	bf00      	nop
 8012adc:	00110008 	.word	0x00110008
 8012ae0:	0007001c 	.word	0x0007001c
 8012ae4:	00180014 	.word	0x00180014
 8012ae8:	000c001c 	.word	0x000c001c
 8012aec:	000c0018 	.word	0x000c0018
 8012af0:	000a0004 	.word	0x000a0004
 8012af4:	2c00      	cmp	r4, #0
 8012af6:	f001 8345 	beq.w	8014184 <dwt_ioctl+0x1e98>
 8012afa:	8824      	ldrh	r4, [r4, #0]
 8012afc:	b2e2      	uxtb	r2, r4
 8012afe:	f44f 7181 	mov.w	r1, #258	; 0x102
 8012b02:	f7fd ffe1 	bl	8010ac8 <ull_aon_write>
 8012b06:	0a22      	lsrs	r2, r4, #8
 8012b08:	f240 1103 	movw	r1, #259	; 0x103
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f7fd ffdb 	bl	8010ac8 <ull_aon_write>
 8012b12:	2500      	movs	r5, #0
 8012b14:	f001 baec 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012b18:	2c00      	cmp	r4, #0
 8012b1a:	f001 8335 	beq.w	8014188 <dwt_ioctl+0x1e9c>
 8012b1e:	f8df 835c 	ldr.w	r8, [pc, #860]	; 8012e7c <dwt_ioctl+0xb90>
 8012b22:	2310      	movs	r3, #16
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	23ff      	movs	r3, #255	; 0xff
 8012b28:	2200      	movs	r2, #0
 8012b2a:	4641      	mov	r1, r8
 8012b2c:	f7fe fbb2 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012b30:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012b34:	4630      	mov	r0, r6
 8012b36:	f7fd ffa7 	bl	8010a88 <ull_aon_read>
 8012b3a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8012b3e:	462a      	mov	r2, r5
 8012b40:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012b44:	4630      	mov	r0, r6
 8012b46:	f7fd ffbf 	bl	8010ac8 <ull_aon_write>
 8012b4a:	f045 0204 	orr.w	r2, r5, #4
 8012b4e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012b52:	4630      	mov	r0, r6
 8012b54:	f7fd ffb8 	bl	8010ac8 <ull_aon_write>
 8012b58:	2002      	movs	r0, #2
 8012b5a:	f7ee fc9b 	bl	8001494 <deca_sleep>
 8012b5e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8012b62:	4630      	mov	r0, r6
 8012b64:	f7fd ff90 	bl	8010a88 <ull_aon_read>
 8012b68:	4607      	mov	r7, r0
 8012b6a:	f240 110f 	movw	r1, #271	; 0x10f
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f7fd ff8a 	bl	8010a88 <ull_aon_read>
 8012b74:	4681      	mov	r9, r0
 8012b76:	462a      	mov	r2, r5
 8012b78:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f7fd ffa3 	bl	8010ac8 <ull_aon_write>
 8012b82:	2500      	movs	r5, #0
 8012b84:	9500      	str	r5, [sp, #0]
 8012b86:	23ef      	movs	r3, #239	; 0xef
 8012b88:	462a      	mov	r2, r5
 8012b8a:	4641      	mov	r1, r8
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7fe fb81 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012b92:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8012b96:	8027      	strh	r7, [r4, #0]
 8012b98:	f001 baaa 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012b9c:	2c00      	cmp	r4, #0
 8012b9e:	f001 82f5 	beq.w	801418c <dwt_ioctl+0x1ea0>
 8012ba2:	78a2      	ldrb	r2, [r4, #2]
 8012ba4:	8821      	ldrh	r1, [r4, #0]
 8012ba6:	f7fd ffb7 	bl	8010b18 <ull_configuresleep>
 8012baa:	2500      	movs	r5, #0
 8012bac:	f001 baa0 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012bb0:	2c00      	cmp	r4, #0
 8012bb2:	f001 82ed 	beq.w	8014190 <dwt_ioctl+0x1ea4>
 8012bb6:	6824      	ldr	r4, [r4, #0]
 8012bb8:	f7fd ff32 	bl	8010a20 <ull_clearaonconfig>
 8012bbc:	2001      	movs	r0, #1
 8012bbe:	f7ee fc69 	bl	8001494 <deca_sleep>
 8012bc2:	2303      	movs	r3, #3
 8012bc4:	9300      	str	r3, [sp, #0]
 8012bc6:	23ff      	movs	r3, #255	; 0xff
 8012bc8:	2200      	movs	r2, #0
 8012bca:	49aa      	ldr	r1, [pc, #680]	; (8012e74 <dwt_ioctl+0xb88>)
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7fe fb61 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012bd2:	b97c      	cbnz	r4, 8012bf4 <dwt_ioctl+0x908>
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f7ff fb61 	bl	801229c <ull_softreset_no_sema_fcmd>
 8012bda:	2001      	movs	r0, #1
 8012bdc:	f7ee fc5a 	bl	8001494 <deca_sleep>
 8012be0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012be2:	2500      	movs	r5, #0
 8012be4:	739d      	strb	r5, [r3, #14]
 8012be6:	2202      	movs	r2, #2
 8012be8:	821a      	strh	r2, [r3, #16]
 8012bea:	751d      	strb	r5, [r3, #20]
 8012bec:	755d      	strb	r5, [r3, #21]
 8012bee:	73dd      	strb	r5, [r3, #15]
 8012bf0:	f001 ba7e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f7ff fb65 	bl	80122c4 <ull_softreset_fcmd>
 8012bfa:	e7ee      	b.n	8012bda <dwt_ioctl+0x8ee>
 8012bfc:	2c00      	cmp	r4, #0
 8012bfe:	f001 82c9 	beq.w	8014194 <dwt_ioctl+0x1ea8>
 8012c02:	7823      	ldrb	r3, [r4, #0]
 8012c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c08:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8012c0a:	7353      	strb	r3, [r2, #13]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	499a      	ldr	r1, [pc, #616]	; (8012e78 <dwt_ioctl+0xb8c>)
 8012c10:	f7fd feae 	bl	8010970 <dwt_write8bitoffsetreg>
 8012c14:	2500      	movs	r5, #0
 8012c16:	f001 ba6b 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012c1a:	2c00      	cmp	r4, #0
 8012c1c:	f001 82bc 	beq.w	8014198 <dwt_ioctl+0x1eac>
 8012c20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012c22:	7b5b      	ldrb	r3, [r3, #13]
 8012c24:	7023      	strb	r3, [r4, #0]
 8012c26:	2500      	movs	r5, #0
 8012c28:	f001 ba62 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012c2c:	2101      	movs	r1, #1
 8012c2e:	f7fe f9f5 	bl	801101c <ull_enable_rf_tx>
 8012c32:	4630      	mov	r0, r6
 8012c34:	f7fe fa26 	bl	8011084 <ull_enable_rftx_blocks>
 8012c38:	2101      	movs	r1, #1
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f7fd fc68 	bl	8010510 <ull_force_clocks>
 8012c40:	220f      	movs	r2, #15
 8012c42:	2101      	movs	r1, #1
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7fd fe39 	bl	80108bc <ull_repeated_cw>
 8012c4a:	2500      	movs	r5, #0
 8012c4c:	f001 ba50 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012c50:	2c00      	cmp	r4, #0
 8012c52:	f001 82a3 	beq.w	801419c <dwt_ioctl+0x1eb0>
 8012c56:	6862      	ldr	r2, [r4, #4]
 8012c58:	6821      	ldr	r1, [r4, #0]
 8012c5a:	f7fd fe2f 	bl	80108bc <ull_repeated_cw>
 8012c5e:	2500      	movs	r5, #0
 8012c60:	f001 ba46 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012c64:	2c00      	cmp	r4, #0
 8012c66:	f001 829b 	beq.w	80141a0 <dwt_ioctl+0x1eb4>
 8012c6a:	4d84      	ldr	r5, [pc, #528]	; (8012e7c <dwt_ioctl+0xb90>)
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f7fd f810 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012c74:	4680      	mov	r8, r0
 8012c76:	2302      	movs	r3, #2
 8012c78:	9300      	str	r3, [sp, #0]
 8012c7a:	23ff      	movs	r3, #255	; 0xff
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	4629      	mov	r1, r5
 8012c80:	4630      	mov	r0, r6
 8012c82:	f7fe fb07 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012c86:	2304      	movs	r3, #4
 8012c88:	2200      	movs	r2, #0
 8012c8a:	497d      	ldr	r1, [pc, #500]	; (8012e80 <dwt_ioctl+0xb94>)
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	f7fd fe6f 	bl	8010970 <dwt_write8bitoffsetreg>
 8012c92:	2301      	movs	r3, #1
 8012c94:	2200      	movs	r2, #0
 8012c96:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7fd fe68 	bl	8010970 <dwt_write8bitoffsetreg>
 8012ca0:	4f78      	ldr	r7, [pc, #480]	; (8012e84 <dwt_ioctl+0xb98>)
 8012ca2:	2500      	movs	r5, #0
 8012ca4:	462a      	mov	r2, r5
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7fc fff3 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012cae:	f010 0f01 	tst.w	r0, #1
 8012cb2:	d0f7      	beq.n	8012ca4 <dwt_ioctl+0x9b8>
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f7fc ffab 	bl	800fc16 <dwt_read16bitoffsetreg>
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012cca:	4630      	mov	r0, r6
 8012ccc:	f7fd fe50 	bl	8010970 <dwt_write8bitoffsetreg>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	496a      	ldr	r1, [pc, #424]	; (8012e80 <dwt_ioctl+0xb94>)
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	f7fd fe4a 	bl	8010970 <dwt_write8bitoffsetreg>
 8012cdc:	4643      	mov	r3, r8
 8012cde:	2200      	movs	r2, #0
 8012ce0:	4966      	ldr	r1, [pc, #408]	; (8012e7c <dwt_ioctl+0xb90>)
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f7fd fe44 	bl	8010970 <dwt_write8bitoffsetreg>
 8012ce8:	8025      	strh	r5, [r4, #0]
 8012cea:	2500      	movs	r5, #0
 8012cec:	f001 ba00 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012cf0:	2c00      	cmp	r4, #0
 8012cf2:	f001 8257 	beq.w	80141a4 <dwt_ioctl+0x1eb8>
 8012cf6:	7920      	ldrb	r0, [r4, #4]
 8012cf8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012cfa:	7a9b      	ldrb	r3, [r3, #10]
 8012cfc:	1ac0      	subs	r0, r0, r3
 8012cfe:	f7ee f885 	bl	8000e0c <__aeabi_i2f>
 8012d02:	4961      	ldr	r1, [pc, #388]	; (8012e88 <dwt_ioctl+0xb9c>)
 8012d04:	f7ee f8d6 	bl	8000eb4 <__aeabi_fmul>
 8012d08:	4960      	ldr	r1, [pc, #384]	; (8012e8c <dwt_ioctl+0xba0>)
 8012d0a:	f7ed ffcb 	bl	8000ca4 <__addsf3>
 8012d0e:	6020      	str	r0, [r4, #0]
 8012d10:	2500      	movs	r5, #0
 8012d12:	f001 b9ed 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012d16:	2c00      	cmp	r4, #0
 8012d18:	f001 8246 	beq.w	80141a8 <dwt_ioctl+0x1ebc>
 8012d1c:	7920      	ldrb	r0, [r4, #4]
 8012d1e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012d20:	7a5b      	ldrb	r3, [r3, #9]
 8012d22:	1ac0      	subs	r0, r0, r3
 8012d24:	f7ee f872 	bl	8000e0c <__aeabi_i2f>
 8012d28:	4959      	ldr	r1, [pc, #356]	; (8012e90 <dwt_ioctl+0xba4>)
 8012d2a:	f7ee f8c3 	bl	8000eb4 <__aeabi_fmul>
 8012d2e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8012d32:	f7ee f8bf 	bl	8000eb4 <__aeabi_fmul>
 8012d36:	4957      	ldr	r1, [pc, #348]	; (8012e94 <dwt_ioctl+0xba8>)
 8012d38:	f7ee f970 	bl	800101c <__aeabi_fdiv>
 8012d3c:	4956      	ldr	r1, [pc, #344]	; (8012e98 <dwt_ioctl+0xbac>)
 8012d3e:	f7ed ffb1 	bl	8000ca4 <__addsf3>
 8012d42:	6020      	str	r0, [r4, #0]
 8012d44:	2500      	movs	r5, #0
 8012d46:	f001 b9d3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012d4a:	2c00      	cmp	r4, #0
 8012d4c:	f001 822e 	beq.w	80141ac <dwt_ioctl+0x1ec0>
 8012d50:	6824      	ldr	r4, [r4, #0]
 8012d52:	2101      	movs	r1, #1
 8012d54:	f7fe f962 	bl	801101c <ull_enable_rf_tx>
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7fe f993 	bl	8011084 <ull_enable_rftx_blocks>
 8012d5e:	2101      	movs	r1, #1
 8012d60:	4630      	mov	r0, r6
 8012d62:	f7fd fbd5 	bl	8010510 <ull_force_clocks>
 8012d66:	4621      	mov	r1, r4
 8012d68:	4630      	mov	r0, r6
 8012d6a:	f7fe fcab 	bl	80116c4 <ull_repeated_frames>
 8012d6e:	2500      	movs	r5, #0
 8012d70:	f001 b9be 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012d74:	2500      	movs	r5, #0
 8012d76:	9500      	str	r5, [sp, #0]
 8012d78:	23ef      	movs	r3, #239	; 0xef
 8012d7a:	462a      	mov	r2, r5
 8012d7c:	4947      	ldr	r1, [pc, #284]	; (8012e9c <dwt_ioctl+0xbb0>)
 8012d7e:	f7fe fa89 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012d82:	2105      	movs	r1, #5
 8012d84:	4630      	mov	r0, r6
 8012d86:	f7fd fbc3 	bl	8010510 <ull_force_clocks>
 8012d8a:	2101      	movs	r1, #1
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	f7fd fd77 	bl	8010880 <ull_disable_rf_tx>
 8012d92:	4630      	mov	r0, r6
 8012d94:	f7fd fd6a 	bl	801086c <ull_disable_rftx_blocks>
 8012d98:	f001 b9aa 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012d9c:	2500      	movs	r5, #0
 8012d9e:	9500      	str	r5, [sp, #0]
 8012da0:	23ef      	movs	r3, #239	; 0xef
 8012da2:	462a      	mov	r2, r5
 8012da4:	493d      	ldr	r1, [pc, #244]	; (8012e9c <dwt_ioctl+0xbb0>)
 8012da6:	f7fe fa75 	bl	8011294 <dwt_modify8bitoffsetreg>
 8012daa:	f001 b9a1 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012dae:	2c00      	cmp	r4, #0
 8012db0:	f001 81fe 	beq.w	80141b0 <dwt_ioctl+0x1ec4>
 8012db4:	6821      	ldr	r1, [r4, #0]
 8012db6:	f7fe fc85 	bl	80116c4 <ull_repeated_frames>
 8012dba:	2500      	movs	r5, #0
 8012dbc:	f001 b998 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	4937      	ldr	r1, [pc, #220]	; (8012ea0 <dwt_ioctl+0xbb4>)
 8012dc4:	f7fc ff27 	bl	800fc16 <dwt_read16bitoffsetreg>
 8012dc8:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8012dcc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8012dd0:	bf18      	it	ne
 8012dd2:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8012dd6:	b22d      	sxth	r5, r5
 8012dd8:	8025      	strh	r5, [r4, #0]
 8012dda:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012ddc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012de0:	1aed      	subs	r5, r5, r3
 8012de2:	f001 b985 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012de6:	2c00      	cmp	r4, #0
 8012de8:	f001 81e4 	beq.w	80141b4 <dwt_ioctl+0x1ec8>
 8012dec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012df0:	7a23      	ldrb	r3, [r4, #8]
 8012df2:	f899 2013 	ldrb.w	r2, [r9, #19]
 8012df6:	2aff      	cmp	r2, #255	; 0xff
 8012df8:	f000 8103 	beq.w	8013002 <dwt_ioctl+0xd16>
 8012dfc:	bb93      	cbnz	r3, 8012e64 <dwt_ioctl+0xb78>
 8012dfe:	f8d9 1000 	ldr.w	r1, [r9]
 8012e02:	f7fd fec3 	bl	8010b8c <ull_update_nonce_GCM>
 8012e06:	f899 300c 	ldrb.w	r3, [r9, #12]
 8012e0a:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8012e0e:	18d1      	adds	r1, r2, r3
 8012e10:	f899 2012 	ldrb.w	r2, [r9, #18]
 8012e14:	2a00      	cmp	r2, #0
 8012e16:	d145      	bne.n	8012ea4 <dwt_ioctl+0xbb8>
 8012e18:	f899 0010 	ldrb.w	r0, [r9, #16]
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	bf0b      	itete	eq
 8012e20:	227f      	moveq	r2, #127	; 0x7f
 8012e22:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8012e26:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8012e2a:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8012e2e:	f899 0013 	ldrb.w	r0, [r9, #19]
 8012e32:	1a12      	subs	r2, r2, r0
 8012e34:	3a02      	subs	r2, #2
 8012e36:	4291      	cmp	r1, r2
 8012e38:	f200 80ec 	bhi.w	8013014 <dwt_ioctl+0xd28>
 8012e3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8012e40:	9200      	str	r2, [sp, #0]
 8012e42:	2200      	movs	r2, #0
 8012e44:	4629      	mov	r1, r5
 8012e46:	4630      	mov	r0, r6
 8012e48:	f7fd fb38 	bl	80104bc <dwt_writetodevice>
 8012e4c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8012e50:	f899 200c 	ldrb.w	r2, [r9, #12]
 8012e54:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8012e58:	9100      	str	r1, [sp, #0]
 8012e5a:	4629      	mov	r1, r5
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f7fd fb2d 	bl	80104bc <dwt_writetodevice>
 8012e62:	e030      	b.n	8012ec6 <dwt_ioctl+0xbda>
 8012e64:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8012e68:	f8d9 1000 	ldr.w	r1, [r9]
 8012e6c:	f7fd fe9c 	bl	8010ba8 <ull_update_nonce_CCM>
 8012e70:	e7c9      	b.n	8012e06 <dwt_ioctl+0xb1a>
 8012e72:	bf00      	nop
 8012e74:	00110004 	.word	0x00110004
 8012e78:	00090014 	.word	0x00090014
 8012e7c:	00070048 	.word	0x00070048
 8012e80:	00070034 	.word	0x00070034
 8012e84:	00080004 	.word	0x00080004
 8012e88:	3f866666 	.word	0x3f866666
 8012e8c:	41b00000 	.word	0x41b00000
 8012e90:	3ecccccd 	.word	0x3ecccccd
 8012e94:	437f0000 	.word	0x437f0000
 8012e98:	40400000 	.word	0x40400000
 8012e9c:	000f0028 	.word	0x000f0028
 8012ea0:	00020008 	.word	0x00020008
 8012ea4:	2a01      	cmp	r2, #1
 8012ea6:	f040 80af 	bne.w	8013008 <dwt_ioctl+0xd1c>
 8012eaa:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8012eb4:	bf08      	it	eq
 8012eb6:	237f      	moveq	r3, #127	; 0x7f
 8012eb8:	f899 2013 	ldrb.w	r2, [r9, #19]
 8012ebc:	1a9b      	subs	r3, r3, r2
 8012ebe:	3b02      	subs	r3, #2
 8012ec0:	4299      	cmp	r1, r3
 8012ec2:	f200 80a4 	bhi.w	801300e <dwt_ioctl+0xd22>
 8012ec6:	f899 2010 	ldrb.w	r2, [r9, #16]
 8012eca:	1e53      	subs	r3, r2, #1
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d940      	bls.n	8012f54 <dwt_ioctl+0xc68>
 8012ed2:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012ed6:	1e59      	subs	r1, r3, #1
 8012ed8:	b2c9      	uxtb	r1, r1
 8012eda:	2901      	cmp	r1, #1
 8012edc:	d947      	bls.n	8012f6e <dwt_ioctl+0xc82>
 8012ede:	2b04      	cmp	r3, #4
 8012ee0:	d04c      	beq.n	8012f7c <dwt_ioctl+0xc90>
 8012ee2:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	49ba      	ldr	r1, [pc, #744]	; (80131d4 <dwt_ioctl+0xee8>)
 8012eea:	4630      	mov	r0, r6
 8012eec:	f7fd fb5c 	bl	80105a8 <dwt_write32bitoffsetreg>
 8012ef0:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8012ef4:	4ab8      	ldr	r2, [pc, #736]	; (80131d8 <dwt_ioctl+0xeec>)
 8012ef6:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8012efa:	f899 300c 	ldrb.w	r3, [r9, #12]
 8012efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f02:	4313      	orrs	r3, r2
 8012f04:	2200      	movs	r2, #0
 8012f06:	49b5      	ldr	r1, [pc, #724]	; (80131dc <dwt_ioctl+0xef0>)
 8012f08:	4630      	mov	r0, r6
 8012f0a:	f7fd fb4d 	bl	80105a8 <dwt_write32bitoffsetreg>
 8012f0e:	2301      	movs	r3, #1
 8012f10:	2200      	movs	r2, #0
 8012f12:	49b3      	ldr	r1, [pc, #716]	; (80131e0 <dwt_ioctl+0xef4>)
 8012f14:	4630      	mov	r0, r6
 8012f16:	f7fd fd2b 	bl	8010970 <dwt_write8bitoffsetreg>
 8012f1a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 80131e4 <dwt_ioctl+0xef8>
 8012f1e:	2700      	movs	r7, #0
 8012f20:	463a      	mov	r2, r7
 8012f22:	4641      	mov	r1, r8
 8012f24:	4630      	mov	r0, r6
 8012f26:	f7fc feb5 	bl	800fc94 <dwt_read8bitoffsetreg>
 8012f2a:	f010 0f05 	tst.w	r0, #5
 8012f2e:	d0f7      	beq.n	8012f20 <dwt_ioctl+0xc34>
 8012f30:	4605      	mov	r5, r0
 8012f32:	4603      	mov	r3, r0
 8012f34:	2200      	movs	r2, #0
 8012f36:	49ab      	ldr	r1, [pc, #684]	; (80131e4 <dwt_ioctl+0xef8>)
 8012f38:	4630      	mov	r0, r6
 8012f3a:	f7fd fd19 	bl	8010970 <dwt_write8bitoffsetreg>
 8012f3e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8012f42:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d025      	beq.n	8012f96 <dwt_ioctl+0xcaa>
 8012f4a:	b26b      	sxtb	r3, r5
 8012f4c:	7023      	strb	r3, [r4, #0]
 8012f4e:	2500      	movs	r5, #0
 8012f50:	f001 b8ce 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8012f54:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012f56:	7b9b      	ldrb	r3, [r3, #14]
 8012f58:	2b03      	cmp	r3, #3
 8012f5a:	f001 81af 	beq.w	80142bc <dwt_ioctl+0x1fd0>
 8012f5e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012f62:	1e5a      	subs	r2, r3, #1
 8012f64:	b2d2      	uxtb	r2, r2
 8012f66:	2a01      	cmp	r2, #1
 8012f68:	d912      	bls.n	8012f90 <dwt_ioctl+0xca4>
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	e7b7      	b.n	8012ede <dwt_ioctl+0xbf2>
 8012f6e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012f70:	7b9b      	ldrb	r3, [r3, #14]
 8012f72:	2b03      	cmp	r3, #3
 8012f74:	bf0c      	ite	eq
 8012f76:	2302      	moveq	r3, #2
 8012f78:	2301      	movne	r3, #1
 8012f7a:	e7b2      	b.n	8012ee2 <dwt_ioctl+0xbf6>
 8012f7c:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8012f80:	2910      	cmp	r1, #16
 8012f82:	d9ae      	bls.n	8012ee2 <dwt_ioctl+0xbf6>
 8012f84:	f06f 0303 	mvn.w	r3, #3
 8012f88:	e7e0      	b.n	8012f4c <dwt_ioctl+0xc60>
 8012f8a:	2202      	movs	r2, #2
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	e7a8      	b.n	8012ee2 <dwt_ioctl+0xbf6>
 8012f90:	2201      	movs	r2, #1
 8012f92:	4613      	mov	r3, r2
 8012f94:	e7a5      	b.n	8012ee2 <dwt_ioctl+0xbf6>
 8012f96:	f899 3012 	ldrb.w	r3, [r9, #18]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d1d5      	bne.n	8012f4a <dwt_ioctl+0xc5e>
 8012f9e:	f899 2011 	ldrb.w	r2, [r9, #17]
 8012fa2:	1e53      	subs	r3, r2, #1
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d91b      	bls.n	8012fe2 <dwt_ioctl+0xcf6>
 8012faa:	2a03      	cmp	r2, #3
 8012fac:	bf0c      	ite	eq
 8012fae:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8012fb2:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8012fb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8012fba:	b112      	cbz	r2, 8012fc2 <dwt_ioctl+0xcd6>
 8012fbc:	f899 300c 	ldrb.w	r3, [r9, #12]
 8012fc0:	b9c3      	cbnz	r3, 8012ff4 <dwt_ioctl+0xd08>
 8012fc2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8012fc6:	2900      	cmp	r1, #0
 8012fc8:	d0bf      	beq.n	8012f4a <dwt_ioctl+0xc5e>
 8012fca:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d0bb      	beq.n	8012f4a <dwt_ioctl+0xc5e>
 8012fd2:	f899 200c 	ldrb.w	r2, [r9, #12]
 8012fd6:	9100      	str	r1, [sp, #0]
 8012fd8:	4639      	mov	r1, r7
 8012fda:	4630      	mov	r0, r6
 8012fdc:	f7fc fdfb 	bl	800fbd6 <dwt_readfromdevice>
 8012fe0:	e7b3      	b.n	8012f4a <dwt_ioctl+0xc5e>
 8012fe2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012fe4:	7b9b      	ldrb	r3, [r3, #14]
 8012fe6:	2b03      	cmp	r3, #3
 8012fe8:	bf0c      	ite	eq
 8012fea:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8012fee:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8012ff2:	e7e0      	b.n	8012fb6 <dwt_ioctl+0xcca>
 8012ff4:	9200      	str	r2, [sp, #0]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	4639      	mov	r1, r7
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	f7fc fdeb 	bl	800fbd6 <dwt_readfromdevice>
 8013000:	e7df      	b.n	8012fc2 <dwt_ioctl+0xcd6>
 8013002:	f06f 0302 	mvn.w	r3, #2
 8013006:	e7a1      	b.n	8012f4c <dwt_ioctl+0xc60>
 8013008:	f06f 0301 	mvn.w	r3, #1
 801300c:	e79e      	b.n	8012f4c <dwt_ioctl+0xc60>
 801300e:	f04f 33ff 	mov.w	r3, #4294967295
 8013012:	e79b      	b.n	8012f4c <dwt_ioctl+0xc60>
 8013014:	f04f 33ff 	mov.w	r3, #4294967295
 8013018:	e798      	b.n	8012f4c <dwt_ioctl+0xc60>
 801301a:	7a23      	ldrb	r3, [r4, #8]
 801301c:	79e1      	ldrb	r1, [r4, #7]
 801301e:	79a2      	ldrb	r2, [r4, #6]
 8013020:	00d2      	lsls	r2, r2, #3
 8013022:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8013026:	4313      	orrs	r3, r2
 8013028:	7962      	ldrb	r2, [r4, #5]
 801302a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801302e:	7922      	ldrb	r2, [r4, #4]
 8013030:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013034:	78e2      	ldrb	r2, [r4, #3]
 8013036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801303a:	78a2      	ldrb	r2, [r4, #2]
 801303c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8013040:	7862      	ldrb	r2, [r4, #1]
 8013042:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8013046:	7822      	ldrb	r2, [r4, #0]
 8013048:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801304c:	b29b      	uxth	r3, r3
 801304e:	2200      	movs	r2, #0
 8013050:	4965      	ldr	r1, [pc, #404]	; (80131e8 <dwt_ioctl+0xefc>)
 8013052:	f7fd fa3e 	bl	80104d2 <dwt_write16bitoffsetreg>
 8013056:	2500      	movs	r5, #0
 8013058:	f001 b84a 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801305c:	2c00      	cmp	r4, #0
 801305e:	f001 80ab 	beq.w	80141b8 <dwt_ioctl+0x1ecc>
 8013062:	7863      	ldrb	r3, [r4, #1]
 8013064:	b133      	cbz	r3, 8013074 <dwt_ioctl+0xd88>
 8013066:	085b      	lsrs	r3, r3, #1
 8013068:	3b01      	subs	r3, #1
 801306a:	b2db      	uxtb	r3, r3
 801306c:	7023      	strb	r3, [r4, #0]
 801306e:	2500      	movs	r5, #0
 8013070:	f001 b83e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013074:	2300      	movs	r3, #0
 8013076:	e7f9      	b.n	801306c <dwt_ioctl+0xd80>
 8013078:	2200      	movs	r2, #0
 801307a:	495c      	ldr	r1, [pc, #368]	; (80131ec <dwt_ioctl+0xf00>)
 801307c:	f7fc fdb5 	bl	800fbea <dwt_read32bitoffsetreg>
 8013080:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8013084:	8023      	strh	r3, [r4, #0]
 8013086:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801308a:	8060      	strh	r0, [r4, #2]
 801308c:	2200      	movs	r2, #0
 801308e:	4958      	ldr	r1, [pc, #352]	; (80131f0 <dwt_ioctl+0xf04>)
 8013090:	4630      	mov	r0, r6
 8013092:	f7fc fdaa 	bl	800fbea <dwt_read32bitoffsetreg>
 8013096:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801309a:	80a3      	strh	r3, [r4, #4]
 801309c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80130a0:	80e0      	strh	r0, [r4, #6]
 80130a2:	2200      	movs	r2, #0
 80130a4:	4953      	ldr	r1, [pc, #332]	; (80131f4 <dwt_ioctl+0xf08>)
 80130a6:	4630      	mov	r0, r6
 80130a8:	f7fc fd9f 	bl	800fbea <dwt_read32bitoffsetreg>
 80130ac:	7220      	strb	r0, [r4, #8]
 80130ae:	0c00      	lsrs	r0, r0, #16
 80130b0:	7260      	strb	r0, [r4, #9]
 80130b2:	2200      	movs	r2, #0
 80130b4:	4950      	ldr	r1, [pc, #320]	; (80131f8 <dwt_ioctl+0xf0c>)
 80130b6:	4630      	mov	r0, r6
 80130b8:	f7fc fd97 	bl	800fbea <dwt_read32bitoffsetreg>
 80130bc:	f3c0 430b 	ubfx	r3, r0, #16, #12
 80130c0:	81a3      	strh	r3, [r4, #12]
 80130c2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80130c6:	8160      	strh	r0, [r4, #10]
 80130c8:	2200      	movs	r2, #0
 80130ca:	494c      	ldr	r1, [pc, #304]	; (80131fc <dwt_ioctl+0xf10>)
 80130cc:	4630      	mov	r0, r6
 80130ce:	f7fc fd8c 	bl	800fbea <dwt_read32bitoffsetreg>
 80130d2:	f3c0 430b 	ubfx	r3, r0, #16, #12
 80130d6:	f8a4 300f 	strh.w	r3, [r4, #15]
 80130da:	73a0      	strb	r0, [r4, #14]
 80130dc:	2200      	movs	r2, #0
 80130de:	4948      	ldr	r1, [pc, #288]	; (8013200 <dwt_ioctl+0xf14>)
 80130e0:	4630      	mov	r0, r6
 80130e2:	f7fc fd82 	bl	800fbea <dwt_read32bitoffsetreg>
 80130e6:	7460      	strb	r0, [r4, #17]
 80130e8:	0c00      	lsrs	r0, r0, #16
 80130ea:	74a0      	strb	r0, [r4, #18]
 80130ec:	2200      	movs	r2, #0
 80130ee:	4945      	ldr	r1, [pc, #276]	; (8013204 <dwt_ioctl+0xf18>)
 80130f0:	4630      	mov	r0, r6
 80130f2:	f7fc fd7a 	bl	800fbea <dwt_read32bitoffsetreg>
 80130f6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80130fa:	f8a4 3013 	strh.w	r3, [r4, #19]
 80130fe:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8013102:	f8a4 0015 	strh.w	r0, [r4, #21]
 8013106:	2200      	movs	r2, #0
 8013108:	493f      	ldr	r1, [pc, #252]	; (8013208 <dwt_ioctl+0xf1c>)
 801310a:	4630      	mov	r0, r6
 801310c:	f7fc fdc2 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013110:	75e0      	strb	r0, [r4, #23]
 8013112:	2500      	movs	r5, #0
 8013114:	f000 bfec 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013118:	4611      	mov	r1, r2
 801311a:	f7fd fca1 	bl	8010a60 <ull_configeventcounters>
 801311e:	2500      	movs	r5, #0
 8013120:	f000 bfe6 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013124:	2c00      	cmp	r4, #0
 8013126:	f001 8049 	beq.w	80141bc <dwt_ioctl+0x1ed0>
 801312a:	8823      	ldrh	r3, [r4, #0]
 801312c:	2200      	movs	r2, #0
 801312e:	4937      	ldr	r1, [pc, #220]	; (801320c <dwt_ioctl+0xf20>)
 8013130:	f7fd f9cf 	bl	80104d2 <dwt_write16bitoffsetreg>
 8013134:	2500      	movs	r5, #0
 8013136:	f000 bfdb 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801313a:	2c00      	cmp	r4, #0
 801313c:	f001 8040 	beq.w	80141c0 <dwt_ioctl+0x1ed4>
 8013140:	6825      	ldr	r5, [r4, #0]
 8013142:	b935      	cbnz	r5, 8013152 <dwt_ioctl+0xe66>
 8013144:	2300      	movs	r3, #0
 8013146:	461a      	mov	r2, r3
 8013148:	4931      	ldr	r1, [pc, #196]	; (8013210 <dwt_ioctl+0xf24>)
 801314a:	f7fd f9c2 	bl	80104d2 <dwt_write16bitoffsetreg>
 801314e:	f000 bfcf 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013152:	7962      	ldrb	r2, [r4, #5]
 8013154:	7923      	ldrb	r3, [r4, #4]
 8013156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801315a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801315e:	2200      	movs	r2, #0
 8013160:	492b      	ldr	r1, [pc, #172]	; (8013210 <dwt_ioctl+0xf24>)
 8013162:	f7fd f9b6 	bl	80104d2 <dwt_write16bitoffsetreg>
 8013166:	2500      	movs	r5, #0
 8013168:	f000 bfc2 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801316c:	2c00      	cmp	r4, #0
 801316e:	f001 8029 	beq.w	80141c4 <dwt_ioctl+0x1ed8>
 8013172:	6823      	ldr	r3, [r4, #0]
 8013174:	b94b      	cbnz	r3, 801318a <dwt_ioctl+0xe9e>
 8013176:	2500      	movs	r5, #0
 8013178:	9500      	str	r5, [sp, #0]
 801317a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801317e:	462a      	mov	r2, r5
 8013180:	2110      	movs	r1, #16
 8013182:	f7fe fc17 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013186:	f000 bfb3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801318a:	2200      	movs	r2, #0
 801318c:	2134      	movs	r1, #52	; 0x34
 801318e:	f7fd fa0b 	bl	80105a8 <dwt_write32bitoffsetreg>
 8013192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013196:	9300      	str	r3, [sp, #0]
 8013198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801319c:	2200      	movs	r2, #0
 801319e:	2110      	movs	r1, #16
 80131a0:	4630      	mov	r0, r6
 80131a2:	f7fe fc07 	bl	80119b4 <dwt_modify16bitoffsetreg>
 80131a6:	2500      	movs	r5, #0
 80131a8:	f000 bfa2 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80131ac:	2c00      	cmp	r4, #0
 80131ae:	f001 800b 	beq.w	80141c8 <dwt_ioctl+0x1edc>
 80131b2:	8861      	ldrh	r1, [r4, #2]
 80131b4:	f7fd fc68 	bl	8010a88 <ull_aon_read>
 80131b8:	7020      	strb	r0, [r4, #0]
 80131ba:	2500      	movs	r5, #0
 80131bc:	f000 bf98 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80131c0:	2c00      	cmp	r4, #0
 80131c2:	f001 8003 	beq.w	80141cc <dwt_ioctl+0x1ee0>
 80131c6:	78a2      	ldrb	r2, [r4, #2]
 80131c8:	8821      	ldrh	r1, [r4, #0]
 80131ca:	f7fd fc7d 	bl	8010ac8 <ull_aon_write>
 80131ce:	2500      	movs	r5, #0
 80131d0:	f000 bf8e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80131d4:	00010044 	.word	0x00010044
 80131d8:	0001ff80 	.word	0x0001ff80
 80131dc:	00010048 	.word	0x00010048
 80131e0:	0001004c 	.word	0x0001004c
 80131e4:	00010050 	.word	0x00010050
 80131e8:	00010030 	.word	0x00010030
 80131ec:	000f0004 	.word	0x000f0004
 80131f0:	000f0008 	.word	0x000f0008
 80131f4:	000f000c 	.word	0x000f000c
 80131f8:	000f0010 	.word	0x000f0010
 80131fc:	000f0014 	.word	0x000f0014
 8013200:	000f0018 	.word	0x000f0018
 8013204:	000f001c 	.word	0x000f001c
 8013208:	000f0020 	.word	0x000f0020
 801320c:	00060004 	.word	0x00060004
 8013210:	0011001c 	.word	0x0011001c
 8013214:	4bd5      	ldr	r3, [pc, #852]	; (801356c <dwt_ioctl+0x1280>)
 8013216:	4ad6      	ldr	r2, [pc, #856]	; (8013570 <dwt_ioctl+0x1284>)
 8013218:	2d01      	cmp	r5, #1
 801321a:	bf18      	it	ne
 801321c:	4613      	movne	r3, r2
 801321e:	2d01      	cmp	r5, #1
 8013220:	49d4      	ldr	r1, [pc, #848]	; (8013574 <dwt_ioctl+0x1288>)
 8013222:	bf18      	it	ne
 8013224:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8013228:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801322a:	7b92      	ldrb	r2, [r2, #14]
 801322c:	2a01      	cmp	r2, #1
 801322e:	d012      	beq.n	8013256 <dwt_ioctl+0xf6a>
 8013230:	2a03      	cmp	r2, #3
 8013232:	d117      	bne.n	8013264 <dwt_ioctl+0xf78>
 8013234:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8013238:	3a01      	subs	r2, #1
 801323a:	441a      	add	r2, r3
 801323c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8013240:	f7fc fce9 	bl	800fc16 <dwt_read16bitoffsetreg>
 8013244:	09c0      	lsrs	r0, r0, #7
 8013246:	8020      	strh	r0, [r4, #0]
 8013248:	8825      	ldrh	r5, [r4, #0]
 801324a:	3500      	adds	r5, #0
 801324c:	bf18      	it	ne
 801324e:	2501      	movne	r5, #1
 8013250:	426d      	negs	r5, r5
 8013252:	f000 bf4d 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013256:	2202      	movs	r2, #2
 8013258:	4619      	mov	r1, r3
 801325a:	f7fc fcdc 	bl	800fc16 <dwt_read16bitoffsetreg>
 801325e:	09c0      	lsrs	r0, r0, #7
 8013260:	8020      	strh	r0, [r4, #0]
 8013262:	e7f1      	b.n	8013248 <dwt_ioctl+0xf5c>
 8013264:	2202      	movs	r2, #2
 8013266:	f7fc fcd6 	bl	800fc16 <dwt_read16bitoffsetreg>
 801326a:	09c0      	lsrs	r0, r0, #7
 801326c:	8020      	strh	r0, [r4, #0]
 801326e:	e7eb      	b.n	8013248 <dwt_ioctl+0xf5c>
 8013270:	2c00      	cmp	r4, #0
 8013272:	f000 87ad 	beq.w	80141d0 <dwt_ioctl+0x1ee4>
 8013276:	7821      	ldrb	r1, [r4, #0]
 8013278:	f7fe fbda 	bl	8011a30 <ull_setleds>
 801327c:	2500      	movs	r5, #0
 801327e:	f000 bf37 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013282:	4611      	mov	r1, r2
 8013284:	f7fe fa36 	bl	80116f4 <ull_setdwstate>
 8013288:	2500      	movs	r5, #0
 801328a:	f000 bf31 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801328e:	9400      	str	r4, [sp, #0]
 8013290:	2304      	movs	r3, #4
 8013292:	2200      	movs	r2, #0
 8013294:	211c      	movs	r1, #28
 8013296:	f7fc fc9e 	bl	800fbd6 <dwt_readfromdevice>
 801329a:	2500      	movs	r5, #0
 801329c:	f000 bf28 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80132a0:	2c00      	cmp	r4, #0
 80132a2:	f000 8797 	beq.w	80141d4 <dwt_ioctl+0x1ee8>
 80132a6:	2202      	movs	r2, #2
 80132a8:	2144      	movs	r1, #68	; 0x44
 80132aa:	f7fc fcb4 	bl	800fc16 <dwt_read16bitoffsetreg>
 80132ae:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80132b2:	7020      	strb	r0, [r4, #0]
 80132b4:	2500      	movs	r5, #0
 80132b6:	f000 bf1b 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80132ba:	2c00      	cmp	r4, #0
 80132bc:	f000 878c 	beq.w	80141d8 <dwt_ioctl+0x1eec>
 80132c0:	2200      	movs	r2, #0
 80132c2:	2144      	movs	r1, #68	; 0x44
 80132c4:	f7fc fce6 	bl	800fc94 <dwt_read8bitoffsetreg>
 80132c8:	f000 0001 	and.w	r0, r0, #1
 80132cc:	7020      	strb	r0, [r4, #0]
 80132ce:	2500      	movs	r5, #0
 80132d0:	f000 bf0e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80132d4:	2c00      	cmp	r4, #0
 80132d6:	f000 8781 	beq.w	80141dc <dwt_ioctl+0x1ef0>
 80132da:	8862      	ldrh	r2, [r4, #2]
 80132dc:	8821      	ldrh	r1, [r4, #0]
 80132de:	f7fe fa67 	bl	80117b0 <ull_configureframefilter>
 80132e2:	2500      	movs	r5, #0
 80132e4:	f000 bf04 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80132e8:	9400      	str	r4, [sp, #0]
 80132ea:	2308      	movs	r3, #8
 80132ec:	2200      	movs	r2, #0
 80132ee:	2104      	movs	r1, #4
 80132f0:	f7fd f8e4 	bl	80104bc <dwt_writetodevice>
 80132f4:	2500      	movs	r5, #0
 80132f6:	f000 befb 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80132fa:	9400      	str	r4, [sp, #0]
 80132fc:	2308      	movs	r3, #8
 80132fe:	2200      	movs	r2, #0
 8013300:	2104      	movs	r1, #4
 8013302:	f7fc fc68 	bl	800fbd6 <dwt_readfromdevice>
 8013306:	2500      	movs	r5, #0
 8013308:	f000 bef2 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801330c:	2c00      	cmp	r4, #0
 801330e:	f000 8767 	beq.w	80141e0 <dwt_ioctl+0x1ef4>
 8013312:	8823      	ldrh	r3, [r4, #0]
 8013314:	2202      	movs	r2, #2
 8013316:	210c      	movs	r1, #12
 8013318:	f7fd f8db 	bl	80104d2 <dwt_write16bitoffsetreg>
 801331c:	2500      	movs	r5, #0
 801331e:	f000 bee7 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013322:	2c00      	cmp	r4, #0
 8013324:	f000 875e 	beq.w	80141e4 <dwt_ioctl+0x1ef8>
 8013328:	8823      	ldrh	r3, [r4, #0]
 801332a:	2200      	movs	r2, #0
 801332c:	210c      	movs	r1, #12
 801332e:	f7fd f8d0 	bl	80104d2 <dwt_write16bitoffsetreg>
 8013332:	2500      	movs	r5, #0
 8013334:	f000 bedc 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013338:	4621      	mov	r1, r4
 801333a:	f7fd f89d 	bl	8010478 <ull_readrxtimestamp>
 801333e:	2500      	movs	r5, #0
 8013340:	f000 bed6 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013344:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013346:	7b9b      	ldrb	r3, [r3, #14]
 8013348:	2b01      	cmp	r3, #1
 801334a:	d00b      	beq.n	8013364 <dwt_ioctl+0x1078>
 801334c:	2b03      	cmp	r3, #3
 801334e:	d112      	bne.n	8013376 <dwt_ioctl+0x108a>
 8013350:	9400      	str	r4, [sp, #0]
 8013352:	2305      	movs	r3, #5
 8013354:	2220      	movs	r2, #32
 8013356:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801335a:	f7fc fc3c 	bl	800fbd6 <dwt_readfromdevice>
 801335e:	2500      	movs	r5, #0
 8013360:	f000 bec6 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013364:	9400      	str	r4, [sp, #0]
 8013366:	2305      	movs	r3, #5
 8013368:	2200      	movs	r2, #0
 801336a:	4983      	ldr	r1, [pc, #524]	; (8013578 <dwt_ioctl+0x128c>)
 801336c:	f7fc fc33 	bl	800fbd6 <dwt_readfromdevice>
 8013370:	2500      	movs	r5, #0
 8013372:	f000 bebd 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013376:	9400      	str	r4, [sp, #0]
 8013378:	2305      	movs	r3, #5
 801337a:	2200      	movs	r2, #0
 801337c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8013380:	f7fc fc29 	bl	800fbd6 <dwt_readfromdevice>
 8013384:	2500      	movs	r5, #0
 8013386:	f000 beb3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801338a:	2500      	movs	r5, #0
 801338c:	f804 5b01 	strb.w	r5, [r4], #1
 8013390:	9400      	str	r4, [sp, #0]
 8013392:	2304      	movs	r3, #4
 8013394:	462a      	mov	r2, r5
 8013396:	216c      	movs	r1, #108	; 0x6c
 8013398:	f7fc fc1d 	bl	800fbd6 <dwt_readfromdevice>
 801339c:	f000 bea8 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80133a0:	2c00      	cmp	r4, #0
 80133a2:	f000 8721 	beq.w	80141e8 <dwt_ioctl+0x1efc>
 80133a6:	2201      	movs	r2, #1
 80133a8:	2160      	movs	r1, #96	; 0x60
 80133aa:	f7fc fc1e 	bl	800fbea <dwt_read32bitoffsetreg>
 80133ae:	6020      	str	r0, [r4, #0]
 80133b0:	2500      	movs	r5, #0
 80133b2:	f000 be9d 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80133b6:	2c00      	cmp	r4, #0
 80133b8:	f000 8718 	beq.w	80141ec <dwt_ioctl+0x1f00>
 80133bc:	2200      	movs	r2, #0
 80133be:	2160      	movs	r1, #96	; 0x60
 80133c0:	f7fc fc13 	bl	800fbea <dwt_read32bitoffsetreg>
 80133c4:	6020      	str	r0, [r4, #0]
 80133c6:	2500      	movs	r5, #0
 80133c8:	f000 be92 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80133cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80133ce:	7b9b      	ldrb	r3, [r3, #14]
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d00b      	beq.n	80133ec <dwt_ioctl+0x1100>
 80133d4:	2b03      	cmp	r3, #3
 80133d6:	d112      	bne.n	80133fe <dwt_ioctl+0x1112>
 80133d8:	9400      	str	r4, [sp, #0]
 80133da:	2305      	movs	r3, #5
 80133dc:	2228      	movs	r2, #40	; 0x28
 80133de:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80133e2:	f7fc fbf8 	bl	800fbd6 <dwt_readfromdevice>
 80133e6:	2500      	movs	r5, #0
 80133e8:	f000 be82 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80133ec:	9400      	str	r4, [sp, #0]
 80133ee:	2305      	movs	r3, #5
 80133f0:	2200      	movs	r2, #0
 80133f2:	4962      	ldr	r1, [pc, #392]	; (801357c <dwt_ioctl+0x1290>)
 80133f4:	f7fc fbef 	bl	800fbd6 <dwt_readfromdevice>
 80133f8:	2500      	movs	r5, #0
 80133fa:	f000 be79 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80133fe:	9400      	str	r4, [sp, #0]
 8013400:	2305      	movs	r3, #5
 8013402:	2200      	movs	r2, #0
 8013404:	495e      	ldr	r1, [pc, #376]	; (8013580 <dwt_ioctl+0x1294>)
 8013406:	f7fc fbe6 	bl	800fbd6 <dwt_readfromdevice>
 801340a:	2500      	movs	r5, #0
 801340c:	f000 be70 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013410:	2c00      	cmp	r4, #0
 8013412:	f000 86ed 	beq.w	80141f0 <dwt_ioctl+0x1f04>
 8013416:	2200      	movs	r2, #0
 8013418:	211c      	movs	r1, #28
 801341a:	f7fc fbe6 	bl	800fbea <dwt_read32bitoffsetreg>
 801341e:	6020      	str	r0, [r4, #0]
 8013420:	2500      	movs	r5, #0
 8013422:	f000 be65 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013426:	2c00      	cmp	r4, #0
 8013428:	f000 86e4 	beq.w	80141f4 <dwt_ioctl+0x1f08>
 801342c:	8825      	ldrh	r5, [r4, #0]
 801342e:	6867      	ldr	r7, [r4, #4]
 8013430:	7a23      	ldrb	r3, [r4, #8]
 8013432:	2b00      	cmp	r3, #0
 8013434:	f000 86e0 	beq.w	80141f8 <dwt_ioctl+0x1f0c>
 8013438:	463c      	mov	r4, r7
 801343a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801343e:	4629      	mov	r1, r5
 8013440:	4630      	mov	r0, r6
 8013442:	f7fd f88f 	bl	8010564 <_dwt_otpread>
 8013446:	f844 0b04 	str.w	r0, [r4], #4
 801344a:	3501      	adds	r5, #1
 801344c:	b2ad      	uxth	r5, r5
 801344e:	42bc      	cmp	r4, r7
 8013450:	d1f5      	bne.n	801343e <dwt_ioctl+0x1152>
 8013452:	2500      	movs	r5, #0
 8013454:	f000 be4c 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013458:	2c00      	cmp	r4, #0
 801345a:	f000 86cf 	beq.w	80141fc <dwt_ioctl+0x1f10>
 801345e:	7821      	ldrb	r1, [r4, #0]
 8013460:	f7fd fb8c 	bl	8010b7c <ull_setplenfine>
 8013464:	2500      	movs	r5, #0
 8013466:	f000 be43 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801346a:	f7fe f9c5 	bl	80117f8 <ull_run_pgfcal>
 801346e:	4605      	mov	r5, r0
 8013470:	f000 be3e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013474:	4611      	mov	r1, r2
 8013476:	f7fe fb29 	bl	8011acc <ull_pgf_cal>
 801347a:	4605      	mov	r5, r0
 801347c:	f000 be38 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013480:	2c00      	cmp	r4, #0
 8013482:	f000 86bd 	beq.w	8014200 <dwt_ioctl+0x1f14>
 8013486:	78a5      	ldrb	r5, [r4, #2]
 8013488:	2101      	movs	r1, #1
 801348a:	f7fd f841 	bl	8010510 <ull_force_clocks>
 801348e:	2100      	movs	r1, #0
 8013490:	4630      	mov	r0, r6
 8013492:	f7fd fdc3 	bl	801101c <ull_enable_rf_tx>
 8013496:	4630      	mov	r0, r6
 8013498:	f7fd fdf4 	bl	8011084 <ull_enable_rftx_blocks>
 801349c:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 80134a0:	2200      	movs	r2, #0
 80134a2:	4938      	ldr	r1, [pc, #224]	; (8013584 <dwt_ioctl+0x1298>)
 80134a4:	4630      	mov	r0, r6
 80134a6:	f7fd fa63 	bl	8010970 <dwt_write8bitoffsetreg>
 80134aa:	2301      	movs	r3, #1
 80134ac:	9300      	str	r3, [sp, #0]
 80134ae:	23ff      	movs	r3, #255	; 0xff
 80134b0:	2200      	movs	r2, #0
 80134b2:	4935      	ldr	r1, [pc, #212]	; (8013588 <dwt_ioctl+0x129c>)
 80134b4:	4630      	mov	r0, r6
 80134b6:	f7fd feed 	bl	8011294 <dwt_modify8bitoffsetreg>
 80134ba:	4f33      	ldr	r7, [pc, #204]	; (8013588 <dwt_ioctl+0x129c>)
 80134bc:	2500      	movs	r5, #0
 80134be:	462a      	mov	r2, r5
 80134c0:	4639      	mov	r1, r7
 80134c2:	4630      	mov	r0, r6
 80134c4:	f7fc fbe6 	bl	800fc94 <dwt_read8bitoffsetreg>
 80134c8:	f010 0f01 	tst.w	r0, #1
 80134cc:	d1f7      	bne.n	80134be <dwt_ioctl+0x11d2>
 80134ce:	2200      	movs	r2, #0
 80134d0:	492e      	ldr	r1, [pc, #184]	; (801358c <dwt_ioctl+0x12a0>)
 80134d2:	4630      	mov	r0, r6
 80134d4:	f7fc fb9f 	bl	800fc16 <dwt_read16bitoffsetreg>
 80134d8:	4605      	mov	r5, r0
 80134da:	4630      	mov	r0, r6
 80134dc:	f7fd f9c6 	bl	801086c <ull_disable_rftx_blocks>
 80134e0:	2100      	movs	r1, #0
 80134e2:	4630      	mov	r0, r6
 80134e4:	f7fd f9cc 	bl	8010880 <ull_disable_rf_tx>
 80134e8:	2105      	movs	r1, #5
 80134ea:	4630      	mov	r0, r6
 80134ec:	f7fd f810 	bl	8010510 <ull_force_clocks>
 80134f0:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80134f4:	8025      	strh	r5, [r4, #0]
 80134f6:	2500      	movs	r5, #0
 80134f8:	f000 bdfa 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80134fc:	2102      	movs	r1, #2
 80134fe:	f7fe f8f9 	bl	80116f4 <ull_setdwstate>
 8013502:	2101      	movs	r1, #1
 8013504:	4630      	mov	r0, r6
 8013506:	f7fe f8f5 	bl	80116f4 <ull_setdwstate>
 801350a:	2432      	movs	r4, #50	; 0x32
 801350c:	f04f 0814 	mov.w	r8, #20
 8013510:	2700      	movs	r7, #0
 8013512:	2544      	movs	r5, #68	; 0x44
 8013514:	4640      	mov	r0, r8
 8013516:	f7ed ffc8 	bl	80014aa <deca_usleep>
 801351a:	463a      	mov	r2, r7
 801351c:	4629      	mov	r1, r5
 801351e:	4630      	mov	r0, r6
 8013520:	f7fc fbb8 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013524:	f010 0f02 	tst.w	r0, #2
 8013528:	d105      	bne.n	8013536 <dwt_ioctl+0x124a>
 801352a:	1e63      	subs	r3, r4, #1
 801352c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8013530:	d1f0      	bne.n	8013514 <dwt_ioctl+0x1228>
 8013532:	2501      	movs	r5, #1
 8013534:	e000      	b.n	8013538 <dwt_ioctl+0x124c>
 8013536:	2500      	movs	r5, #0
 8013538:	426d      	negs	r5, r5
 801353a:	f000 bdd9 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801353e:	2c00      	cmp	r4, #0
 8013540:	f000 8660 	beq.w	8014204 <dwt_ioctl+0x1f18>
 8013544:	7823      	ldrb	r3, [r4, #0]
 8013546:	031b      	lsls	r3, r3, #12
 8013548:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801354c:	7862      	ldrb	r2, [r4, #1]
 801354e:	2a01      	cmp	r2, #1
 8013550:	bf08      	it	eq
 8013552:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 801355c:	2200      	movs	r2, #0
 801355e:	490c      	ldr	r1, [pc, #48]	; (8013590 <dwt_ioctl+0x12a4>)
 8013560:	f7fd fd28 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013564:	2500      	movs	r5, #0
 8013566:	f000 bdc3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801356a:	bf00      	nop
 801356c:	00180034 	.word	0x00180034
 8013570:	0018002c 	.word	0x0018002c
 8013574:	000c0014 	.word	0x000c0014
 8013578:	00180020 	.word	0x00180020
 801357c:	00180028 	.word	0x00180028
 8013580:	000c0008 	.word	0x000c0008
 8013584:	0007001c 	.word	0x0007001c
 8013588:	00080010 	.word	0x00080010
 801358c:	00080014 	.word	0x00080014
 8013590:	00070014 	.word	0x00070014
 8013594:	2c00      	cmp	r4, #0
 8013596:	f000 8637 	beq.w	8014208 <dwt_ioctl+0x1f1c>
 801359a:	6862      	ldr	r2, [r4, #4]
 801359c:	6821      	ldr	r1, [r4, #0]
 801359e:	f7fd fe3b 	bl	8011218 <ull_setgpiomode>
 80135a2:	2500      	movs	r5, #0
 80135a4:	f000 bda4 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80135a8:	2c00      	cmp	r4, #0
 80135aa:	f000 862f 	beq.w	801420c <dwt_ioctl+0x1f20>
 80135ae:	8823      	ldrh	r3, [r4, #0]
 80135b0:	2200      	movs	r2, #0
 80135b2:	49c4      	ldr	r1, [pc, #784]	; (80138c4 <dwt_ioctl+0x15d8>)
 80135b4:	f7fc ff8d 	bl	80104d2 <dwt_write16bitoffsetreg>
 80135b8:	2500      	movs	r5, #0
 80135ba:	f000 bd99 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80135be:	2c00      	cmp	r4, #0
 80135c0:	f000 8626 	beq.w	8014210 <dwt_ioctl+0x1f24>
 80135c4:	6862      	ldr	r2, [r4, #4]
 80135c6:	8821      	ldrh	r1, [r4, #0]
 80135c8:	f7fe fab0 	bl	8011b2c <ull_setgpiovalue>
 80135cc:	2500      	movs	r5, #0
 80135ce:	f000 bd8f 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80135d2:	2c00      	cmp	r4, #0
 80135d4:	f000 861e 	beq.w	8014214 <dwt_ioctl+0x1f28>
 80135d8:	7865      	ldrb	r5, [r4, #1]
 80135da:	7823      	ldrb	r3, [r4, #0]
 80135dc:	b18b      	cbz	r3, 8013602 <dwt_ioctl+0x1316>
 80135de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80135e0:	2200      	movs	r2, #0
 80135e2:	739a      	strb	r2, [r3, #14]
 80135e4:	f04f 33ff 	mov.w	r3, #4294967295
 80135e8:	2208      	movs	r2, #8
 80135ea:	b37d      	cbz	r5, 801364c <dwt_ioctl+0x1360>
 80135ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80135f0:	9200      	str	r2, [sp, #0]
 80135f2:	2200      	movs	r2, #0
 80135f4:	2110      	movs	r1, #16
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7fd fcdc 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 80135fc:	2500      	movs	r5, #0
 80135fe:	f000 bd77 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013602:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013604:	2201      	movs	r2, #1
 8013606:	739a      	strb	r2, [r3, #14]
 8013608:	2318      	movs	r3, #24
 801360a:	2200      	movs	r2, #0
 801360c:	49ae      	ldr	r1, [pc, #696]	; (80138c8 <dwt_ioctl+0x15dc>)
 801360e:	f7fc ffcb 	bl	80105a8 <dwt_write32bitoffsetreg>
 8013612:	23e8      	movs	r3, #232	; 0xe8
 8013614:	2200      	movs	r2, #0
 8013616:	49ad      	ldr	r1, [pc, #692]	; (80138cc <dwt_ioctl+0x15e0>)
 8013618:	4630      	mov	r0, r6
 801361a:	f7fc ffc5 	bl	80105a8 <dwt_write32bitoffsetreg>
 801361e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013620:	7d9b      	ldrb	r3, [r3, #22]
 8013622:	085b      	lsrs	r3, r3, #1
 8013624:	d003      	beq.n	801362e <dwt_ioctl+0x1342>
 8013626:	f06f 0308 	mvn.w	r3, #8
 801362a:	2200      	movs	r2, #0
 801362c:	e7dd      	b.n	80135ea <dwt_ioctl+0x12fe>
 801362e:	2301      	movs	r3, #1
 8013630:	2200      	movs	r2, #0
 8013632:	49a7      	ldr	r1, [pc, #668]	; (80138d0 <dwt_ioctl+0x15e4>)
 8013634:	4630      	mov	r0, r6
 8013636:	f7fd f99b 	bl	8010970 <dwt_write8bitoffsetreg>
 801363a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801363c:	7d93      	ldrb	r3, [r2, #22]
 801363e:	f043 0302 	orr.w	r3, r3, #2
 8013642:	7593      	strb	r3, [r2, #22]
 8013644:	f06f 0308 	mvn.w	r3, #8
 8013648:	2200      	movs	r2, #0
 801364a:	e7ce      	b.n	80135ea <dwt_ioctl+0x12fe>
 801364c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013650:	e7ce      	b.n	80135f0 <dwt_ioctl+0x1304>
 8013652:	2c00      	cmp	r4, #0
 8013654:	f000 85e0 	beq.w	8014218 <dwt_ioctl+0x1f2c>
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	2200      	movs	r2, #0
 801365c:	2130      	movs	r1, #48	; 0x30
 801365e:	f7fc ffa3 	bl	80105a8 <dwt_write32bitoffsetreg>
 8013662:	2500      	movs	r5, #0
 8013664:	f000 bd44 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013668:	2c00      	cmp	r4, #0
 801366a:	f000 85d7 	beq.w	801421c <dwt_ioctl+0x1f30>
 801366e:	2200      	movs	r2, #0
 8013670:	4629      	mov	r1, r5
 8013672:	f7fc faba 	bl	800fbea <dwt_read32bitoffsetreg>
 8013676:	6020      	str	r0, [r4, #0]
 8013678:	2500      	movs	r5, #0
 801367a:	f000 bd39 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801367e:	4623      	mov	r3, r4
 8013680:	2200      	movs	r2, #0
 8013682:	4629      	mov	r1, r5
 8013684:	f7fc ff90 	bl	80105a8 <dwt_write32bitoffsetreg>
 8013688:	2500      	movs	r5, #0
 801368a:	f000 bd31 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801368e:	2c00      	cmp	r4, #0
 8013690:	f000 85c6 	beq.w	8014220 <dwt_ioctl+0x1f34>
 8013694:	2203      	movs	r2, #3
 8013696:	498f      	ldr	r1, [pc, #572]	; (80138d4 <dwt_ioctl+0x15e8>)
 8013698:	f7fc fafc 	bl	800fc94 <dwt_read8bitoffsetreg>
 801369c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80136a0:	7020      	strb	r0, [r4, #0]
 80136a2:	2500      	movs	r5, #0
 80136a4:	f000 bd24 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80136a8:	2c00      	cmp	r4, #0
 80136aa:	f000 85bb 	beq.w	8014224 <dwt_ioctl+0x1f38>
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	2200      	movs	r2, #0
 80136b2:	2144      	movs	r1, #68	; 0x44
 80136b4:	f7fc ff78 	bl	80105a8 <dwt_write32bitoffsetreg>
 80136b8:	2500      	movs	r5, #0
 80136ba:	f000 bd19 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80136be:	2c00      	cmp	r4, #0
 80136c0:	f000 85b2 	beq.w	8014228 <dwt_ioctl+0x1f3c>
 80136c4:	8823      	ldrh	r3, [r4, #0]
 80136c6:	2200      	movs	r2, #0
 80136c8:	2148      	movs	r1, #72	; 0x48
 80136ca:	f7fc ff02 	bl	80104d2 <dwt_write16bitoffsetreg>
 80136ce:	2500      	movs	r5, #0
 80136d0:	f000 bd0e 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80136d4:	2c00      	cmp	r4, #0
 80136d6:	f000 85a9 	beq.w	801422c <dwt_ioctl+0x1f40>
 80136da:	2200      	movs	r2, #0
 80136dc:	2144      	movs	r1, #68	; 0x44
 80136de:	f7fc fa84 	bl	800fbea <dwt_read32bitoffsetreg>
 80136e2:	6020      	str	r0, [r4, #0]
 80136e4:	2500      	movs	r5, #0
 80136e6:	f000 bd03 	b.w	80140f0 <dwt_ioctl+0x1e04>
 80136ea:	2c00      	cmp	r4, #0
 80136ec:	f000 85a0 	beq.w	8014230 <dwt_ioctl+0x1f44>
 80136f0:	2200      	movs	r2, #0
 80136f2:	2148      	movs	r1, #72	; 0x48
 80136f4:	f7fc fa8f 	bl	800fc16 <dwt_read16bitoffsetreg>
 80136f8:	6020      	str	r0, [r4, #0]
 80136fa:	2500      	movs	r5, #0
 80136fc:	f000 bcf8 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013700:	2c00      	cmp	r4, #0
 8013702:	f000 8597 	beq.w	8014234 <dwt_ioctl+0x1f48>
 8013706:	7823      	ldrb	r3, [r4, #0]
 8013708:	2200      	movs	r2, #0
 801370a:	4973      	ldr	r1, [pc, #460]	; (80138d8 <dwt_ioctl+0x15ec>)
 801370c:	f7fd f930 	bl	8010970 <dwt_write8bitoffsetreg>
 8013710:	2500      	movs	r5, #0
 8013712:	f000 bced 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013716:	2c00      	cmp	r4, #0
 8013718:	f000 858e 	beq.w	8014238 <dwt_ioctl+0x1f4c>
 801371c:	2200      	movs	r2, #0
 801371e:	2144      	movs	r1, #68	; 0x44
 8013720:	f7fc fab8 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013724:	7020      	strb	r0, [r4, #0]
 8013726:	2500      	movs	r5, #0
 8013728:	f000 bce2 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801372c:	2c00      	cmp	r4, #0
 801372e:	f000 8585 	beq.w	801423c <dwt_ioctl+0x1f50>
 8013732:	f7fd f929 	bl	8010988 <ull_getframelength>
 8013736:	6020      	str	r0, [r4, #0]
 8013738:	2500      	movs	r5, #0
 801373a:	f000 bcd9 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801373e:	2c00      	cmp	r4, #0
 8013740:	f000 857e 	beq.w	8014240 <dwt_ioctl+0x1f54>
 8013744:	2200      	movs	r2, #0
 8013746:	4965      	ldr	r1, [pc, #404]	; (80138dc <dwt_ioctl+0x15f0>)
 8013748:	f7fc fa65 	bl	800fc16 <dwt_read16bitoffsetreg>
 801374c:	8020      	strh	r0, [r4, #0]
 801374e:	2500      	movs	r5, #0
 8013750:	f000 bcce 	b.w	80140f0 <dwt_ioctl+0x1e04>
 8013754:	2c00      	cmp	r4, #0
 8013756:	f000 8575 	beq.w	8014244 <dwt_ioctl+0x1f58>
 801375a:	2200      	movs	r2, #0
 801375c:	4960      	ldr	r1, [pc, #384]	; (80138e0 <dwt_ioctl+0x15f4>)
 801375e:	f7fc fa44 	bl	800fbea <dwt_read32bitoffsetreg>
 8013762:	6020      	str	r0, [r4, #0]
 8013764:	2500      	movs	r5, #0
 8013766:	f000 bcc3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801376a:	2c00      	cmp	r4, #0
 801376c:	f000 856c 	beq.w	8014248 <dwt_ioctl+0x1f5c>
 8013770:	8823      	ldrh	r3, [r4, #0]
 8013772:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801377c:	2200      	movs	r2, #0
 801377e:	4958      	ldr	r1, [pc, #352]	; (80138e0 <dwt_ioctl+0x15f4>)
 8013780:	f7fe f918 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013784:	2500      	movs	r5, #0
 8013786:	f000 bcb3 	b.w	80140f0 <dwt_ioctl+0x1e04>
 801378a:	2c00      	cmp	r4, #0
 801378c:	f000 855e 	beq.w	801424c <dwt_ioctl+0x1f60>
 8013790:	88a7      	ldrh	r7, [r4, #4]
 8013792:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8013796:	7b23      	ldrb	r3, [r4, #12]
 8013798:	9306      	str	r3, [sp, #24]
 801379a:	6922      	ldr	r2, [r4, #16]
 801379c:	9204      	str	r2, [sp, #16]
 801379e:	6962      	ldr	r2, [r4, #20]
 80137a0:	9205      	str	r2, [sp, #20]
 80137a2:	f00b 0203 	and.w	r2, fp, #3
 80137a6:	f3cb 0585 	ubfx	r5, fp, #2, #6
 80137aa:	2b05      	cmp	r3, #5
 80137ac:	d147      	bne.n	801383e <dwt_ioctl+0x1552>
 80137ae:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 80137b2:	bf28      	it	cs
 80137b4:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 80137b8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80138e8 <dwt_ioctl+0x15fc>
 80137bc:	2f04      	cmp	r7, #4
 80137be:	d805      	bhi.n	80137cc <dwt_ioctl+0x14e0>
 80137c0:	eb09 0305 	add.w	r3, r9, r5
 80137c4:	785b      	ldrb	r3, [r3, #1]
 80137c6:	3b05      	subs	r3, #5
 80137c8:	429f      	cmp	r7, r3
 80137ca:	db40      	blt.n	801384e <dwt_ioctl+0x1562>
 80137cc:	2a01      	cmp	r2, #1
 80137ce:	f200 80c8 	bhi.w	8013962 <dwt_ioctl+0x1676>
 80137d2:	4b44      	ldr	r3, [pc, #272]	; (80138e4 <dwt_ioctl+0x15f8>)
 80137d4:	5c99      	ldrb	r1, [r3, r2]
 80137d6:	463e      	mov	r6, r7
 80137d8:	42b9      	cmp	r1, r7
 80137da:	f280 80c4 	bge.w	8013966 <dwt_ioctl+0x167a>
 80137de:	1c50      	adds	r0, r2, #1
 80137e0:	fa53 f080 	uxtab	r0, r3, r0
 80137e4:	2300      	movs	r3, #0
 80137e6:	440b      	add	r3, r1
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	3201      	adds	r2, #1
 80137ec:	b2d2      	uxtb	r2, r2
 80137ee:	2a02      	cmp	r2, #2
 80137f0:	d005      	beq.n	80137fe <dwt_ioctl+0x1512>
 80137f2:	f810 1b01 	ldrb.w	r1, [r0], #1
 80137f6:	eba6 0c03 	sub.w	ip, r6, r3
 80137fa:	4561      	cmp	r1, ip
 80137fc:	dbf3      	blt.n	80137e6 <dwt_ioctl+0x14fa>
 80137fe:	429f      	cmp	r7, r3
 8013800:	bf08      	it	eq
 8013802:	9503      	streq	r5, [sp, #12]
 8013804:	f000 80b4 	beq.w	8013970 <dwt_ioctl+0x1684>
 8013808:	f107 0c05 	add.w	ip, r7, #5
 801380c:	fa1f fc8c 	uxth.w	ip, ip
 8013810:	2680      	movs	r6, #128	; 0x80
 8013812:	2100      	movs	r1, #0
 8013814:	9107      	str	r1, [sp, #28]
 8013816:	9103      	str	r1, [sp, #12]
 8013818:	9108      	str	r1, [sp, #32]
 801381a:	2005      	movs	r0, #5
 801381c:	46b8      	mov	r8, r7
 801381e:	4287      	cmp	r7, r0
 8013820:	bf38      	it	cc
 8013822:	4680      	movcc	r8, r0
 8013824:	f1a8 0805 	sub.w	r8, r8, #5
 8013828:	fa1f f888 	uxth.w	r8, r8
 801382c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80138e4 <dwt_ioctl+0x15f8>
 8013830:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013834:	4683      	mov	fp, r0
 8013836:	4620      	mov	r0, r4
 8013838:	460c      	mov	r4, r1
 801383a:	4686      	mov	lr, r0
 801383c:	e031      	b.n	80138a2 <dwt_ioctl+0x15b6>
 801383e:	f240 1331 	movw	r3, #305	; 0x131
 8013842:	429f      	cmp	r7, r3
 8013844:	bf28      	it	cs
 8013846:	461f      	movcs	r7, r3
 8013848:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80138ec <dwt_ioctl+0x1600>
 801384c:	e7b6      	b.n	80137bc <dwt_ioctl+0x14d0>
 801384e:	2300      	movs	r3, #0
 8013850:	9a05      	ldr	r2, [sp, #20]
 8013852:	8013      	strh	r3, [r2, #0]
 8013854:	9a04      	ldr	r2, [sp, #16]
 8013856:	f8c2 b000 	str.w	fp, [r2]
 801385a:	e098      	b.n	801398e <dwt_ioctl+0x16a2>
 801385c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8013860:	4674      	mov	r4, lr
 8013862:	2300      	movs	r3, #0
 8013864:	9a05      	ldr	r2, [sp, #20]
 8013866:	8013      	strh	r3, [r2, #0]
 8013868:	9b04      	ldr	r3, [sp, #16]
 801386a:	f8c3 b000 	str.w	fp, [r3]
 801386e:	f04f 33ff 	mov.w	r3, #4294967295
 8013872:	e08c      	b.n	801398e <dwt_ioctl+0x16a2>
 8013874:	fa1f fb80 	uxth.w	fp, r0
 8013878:	9207      	str	r2, [sp, #28]
 801387a:	9503      	str	r5, [sp, #12]
 801387c:	9308      	str	r3, [sp, #32]
 801387e:	2401      	movs	r4, #1
 8013880:	2d3f      	cmp	r5, #63	; 0x3f
 8013882:	d050      	beq.n	8013926 <dwt_ioctl+0x163a>
 8013884:	2900      	cmp	r1, #0
 8013886:	d139      	bne.n	80138fc <dwt_ioctl+0x1610>
 8013888:	3501      	adds	r5, #1
 801388a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801388e:	f819 0005 	ldrb.w	r0, [r9, r5]
 8013892:	4403      	add	r3, r0
 8013894:	b29b      	uxth	r3, r3
 8013896:	429f      	cmp	r7, r3
 8013898:	d067      	beq.n	801396a <dwt_ioctl+0x167e>
 801389a:	3e01      	subs	r6, #1
 801389c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80138a0:	d0dc      	beq.n	801385c <dwt_ioctl+0x1570>
 80138a2:	4543      	cmp	r3, r8
 80138a4:	d924      	bls.n	80138f0 <dwt_ioctl+0x1604>
 80138a6:	4563      	cmp	r3, ip
 80138a8:	d222      	bcs.n	80138f0 <dwt_ioctl+0x1604>
 80138aa:	1af8      	subs	r0, r7, r3
 80138ac:	b200      	sxth	r0, r0
 80138ae:	2800      	cmp	r0, #0
 80138b0:	bfb8      	it	lt
 80138b2:	4240      	neglt	r0, r0
 80138b4:	4558      	cmp	r0, fp
 80138b6:	dddd      	ble.n	8013874 <dwt_ioctl+0x1588>
 80138b8:	2c00      	cmp	r4, #0
 80138ba:	d0e1      	beq.n	8013880 <dwt_ioctl+0x1594>
 80138bc:	4674      	mov	r4, lr
 80138be:	9a07      	ldr	r2, [sp, #28]
 80138c0:	9b08      	ldr	r3, [sp, #32]
 80138c2:	e055      	b.n	8013970 <dwt_ioctl+0x1684>
 80138c4:	00050008 	.word	0x00050008
 80138c8:	001f000c 	.word	0x001f000c
 80138cc:	001f0010 	.word	0x001f0010
 80138d0:	00010020 	.word	0x00010020
 80138d4:	00030054 	.word	0x00030054
 80138d8:	00010018 	.word	0x00010018
 80138dc:	0005002c 	.word	0x0005002c
 80138e0:	000e001c 	.word	0x000e001c
 80138e4:	08019bbc 	.word	0x08019bbc
 80138e8:	08019b3c 	.word	0x08019b3c
 80138ec:	08019b7c 	.word	0x08019b7c
 80138f0:	b984      	cbnz	r4, 8013914 <dwt_ioctl+0x1628>
 80138f2:	4563      	cmp	r3, ip
 80138f4:	d3c4      	bcc.n	8013880 <dwt_ioctl+0x1594>
 80138f6:	b199      	cbz	r1, 8013920 <dwt_ioctl+0x1634>
 80138f8:	2d3f      	cmp	r5, #63	; 0x3f
 80138fa:	d014      	beq.n	8013926 <dwt_ioctl+0x163a>
 80138fc:	f819 1005 	ldrb.w	r1, [r9, r5]
 8013900:	1a5b      	subs	r3, r3, r1
 8013902:	b29b      	uxth	r3, r3
 8013904:	1e69      	subs	r1, r5, #1
 8013906:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 801390a:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 801390e:	bf18      	it	ne
 8013910:	2101      	movne	r1, #1
 8013912:	e7c0      	b.n	8013896 <dwt_ioctl+0x15aa>
 8013914:	4674      	mov	r4, lr
 8013916:	f819 1005 	ldrb.w	r1, [r9, r5]
 801391a:	1a5b      	subs	r3, r3, r1
 801391c:	b29b      	uxth	r3, r3
 801391e:	e027      	b.n	8013970 <dwt_ioctl+0x1684>
 8013920:	4674      	mov	r4, lr
 8013922:	9503      	str	r5, [sp, #12]
 8013924:	e024      	b.n	8013970 <dwt_ioctl+0x1684>
 8013926:	2c00      	cmp	r4, #0
 8013928:	d134      	bne.n	8013994 <dwt_ioctl+0x16a8>
 801392a:	2a03      	cmp	r2, #3
 801392c:	d036      	beq.n	801399c <dwt_ioctl+0x16b0>
 801392e:	2a02      	cmp	r2, #2
 8013930:	d009      	beq.n	8013946 <dwt_ioctl+0x165a>
 8013932:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8013936:	1858      	adds	r0, r3, r1
 8013938:	42b8      	cmp	r0, r7
 801393a:	dd0b      	ble.n	8013954 <dwt_ioctl+0x1668>
 801393c:	440b      	add	r3, r1
 801393e:	b29b      	uxth	r3, r3
 8013940:	3201      	adds	r2, #1
 8013942:	b2d2      	uxtb	r2, r2
 8013944:	e7da      	b.n	80138fc <dwt_ioctl+0x1610>
 8013946:	9906      	ldr	r1, [sp, #24]
 8013948:	2909      	cmp	r1, #9
 801394a:	d1f2      	bne.n	8013932 <dwt_ioctl+0x1646>
 801394c:	4674      	mov	r4, lr
 801394e:	213f      	movs	r1, #63	; 0x3f
 8013950:	9103      	str	r1, [sp, #12]
 8013952:	e00d      	b.n	8013970 <dwt_ioctl+0x1684>
 8013954:	4674      	mov	r4, lr
 8013956:	b283      	uxth	r3, r0
 8013958:	3201      	adds	r2, #1
 801395a:	b2d2      	uxtb	r2, r2
 801395c:	213f      	movs	r1, #63	; 0x3f
 801395e:	9103      	str	r1, [sp, #12]
 8013960:	e006      	b.n	8013970 <dwt_ioctl+0x1684>
 8013962:	2300      	movs	r3, #0
 8013964:	e74b      	b.n	80137fe <dwt_ioctl+0x1512>
 8013966:	2300      	movs	r3, #0
 8013968:	e749      	b.n	80137fe <dwt_ioctl+0x1512>
 801396a:	4674      	mov	r4, lr
 801396c:	9503      	str	r5, [sp, #12]
 801396e:	463b      	mov	r3, r7
 8013970:	9905      	ldr	r1, [sp, #20]
 8013972:	800b      	strh	r3, [r1, #0]
 8013974:	9b03      	ldr	r3, [sp, #12]
 8013976:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 801397a:	b2db      	uxtb	r3, r3
 801397c:	041a      	lsls	r2, r3, #16
 801397e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8013982:	431a      	orrs	r2, r3
 8013984:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8013988:	9a04      	ldr	r2, [sp, #16]
 801398a:	6013      	str	r3, [r2, #0]
 801398c:	2300      	movs	r3, #0
 801398e:	6023      	str	r3, [r4, #0]
 8013990:	2500      	movs	r5, #0
 8013992:	e3ad      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013994:	4674      	mov	r4, lr
 8013996:	9a07      	ldr	r2, [sp, #28]
 8013998:	9b08      	ldr	r3, [sp, #32]
 801399a:	e7e9      	b.n	8013970 <dwt_ioctl+0x1684>
 801399c:	4674      	mov	r4, lr
 801399e:	213f      	movs	r1, #63	; 0x3f
 80139a0:	9103      	str	r1, [sp, #12]
 80139a2:	e7e5      	b.n	8013970 <dwt_ioctl+0x1684>
 80139a4:	2c00      	cmp	r4, #0
 80139a6:	f000 8453 	beq.w	8014250 <dwt_ioctl+0x1f64>
 80139aa:	7827      	ldrb	r7, [r4, #0]
 80139ac:	7864      	ldrb	r4, [r4, #1]
 80139ae:	f7ed fd53 	bl	8001458 <decamutexon>
 80139b2:	4605      	mov	r5, r0
 80139b4:	2c02      	cmp	r4, #2
 80139b6:	d00e      	beq.n	80139d6 <dwt_ioctl+0x16ea>
 80139b8:	2c04      	cmp	r4, #4
 80139ba:	d00c      	beq.n	80139d6 <dwt_ioctl+0x16ea>
 80139bc:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 80139c0:	2c01      	cmp	r4, #1
 80139c2:	d019      	beq.n	80139f8 <dwt_ioctl+0x170c>
 80139c4:	43fb      	mvns	r3, r7
 80139c6:	2200      	movs	r2, #0
 80139c8:	9200      	str	r2, [sp, #0]
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	49c1      	ldr	r1, [pc, #772]	; (8013cd4 <dwt_ioctl+0x19e8>)
 80139ce:	4630      	mov	r0, r6
 80139d0:	f7fd fc60 	bl	8011294 <dwt_modify8bitoffsetreg>
 80139d4:	e005      	b.n	80139e2 <dwt_ioctl+0x16f6>
 80139d6:	463b      	mov	r3, r7
 80139d8:	2200      	movs	r2, #0
 80139da:	49be      	ldr	r1, [pc, #760]	; (8013cd4 <dwt_ioctl+0x19e8>)
 80139dc:	4630      	mov	r0, r6
 80139de:	f7fc ffc7 	bl	8010970 <dwt_write8bitoffsetreg>
 80139e2:	463b      	mov	r3, r7
 80139e4:	2200      	movs	r2, #0
 80139e6:	49bc      	ldr	r1, [pc, #752]	; (8013cd8 <dwt_ioctl+0x19ec>)
 80139e8:	4630      	mov	r0, r6
 80139ea:	f7fc fddd 	bl	80105a8 <dwt_write32bitoffsetreg>
 80139ee:	4628      	mov	r0, r5
 80139f0:	f7ed fd43 	bl	800147a <decamutexoff>
 80139f4:	2500      	movs	r5, #0
 80139f6:	e37b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80139f8:	9700      	str	r7, [sp, #0]
 80139fa:	23ff      	movs	r3, #255	; 0xff
 80139fc:	2200      	movs	r2, #0
 80139fe:	49b5      	ldr	r1, [pc, #724]	; (8013cd4 <dwt_ioctl+0x19e8>)
 8013a00:	4630      	mov	r0, r6
 8013a02:	f7fd fc47 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013a06:	e7ec      	b.n	80139e2 <dwt_ioctl+0x16f6>
 8013a08:	2302      	movs	r3, #2
 8013a0a:	9301      	str	r3, [sp, #4]
 8013a0c:	2500      	movs	r5, #0
 8013a0e:	9500      	str	r5, [sp, #0]
 8013a10:	462b      	mov	r3, r5
 8013a12:	462a      	mov	r2, r5
 8013a14:	211a      	movs	r1, #26
 8013a16:	f7fc f860 	bl	800fada <dwt_xfer3xxx>
 8013a1a:	e369      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a1c:	f7fe fc52 	bl	80122c4 <ull_softreset_fcmd>
 8013a20:	2500      	movs	r5, #0
 8013a22:	e365      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a24:	f7fe fc3a 	bl	801229c <ull_softreset_no_sema_fcmd>
 8013a28:	2500      	movs	r5, #0
 8013a2a:	e361      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a2c:	2302      	movs	r3, #2
 8013a2e:	9301      	str	r3, [sp, #4]
 8013a30:	2500      	movs	r5, #0
 8013a32:	9500      	str	r5, [sp, #0]
 8013a34:	462b      	mov	r3, r5
 8013a36:	462a      	mov	r2, r5
 8013a38:	2114      	movs	r1, #20
 8013a3a:	f7fc f84e 	bl	800fada <dwt_xfer3xxx>
 8013a3e:	e357      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a40:	2402      	movs	r4, #2
 8013a42:	9401      	str	r4, [sp, #4]
 8013a44:	2500      	movs	r5, #0
 8013a46:	9500      	str	r5, [sp, #0]
 8013a48:	462b      	mov	r3, r5
 8013a4a:	462a      	mov	r2, r5
 8013a4c:	2115      	movs	r1, #21
 8013a4e:	f7fc f844 	bl	800fada <dwt_xfer3xxx>
 8013a52:	9401      	str	r4, [sp, #4]
 8013a54:	9500      	str	r5, [sp, #0]
 8013a56:	462b      	mov	r3, r5
 8013a58:	462a      	mov	r2, r5
 8013a5a:	2115      	movs	r1, #21
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f7fc f83c 	bl	800fada <dwt_xfer3xxx>
 8013a62:	e345      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a64:	2302      	movs	r3, #2
 8013a66:	9301      	str	r3, [sp, #4]
 8013a68:	2500      	movs	r5, #0
 8013a6a:	9500      	str	r5, [sp, #0]
 8013a6c:	462b      	mov	r3, r5
 8013a6e:	462a      	mov	r2, r5
 8013a70:	2116      	movs	r1, #22
 8013a72:	f7fc f832 	bl	800fada <dwt_xfer3xxx>
 8013a76:	e33b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a78:	2c00      	cmp	r4, #0
 8013a7a:	f000 83eb 	beq.w	8014254 <dwt_ioctl+0x1f68>
 8013a7e:	b932      	cbnz	r2, 8013a8e <dwt_ioctl+0x17a2>
 8013a80:	2200      	movs	r2, #0
 8013a82:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8013a86:	f7fc f905 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013a8a:	7020      	strb	r0, [r4, #0]
 8013a8c:	e330      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a8e:	2201      	movs	r2, #1
 8013a90:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8013a94:	f7fc f8fe 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013a98:	7020      	strb	r0, [r4, #0]
 8013a9a:	2500      	movs	r5, #0
 8013a9c:	e328      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013a9e:	2c00      	cmp	r4, #0
 8013aa0:	f000 83da 	beq.w	8014258 <dwt_ioctl+0x1f6c>
 8013aa4:	7824      	ldrb	r4, [r4, #0]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8013aac:	f7fc f8f2 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013ab0:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8013ab4:	4323      	orrs	r3, r4
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8013abc:	4630      	mov	r0, r6
 8013abe:	f7fc ff57 	bl	8010970 <dwt_write8bitoffsetreg>
 8013ac2:	2500      	movs	r5, #0
 8013ac4:	e314      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013ac6:	2c00      	cmp	r4, #0
 8013ac8:	f000 83c8 	beq.w	801425c <dwt_ioctl+0x1f70>
 8013acc:	7824      	ldrb	r4, [r4, #0]
 8013ace:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8013ad2:	d01d      	beq.n	8013b10 <dwt_ioctl+0x1824>
 8013ad4:	2d01      	cmp	r5, #1
 8013ad6:	f040 83c3 	bne.w	8014260 <dwt_ioctl+0x1f74>
 8013ada:	2502      	movs	r5, #2
 8013adc:	2201      	movs	r2, #1
 8013ade:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	f7fc f8d6 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013ae8:	b9a4      	cbnz	r4, 8013b14 <dwt_ioctl+0x1828>
 8013aea:	ea20 0305 	bic.w	r3, r0, r5
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	2201      	movs	r2, #1
 8013af2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8013af6:	4630      	mov	r0, r6
 8013af8:	f7fc ff3a 	bl	8010970 <dwt_write8bitoffsetreg>
 8013afc:	2200      	movs	r2, #0
 8013afe:	2110      	movs	r1, #16
 8013b00:	4630      	mov	r0, r6
 8013b02:	f7fc f872 	bl	800fbea <dwt_read32bitoffsetreg>
 8013b06:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8013b0a:	d00a      	beq.n	8013b22 <dwt_ioctl+0x1836>
 8013b0c:	2500      	movs	r5, #0
 8013b0e:	e2ef      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013b10:	2504      	movs	r5, #4
 8013b12:	e7e3      	b.n	8013adc <dwt_ioctl+0x17f0>
 8013b14:	2c01      	cmp	r4, #1
 8013b16:	f040 83a6 	bne.w	8014266 <dwt_ioctl+0x1f7a>
 8013b1a:	ea40 0305 	orr.w	r3, r0, r5
 8013b1e:	b2db      	uxtb	r3, r3
 8013b20:	e7e6      	b.n	8013af0 <dwt_ioctl+0x1804>
 8013b22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	f04f 33ff 	mov.w	r3, #4294967295
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	2110      	movs	r1, #16
 8013b30:	4630      	mov	r0, r6
 8013b32:	f7fd fa3f 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013b36:	2500      	movs	r5, #0
 8013b38:	e2da      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013b3a:	2c00      	cmp	r4, #0
 8013b3c:	f000 8396 	beq.w	801426c <dwt_ioctl+0x1f80>
 8013b40:	7823      	ldrb	r3, [r4, #0]
 8013b42:	035b      	lsls	r3, r3, #13
 8013b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013b48:	9300      	str	r3, [sp, #0]
 8013b4a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8013b4e:	2200      	movs	r2, #0
 8013b50:	4962      	ldr	r1, [pc, #392]	; (8013cdc <dwt_ioctl+0x19f0>)
 8013b52:	f7fd ff2f 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013b56:	2500      	movs	r5, #0
 8013b58:	e2ca      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013b5a:	2c00      	cmp	r4, #0
 8013b5c:	f000 8388 	beq.w	8014270 <dwt_ioctl+0x1f84>
 8013b60:	7825      	ldrb	r5, [r4, #0]
 8013b62:	6862      	ldr	r2, [r4, #4]
 8013b64:	2a01      	cmp	r2, #1
 8013b66:	bf15      	itete	ne
 8013b68:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8013b6c:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8013b70:	27df      	movne	r7, #223	; 0xdf
 8013b72:	27ef      	moveq	r7, #239	; 0xef
 8013b74:	bf14      	ite	ne
 8013b76:	f04f 0820 	movne.w	r8, #32
 8013b7a:	f04f 0810 	moveq.w	r8, #16
 8013b7e:	2400      	movs	r4, #0
 8013b80:	9400      	str	r4, [sp, #0]
 8013b82:	4622      	mov	r2, r4
 8013b84:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013b88:	f7fd fa14 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013b8c:	9400      	str	r4, [sp, #0]
 8013b8e:	463b      	mov	r3, r7
 8013b90:	4622      	mov	r2, r4
 8013b92:	4953      	ldr	r1, [pc, #332]	; (8013ce0 <dwt_ioctl+0x19f4>)
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7fd fb7d 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013b9a:	2d01      	cmp	r5, #1
 8013b9c:	d002      	beq.n	8013ba4 <dwt_ioctl+0x18b8>
 8013b9e:	b155      	cbz	r5, 8013bb6 <dwt_ioctl+0x18ca>
 8013ba0:	2500      	movs	r5, #0
 8013ba2:	e2a5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013ba4:	4625      	mov	r5, r4
 8013ba6:	9400      	str	r4, [sp, #0]
 8013ba8:	463b      	mov	r3, r7
 8013baa:	4622      	mov	r2, r4
 8013bac:	494d      	ldr	r1, [pc, #308]	; (8013ce4 <dwt_ioctl+0x19f8>)
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f7fd fb70 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013bb4:	e29c      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013bb6:	f8cd 8000 	str.w	r8, [sp]
 8013bba:	23ff      	movs	r3, #255	; 0xff
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	4949      	ldr	r1, [pc, #292]	; (8013ce4 <dwt_ioctl+0x19f8>)
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f7fd fb67 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013bc6:	e293      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013bc8:	2c00      	cmp	r4, #0
 8013bca:	f000 8353 	beq.w	8014274 <dwt_ioctl+0x1f88>
 8013bce:	7822      	ldrb	r2, [r4, #0]
 8013bd0:	f012 0f01 	tst.w	r2, #1
 8013bd4:	d02c      	beq.n	8013c30 <dwt_ioctl+0x1944>
 8013bd6:	0157      	lsls	r7, r2, #5
 8013bd8:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8013bdc:	2440      	movs	r4, #64	; 0x40
 8013bde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8013be2:	f012 0f04 	tst.w	r2, #4
 8013be6:	d027      	beq.n	8013c38 <dwt_ioctl+0x194c>
 8013be8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8013bec:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8013bf0:	0112      	lsls	r2, r2, #4
 8013bf2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8013bf6:	4317      	orrs	r7, r2
 8013bf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013bfc:	9200      	str	r2, [sp, #0]
 8013bfe:	43db      	mvns	r3, r3
 8013c00:	2200      	movs	r2, #0
 8013c02:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013c06:	4630      	mov	r0, r6
 8013c08:	f7fd f9d4 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013c0c:	43e4      	mvns	r4, r4
 8013c0e:	b2a4      	uxth	r4, r4
 8013c10:	2500      	movs	r5, #0
 8013c12:	9500      	str	r5, [sp, #0]
 8013c14:	4623      	mov	r3, r4
 8013c16:	462a      	mov	r2, r5
 8013c18:	4931      	ldr	r1, [pc, #196]	; (8013ce0 <dwt_ioctl+0x19f4>)
 8013c1a:	4630      	mov	r0, r6
 8013c1c:	f7fd feca 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013c20:	9700      	str	r7, [sp, #0]
 8013c22:	4623      	mov	r3, r4
 8013c24:	462a      	mov	r2, r5
 8013c26:	492f      	ldr	r1, [pc, #188]	; (8013ce4 <dwt_ioctl+0x19f8>)
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f7fd fec3 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013c2e:	e25f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013c30:	2700      	movs	r7, #0
 8013c32:	463c      	mov	r4, r7
 8013c34:	463b      	mov	r3, r7
 8013c36:	e7d4      	b.n	8013be2 <dwt_ioctl+0x18f6>
 8013c38:	2200      	movs	r2, #0
 8013c3a:	e7df      	b.n	8013bfc <dwt_ioctl+0x1910>
 8013c3c:	2308      	movs	r3, #8
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	23ff      	movs	r3, #255	; 0xff
 8013c42:	2201      	movs	r2, #1
 8013c44:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8013c48:	f7fd fb24 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013c4c:	4c26      	ldr	r4, [pc, #152]	; (8013ce8 <dwt_ioctl+0x19fc>)
 8013c4e:	2302      	movs	r3, #2
 8013c50:	9300      	str	r3, [sp, #0]
 8013c52:	23ff      	movs	r3, #255	; 0xff
 8013c54:	2203      	movs	r2, #3
 8013c56:	4621      	mov	r1, r4
 8013c58:	4630      	mov	r0, r6
 8013c5a:	f7fd fb1b 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013c5e:	2500      	movs	r5, #0
 8013c60:	9500      	str	r5, [sp, #0]
 8013c62:	23f7      	movs	r3, #247	; 0xf7
 8013c64:	2201      	movs	r2, #1
 8013c66:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f7fd fb12 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013c70:	9500      	str	r5, [sp, #0]
 8013c72:	23fd      	movs	r3, #253	; 0xfd
 8013c74:	2203      	movs	r2, #3
 8013c76:	4621      	mov	r1, r4
 8013c78:	4630      	mov	r0, r6
 8013c7a:	f7fd fb0b 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013c7e:	e237      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013c80:	2c00      	cmp	r4, #0
 8013c82:	f000 82f9 	beq.w	8014278 <dwt_ioctl+0x1f8c>
 8013c86:	8863      	ldrh	r3, [r4, #2]
 8013c88:	00db      	lsls	r3, r3, #3
 8013c8a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8013c8e:	7822      	ldrb	r2, [r4, #0]
 8013c90:	b10a      	cbz	r2, 8013c96 <dwt_ioctl+0x19aa>
 8013c92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	f24f 0307 	movw	r3, #61447	; 0xf007
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f7fd fe86 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013ca8:	2500      	movs	r5, #0
 8013caa:	e221      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013cac:	2500      	movs	r5, #0
 8013cae:	9500      	str	r5, [sp, #0]
 8013cb0:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8013cb4:	462a      	mov	r2, r5
 8013cb6:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8013cba:	f7fd fe7b 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013cbe:	e217      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013cc0:	2c00      	cmp	r4, #0
 8013cc2:	f000 82db 	beq.w	801427c <dwt_ioctl+0x1f90>
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	4908      	ldr	r1, [pc, #32]	; (8013cec <dwt_ioctl+0x1a00>)
 8013cca:	f7fb ffa4 	bl	800fc16 <dwt_read16bitoffsetreg>
 8013cce:	8020      	strh	r0, [r4, #0]
 8013cd0:	2500      	movs	r5, #0
 8013cd2:	e20d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013cd4:	0001001c 	.word	0x0001001c
 8013cd8:	00010018 	.word	0x00010018
 8013cdc:	000e000c 	.word	0x000e000c
 8013ce0:	00050008 	.word	0x00050008
 8013ce4:	0005000c 	.word	0x0005000c
 8013ce8:	00110008 	.word	0x00110008
 8013cec:	00110048 	.word	0x00110048
 8013cf0:	2c00      	cmp	r4, #0
 8013cf2:	f000 82c5 	beq.w	8014280 <dwt_ioctl+0x1f94>
 8013cf6:	7823      	ldrb	r3, [r4, #0]
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	7862      	ldrb	r2, [r4, #1]
 8013cfc:	78a3      	ldrb	r3, [r4, #2]
 8013cfe:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8013d02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d06:	78e2      	ldrb	r2, [r4, #3]
 8013d08:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8013d0c:	7922      	ldrb	r2, [r4, #4]
 8013d0e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 8013d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013d16:	bf0c      	ite	eq
 8013d18:	2202      	moveq	r2, #2
 8013d1a:	2200      	movne	r2, #0
 8013d1c:	49b6      	ldr	r1, [pc, #728]	; (8013ff8 <dwt_ioctl+0x1d0c>)
 8013d1e:	f7fc fbd8 	bl	80104d2 <dwt_write16bitoffsetreg>
 8013d22:	2500      	movs	r5, #0
 8013d24:	e1e4      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013d26:	2c00      	cmp	r4, #0
 8013d28:	f000 82ac 	beq.w	8014284 <dwt_ioctl+0x1f98>
 8013d2c:	6863      	ldr	r3, [r4, #4]
 8013d2e:	7822      	ldrb	r2, [r4, #0]
 8013d30:	b13a      	cbz	r2, 8013d42 <dwt_ioctl+0x1a56>
 8013d32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013d36:	2200      	movs	r2, #0
 8013d38:	49b0      	ldr	r1, [pc, #704]	; (8013ffc <dwt_ioctl+0x1d10>)
 8013d3a:	f7fc fc35 	bl	80105a8 <dwt_write32bitoffsetreg>
 8013d3e:	2500      	movs	r5, #0
 8013d40:	e1d6      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013d42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013d46:	49ae      	ldr	r1, [pc, #696]	; (8014000 <dwt_ioctl+0x1d14>)
 8013d48:	f7fc fc2e 	bl	80105a8 <dwt_write32bitoffsetreg>
 8013d4c:	2500      	movs	r5, #0
 8013d4e:	e1cf      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013d50:	2c00      	cmp	r4, #0
 8013d52:	f000 8299 	beq.w	8014288 <dwt_ioctl+0x1f9c>
 8013d56:	7823      	ldrb	r3, [r4, #0]
 8013d58:	2401      	movs	r4, #1
 8013d5a:	409c      	lsls	r4, r3
 8013d5c:	b2e4      	uxtb	r4, r4
 8013d5e:	2310      	movs	r3, #16
 8013d60:	9300      	str	r3, [sp, #0]
 8013d62:	23ff      	movs	r3, #255	; 0xff
 8013d64:	2200      	movs	r2, #0
 8013d66:	49a7      	ldr	r1, [pc, #668]	; (8014004 <dwt_ioctl+0x1d18>)
 8013d68:	f7fd fa94 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013d6c:	43e3      	mvns	r3, r4
 8013d6e:	4fa2      	ldr	r7, [pc, #648]	; (8013ff8 <dwt_ioctl+0x1d0c>)
 8013d70:	2500      	movs	r5, #0
 8013d72:	9500      	str	r5, [sp, #0]
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	462a      	mov	r2, r5
 8013d78:	4639      	mov	r1, r7
 8013d7a:	4630      	mov	r0, r6
 8013d7c:	f7fd fa8a 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013d80:	9400      	str	r4, [sp, #0]
 8013d82:	23ff      	movs	r3, #255	; 0xff
 8013d84:	462a      	mov	r2, r5
 8013d86:	4639      	mov	r1, r7
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f7fd fa83 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013d8e:	e1af      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013d90:	2c00      	cmp	r4, #0
 8013d92:	f000 827b 	beq.w	801428c <dwt_ioctl+0x1fa0>
 8013d96:	7822      	ldrb	r2, [r4, #0]
 8013d98:	7863      	ldrb	r3, [r4, #1]
 8013d9a:	b19b      	cbz	r3, 8013dc4 <dwt_ioctl+0x1ad8>
 8013d9c:	2a00      	cmp	r2, #0
 8013d9e:	f040 8297 	bne.w	80142d0 <dwt_ioctl+0x1fe4>
 8013da2:	2400      	movs	r4, #0
 8013da4:	9400      	str	r4, [sp, #0]
 8013da6:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8013daa:	4622      	mov	r2, r4
 8013dac:	2110      	movs	r1, #16
 8013dae:	f7fd f901 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013db2:	9400      	str	r4, [sp, #0]
 8013db4:	4b94      	ldr	r3, [pc, #592]	; (8014008 <dwt_ioctl+0x1d1c>)
 8013db6:	4622      	mov	r2, r4
 8013db8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f7fd f8f9 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013dc2:	e017      	b.n	8013df4 <dwt_ioctl+0x1b08>
 8013dc4:	2a00      	cmp	r2, #0
 8013dc6:	f000 8285 	beq.w	80142d4 <dwt_ioctl+0x1fe8>
 8013dca:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8013dce:	2400      	movs	r4, #0
 8013dd0:	9400      	str	r4, [sp, #0]
 8013dd2:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8013dd6:	4622      	mov	r2, r4
 8013dd8:	2110      	movs	r1, #16
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f7fd f8ea 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013de0:	9500      	str	r5, [sp, #0]
 8013de2:	4b89      	ldr	r3, [pc, #548]	; (8014008 <dwt_ioctl+0x1d1c>)
 8013de4:	4622      	mov	r2, r4
 8013de6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013dea:	4630      	mov	r0, r6
 8013dec:	f7fd f8e2 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013df0:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8013df4:	9400      	str	r4, [sp, #0]
 8013df6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	2110      	movs	r1, #16
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f7fd f8d8 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013e04:	2500      	movs	r5, #0
 8013e06:	e173      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013e08:	2c00      	cmp	r4, #0
 8013e0a:	f000 8241 	beq.w	8014290 <dwt_ioctl+0x1fa4>
 8013e0e:	7823      	ldrb	r3, [r4, #0]
 8013e10:	b93b      	cbnz	r3, 8013e22 <dwt_ioctl+0x1b36>
 8013e12:	2500      	movs	r5, #0
 8013e14:	9500      	str	r5, [sp, #0]
 8013e16:	23df      	movs	r3, #223	; 0xdf
 8013e18:	2203      	movs	r2, #3
 8013e1a:	497c      	ldr	r1, [pc, #496]	; (801400c <dwt_ioctl+0x1d20>)
 8013e1c:	f7fd fa3a 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013e20:	e166      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013e22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	f04f 33ff 	mov.w	r3, #4294967295
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	4977      	ldr	r1, [pc, #476]	; (801400c <dwt_ioctl+0x1d20>)
 8013e30:	f7fd f8c0 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 8013e34:	2500      	movs	r5, #0
 8013e36:	e15b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013e38:	2c00      	cmp	r4, #0
 8013e3a:	f000 822b 	beq.w	8014294 <dwt_ioctl+0x1fa8>
 8013e3e:	7823      	ldrb	r3, [r4, #0]
 8013e40:	b93b      	cbnz	r3, 8013e52 <dwt_ioctl+0x1b66>
 8013e42:	2500      	movs	r5, #0
 8013e44:	9500      	str	r5, [sp, #0]
 8013e46:	237f      	movs	r3, #127	; 0x7f
 8013e48:	2203      	movs	r2, #3
 8013e4a:	4971      	ldr	r1, [pc, #452]	; (8014010 <dwt_ioctl+0x1d24>)
 8013e4c:	f7fd fa22 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013e50:	e14e      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013e52:	2380      	movs	r3, #128	; 0x80
 8013e54:	9300      	str	r3, [sp, #0]
 8013e56:	23ff      	movs	r3, #255	; 0xff
 8013e58:	2203      	movs	r2, #3
 8013e5a:	496d      	ldr	r1, [pc, #436]	; (8014010 <dwt_ioctl+0x1d24>)
 8013e5c:	f7fd fa1a 	bl	8011294 <dwt_modify8bitoffsetreg>
 8013e60:	2500      	movs	r5, #0
 8013e62:	e145      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013e64:	2c00      	cmp	r4, #0
 8013e66:	f000 8217 	beq.w	8014298 <dwt_ioctl+0x1fac>
 8013e6a:	b2e3      	uxtb	r3, r4
 8013e6c:	1c9a      	adds	r2, r3, #2
 8013e6e:	2301      	movs	r3, #1
 8013e70:	4093      	lsls	r3, r2
 8013e72:	3b01      	subs	r3, #1
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	2200      	movs	r2, #0
 8013e78:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013e7c:	f7fc fd78 	bl	8010970 <dwt_write8bitoffsetreg>
 8013e80:	2500      	movs	r5, #0
 8013e82:	e135      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013e84:	2c00      	cmp	r4, #0
 8013e86:	f000 8209 	beq.w	801429c <dwt_ioctl+0x1fb0>
 8013e8a:	7ae3      	ldrb	r3, [r4, #11]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f000 8207 	beq.w	80142a0 <dwt_ioctl+0x1fb4>
 8013e92:	7b63      	ldrb	r3, [r4, #13]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	7b20      	ldrb	r0, [r4, #12]
 8013e98:	bf94      	ite	ls
 8013e9a:	2203      	movls	r2, #3
 8013e9c:	2204      	movhi	r2, #4
 8013e9e:	2110      	movs	r1, #16
 8013ea0:	4b5c      	ldr	r3, [pc, #368]	; (8014014 <dwt_ioctl+0x1d28>)
 8013ea2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013ea6:	f7fb fdfb 	bl	800faa0 <get_sts_mnth>
 8013eaa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013eae:	9000      	str	r0, [sp, #0]
 8013eb0:	f64f 7380 	movw	r3, #65408	; 0xff80
 8013eb4:	2202      	movs	r2, #2
 8013eb6:	4958      	ldr	r1, [pc, #352]	; (8014018 <dwt_ioctl+0x1d2c>)
 8013eb8:	4630      	mov	r0, r6
 8013eba:	f7fd fd7b 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8013ebe:	2394      	movs	r3, #148	; 0x94
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	4956      	ldr	r1, [pc, #344]	; (801401c <dwt_ioctl+0x1d30>)
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	f7fc fd53 	bl	8010970 <dwt_write8bitoffsetreg>
 8013eca:	2500      	movs	r5, #0
 8013ecc:	e110      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013ece:	2c00      	cmp	r4, #0
 8013ed0:	f000 81e8 	beq.w	80142a4 <dwt_ioctl+0x1fb8>
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	4952      	ldr	r1, [pc, #328]	; (8014020 <dwt_ioctl+0x1d34>)
 8013ed8:	f7fb fe87 	bl	800fbea <dwt_read32bitoffsetreg>
 8013edc:	6020      	str	r0, [r4, #0]
 8013ede:	2500      	movs	r5, #0
 8013ee0:	e106      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013ee2:	2c00      	cmp	r4, #0
 8013ee4:	f000 81e0 	beq.w	80142a8 <dwt_ioctl+0x1fbc>
 8013ee8:	2200      	movs	r2, #0
 8013eea:	494e      	ldr	r1, [pc, #312]	; (8014024 <dwt_ioctl+0x1d38>)
 8013eec:	f7fb fe7d 	bl	800fbea <dwt_read32bitoffsetreg>
 8013ef0:	6020      	str	r0, [r4, #0]
 8013ef2:	2500      	movs	r5, #0
 8013ef4:	e0fc      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013ef6:	2c00      	cmp	r4, #0
 8013ef8:	f000 81d8 	beq.w	80142ac <dwt_ioctl+0x1fc0>
 8013efc:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8013f00:	6023      	str	r3, [r4, #0]
 8013f02:	2500      	movs	r5, #0
 8013f04:	e0f4      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013f06:	2c00      	cmp	r4, #0
 8013f08:	f000 81d2 	beq.w	80142b0 <dwt_ioctl+0x1fc4>
 8013f0c:	2500      	movs	r5, #0
 8013f0e:	950a      	str	r5, [sp, #40]	; 0x28
 8013f10:	af0c      	add	r7, sp, #48	; 0x30
 8013f12:	2319      	movs	r3, #25
 8013f14:	f847 3d04 	str.w	r3, [r7, #-4]!
 8013f18:	9700      	str	r7, [sp, #0]
 8013f1a:	2304      	movs	r3, #4
 8013f1c:	462a      	mov	r2, r5
 8013f1e:	4942      	ldr	r1, [pc, #264]	; (8014028 <dwt_ioctl+0x1d3c>)
 8013f20:	f7fc facc 	bl	80104bc <dwt_writetodevice>
 8013f24:	f641 7348 	movw	r3, #8008	; 0x1f48
 8013f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f2a:	9700      	str	r7, [sp, #0]
 8013f2c:	2304      	movs	r3, #4
 8013f2e:	462a      	mov	r2, r5
 8013f30:	493e      	ldr	r1, [pc, #248]	; (801402c <dwt_ioctl+0x1d40>)
 8013f32:	4630      	mov	r0, r6
 8013f34:	f7fc fac2 	bl	80104bc <dwt_writetodevice>
 8013f38:	ab0a      	add	r3, sp, #40	; 0x28
 8013f3a:	9300      	str	r3, [sp, #0]
 8013f3c:	2304      	movs	r3, #4
 8013f3e:	462a      	mov	r2, r5
 8013f40:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8013f44:	4630      	mov	r0, r6
 8013f46:	f7fb fe46 	bl	800fbd6 <dwt_readfromdevice>
 8013f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f4c:	6023      	str	r3, [r4, #0]
 8013f4e:	e0cf      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013f50:	2c00      	cmp	r4, #0
 8013f52:	f000 81af 	beq.w	80142b4 <dwt_ioctl+0x1fc8>
 8013f56:	2200      	movs	r2, #0
 8013f58:	4935      	ldr	r1, [pc, #212]	; (8014030 <dwt_ioctl+0x1d44>)
 8013f5a:	f7fb fe46 	bl	800fbea <dwt_read32bitoffsetreg>
 8013f5e:	b280      	uxth	r0, r0
 8013f60:	6020      	str	r0, [r4, #0]
 8013f62:	2200      	movs	r2, #0
 8013f64:	4933      	ldr	r1, [pc, #204]	; (8014034 <dwt_ioctl+0x1d48>)
 8013f66:	4630      	mov	r0, r6
 8013f68:	f7fb fe3f 	bl	800fbea <dwt_read32bitoffsetreg>
 8013f6c:	0d43      	lsrs	r3, r0, #21
 8013f6e:	019b      	lsls	r3, r3, #6
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	6063      	str	r3, [r4, #4]
 8013f74:	2500      	movs	r5, #0
 8013f76:	e0bb      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013f78:	2c00      	cmp	r4, #0
 8013f7a:	f000 819d 	beq.w	80142b8 <dwt_ioctl+0x1fcc>
 8013f7e:	7d63      	ldrb	r3, [r4, #21]
 8013f80:	b133      	cbz	r3, 8013f90 <dwt_ioctl+0x1ca4>
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d062      	beq.n	801404c <dwt_ioctl+0x1d60>
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	f000 8089 	beq.w	801409e <dwt_ioctl+0x1db2>
 8013f8c:	23ff      	movs	r3, #255	; 0xff
 8013f8e:	e02f      	b.n	8013ff0 <dwt_ioctl+0x1d04>
 8013f90:	2200      	movs	r2, #0
 8013f92:	4929      	ldr	r1, [pc, #164]	; (8014038 <dwt_ioctl+0x1d4c>)
 8013f94:	f7fb fe29 	bl	800fbea <dwt_read32bitoffsetreg>
 8013f98:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8013f9c:	6020      	str	r0, [r4, #0]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	4926      	ldr	r1, [pc, #152]	; (801403c <dwt_ioctl+0x1d50>)
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	f7fb fe21 	bl	800fbea <dwt_read32bitoffsetreg>
 8013fa8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8013fac:	6060      	str	r0, [r4, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	4923      	ldr	r1, [pc, #140]	; (8014040 <dwt_ioctl+0x1d54>)
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f7fb fe19 	bl	800fbea <dwt_read32bitoffsetreg>
 8013fb8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8013fbc:	60a0      	str	r0, [r4, #8]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	4920      	ldr	r1, [pc, #128]	; (8014044 <dwt_ioctl+0x1d58>)
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	f7fb fe11 	bl	800fbea <dwt_read32bitoffsetreg>
 8013fc8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8013fcc:	60e0      	str	r0, [r4, #12]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	491d      	ldr	r1, [pc, #116]	; (8014048 <dwt_ioctl+0x1d5c>)
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	f7fb fe09 	bl	800fbea <dwt_read32bitoffsetreg>
 8013fd8:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8013fdc:	6120      	str	r0, [r4, #16]
 8013fde:	2203      	movs	r2, #3
 8013fe0:	490f      	ldr	r1, [pc, #60]	; (8014020 <dwt_ioctl+0x1d34>)
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f7fb fe56 	bl	800fc94 <dwt_read8bitoffsetreg>
 8013fe8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8013fec:	7520      	strb	r0, [r4, #20]
 8013fee:	2300      	movs	r3, #0
 8013ff0:	75a3      	strb	r3, [r4, #22]
 8013ff2:	2500      	movs	r5, #0
 8013ff4:	e07c      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8013ff6:	bf00      	nop
 8013ff8:	0011003c 	.word	0x0011003c
 8013ffc:	00110044 	.word	0x00110044
 8014000:	00110040 	.word	0x00110040
 8014004:	00070048 	.word	0x00070048
 8014008:	f7fc0fff 	.word	0xf7fc0fff
 801400c:	000f0028 	.word	0x000f0028
 8014010:	0007001c 	.word	0x0007001c
 8014014:	08019bc8 	.word	0x08019bc8
 8014018:	000e0014 	.word	0x000e0014
 801401c:	000e0018 	.word	0x000e0018
 8014020:	00030054 	.word	0x00030054
 8014024:	000f004c 	.word	0x000f004c
 8014028:	001f0004 	.word	0x001f0004
 801402c:	001f0008 	.word	0x001f0008
 8014030:	000c0048 	.word	0x000c0048
 8014034:	000c0028 	.word	0x000c0028
 8014038:	000c0058 	.word	0x000c0058
 801403c:	000c0030 	.word	0x000c0030
 8014040:	000c0034 	.word	0x000c0034
 8014044:	000c0038 	.word	0x000c0038
 8014048:	000c002c 	.word	0x000c002c
 801404c:	2200      	movs	r2, #0
 801404e:	49aa      	ldr	r1, [pc, #680]	; (80142f8 <dwt_ioctl+0x200c>)
 8014050:	f7fb fdcb 	bl	800fbea <dwt_read32bitoffsetreg>
 8014054:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014058:	6020      	str	r0, [r4, #0]
 801405a:	2200      	movs	r2, #0
 801405c:	49a7      	ldr	r1, [pc, #668]	; (80142fc <dwt_ioctl+0x2010>)
 801405e:	4630      	mov	r0, r6
 8014060:	f7fb fdc3 	bl	800fbea <dwt_read32bitoffsetreg>
 8014064:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014068:	6060      	str	r0, [r4, #4]
 801406a:	2200      	movs	r2, #0
 801406c:	49a4      	ldr	r1, [pc, #656]	; (8014300 <dwt_ioctl+0x2014>)
 801406e:	4630      	mov	r0, r6
 8014070:	f7fb fdbb 	bl	800fbea <dwt_read32bitoffsetreg>
 8014074:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8014078:	60a0      	str	r0, [r4, #8]
 801407a:	2200      	movs	r2, #0
 801407c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8014080:	4630      	mov	r0, r6
 8014082:	f7fb fdb2 	bl	800fbea <dwt_read32bitoffsetreg>
 8014086:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801408a:	60e0      	str	r0, [r4, #12]
 801408c:	2200      	movs	r2, #0
 801408e:	499d      	ldr	r1, [pc, #628]	; (8014304 <dwt_ioctl+0x2018>)
 8014090:	4630      	mov	r0, r6
 8014092:	f7fb fdaa 	bl	800fbea <dwt_read32bitoffsetreg>
 8014096:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801409a:	6120      	str	r0, [r4, #16]
 801409c:	e79f      	b.n	8013fde <dwt_ioctl+0x1cf2>
 801409e:	2200      	movs	r2, #0
 80140a0:	4999      	ldr	r1, [pc, #612]	; (8014308 <dwt_ioctl+0x201c>)
 80140a2:	f7fb fda2 	bl	800fbea <dwt_read32bitoffsetreg>
 80140a6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80140aa:	6020      	str	r0, [r4, #0]
 80140ac:	2200      	movs	r2, #0
 80140ae:	4997      	ldr	r1, [pc, #604]	; (801430c <dwt_ioctl+0x2020>)
 80140b0:	4630      	mov	r0, r6
 80140b2:	f7fb fd9a 	bl	800fbea <dwt_read32bitoffsetreg>
 80140b6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80140ba:	6060      	str	r0, [r4, #4]
 80140bc:	2200      	movs	r2, #0
 80140be:	4994      	ldr	r1, [pc, #592]	; (8014310 <dwt_ioctl+0x2024>)
 80140c0:	4630      	mov	r0, r6
 80140c2:	f7fb fd92 	bl	800fbea <dwt_read32bitoffsetreg>
 80140c6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80140ca:	60a0      	str	r0, [r4, #8]
 80140cc:	2200      	movs	r2, #0
 80140ce:	4991      	ldr	r1, [pc, #580]	; (8014314 <dwt_ioctl+0x2028>)
 80140d0:	4630      	mov	r0, r6
 80140d2:	f7fb fd8a 	bl	800fbea <dwt_read32bitoffsetreg>
 80140d6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80140da:	60e0      	str	r0, [r4, #12]
 80140dc:	2200      	movs	r2, #0
 80140de:	498e      	ldr	r1, [pc, #568]	; (8014318 <dwt_ioctl+0x202c>)
 80140e0:	4630      	mov	r0, r6
 80140e2:	f7fb fd82 	bl	800fbea <dwt_read32bitoffsetreg>
 80140e6:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80140ea:	6120      	str	r0, [r4, #16]
 80140ec:	e777      	b.n	8013fde <dwt_ioctl+0x1cf2>
 80140ee:	2500      	movs	r5, #0
 80140f0:	4628      	mov	r0, r5
 80140f2:	b00d      	add	sp, #52	; 0x34
 80140f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140f8:	2500      	movs	r5, #0
 80140fa:	e7f9      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80140fc:	2500      	movs	r5, #0
 80140fe:	e7f7      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014100:	2500      	movs	r5, #0
 8014102:	e7f5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014104:	2500      	movs	r5, #0
 8014106:	e7f3      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014108:	2500      	movs	r5, #0
 801410a:	e7f1      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801410c:	2500      	movs	r5, #0
 801410e:	e7ef      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014110:	2500      	movs	r5, #0
 8014112:	e7ed      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014114:	2500      	movs	r5, #0
 8014116:	e7eb      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014118:	2500      	movs	r5, #0
 801411a:	e7e9      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801411c:	2500      	movs	r5, #0
 801411e:	e7e7      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014120:	2500      	movs	r5, #0
 8014122:	e7e5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014124:	2500      	movs	r5, #0
 8014126:	e7e3      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014128:	2500      	movs	r5, #0
 801412a:	e7e1      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801412c:	2500      	movs	r5, #0
 801412e:	e7df      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014130:	2500      	movs	r5, #0
 8014132:	e7dd      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014134:	2500      	movs	r5, #0
 8014136:	e7db      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014138:	2500      	movs	r5, #0
 801413a:	e7d9      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801413c:	2500      	movs	r5, #0
 801413e:	e7d7      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014140:	2500      	movs	r5, #0
 8014142:	e7d5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014144:	2500      	movs	r5, #0
 8014146:	e7d3      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014148:	2500      	movs	r5, #0
 801414a:	e7d1      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801414c:	2500      	movs	r5, #0
 801414e:	e7cf      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014150:	2500      	movs	r5, #0
 8014152:	e7cd      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014154:	2500      	movs	r5, #0
 8014156:	e7cb      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014158:	2500      	movs	r5, #0
 801415a:	e7c9      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801415c:	2500      	movs	r5, #0
 801415e:	e7c7      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014160:	2500      	movs	r5, #0
 8014162:	e7c5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014164:	2500      	movs	r5, #0
 8014166:	e7c3      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014168:	2500      	movs	r5, #0
 801416a:	e7c1      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801416c:	2500      	movs	r5, #0
 801416e:	e7bf      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014170:	2500      	movs	r5, #0
 8014172:	e7bd      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014174:	2500      	movs	r5, #0
 8014176:	e7bb      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014178:	2500      	movs	r5, #0
 801417a:	e7b9      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801417c:	2500      	movs	r5, #0
 801417e:	e7b7      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014180:	2500      	movs	r5, #0
 8014182:	e7b5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014184:	2500      	movs	r5, #0
 8014186:	e7b3      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014188:	2500      	movs	r5, #0
 801418a:	e7b1      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801418c:	2500      	movs	r5, #0
 801418e:	e7af      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014190:	2500      	movs	r5, #0
 8014192:	e7ad      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014194:	2500      	movs	r5, #0
 8014196:	e7ab      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014198:	2500      	movs	r5, #0
 801419a:	e7a9      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801419c:	2500      	movs	r5, #0
 801419e:	e7a7      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141a0:	2500      	movs	r5, #0
 80141a2:	e7a5      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141a4:	2500      	movs	r5, #0
 80141a6:	e7a3      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141a8:	2500      	movs	r5, #0
 80141aa:	e7a1      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141ac:	2500      	movs	r5, #0
 80141ae:	e79f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141b0:	2500      	movs	r5, #0
 80141b2:	e79d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141b4:	2500      	movs	r5, #0
 80141b6:	e79b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141b8:	2500      	movs	r5, #0
 80141ba:	e799      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141bc:	2500      	movs	r5, #0
 80141be:	e797      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141c0:	2500      	movs	r5, #0
 80141c2:	e795      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141c4:	2500      	movs	r5, #0
 80141c6:	e793      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141c8:	2500      	movs	r5, #0
 80141ca:	e791      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141cc:	2500      	movs	r5, #0
 80141ce:	e78f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141d0:	2500      	movs	r5, #0
 80141d2:	e78d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141d4:	2500      	movs	r5, #0
 80141d6:	e78b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141d8:	2500      	movs	r5, #0
 80141da:	e789      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141dc:	2500      	movs	r5, #0
 80141de:	e787      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141e0:	2500      	movs	r5, #0
 80141e2:	e785      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141e4:	2500      	movs	r5, #0
 80141e6:	e783      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141e8:	2500      	movs	r5, #0
 80141ea:	e781      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141ec:	2500      	movs	r5, #0
 80141ee:	e77f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141f0:	2500      	movs	r5, #0
 80141f2:	e77d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141f4:	2500      	movs	r5, #0
 80141f6:	e77b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141f8:	2500      	movs	r5, #0
 80141fa:	e779      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80141fc:	2500      	movs	r5, #0
 80141fe:	e777      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014200:	2500      	movs	r5, #0
 8014202:	e775      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014204:	2500      	movs	r5, #0
 8014206:	e773      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014208:	2500      	movs	r5, #0
 801420a:	e771      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801420c:	2500      	movs	r5, #0
 801420e:	e76f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014210:	2500      	movs	r5, #0
 8014212:	e76d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014214:	2500      	movs	r5, #0
 8014216:	e76b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014218:	2500      	movs	r5, #0
 801421a:	e769      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801421c:	2500      	movs	r5, #0
 801421e:	e767      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014220:	2500      	movs	r5, #0
 8014222:	e765      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014224:	2500      	movs	r5, #0
 8014226:	e763      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014228:	2500      	movs	r5, #0
 801422a:	e761      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801422c:	2500      	movs	r5, #0
 801422e:	e75f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014230:	2500      	movs	r5, #0
 8014232:	e75d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014234:	2500      	movs	r5, #0
 8014236:	e75b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014238:	2500      	movs	r5, #0
 801423a:	e759      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801423c:	2500      	movs	r5, #0
 801423e:	e757      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014240:	2500      	movs	r5, #0
 8014242:	e755      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014244:	2500      	movs	r5, #0
 8014246:	e753      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014248:	2500      	movs	r5, #0
 801424a:	e751      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801424c:	2500      	movs	r5, #0
 801424e:	e74f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014250:	2500      	movs	r5, #0
 8014252:	e74d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014254:	2500      	movs	r5, #0
 8014256:	e74b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014258:	2500      	movs	r5, #0
 801425a:	e749      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801425c:	2500      	movs	r5, #0
 801425e:	e747      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014260:	f04f 35ff 	mov.w	r5, #4294967295
 8014264:	e744      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014266:	f04f 35ff 	mov.w	r5, #4294967295
 801426a:	e741      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801426c:	2500      	movs	r5, #0
 801426e:	e73f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014270:	2500      	movs	r5, #0
 8014272:	e73d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014274:	2500      	movs	r5, #0
 8014276:	e73b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014278:	2500      	movs	r5, #0
 801427a:	e739      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801427c:	2500      	movs	r5, #0
 801427e:	e737      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014280:	2500      	movs	r5, #0
 8014282:	e735      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014284:	2500      	movs	r5, #0
 8014286:	e733      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014288:	2500      	movs	r5, #0
 801428a:	e731      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801428c:	2500      	movs	r5, #0
 801428e:	e72f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014290:	2500      	movs	r5, #0
 8014292:	e72d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014294:	2500      	movs	r5, #0
 8014296:	e72b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 8014298:	2500      	movs	r5, #0
 801429a:	e729      	b.n	80140f0 <dwt_ioctl+0x1e04>
 801429c:	2500      	movs	r5, #0
 801429e:	e727      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142a0:	2500      	movs	r5, #0
 80142a2:	e725      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142a4:	2500      	movs	r5, #0
 80142a6:	e723      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142a8:	2500      	movs	r5, #0
 80142aa:	e721      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142ac:	2500      	movs	r5, #0
 80142ae:	e71f      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142b0:	2500      	movs	r5, #0
 80142b2:	e71d      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142b4:	2500      	movs	r5, #0
 80142b6:	e71b      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142b8:	2500      	movs	r5, #0
 80142ba:	e719      	b.n	80140f0 <dwt_ioctl+0x1e04>
 80142bc:	f899 3011 	ldrb.w	r3, [r9, #17]
 80142c0:	1e5a      	subs	r2, r3, #1
 80142c2:	b2d2      	uxtb	r2, r2
 80142c4:	2a01      	cmp	r2, #1
 80142c6:	f67e ae60 	bls.w	8012f8a <dwt_ioctl+0xc9e>
 80142ca:	2202      	movs	r2, #2
 80142cc:	f7fe be07 	b.w	8012ede <dwt_ioctl+0xbf2>
 80142d0:	4d12      	ldr	r5, [pc, #72]	; (801431c <dwt_ioctl+0x2030>)
 80142d2:	e57c      	b.n	8013dce <dwt_ioctl+0x1ae2>
 80142d4:	2400      	movs	r4, #0
 80142d6:	9400      	str	r4, [sp, #0]
 80142d8:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80142dc:	4622      	mov	r2, r4
 80142de:	2110      	movs	r1, #16
 80142e0:	f7fc fe68 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 80142e4:	9400      	str	r4, [sp, #0]
 80142e6:	4b0e      	ldr	r3, [pc, #56]	; (8014320 <dwt_ioctl+0x2034>)
 80142e8:	4622      	mov	r2, r4
 80142ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80142ee:	4630      	mov	r0, r6
 80142f0:	f7fc fe60 	bl	8010fb4 <dwt_modify32bitoffsetreg>
 80142f4:	e57e      	b.n	8013df4 <dwt_ioctl+0x1b08>
 80142f6:	bf00      	nop
 80142f8:	000d0020 	.word	0x000d0020
 80142fc:	000c0064 	.word	0x000c0064
 8014300:	000c0068 	.word	0x000c0068
 8014304:	000c0060 	.word	0x000c0060
 8014308:	000d0068 	.word	0x000d0068
 801430c:	000d0040 	.word	0x000d0040
 8014310:	000d0044 	.word	0x000d0044
 8014314:	000d0048 	.word	0x000d0048
 8014318:	000d003c 	.word	0x000d003c
 801431c:	08001000 	.word	0x08001000
 8014320:	f7fc0fff 	.word	0xf7fc0fff

08014324 <_init>:
 8014324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014326:	b085      	sub	sp, #20
 8014328:	4604      	mov	r4, r0
 801432a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801432c:	6819      	ldr	r1, [r3, #0]
 801432e:	f7fd fea7 	bl	8012080 <ull_initialise>
 8014332:	4606      	mov	r6, r0
 8014334:	6823      	ldr	r3, [r4, #0]
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	4798      	blx	r3
 801433a:	ab03      	add	r3, sp, #12
 801433c:	2200      	movs	r2, #0
 801433e:	4611      	mov	r1, r2
 8014340:	4620      	mov	r0, r4
 8014342:	f7fd ffd3 	bl	80122ec <dwt_ioctl>
 8014346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801434a:	6819      	ldr	r1, [r3, #0]
 801434c:	4620      	mov	r0, r4
 801434e:	f7fd fc49 	bl	8011be4 <ull_configure>
 8014352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014356:	6859      	ldr	r1, [r3, #4]
 8014358:	4620      	mov	r0, r4
 801435a:	f7fd f999 	bl	8011690 <ull_configuretxrf>
 801435e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014362:	89d9      	ldrh	r1, [r3, #14]
 8014364:	4620      	mov	r0, r4
 8014366:	f7fc f8c4 	bl	80104f2 <ull_setrxantennadelay>
 801436a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801436e:	8999      	ldrh	r1, [r3, #12]
 8014370:	4620      	mov	r0, r4
 8014372:	f7fc f8c6 	bl	8010502 <ull_settxantennadelay>
 8014376:	2100      	movs	r1, #0
 8014378:	4620      	mov	r0, r4
 801437a:	f7fc f950 	bl	801061e <ull_setrxaftertxdelay>
 801437e:	2500      	movs	r5, #0
 8014380:	9500      	str	r5, [sp, #0]
 8014382:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8014386:	462a      	mov	r2, r5
 8014388:	2110      	movs	r1, #16
 801438a:	4620      	mov	r0, r4
 801438c:	f7fd fb12 	bl	80119b4 <dwt_modify16bitoffsetreg>
 8014390:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014394:	895a      	ldrh	r2, [r3, #10]
 8014396:	8919      	ldrh	r1, [r3, #8]
 8014398:	4620      	mov	r0, r4
 801439a:	f7fd fa09 	bl	80117b0 <ull_configureframefilter>
 801439e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143a2:	8a1b      	ldrh	r3, [r3, #16]
 80143a4:	2202      	movs	r2, #2
 80143a6:	210c      	movs	r1, #12
 80143a8:	4620      	mov	r0, r4
 80143aa:	f7fc f892 	bl	80104d2 <dwt_write16bitoffsetreg>
 80143ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143b2:	8a5b      	ldrh	r3, [r3, #18]
 80143b4:	462a      	mov	r2, r5
 80143b6:	210c      	movs	r1, #12
 80143b8:	4620      	mov	r0, r4
 80143ba:	f7fc f88a 	bl	80104d2 <dwt_write16bitoffsetreg>
 80143be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143c0:	7a19      	ldrb	r1, [r3, #8]
 80143c2:	4620      	mov	r0, r4
 80143c4:	f7fd fb34 	bl	8011a30 <ull_setleds>
 80143c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143ca:	68d9      	ldr	r1, [r3, #12]
 80143cc:	4620      	mov	r0, r4
 80143ce:	f7fc f94f 	bl	8010670 <ull_setlnapamode>
 80143d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143d4:	7e0b      	ldrb	r3, [r1, #24]
 80143d6:	694a      	ldr	r2, [r1, #20]
 80143d8:	6909      	ldr	r1, [r1, #16]
 80143da:	4620      	mov	r0, r4
 80143dc:	f7fd fa6e 	bl	80118bc <ull_setinterrupt>
 80143e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143e2:	7f9a      	ldrb	r2, [r3, #30]
 80143e4:	8b99      	ldrh	r1, [r3, #28]
 80143e6:	4620      	mov	r0, r4
 80143e8:	f7fc fb96 	bl	8010b18 <ull_configuresleep>
 80143ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80143ee:	7b53      	ldrb	r3, [r2, #13]
 80143f0:	2b2e      	cmp	r3, #46	; 0x2e
 80143f2:	d005      	beq.n	8014400 <_init+0xdc>
 80143f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143fa:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 80143fe:	d00a      	beq.n	8014416 <_init+0xf2>
 8014400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014402:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801440a:	7353      	strb	r3, [r2, #13]
 801440c:	2200      	movs	r2, #0
 801440e:	4928      	ldr	r1, [pc, #160]	; (80144b0 <_init+0x18c>)
 8014410:	4620      	mov	r0, r4
 8014412:	f7fc faad 	bl	8010970 <dwt_write8bitoffsetreg>
 8014416:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014418:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 801441c:	4620      	mov	r0, r4
 801441e:	f7fc ff69 	bl	80112f4 <ull_configciadiag>
 8014422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014424:	6a19      	ldr	r1, [r3, #32]
 8014426:	4620      	mov	r0, r4
 8014428:	f7fc f942 	bl	80106b0 <ull_configurestskey>
 801442c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801442e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014430:	4620      	mov	r0, r4
 8014432:	f7fc f961 	bl	80106f8 <ull_configurestsiv>
 8014436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014438:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801443c:	bb9b      	cbnz	r3, 80144a6 <_init+0x182>
 801443e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014440:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8014444:	4620      	mov	r0, r4
 8014446:	f7fc fb0b 	bl	8010a60 <ull_configeventcounters>
 801444a:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 801444e:	2d00      	cmp	r5, #0
 8014450:	db26      	blt.n	80144a0 <_init+0x17c>
 8014452:	2301      	movs	r3, #1
 8014454:	fa03 f505 	lsl.w	r5, r3, r5
 8014458:	b2af      	uxth	r7, r5
 801445a:	4a16      	ldr	r2, [pc, #88]	; (80144b4 <_init+0x190>)
 801445c:	4639      	mov	r1, r7
 801445e:	4620      	mov	r0, r4
 8014460:	f7fc feda 	bl	8011218 <ull_setgpiomode>
 8014464:	f10d 030a 	add.w	r3, sp, #10
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	2302      	movs	r3, #2
 801446c:	2200      	movs	r2, #0
 801446e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8014472:	4620      	mov	r0, r4
 8014474:	f7fb fbaf 	bl	800fbd6 <dwt_readfromdevice>
 8014478:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801447c:	ea23 0305 	bic.w	r3, r3, r5
 8014480:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014484:	2200      	movs	r2, #0
 8014486:	490c      	ldr	r1, [pc, #48]	; (80144b8 <_init+0x194>)
 8014488:	4620      	mov	r0, r4
 801448a:	f7fc f822 	bl	80104d2 <dwt_write16bitoffsetreg>
 801448e:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8014492:	fab2 f282 	clz	r2, r2
 8014496:	0952      	lsrs	r2, r2, #5
 8014498:	4639      	mov	r1, r7
 801449a:	4620      	mov	r0, r4
 801449c:	f7fd fb46 	bl	8011b2c <ull_setgpiovalue>
 80144a0:	4630      	mov	r0, r6
 80144a2:	b005      	add	sp, #20
 80144a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7fc ff5a 	bl	8011360 <ull_configurestsloadiv>
 80144ac:	e7c7      	b.n	801443e <_init+0x11a>
 80144ae:	bf00      	nop
 80144b0:	00090014 	.word	0x00090014
 80144b4:	01200492 	.word	0x01200492
 80144b8:	00050008 	.word	0x00050008

080144bc <__errno>:
 80144bc:	4b01      	ldr	r3, [pc, #4]	; (80144c4 <__errno+0x8>)
 80144be:	6818      	ldr	r0, [r3, #0]
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	20000098 	.word	0x20000098

080144c8 <__libc_init_array>:
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	4d0d      	ldr	r5, [pc, #52]	; (8014500 <__libc_init_array+0x38>)
 80144cc:	4c0d      	ldr	r4, [pc, #52]	; (8014504 <__libc_init_array+0x3c>)
 80144ce:	1b64      	subs	r4, r4, r5
 80144d0:	10a4      	asrs	r4, r4, #2
 80144d2:	2600      	movs	r6, #0
 80144d4:	42a6      	cmp	r6, r4
 80144d6:	d109      	bne.n	80144ec <__libc_init_array+0x24>
 80144d8:	4d0b      	ldr	r5, [pc, #44]	; (8014508 <__libc_init_array+0x40>)
 80144da:	4c0c      	ldr	r4, [pc, #48]	; (801450c <__libc_init_array+0x44>)
 80144dc:	f005 f918 	bl	8019710 <_init>
 80144e0:	1b64      	subs	r4, r4, r5
 80144e2:	10a4      	asrs	r4, r4, #2
 80144e4:	2600      	movs	r6, #0
 80144e6:	42a6      	cmp	r6, r4
 80144e8:	d105      	bne.n	80144f6 <__libc_init_array+0x2e>
 80144ea:	bd70      	pop	{r4, r5, r6, pc}
 80144ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80144f0:	4798      	blx	r3
 80144f2:	3601      	adds	r6, #1
 80144f4:	e7ee      	b.n	80144d4 <__libc_init_array+0xc>
 80144f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80144fa:	4798      	blx	r3
 80144fc:	3601      	adds	r6, #1
 80144fe:	e7f2      	b.n	80144e6 <__libc_init_array+0x1e>
 8014500:	08019f8c 	.word	0x08019f8c
 8014504:	08019f8c 	.word	0x08019f8c
 8014508:	08019f8c 	.word	0x08019f8c
 801450c:	08019f94 	.word	0x08019f94

08014510 <malloc>:
 8014510:	4b02      	ldr	r3, [pc, #8]	; (801451c <malloc+0xc>)
 8014512:	4601      	mov	r1, r0
 8014514:	6818      	ldr	r0, [r3, #0]
 8014516:	f000 b803 	b.w	8014520 <_malloc_r>
 801451a:	bf00      	nop
 801451c:	20000098 	.word	0x20000098

08014520 <_malloc_r>:
 8014520:	f101 030b 	add.w	r3, r1, #11
 8014524:	2b16      	cmp	r3, #22
 8014526:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452a:	4605      	mov	r5, r0
 801452c:	d906      	bls.n	801453c <_malloc_r+0x1c>
 801452e:	f033 0707 	bics.w	r7, r3, #7
 8014532:	d504      	bpl.n	801453e <_malloc_r+0x1e>
 8014534:	230c      	movs	r3, #12
 8014536:	602b      	str	r3, [r5, #0]
 8014538:	2400      	movs	r4, #0
 801453a:	e1a5      	b.n	8014888 <_malloc_r+0x368>
 801453c:	2710      	movs	r7, #16
 801453e:	42b9      	cmp	r1, r7
 8014540:	d8f8      	bhi.n	8014534 <_malloc_r+0x14>
 8014542:	4628      	mov	r0, r5
 8014544:	f000 fa40 	bl	80149c8 <__malloc_lock>
 8014548:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801454c:	4eb0      	ldr	r6, [pc, #704]	; (8014810 <_malloc_r+0x2f0>)
 801454e:	d237      	bcs.n	80145c0 <_malloc_r+0xa0>
 8014550:	f107 0208 	add.w	r2, r7, #8
 8014554:	4432      	add	r2, r6
 8014556:	f1a2 0108 	sub.w	r1, r2, #8
 801455a:	6854      	ldr	r4, [r2, #4]
 801455c:	428c      	cmp	r4, r1
 801455e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8014562:	d102      	bne.n	801456a <_malloc_r+0x4a>
 8014564:	68d4      	ldr	r4, [r2, #12]
 8014566:	42a2      	cmp	r2, r4
 8014568:	d010      	beq.n	801458c <_malloc_r+0x6c>
 801456a:	6863      	ldr	r3, [r4, #4]
 801456c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8014570:	f023 0303 	bic.w	r3, r3, #3
 8014574:	60ca      	str	r2, [r1, #12]
 8014576:	4423      	add	r3, r4
 8014578:	6091      	str	r1, [r2, #8]
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	f042 0201 	orr.w	r2, r2, #1
 8014580:	605a      	str	r2, [r3, #4]
 8014582:	4628      	mov	r0, r5
 8014584:	f000 fa26 	bl	80149d4 <__malloc_unlock>
 8014588:	3408      	adds	r4, #8
 801458a:	e17d      	b.n	8014888 <_malloc_r+0x368>
 801458c:	3302      	adds	r3, #2
 801458e:	6934      	ldr	r4, [r6, #16]
 8014590:	49a0      	ldr	r1, [pc, #640]	; (8014814 <_malloc_r+0x2f4>)
 8014592:	428c      	cmp	r4, r1
 8014594:	d077      	beq.n	8014686 <_malloc_r+0x166>
 8014596:	6862      	ldr	r2, [r4, #4]
 8014598:	f022 0c03 	bic.w	ip, r2, #3
 801459c:	ebac 0007 	sub.w	r0, ip, r7
 80145a0:	280f      	cmp	r0, #15
 80145a2:	dd48      	ble.n	8014636 <_malloc_r+0x116>
 80145a4:	19e2      	adds	r2, r4, r7
 80145a6:	f040 0301 	orr.w	r3, r0, #1
 80145aa:	f047 0701 	orr.w	r7, r7, #1
 80145ae:	6067      	str	r7, [r4, #4]
 80145b0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80145b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80145b8:	6053      	str	r3, [r2, #4]
 80145ba:	f844 000c 	str.w	r0, [r4, ip]
 80145be:	e7e0      	b.n	8014582 <_malloc_r+0x62>
 80145c0:	0a7b      	lsrs	r3, r7, #9
 80145c2:	d02a      	beq.n	801461a <_malloc_r+0xfa>
 80145c4:	2b04      	cmp	r3, #4
 80145c6:	d812      	bhi.n	80145ee <_malloc_r+0xce>
 80145c8:	09bb      	lsrs	r3, r7, #6
 80145ca:	3338      	adds	r3, #56	; 0x38
 80145cc:	1c5a      	adds	r2, r3, #1
 80145ce:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80145d2:	f1a2 0c08 	sub.w	ip, r2, #8
 80145d6:	6854      	ldr	r4, [r2, #4]
 80145d8:	4564      	cmp	r4, ip
 80145da:	d006      	beq.n	80145ea <_malloc_r+0xca>
 80145dc:	6862      	ldr	r2, [r4, #4]
 80145de:	f022 0203 	bic.w	r2, r2, #3
 80145e2:	1bd0      	subs	r0, r2, r7
 80145e4:	280f      	cmp	r0, #15
 80145e6:	dd1c      	ble.n	8014622 <_malloc_r+0x102>
 80145e8:	3b01      	subs	r3, #1
 80145ea:	3301      	adds	r3, #1
 80145ec:	e7cf      	b.n	801458e <_malloc_r+0x6e>
 80145ee:	2b14      	cmp	r3, #20
 80145f0:	d801      	bhi.n	80145f6 <_malloc_r+0xd6>
 80145f2:	335b      	adds	r3, #91	; 0x5b
 80145f4:	e7ea      	b.n	80145cc <_malloc_r+0xac>
 80145f6:	2b54      	cmp	r3, #84	; 0x54
 80145f8:	d802      	bhi.n	8014600 <_malloc_r+0xe0>
 80145fa:	0b3b      	lsrs	r3, r7, #12
 80145fc:	336e      	adds	r3, #110	; 0x6e
 80145fe:	e7e5      	b.n	80145cc <_malloc_r+0xac>
 8014600:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8014604:	d802      	bhi.n	801460c <_malloc_r+0xec>
 8014606:	0bfb      	lsrs	r3, r7, #15
 8014608:	3377      	adds	r3, #119	; 0x77
 801460a:	e7df      	b.n	80145cc <_malloc_r+0xac>
 801460c:	f240 5254 	movw	r2, #1364	; 0x554
 8014610:	4293      	cmp	r3, r2
 8014612:	d804      	bhi.n	801461e <_malloc_r+0xfe>
 8014614:	0cbb      	lsrs	r3, r7, #18
 8014616:	337c      	adds	r3, #124	; 0x7c
 8014618:	e7d8      	b.n	80145cc <_malloc_r+0xac>
 801461a:	233f      	movs	r3, #63	; 0x3f
 801461c:	e7d6      	b.n	80145cc <_malloc_r+0xac>
 801461e:	237e      	movs	r3, #126	; 0x7e
 8014620:	e7d4      	b.n	80145cc <_malloc_r+0xac>
 8014622:	2800      	cmp	r0, #0
 8014624:	68e1      	ldr	r1, [r4, #12]
 8014626:	db04      	blt.n	8014632 <_malloc_r+0x112>
 8014628:	68a3      	ldr	r3, [r4, #8]
 801462a:	60d9      	str	r1, [r3, #12]
 801462c:	608b      	str	r3, [r1, #8]
 801462e:	18a3      	adds	r3, r4, r2
 8014630:	e7a3      	b.n	801457a <_malloc_r+0x5a>
 8014632:	460c      	mov	r4, r1
 8014634:	e7d0      	b.n	80145d8 <_malloc_r+0xb8>
 8014636:	2800      	cmp	r0, #0
 8014638:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801463c:	db07      	blt.n	801464e <_malloc_r+0x12e>
 801463e:	44a4      	add	ip, r4
 8014640:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8014644:	f043 0301 	orr.w	r3, r3, #1
 8014648:	f8cc 3004 	str.w	r3, [ip, #4]
 801464c:	e799      	b.n	8014582 <_malloc_r+0x62>
 801464e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8014652:	6870      	ldr	r0, [r6, #4]
 8014654:	f080 8096 	bcs.w	8014784 <_malloc_r+0x264>
 8014658:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801465c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8014660:	f04f 0c01 	mov.w	ip, #1
 8014664:	3201      	adds	r2, #1
 8014666:	fa0c fc0e 	lsl.w	ip, ip, lr
 801466a:	ea4c 0000 	orr.w	r0, ip, r0
 801466e:	6070      	str	r0, [r6, #4]
 8014670:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8014674:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8014678:	3808      	subs	r0, #8
 801467a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801467e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8014682:	f8cc 400c 	str.w	r4, [ip, #12]
 8014686:	2001      	movs	r0, #1
 8014688:	109a      	asrs	r2, r3, #2
 801468a:	fa00 f202 	lsl.w	r2, r0, r2
 801468e:	6870      	ldr	r0, [r6, #4]
 8014690:	4290      	cmp	r0, r2
 8014692:	d326      	bcc.n	80146e2 <_malloc_r+0x1c2>
 8014694:	4210      	tst	r0, r2
 8014696:	d106      	bne.n	80146a6 <_malloc_r+0x186>
 8014698:	f023 0303 	bic.w	r3, r3, #3
 801469c:	0052      	lsls	r2, r2, #1
 801469e:	4210      	tst	r0, r2
 80146a0:	f103 0304 	add.w	r3, r3, #4
 80146a4:	d0fa      	beq.n	801469c <_malloc_r+0x17c>
 80146a6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80146aa:	46c1      	mov	r9, r8
 80146ac:	469e      	mov	lr, r3
 80146ae:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80146b2:	454c      	cmp	r4, r9
 80146b4:	f040 80ba 	bne.w	801482c <_malloc_r+0x30c>
 80146b8:	f10e 0e01 	add.w	lr, lr, #1
 80146bc:	f01e 0f03 	tst.w	lr, #3
 80146c0:	f109 0908 	add.w	r9, r9, #8
 80146c4:	d1f3      	bne.n	80146ae <_malloc_r+0x18e>
 80146c6:	0798      	lsls	r0, r3, #30
 80146c8:	f040 80e4 	bne.w	8014894 <_malloc_r+0x374>
 80146cc:	6873      	ldr	r3, [r6, #4]
 80146ce:	ea23 0302 	bic.w	r3, r3, r2
 80146d2:	6073      	str	r3, [r6, #4]
 80146d4:	6870      	ldr	r0, [r6, #4]
 80146d6:	0052      	lsls	r2, r2, #1
 80146d8:	4290      	cmp	r0, r2
 80146da:	d302      	bcc.n	80146e2 <_malloc_r+0x1c2>
 80146dc:	2a00      	cmp	r2, #0
 80146de:	f040 80e6 	bne.w	80148ae <_malloc_r+0x38e>
 80146e2:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80146e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80146ea:	f023 0903 	bic.w	r9, r3, #3
 80146ee:	45b9      	cmp	r9, r7
 80146f0:	d304      	bcc.n	80146fc <_malloc_r+0x1dc>
 80146f2:	eba9 0207 	sub.w	r2, r9, r7
 80146f6:	2a0f      	cmp	r2, #15
 80146f8:	f300 8142 	bgt.w	8014980 <_malloc_r+0x460>
 80146fc:	4b46      	ldr	r3, [pc, #280]	; (8014818 <_malloc_r+0x2f8>)
 80146fe:	6819      	ldr	r1, [r3, #0]
 8014700:	3110      	adds	r1, #16
 8014702:	4439      	add	r1, r7
 8014704:	2008      	movs	r0, #8
 8014706:	9101      	str	r1, [sp, #4]
 8014708:	f001 fb8e 	bl	8015e28 <sysconf>
 801470c:	4a43      	ldr	r2, [pc, #268]	; (801481c <_malloc_r+0x2fc>)
 801470e:	9901      	ldr	r1, [sp, #4]
 8014710:	6813      	ldr	r3, [r2, #0]
 8014712:	3301      	adds	r3, #1
 8014714:	bf1f      	itttt	ne
 8014716:	f101 31ff 	addne.w	r1, r1, #4294967295
 801471a:	1809      	addne	r1, r1, r0
 801471c:	4243      	negne	r3, r0
 801471e:	4019      	andne	r1, r3
 8014720:	4680      	mov	r8, r0
 8014722:	4628      	mov	r0, r5
 8014724:	9101      	str	r1, [sp, #4]
 8014726:	f000 f95b 	bl	80149e0 <_sbrk_r>
 801472a:	1c42      	adds	r2, r0, #1
 801472c:	eb0a 0b09 	add.w	fp, sl, r9
 8014730:	4604      	mov	r4, r0
 8014732:	f000 80f8 	beq.w	8014926 <_malloc_r+0x406>
 8014736:	4583      	cmp	fp, r0
 8014738:	9901      	ldr	r1, [sp, #4]
 801473a:	4a38      	ldr	r2, [pc, #224]	; (801481c <_malloc_r+0x2fc>)
 801473c:	d902      	bls.n	8014744 <_malloc_r+0x224>
 801473e:	45b2      	cmp	sl, r6
 8014740:	f040 80f1 	bne.w	8014926 <_malloc_r+0x406>
 8014744:	4b36      	ldr	r3, [pc, #216]	; (8014820 <_malloc_r+0x300>)
 8014746:	6818      	ldr	r0, [r3, #0]
 8014748:	45a3      	cmp	fp, r4
 801474a:	eb00 0e01 	add.w	lr, r0, r1
 801474e:	f8c3 e000 	str.w	lr, [r3]
 8014752:	f108 3cff 	add.w	ip, r8, #4294967295
 8014756:	f040 80ac 	bne.w	80148b2 <_malloc_r+0x392>
 801475a:	ea1b 0f0c 	tst.w	fp, ip
 801475e:	f040 80a8 	bne.w	80148b2 <_malloc_r+0x392>
 8014762:	68b2      	ldr	r2, [r6, #8]
 8014764:	4449      	add	r1, r9
 8014766:	f041 0101 	orr.w	r1, r1, #1
 801476a:	6051      	str	r1, [r2, #4]
 801476c:	4a2d      	ldr	r2, [pc, #180]	; (8014824 <_malloc_r+0x304>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	6811      	ldr	r1, [r2, #0]
 8014772:	428b      	cmp	r3, r1
 8014774:	bf88      	it	hi
 8014776:	6013      	strhi	r3, [r2, #0]
 8014778:	4a2b      	ldr	r2, [pc, #172]	; (8014828 <_malloc_r+0x308>)
 801477a:	6811      	ldr	r1, [r2, #0]
 801477c:	428b      	cmp	r3, r1
 801477e:	bf88      	it	hi
 8014780:	6013      	strhi	r3, [r2, #0]
 8014782:	e0d0      	b.n	8014926 <_malloc_r+0x406>
 8014784:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8014788:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801478c:	d218      	bcs.n	80147c0 <_malloc_r+0x2a0>
 801478e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8014792:	3238      	adds	r2, #56	; 0x38
 8014794:	f102 0e01 	add.w	lr, r2, #1
 8014798:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801479c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80147a0:	45f0      	cmp	r8, lr
 80147a2:	d12b      	bne.n	80147fc <_malloc_r+0x2dc>
 80147a4:	1092      	asrs	r2, r2, #2
 80147a6:	f04f 0c01 	mov.w	ip, #1
 80147aa:	fa0c f202 	lsl.w	r2, ip, r2
 80147ae:	4310      	orrs	r0, r2
 80147b0:	6070      	str	r0, [r6, #4]
 80147b2:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80147b6:	f8c8 4008 	str.w	r4, [r8, #8]
 80147ba:	f8ce 400c 	str.w	r4, [lr, #12]
 80147be:	e762      	b.n	8014686 <_malloc_r+0x166>
 80147c0:	2a14      	cmp	r2, #20
 80147c2:	d801      	bhi.n	80147c8 <_malloc_r+0x2a8>
 80147c4:	325b      	adds	r2, #91	; 0x5b
 80147c6:	e7e5      	b.n	8014794 <_malloc_r+0x274>
 80147c8:	2a54      	cmp	r2, #84	; 0x54
 80147ca:	d803      	bhi.n	80147d4 <_malloc_r+0x2b4>
 80147cc:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80147d0:	326e      	adds	r2, #110	; 0x6e
 80147d2:	e7df      	b.n	8014794 <_malloc_r+0x274>
 80147d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80147d8:	d803      	bhi.n	80147e2 <_malloc_r+0x2c2>
 80147da:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80147de:	3277      	adds	r2, #119	; 0x77
 80147e0:	e7d8      	b.n	8014794 <_malloc_r+0x274>
 80147e2:	f240 5e54 	movw	lr, #1364	; 0x554
 80147e6:	4572      	cmp	r2, lr
 80147e8:	bf9a      	itte	ls
 80147ea:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80147ee:	327c      	addls	r2, #124	; 0x7c
 80147f0:	227e      	movhi	r2, #126	; 0x7e
 80147f2:	e7cf      	b.n	8014794 <_malloc_r+0x274>
 80147f4:	f8de e008 	ldr.w	lr, [lr, #8]
 80147f8:	45f0      	cmp	r8, lr
 80147fa:	d005      	beq.n	8014808 <_malloc_r+0x2e8>
 80147fc:	f8de 2004 	ldr.w	r2, [lr, #4]
 8014800:	f022 0203 	bic.w	r2, r2, #3
 8014804:	4562      	cmp	r2, ip
 8014806:	d8f5      	bhi.n	80147f4 <_malloc_r+0x2d4>
 8014808:	f8de 800c 	ldr.w	r8, [lr, #12]
 801480c:	e7d1      	b.n	80147b2 <_malloc_r+0x292>
 801480e:	bf00      	nop
 8014810:	200004c8 	.word	0x200004c8
 8014814:	200004d0 	.word	0x200004d0
 8014818:	200011d0 	.word	0x200011d0
 801481c:	200008d0 	.word	0x200008d0
 8014820:	200011a0 	.word	0x200011a0
 8014824:	200011c8 	.word	0x200011c8
 8014828:	200011cc 	.word	0x200011cc
 801482c:	6860      	ldr	r0, [r4, #4]
 801482e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014832:	f020 0003 	bic.w	r0, r0, #3
 8014836:	eba0 0a07 	sub.w	sl, r0, r7
 801483a:	f1ba 0f0f 	cmp.w	sl, #15
 801483e:	dd12      	ble.n	8014866 <_malloc_r+0x346>
 8014840:	68a3      	ldr	r3, [r4, #8]
 8014842:	19e2      	adds	r2, r4, r7
 8014844:	f047 0701 	orr.w	r7, r7, #1
 8014848:	6067      	str	r7, [r4, #4]
 801484a:	f8c3 c00c 	str.w	ip, [r3, #12]
 801484e:	f8cc 3008 	str.w	r3, [ip, #8]
 8014852:	f04a 0301 	orr.w	r3, sl, #1
 8014856:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801485a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801485e:	6053      	str	r3, [r2, #4]
 8014860:	f844 a000 	str.w	sl, [r4, r0]
 8014864:	e68d      	b.n	8014582 <_malloc_r+0x62>
 8014866:	f1ba 0f00 	cmp.w	sl, #0
 801486a:	db11      	blt.n	8014890 <_malloc_r+0x370>
 801486c:	4420      	add	r0, r4
 801486e:	6843      	ldr	r3, [r0, #4]
 8014870:	f043 0301 	orr.w	r3, r3, #1
 8014874:	6043      	str	r3, [r0, #4]
 8014876:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801487a:	4628      	mov	r0, r5
 801487c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8014880:	f8cc 3008 	str.w	r3, [ip, #8]
 8014884:	f000 f8a6 	bl	80149d4 <__malloc_unlock>
 8014888:	4620      	mov	r0, r4
 801488a:	b003      	add	sp, #12
 801488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014890:	4664      	mov	r4, ip
 8014892:	e70e      	b.n	80146b2 <_malloc_r+0x192>
 8014894:	f858 0908 	ldr.w	r0, [r8], #-8
 8014898:	4540      	cmp	r0, r8
 801489a:	f103 33ff 	add.w	r3, r3, #4294967295
 801489e:	f43f af12 	beq.w	80146c6 <_malloc_r+0x1a6>
 80148a2:	e717      	b.n	80146d4 <_malloc_r+0x1b4>
 80148a4:	3304      	adds	r3, #4
 80148a6:	0052      	lsls	r2, r2, #1
 80148a8:	4210      	tst	r0, r2
 80148aa:	d0fb      	beq.n	80148a4 <_malloc_r+0x384>
 80148ac:	e6fb      	b.n	80146a6 <_malloc_r+0x186>
 80148ae:	4673      	mov	r3, lr
 80148b0:	e7fa      	b.n	80148a8 <_malloc_r+0x388>
 80148b2:	6810      	ldr	r0, [r2, #0]
 80148b4:	3001      	adds	r0, #1
 80148b6:	bf1b      	ittet	ne
 80148b8:	eba4 0b0b 	subne.w	fp, r4, fp
 80148bc:	eb0b 020e 	addne.w	r2, fp, lr
 80148c0:	6014      	streq	r4, [r2, #0]
 80148c2:	601a      	strne	r2, [r3, #0]
 80148c4:	f014 0b07 	ands.w	fp, r4, #7
 80148c8:	bf1a      	itte	ne
 80148ca:	f1cb 0008 	rsbne	r0, fp, #8
 80148ce:	1824      	addne	r4, r4, r0
 80148d0:	4658      	moveq	r0, fp
 80148d2:	1862      	adds	r2, r4, r1
 80148d4:	ea02 010c 	and.w	r1, r2, ip
 80148d8:	4480      	add	r8, r0
 80148da:	eba8 0801 	sub.w	r8, r8, r1
 80148de:	ea08 080c 	and.w	r8, r8, ip
 80148e2:	4641      	mov	r1, r8
 80148e4:	4628      	mov	r0, r5
 80148e6:	9201      	str	r2, [sp, #4]
 80148e8:	f000 f87a 	bl	80149e0 <_sbrk_r>
 80148ec:	1c43      	adds	r3, r0, #1
 80148ee:	9a01      	ldr	r2, [sp, #4]
 80148f0:	4b28      	ldr	r3, [pc, #160]	; (8014994 <_malloc_r+0x474>)
 80148f2:	d107      	bne.n	8014904 <_malloc_r+0x3e4>
 80148f4:	f1bb 0f00 	cmp.w	fp, #0
 80148f8:	d023      	beq.n	8014942 <_malloc_r+0x422>
 80148fa:	f1ab 0008 	sub.w	r0, fp, #8
 80148fe:	4410      	add	r0, r2
 8014900:	f04f 0800 	mov.w	r8, #0
 8014904:	681a      	ldr	r2, [r3, #0]
 8014906:	60b4      	str	r4, [r6, #8]
 8014908:	1b00      	subs	r0, r0, r4
 801490a:	4440      	add	r0, r8
 801490c:	4442      	add	r2, r8
 801490e:	f040 0001 	orr.w	r0, r0, #1
 8014912:	45b2      	cmp	sl, r6
 8014914:	601a      	str	r2, [r3, #0]
 8014916:	6060      	str	r0, [r4, #4]
 8014918:	f43f af28 	beq.w	801476c <_malloc_r+0x24c>
 801491c:	f1b9 0f0f 	cmp.w	r9, #15
 8014920:	d812      	bhi.n	8014948 <_malloc_r+0x428>
 8014922:	2301      	movs	r3, #1
 8014924:	6063      	str	r3, [r4, #4]
 8014926:	68b3      	ldr	r3, [r6, #8]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	f023 0303 	bic.w	r3, r3, #3
 801492e:	42bb      	cmp	r3, r7
 8014930:	eba3 0207 	sub.w	r2, r3, r7
 8014934:	d301      	bcc.n	801493a <_malloc_r+0x41a>
 8014936:	2a0f      	cmp	r2, #15
 8014938:	dc22      	bgt.n	8014980 <_malloc_r+0x460>
 801493a:	4628      	mov	r0, r5
 801493c:	f000 f84a 	bl	80149d4 <__malloc_unlock>
 8014940:	e5fa      	b.n	8014538 <_malloc_r+0x18>
 8014942:	4610      	mov	r0, r2
 8014944:	46d8      	mov	r8, fp
 8014946:	e7dd      	b.n	8014904 <_malloc_r+0x3e4>
 8014948:	f8da 2004 	ldr.w	r2, [sl, #4]
 801494c:	f1a9 090c 	sub.w	r9, r9, #12
 8014950:	f029 0907 	bic.w	r9, r9, #7
 8014954:	f002 0201 	and.w	r2, r2, #1
 8014958:	ea42 0209 	orr.w	r2, r2, r9
 801495c:	f8ca 2004 	str.w	r2, [sl, #4]
 8014960:	2105      	movs	r1, #5
 8014962:	eb0a 0209 	add.w	r2, sl, r9
 8014966:	f1b9 0f0f 	cmp.w	r9, #15
 801496a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801496e:	f67f aefd 	bls.w	801476c <_malloc_r+0x24c>
 8014972:	f10a 0108 	add.w	r1, sl, #8
 8014976:	4628      	mov	r0, r5
 8014978:	f002 f93c 	bl	8016bf4 <_free_r>
 801497c:	4b05      	ldr	r3, [pc, #20]	; (8014994 <_malloc_r+0x474>)
 801497e:	e6f5      	b.n	801476c <_malloc_r+0x24c>
 8014980:	68b4      	ldr	r4, [r6, #8]
 8014982:	f047 0301 	orr.w	r3, r7, #1
 8014986:	4427      	add	r7, r4
 8014988:	f042 0201 	orr.w	r2, r2, #1
 801498c:	6063      	str	r3, [r4, #4]
 801498e:	60b7      	str	r7, [r6, #8]
 8014990:	607a      	str	r2, [r7, #4]
 8014992:	e5f6      	b.n	8014582 <_malloc_r+0x62>
 8014994:	200011a0 	.word	0x200011a0

08014998 <memcmp>:
 8014998:	b510      	push	{r4, lr}
 801499a:	3901      	subs	r1, #1
 801499c:	4402      	add	r2, r0
 801499e:	4290      	cmp	r0, r2
 80149a0:	d101      	bne.n	80149a6 <memcmp+0xe>
 80149a2:	2000      	movs	r0, #0
 80149a4:	e005      	b.n	80149b2 <memcmp+0x1a>
 80149a6:	7803      	ldrb	r3, [r0, #0]
 80149a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80149ac:	42a3      	cmp	r3, r4
 80149ae:	d001      	beq.n	80149b4 <memcmp+0x1c>
 80149b0:	1b18      	subs	r0, r3, r4
 80149b2:	bd10      	pop	{r4, pc}
 80149b4:	3001      	adds	r0, #1
 80149b6:	e7f2      	b.n	801499e <memcmp+0x6>

080149b8 <memset>:
 80149b8:	4402      	add	r2, r0
 80149ba:	4603      	mov	r3, r0
 80149bc:	4293      	cmp	r3, r2
 80149be:	d100      	bne.n	80149c2 <memset+0xa>
 80149c0:	4770      	bx	lr
 80149c2:	f803 1b01 	strb.w	r1, [r3], #1
 80149c6:	e7f9      	b.n	80149bc <memset+0x4>

080149c8 <__malloc_lock>:
 80149c8:	4801      	ldr	r0, [pc, #4]	; (80149d0 <__malloc_lock+0x8>)
 80149ca:	f002 b9d9 	b.w	8016d80 <__retarget_lock_acquire_recursive>
 80149ce:	bf00      	nop
 80149d0:	200011d5 	.word	0x200011d5

080149d4 <__malloc_unlock>:
 80149d4:	4801      	ldr	r0, [pc, #4]	; (80149dc <__malloc_unlock+0x8>)
 80149d6:	f002 b9d4 	b.w	8016d82 <__retarget_lock_release_recursive>
 80149da:	bf00      	nop
 80149dc:	200011d5 	.word	0x200011d5

080149e0 <_sbrk_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4d06      	ldr	r5, [pc, #24]	; (80149fc <_sbrk_r+0x1c>)
 80149e4:	2300      	movs	r3, #0
 80149e6:	4604      	mov	r4, r0
 80149e8:	4608      	mov	r0, r1
 80149ea:	602b      	str	r3, [r5, #0]
 80149ec:	f7ed fdb8 	bl	8002560 <_sbrk>
 80149f0:	1c43      	adds	r3, r0, #1
 80149f2:	d102      	bne.n	80149fa <_sbrk_r+0x1a>
 80149f4:	682b      	ldr	r3, [r5, #0]
 80149f6:	b103      	cbz	r3, 80149fa <_sbrk_r+0x1a>
 80149f8:	6023      	str	r3, [r4, #0]
 80149fa:	bd38      	pop	{r3, r4, r5, pc}
 80149fc:	200011d8 	.word	0x200011d8

08014a00 <snprintf>:
 8014a00:	b40c      	push	{r2, r3}
 8014a02:	b530      	push	{r4, r5, lr}
 8014a04:	4b17      	ldr	r3, [pc, #92]	; (8014a64 <snprintf+0x64>)
 8014a06:	1e0c      	subs	r4, r1, #0
 8014a08:	681d      	ldr	r5, [r3, #0]
 8014a0a:	b09d      	sub	sp, #116	; 0x74
 8014a0c:	da08      	bge.n	8014a20 <snprintf+0x20>
 8014a0e:	238b      	movs	r3, #139	; 0x8b
 8014a10:	602b      	str	r3, [r5, #0]
 8014a12:	f04f 30ff 	mov.w	r0, #4294967295
 8014a16:	b01d      	add	sp, #116	; 0x74
 8014a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a1c:	b002      	add	sp, #8
 8014a1e:	4770      	bx	lr
 8014a20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a28:	bf14      	ite	ne
 8014a2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a2e:	4623      	moveq	r3, r4
 8014a30:	9304      	str	r3, [sp, #16]
 8014a32:	9307      	str	r3, [sp, #28]
 8014a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a38:	9002      	str	r0, [sp, #8]
 8014a3a:	9006      	str	r0, [sp, #24]
 8014a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014a42:	ab21      	add	r3, sp, #132	; 0x84
 8014a44:	a902      	add	r1, sp, #8
 8014a46:	4628      	mov	r0, r5
 8014a48:	9301      	str	r3, [sp, #4]
 8014a4a:	f000 f80d 	bl	8014a68 <_svfprintf_r>
 8014a4e:	1c43      	adds	r3, r0, #1
 8014a50:	bfbc      	itt	lt
 8014a52:	238b      	movlt	r3, #139	; 0x8b
 8014a54:	602b      	strlt	r3, [r5, #0]
 8014a56:	2c00      	cmp	r4, #0
 8014a58:	d0dd      	beq.n	8014a16 <snprintf+0x16>
 8014a5a:	9b02      	ldr	r3, [sp, #8]
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	701a      	strb	r2, [r3, #0]
 8014a60:	e7d9      	b.n	8014a16 <snprintf+0x16>
 8014a62:	bf00      	nop
 8014a64:	20000098 	.word	0x20000098

08014a68 <_svfprintf_r>:
 8014a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a6c:	ed2d 8b04 	vpush	{d8-d9}
 8014a70:	b0d3      	sub	sp, #332	; 0x14c
 8014a72:	4688      	mov	r8, r1
 8014a74:	4691      	mov	r9, r2
 8014a76:	461e      	mov	r6, r3
 8014a78:	4682      	mov	sl, r0
 8014a7a:	f002 f97b 	bl	8016d74 <_localeconv_r>
 8014a7e:	6803      	ldr	r3, [r0, #0]
 8014a80:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7eb fc4c 	bl	8000320 <strlen>
 8014a88:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8014a8c:	9011      	str	r0, [sp, #68]	; 0x44
 8014a8e:	0618      	lsls	r0, r3, #24
 8014a90:	d51a      	bpl.n	8014ac8 <_svfprintf_r+0x60>
 8014a92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014a96:	b9bb      	cbnz	r3, 8014ac8 <_svfprintf_r+0x60>
 8014a98:	2140      	movs	r1, #64	; 0x40
 8014a9a:	4650      	mov	r0, sl
 8014a9c:	f7ff fd40 	bl	8014520 <_malloc_r>
 8014aa0:	f8c8 0000 	str.w	r0, [r8]
 8014aa4:	f8c8 0010 	str.w	r0, [r8, #16]
 8014aa8:	b958      	cbnz	r0, 8014ac2 <_svfprintf_r+0x5a>
 8014aaa:	230c      	movs	r3, #12
 8014aac:	f8ca 3000 	str.w	r3, [sl]
 8014ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab4:	9310      	str	r3, [sp, #64]	; 0x40
 8014ab6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014ab8:	b053      	add	sp, #332	; 0x14c
 8014aba:	ecbd 8b04 	vpop	{d8-d9}
 8014abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac2:	2340      	movs	r3, #64	; 0x40
 8014ac4:	f8c8 3014 	str.w	r3, [r8, #20]
 8014ac8:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8014d18 <_svfprintf_r+0x2b0>
 8014acc:	2500      	movs	r5, #0
 8014ace:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8014ad2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8014ad6:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 8014ada:	ac29      	add	r4, sp, #164	; 0xa4
 8014adc:	9426      	str	r4, [sp, #152]	; 0x98
 8014ade:	9509      	str	r5, [sp, #36]	; 0x24
 8014ae0:	950e      	str	r5, [sp, #56]	; 0x38
 8014ae2:	9516      	str	r5, [sp, #88]	; 0x58
 8014ae4:	9518      	str	r5, [sp, #96]	; 0x60
 8014ae6:	9510      	str	r5, [sp, #64]	; 0x40
 8014ae8:	464b      	mov	r3, r9
 8014aea:	461d      	mov	r5, r3
 8014aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014af0:	b10a      	cbz	r2, 8014af6 <_svfprintf_r+0x8e>
 8014af2:	2a25      	cmp	r2, #37	; 0x25
 8014af4:	d1f9      	bne.n	8014aea <_svfprintf_r+0x82>
 8014af6:	ebb5 0709 	subs.w	r7, r5, r9
 8014afa:	d00d      	beq.n	8014b18 <_svfprintf_r+0xb0>
 8014afc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014afe:	443b      	add	r3, r7
 8014b00:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014b04:	3301      	adds	r3, #1
 8014b06:	2b07      	cmp	r3, #7
 8014b08:	e9c4 9700 	strd	r9, r7, [r4]
 8014b0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8014b0e:	dc79      	bgt.n	8014c04 <_svfprintf_r+0x19c>
 8014b10:	3408      	adds	r4, #8
 8014b12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b14:	443b      	add	r3, r7
 8014b16:	9310      	str	r3, [sp, #64]	; 0x40
 8014b18:	782b      	ldrb	r3, [r5, #0]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	f001 8144 	beq.w	8015da8 <_svfprintf_r+0x1340>
 8014b20:	2300      	movs	r3, #0
 8014b22:	f04f 32ff 	mov.w	r2, #4294967295
 8014b26:	9208      	str	r2, [sp, #32]
 8014b28:	3501      	adds	r5, #1
 8014b2a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014b2e:	9314      	str	r3, [sp, #80]	; 0x50
 8014b30:	469b      	mov	fp, r3
 8014b32:	270a      	movs	r7, #10
 8014b34:	222b      	movs	r2, #43	; 0x2b
 8014b36:	462b      	mov	r3, r5
 8014b38:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014b3c:	910a      	str	r1, [sp, #40]	; 0x28
 8014b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b42:	3b20      	subs	r3, #32
 8014b44:	2b5a      	cmp	r3, #90	; 0x5a
 8014b46:	f200 85bb 	bhi.w	80156c0 <_svfprintf_r+0xc58>
 8014b4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014b4e:	007e      	.short	0x007e
 8014b50:	05b905b9 	.word	0x05b905b9
 8014b54:	05b90086 	.word	0x05b90086
 8014b58:	05b905b9 	.word	0x05b905b9
 8014b5c:	05b90065 	.word	0x05b90065
 8014b60:	008905b9 	.word	0x008905b9
 8014b64:	05b90093 	.word	0x05b90093
 8014b68:	00960090 	.word	0x00960090
 8014b6c:	00b305b9 	.word	0x00b305b9
 8014b70:	00b600b6 	.word	0x00b600b6
 8014b74:	00b600b6 	.word	0x00b600b6
 8014b78:	00b600b6 	.word	0x00b600b6
 8014b7c:	00b600b6 	.word	0x00b600b6
 8014b80:	05b900b6 	.word	0x05b900b6
 8014b84:	05b905b9 	.word	0x05b905b9
 8014b88:	05b905b9 	.word	0x05b905b9
 8014b8c:	05b905b9 	.word	0x05b905b9
 8014b90:	05b9012c 	.word	0x05b9012c
 8014b94:	00fc00e9 	.word	0x00fc00e9
 8014b98:	012c012c 	.word	0x012c012c
 8014b9c:	05b9012c 	.word	0x05b9012c
 8014ba0:	05b905b9 	.word	0x05b905b9
 8014ba4:	00c605b9 	.word	0x00c605b9
 8014ba8:	05b905b9 	.word	0x05b905b9
 8014bac:	05b90494 	.word	0x05b90494
 8014bb0:	05b905b9 	.word	0x05b905b9
 8014bb4:	05b904de 	.word	0x05b904de
 8014bb8:	05b904ff 	.word	0x05b904ff
 8014bbc:	052105b9 	.word	0x052105b9
 8014bc0:	05b905b9 	.word	0x05b905b9
 8014bc4:	05b905b9 	.word	0x05b905b9
 8014bc8:	05b905b9 	.word	0x05b905b9
 8014bcc:	05b905b9 	.word	0x05b905b9
 8014bd0:	05b9012c 	.word	0x05b9012c
 8014bd4:	00fe00e9 	.word	0x00fe00e9
 8014bd8:	012c012c 	.word	0x012c012c
 8014bdc:	00c9012c 	.word	0x00c9012c
 8014be0:	00dd00fe 	.word	0x00dd00fe
 8014be4:	00d605b9 	.word	0x00d605b9
 8014be8:	046f05b9 	.word	0x046f05b9
 8014bec:	04cc0496 	.word	0x04cc0496
 8014bf0:	05b900dd 	.word	0x05b900dd
 8014bf4:	007c04de 	.word	0x007c04de
 8014bf8:	05b90501 	.word	0x05b90501
 8014bfc:	054005b9 	.word	0x054005b9
 8014c00:	007c05b9 	.word	0x007c05b9
 8014c04:	aa26      	add	r2, sp, #152	; 0x98
 8014c06:	4641      	mov	r1, r8
 8014c08:	4650      	mov	r0, sl
 8014c0a:	f002 fc44 	bl	8017496 <__ssprint_r>
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	f040 8137 	bne.w	8014e82 <_svfprintf_r+0x41a>
 8014c14:	ac29      	add	r4, sp, #164	; 0xa4
 8014c16:	e77c      	b.n	8014b12 <_svfprintf_r+0xaa>
 8014c18:	4650      	mov	r0, sl
 8014c1a:	f002 f8ab 	bl	8016d74 <_localeconv_r>
 8014c1e:	6843      	ldr	r3, [r0, #4]
 8014c20:	9318      	str	r3, [sp, #96]	; 0x60
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7eb fb7c 	bl	8000320 <strlen>
 8014c28:	9016      	str	r0, [sp, #88]	; 0x58
 8014c2a:	4650      	mov	r0, sl
 8014c2c:	f002 f8a2 	bl	8016d74 <_localeconv_r>
 8014c30:	6883      	ldr	r3, [r0, #8]
 8014c32:	930e      	str	r3, [sp, #56]	; 0x38
 8014c34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014c36:	222b      	movs	r2, #43	; 0x2b
 8014c38:	b12b      	cbz	r3, 8014c46 <_svfprintf_r+0x1de>
 8014c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c3c:	b11b      	cbz	r3, 8014c46 <_svfprintf_r+0x1de>
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	b10b      	cbz	r3, 8014c46 <_svfprintf_r+0x1de>
 8014c42:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8014c46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014c48:	e775      	b.n	8014b36 <_svfprintf_r+0xce>
 8014c4a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d1f9      	bne.n	8014c46 <_svfprintf_r+0x1de>
 8014c52:	2320      	movs	r3, #32
 8014c54:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014c58:	e7f5      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014c5a:	f04b 0b01 	orr.w	fp, fp, #1
 8014c5e:	e7f2      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014c60:	f856 3b04 	ldr.w	r3, [r6], #4
 8014c64:	9314      	str	r3, [sp, #80]	; 0x50
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	daed      	bge.n	8014c46 <_svfprintf_r+0x1de>
 8014c6a:	425b      	negs	r3, r3
 8014c6c:	9314      	str	r3, [sp, #80]	; 0x50
 8014c6e:	f04b 0b04 	orr.w	fp, fp, #4
 8014c72:	e7e8      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014c74:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8014c78:	e7e5      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014c7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014c7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014c80:	930a      	str	r3, [sp, #40]	; 0x28
 8014c82:	2b2a      	cmp	r3, #42	; 0x2a
 8014c84:	d113      	bne.n	8014cae <_svfprintf_r+0x246>
 8014c86:	f856 0b04 	ldr.w	r0, [r6], #4
 8014c8a:	950f      	str	r5, [sp, #60]	; 0x3c
 8014c8c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8014c90:	9308      	str	r3, [sp, #32]
 8014c92:	e7d8      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014c94:	9908      	ldr	r1, [sp, #32]
 8014c96:	fb07 3301 	mla	r3, r7, r1, r3
 8014c9a:	9308      	str	r3, [sp, #32]
 8014c9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8014ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ca4:	3b30      	subs	r3, #48	; 0x30
 8014ca6:	2b09      	cmp	r3, #9
 8014ca8:	d9f4      	bls.n	8014c94 <_svfprintf_r+0x22c>
 8014caa:	950f      	str	r5, [sp, #60]	; 0x3c
 8014cac:	e748      	b.n	8014b40 <_svfprintf_r+0xd8>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	9308      	str	r3, [sp, #32]
 8014cb2:	e7f6      	b.n	8014ca2 <_svfprintf_r+0x23a>
 8014cb4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8014cb8:	e7c5      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014cbe:	9314      	str	r3, [sp, #80]	; 0x50
 8014cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014cc4:	3b30      	subs	r3, #48	; 0x30
 8014cc6:	fb07 3301 	mla	r3, r7, r1, r3
 8014cca:	9314      	str	r3, [sp, #80]	; 0x50
 8014ccc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8014cd2:	3b30      	subs	r3, #48	; 0x30
 8014cd4:	2b09      	cmp	r3, #9
 8014cd6:	d9f3      	bls.n	8014cc0 <_svfprintf_r+0x258>
 8014cd8:	e7e7      	b.n	8014caa <_svfprintf_r+0x242>
 8014cda:	f04b 0b08 	orr.w	fp, fp, #8
 8014cde:	e7b2      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	2b68      	cmp	r3, #104	; 0x68
 8014ce6:	bf01      	itttt	eq
 8014ce8:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 8014cea:	3301      	addeq	r3, #1
 8014cec:	930f      	streq	r3, [sp, #60]	; 0x3c
 8014cee:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8014cf2:	bf18      	it	ne
 8014cf4:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8014cf8:	e7a5      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	2b6c      	cmp	r3, #108	; 0x6c
 8014d00:	d105      	bne.n	8014d0e <_svfprintf_r+0x2a6>
 8014d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d04:	3301      	adds	r3, #1
 8014d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d08:	f04b 0b20 	orr.w	fp, fp, #32
 8014d0c:	e79b      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014d0e:	f04b 0b10 	orr.w	fp, fp, #16
 8014d12:	e798      	b.n	8014c46 <_svfprintf_r+0x1de>
 8014d14:	f3af 8000 	nop.w
	...
 8014d20:	4632      	mov	r2, r6
 8014d22:	2000      	movs	r0, #0
 8014d24:	f852 3b04 	ldr.w	r3, [r2], #4
 8014d28:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d2a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8014d2e:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8014d32:	2301      	movs	r3, #1
 8014d34:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8014d38:	9007      	str	r0, [sp, #28]
 8014d3a:	9308      	str	r3, [sp, #32]
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	4605      	mov	r5, r0
 8014d40:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8014d44:	e1b8      	b.n	80150b8 <_svfprintf_r+0x650>
 8014d46:	f04b 0b10 	orr.w	fp, fp, #16
 8014d4a:	f01b 0f20 	tst.w	fp, #32
 8014d4e:	d012      	beq.n	8014d76 <_svfprintf_r+0x30e>
 8014d50:	1df3      	adds	r3, r6, #7
 8014d52:	f023 0307 	bic.w	r3, r3, #7
 8014d56:	461a      	mov	r2, r3
 8014d58:	685d      	ldr	r5, [r3, #4]
 8014d5a:	f852 6b08 	ldr.w	r6, [r2], #8
 8014d5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d60:	2d00      	cmp	r5, #0
 8014d62:	da06      	bge.n	8014d72 <_svfprintf_r+0x30a>
 8014d64:	4276      	negs	r6, r6
 8014d66:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8014d6a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8014d6e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014d72:	2301      	movs	r3, #1
 8014d74:	e392      	b.n	801549c <_svfprintf_r+0xa34>
 8014d76:	4633      	mov	r3, r6
 8014d78:	f01b 0f10 	tst.w	fp, #16
 8014d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d82:	d002      	beq.n	8014d8a <_svfprintf_r+0x322>
 8014d84:	462e      	mov	r6, r5
 8014d86:	17ed      	asrs	r5, r5, #31
 8014d88:	e7ea      	b.n	8014d60 <_svfprintf_r+0x2f8>
 8014d8a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8014d8e:	d003      	beq.n	8014d98 <_svfprintf_r+0x330>
 8014d90:	b22e      	sxth	r6, r5
 8014d92:	f345 35c0 	sbfx	r5, r5, #15, #1
 8014d96:	e7e3      	b.n	8014d60 <_svfprintf_r+0x2f8>
 8014d98:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8014d9c:	d0f2      	beq.n	8014d84 <_svfprintf_r+0x31c>
 8014d9e:	b26e      	sxtb	r6, r5
 8014da0:	f345 15c0 	sbfx	r5, r5, #7, #1
 8014da4:	e7dc      	b.n	8014d60 <_svfprintf_r+0x2f8>
 8014da6:	3607      	adds	r6, #7
 8014da8:	f026 0307 	bic.w	r3, r6, #7
 8014dac:	ecb3 7b02 	vldmia	r3!, {d7}
 8014db0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8014db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014db6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014db8:	ee09 3a10 	vmov	s18, r3
 8014dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014dc2:	ee09 3a90 	vmov	s19, r3
 8014dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8014dca:	4b3a      	ldr	r3, [pc, #232]	; (8014eb4 <_svfprintf_r+0x44c>)
 8014dcc:	ec51 0b19 	vmov	r0, r1, d9
 8014dd0:	f7eb ff04 	bl	8000bdc <__aeabi_dcmpun>
 8014dd4:	bb10      	cbnz	r0, 8014e1c <_svfprintf_r+0x3b4>
 8014dd6:	4b37      	ldr	r3, [pc, #220]	; (8014eb4 <_svfprintf_r+0x44c>)
 8014dd8:	ec51 0b19 	vmov	r0, r1, d9
 8014ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8014de0:	f7eb fede 	bl	8000ba0 <__aeabi_dcmple>
 8014de4:	b9d0      	cbnz	r0, 8014e1c <_svfprintf_r+0x3b4>
 8014de6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8014dea:	2200      	movs	r2, #0
 8014dec:	2300      	movs	r3, #0
 8014dee:	f7eb fecd 	bl	8000b8c <__aeabi_dcmplt>
 8014df2:	b110      	cbz	r0, 8014dfa <_svfprintf_r+0x392>
 8014df4:	232d      	movs	r3, #45	; 0x2d
 8014df6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014dfa:	4a2f      	ldr	r2, [pc, #188]	; (8014eb8 <_svfprintf_r+0x450>)
 8014dfc:	482f      	ldr	r0, [pc, #188]	; (8014ebc <_svfprintf_r+0x454>)
 8014dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e00:	2100      	movs	r1, #0
 8014e02:	2b47      	cmp	r3, #71	; 0x47
 8014e04:	bfd4      	ite	le
 8014e06:	4691      	movle	r9, r2
 8014e08:	4681      	movgt	r9, r0
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	e9cd 1307 	strd	r1, r3, [sp, #28]
 8014e10:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8014e14:	2600      	movs	r6, #0
 8014e16:	4633      	mov	r3, r6
 8014e18:	f000 bffc 	b.w	8015e14 <_svfprintf_r+0x13ac>
 8014e1c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014e20:	4610      	mov	r0, r2
 8014e22:	4619      	mov	r1, r3
 8014e24:	f7eb feda 	bl	8000bdc <__aeabi_dcmpun>
 8014e28:	b140      	cbz	r0, 8014e3c <_svfprintf_r+0x3d4>
 8014e2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e2c:	4a24      	ldr	r2, [pc, #144]	; (8014ec0 <_svfprintf_r+0x458>)
 8014e2e:	4825      	ldr	r0, [pc, #148]	; (8014ec4 <_svfprintf_r+0x45c>)
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	bfbc      	itt	lt
 8014e34:	232d      	movlt	r3, #45	; 0x2d
 8014e36:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8014e3a:	e7e0      	b.n	8014dfe <_svfprintf_r+0x396>
 8014e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e3e:	f023 0320 	bic.w	r3, r3, #32
 8014e42:	2b41      	cmp	r3, #65	; 0x41
 8014e44:	930c      	str	r3, [sp, #48]	; 0x30
 8014e46:	d125      	bne.n	8014e94 <_svfprintf_r+0x42c>
 8014e48:	2330      	movs	r3, #48	; 0x30
 8014e4a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8014e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e50:	2b61      	cmp	r3, #97	; 0x61
 8014e52:	bf0c      	ite	eq
 8014e54:	2378      	moveq	r3, #120	; 0x78
 8014e56:	2358      	movne	r3, #88	; 0x58
 8014e58:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8014e5c:	9b08      	ldr	r3, [sp, #32]
 8014e5e:	2b63      	cmp	r3, #99	; 0x63
 8014e60:	f04b 0b02 	orr.w	fp, fp, #2
 8014e64:	dd30      	ble.n	8014ec8 <_svfprintf_r+0x460>
 8014e66:	1c59      	adds	r1, r3, #1
 8014e68:	4650      	mov	r0, sl
 8014e6a:	f7ff fb59 	bl	8014520 <_malloc_r>
 8014e6e:	4681      	mov	r9, r0
 8014e70:	2800      	cmp	r0, #0
 8014e72:	f040 81f9 	bne.w	8015268 <_svfprintf_r+0x800>
 8014e76:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8014e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e7e:	f8a8 300c 	strh.w	r3, [r8, #12]
 8014e82:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8014e86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014e8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e8c:	bf18      	it	ne
 8014e8e:	f04f 33ff 	movne.w	r3, #4294967295
 8014e92:	e60f      	b.n	8014ab4 <_svfprintf_r+0x4c>
 8014e94:	9b08      	ldr	r3, [sp, #32]
 8014e96:	3301      	adds	r3, #1
 8014e98:	f000 81e8 	beq.w	801526c <_svfprintf_r+0x804>
 8014e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e9e:	2b47      	cmp	r3, #71	; 0x47
 8014ea0:	f040 81e7 	bne.w	8015272 <_svfprintf_r+0x80a>
 8014ea4:	9b08      	ldr	r3, [sp, #32]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	f040 81e3 	bne.w	8015272 <_svfprintf_r+0x80a>
 8014eac:	9307      	str	r3, [sp, #28]
 8014eae:	2301      	movs	r3, #1
 8014eb0:	9308      	str	r3, [sp, #32]
 8014eb2:	e00c      	b.n	8014ece <_svfprintf_r+0x466>
 8014eb4:	7fefffff 	.word	0x7fefffff
 8014eb8:	08019bdc 	.word	0x08019bdc
 8014ebc:	08019be0 	.word	0x08019be0
 8014ec0:	08019be4 	.word	0x08019be4
 8014ec4:	08019be8 	.word	0x08019be8
 8014ec8:	9007      	str	r0, [sp, #28]
 8014eca:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8014ece:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8014ed2:	9315      	str	r3, [sp, #84]	; 0x54
 8014ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	f280 81cd 	bge.w	8015276 <_svfprintf_r+0x80e>
 8014edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ede:	ee08 3a10 	vmov	s16, r3
 8014ee2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ee4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014ee8:	ee08 3a90 	vmov	s17, r3
 8014eec:	232d      	movs	r3, #45	; 0x2d
 8014eee:	931c      	str	r3, [sp, #112]	; 0x70
 8014ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ef2:	2b41      	cmp	r3, #65	; 0x41
 8014ef4:	f040 81dd 	bne.w	80152b2 <_svfprintf_r+0x84a>
 8014ef8:	aa20      	add	r2, sp, #128	; 0x80
 8014efa:	ec51 0b18 	vmov	r0, r1, d8
 8014efe:	f002 fa83 	bl	8017408 <frexp>
 8014f02:	2200      	movs	r2, #0
 8014f04:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014f08:	f7eb fbce 	bl	80006a8 <__aeabi_dmul>
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	2300      	movs	r3, #0
 8014f10:	4606      	mov	r6, r0
 8014f12:	460f      	mov	r7, r1
 8014f14:	f7eb fe30 	bl	8000b78 <__aeabi_dcmpeq>
 8014f18:	b108      	cbz	r0, 8014f1e <_svfprintf_r+0x4b6>
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	9320      	str	r3, [sp, #128]	; 0x80
 8014f1e:	4ba7      	ldr	r3, [pc, #668]	; (80151bc <_svfprintf_r+0x754>)
 8014f20:	4aa7      	ldr	r2, [pc, #668]	; (80151c0 <_svfprintf_r+0x758>)
 8014f22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f24:	2961      	cmp	r1, #97	; 0x61
 8014f26:	bf18      	it	ne
 8014f28:	461a      	movne	r2, r3
 8014f2a:	9b08      	ldr	r3, [sp, #32]
 8014f2c:	921b      	str	r2, [sp, #108]	; 0x6c
 8014f2e:	3b01      	subs	r3, #1
 8014f30:	9309      	str	r3, [sp, #36]	; 0x24
 8014f32:	464d      	mov	r5, r9
 8014f34:	4ba3      	ldr	r3, [pc, #652]	; (80151c4 <_svfprintf_r+0x75c>)
 8014f36:	2200      	movs	r2, #0
 8014f38:	4630      	mov	r0, r6
 8014f3a:	4639      	mov	r1, r7
 8014f3c:	f7eb fbb4 	bl	80006a8 <__aeabi_dmul>
 8014f40:	460f      	mov	r7, r1
 8014f42:	4606      	mov	r6, r0
 8014f44:	f7eb fe60 	bl	8000c08 <__aeabi_d2iz>
 8014f48:	901d      	str	r0, [sp, #116]	; 0x74
 8014f4a:	f7eb fb43 	bl	80005d4 <__aeabi_i2d>
 8014f4e:	4602      	mov	r2, r0
 8014f50:	460b      	mov	r3, r1
 8014f52:	4630      	mov	r0, r6
 8014f54:	4639      	mov	r1, r7
 8014f56:	f7eb f9ef 	bl	8000338 <__aeabi_dsub>
 8014f5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f5e:	5c9b      	ldrb	r3, [r3, r2]
 8014f60:	f805 3b01 	strb.w	r3, [r5], #1
 8014f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f66:	930d      	str	r3, [sp, #52]	; 0x34
 8014f68:	1c5a      	adds	r2, r3, #1
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	460f      	mov	r7, r1
 8014f6e:	d007      	beq.n	8014f80 <_svfprintf_r+0x518>
 8014f70:	3b01      	subs	r3, #1
 8014f72:	9309      	str	r3, [sp, #36]	; 0x24
 8014f74:	2200      	movs	r2, #0
 8014f76:	2300      	movs	r3, #0
 8014f78:	f7eb fdfe 	bl	8000b78 <__aeabi_dcmpeq>
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d0d9      	beq.n	8014f34 <_svfprintf_r+0x4cc>
 8014f80:	4b91      	ldr	r3, [pc, #580]	; (80151c8 <_svfprintf_r+0x760>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	4630      	mov	r0, r6
 8014f86:	4639      	mov	r1, r7
 8014f88:	f7eb fe1e 	bl	8000bc8 <__aeabi_dcmpgt>
 8014f8c:	b960      	cbnz	r0, 8014fa8 <_svfprintf_r+0x540>
 8014f8e:	4b8e      	ldr	r3, [pc, #568]	; (80151c8 <_svfprintf_r+0x760>)
 8014f90:	2200      	movs	r2, #0
 8014f92:	4630      	mov	r0, r6
 8014f94:	4639      	mov	r1, r7
 8014f96:	f7eb fdef 	bl	8000b78 <__aeabi_dcmpeq>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	f000 8184 	beq.w	80152a8 <_svfprintf_r+0x840>
 8014fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014fa2:	07db      	lsls	r3, r3, #31
 8014fa4:	f140 8180 	bpl.w	80152a8 <_svfprintf_r+0x840>
 8014fa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014faa:	9524      	str	r5, [sp, #144]	; 0x90
 8014fac:	7bd9      	ldrb	r1, [r3, #15]
 8014fae:	2030      	movs	r0, #48	; 0x30
 8014fb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014fb2:	1e53      	subs	r3, r2, #1
 8014fb4:	9324      	str	r3, [sp, #144]	; 0x90
 8014fb6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014fba:	428b      	cmp	r3, r1
 8014fbc:	f000 8163 	beq.w	8015286 <_svfprintf_r+0x81e>
 8014fc0:	2b39      	cmp	r3, #57	; 0x39
 8014fc2:	bf0b      	itete	eq
 8014fc4:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 8014fc6:	3301      	addne	r3, #1
 8014fc8:	7a9b      	ldrbeq	r3, [r3, #10]
 8014fca:	b2db      	uxtbne	r3, r3
 8014fcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014fd0:	eba5 0309 	sub.w	r3, r5, r9
 8014fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8014fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014fda:	2b47      	cmp	r3, #71	; 0x47
 8014fdc:	f040 81b1 	bne.w	8015342 <_svfprintf_r+0x8da>
 8014fe0:	1cef      	adds	r7, r5, #3
 8014fe2:	db03      	blt.n	8014fec <_svfprintf_r+0x584>
 8014fe4:	9b08      	ldr	r3, [sp, #32]
 8014fe6:	42ab      	cmp	r3, r5
 8014fe8:	f280 81d6 	bge.w	8015398 <_svfprintf_r+0x930>
 8014fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fee:	3b02      	subs	r3, #2
 8014ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8014ff2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014ff4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8014ff8:	f021 0120 	bic.w	r1, r1, #32
 8014ffc:	2941      	cmp	r1, #65	; 0x41
 8014ffe:	bf08      	it	eq
 8015000:	320f      	addeq	r2, #15
 8015002:	f105 33ff 	add.w	r3, r5, #4294967295
 8015006:	bf06      	itte	eq
 8015008:	b2d2      	uxtbeq	r2, r2
 801500a:	2101      	moveq	r1, #1
 801500c:	2100      	movne	r1, #0
 801500e:	2b00      	cmp	r3, #0
 8015010:	9320      	str	r3, [sp, #128]	; 0x80
 8015012:	bfb8      	it	lt
 8015014:	f1c5 0301 	rsblt	r3, r5, #1
 8015018:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801501c:	bfb4      	ite	lt
 801501e:	222d      	movlt	r2, #45	; 0x2d
 8015020:	222b      	movge	r2, #43	; 0x2b
 8015022:	2b09      	cmp	r3, #9
 8015024:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8015028:	f340 81a4 	ble.w	8015374 <_svfprintf_r+0x90c>
 801502c:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8015030:	260a      	movs	r6, #10
 8015032:	4611      	mov	r1, r2
 8015034:	fb93 f5f6 	sdiv	r5, r3, r6
 8015038:	fb06 3015 	mls	r0, r6, r5, r3
 801503c:	3030      	adds	r0, #48	; 0x30
 801503e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8015042:	4618      	mov	r0, r3
 8015044:	2863      	cmp	r0, #99	; 0x63
 8015046:	f102 32ff 	add.w	r2, r2, #4294967295
 801504a:	462b      	mov	r3, r5
 801504c:	dcf1      	bgt.n	8015032 <_svfprintf_r+0x5ca>
 801504e:	3330      	adds	r3, #48	; 0x30
 8015050:	1e88      	subs	r0, r1, #2
 8015052:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015056:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 801505a:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801505e:	4603      	mov	r3, r0
 8015060:	42ab      	cmp	r3, r5
 8015062:	f0c0 8182 	bcc.w	801536a <_svfprintf_r+0x902>
 8015066:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 801506a:	1a52      	subs	r2, r2, r1
 801506c:	42a8      	cmp	r0, r5
 801506e:	bf88      	it	hi
 8015070:	2200      	movhi	r2, #0
 8015072:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8015076:	441a      	add	r2, r3
 8015078:	ab22      	add	r3, sp, #136	; 0x88
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801507e:	9319      	str	r3, [sp, #100]	; 0x64
 8015080:	2a01      	cmp	r2, #1
 8015082:	4413      	add	r3, r2
 8015084:	9308      	str	r3, [sp, #32]
 8015086:	dc02      	bgt.n	801508e <_svfprintf_r+0x626>
 8015088:	f01b 0f01 	tst.w	fp, #1
 801508c:	d003      	beq.n	8015096 <_svfprintf_r+0x62e>
 801508e:	9b08      	ldr	r3, [sp, #32]
 8015090:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015092:	4413      	add	r3, r2
 8015094:	9308      	str	r3, [sp, #32]
 8015096:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801509e:	9315      	str	r3, [sp, #84]	; 0x54
 80150a0:	2300      	movs	r3, #0
 80150a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80150a6:	461d      	mov	r5, r3
 80150a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80150aa:	b113      	cbz	r3, 80150b2 <_svfprintf_r+0x64a>
 80150ac:	232d      	movs	r3, #45	; 0x2d
 80150ae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80150b2:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 80150b6:	2600      	movs	r6, #0
 80150b8:	9b08      	ldr	r3, [sp, #32]
 80150ba:	42b3      	cmp	r3, r6
 80150bc:	bfb8      	it	lt
 80150be:	4633      	movlt	r3, r6
 80150c0:	9315      	str	r3, [sp, #84]	; 0x54
 80150c2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80150c6:	b113      	cbz	r3, 80150ce <_svfprintf_r+0x666>
 80150c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150ca:	3301      	adds	r3, #1
 80150cc:	9315      	str	r3, [sp, #84]	; 0x54
 80150ce:	f01b 0302 	ands.w	r3, fp, #2
 80150d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80150d4:	bf1e      	ittt	ne
 80150d6:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 80150d8:	3302      	addne	r3, #2
 80150da:	9315      	strne	r3, [sp, #84]	; 0x54
 80150dc:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80150e0:	931c      	str	r3, [sp, #112]	; 0x70
 80150e2:	d11f      	bne.n	8015124 <_svfprintf_r+0x6bc>
 80150e4:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80150e8:	1a9f      	subs	r7, r3, r2
 80150ea:	2f00      	cmp	r7, #0
 80150ec:	dd1a      	ble.n	8015124 <_svfprintf_r+0x6bc>
 80150ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80150f2:	4836      	ldr	r0, [pc, #216]	; (80151cc <_svfprintf_r+0x764>)
 80150f4:	6020      	str	r0, [r4, #0]
 80150f6:	2f10      	cmp	r7, #16
 80150f8:	f103 0301 	add.w	r3, r3, #1
 80150fc:	f104 0108 	add.w	r1, r4, #8
 8015100:	f300 82ed 	bgt.w	80156de <_svfprintf_r+0xc76>
 8015104:	6067      	str	r7, [r4, #4]
 8015106:	2b07      	cmp	r3, #7
 8015108:	4417      	add	r7, r2
 801510a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801510e:	f340 82f9 	ble.w	8015704 <_svfprintf_r+0xc9c>
 8015112:	aa26      	add	r2, sp, #152	; 0x98
 8015114:	4641      	mov	r1, r8
 8015116:	4650      	mov	r0, sl
 8015118:	f002 f9bd 	bl	8017496 <__ssprint_r>
 801511c:	2800      	cmp	r0, #0
 801511e:	f040 8621 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015122:	ac29      	add	r4, sp, #164	; 0xa4
 8015124:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8015128:	b173      	cbz	r3, 8015148 <_svfprintf_r+0x6e0>
 801512a:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801512e:	6023      	str	r3, [r4, #0]
 8015130:	2301      	movs	r3, #1
 8015132:	6063      	str	r3, [r4, #4]
 8015134:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015136:	3301      	adds	r3, #1
 8015138:	9328      	str	r3, [sp, #160]	; 0xa0
 801513a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801513c:	3301      	adds	r3, #1
 801513e:	2b07      	cmp	r3, #7
 8015140:	9327      	str	r3, [sp, #156]	; 0x9c
 8015142:	f300 82e1 	bgt.w	8015708 <_svfprintf_r+0xca0>
 8015146:	3408      	adds	r4, #8
 8015148:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801514a:	b16b      	cbz	r3, 8015168 <_svfprintf_r+0x700>
 801514c:	ab1f      	add	r3, sp, #124	; 0x7c
 801514e:	6023      	str	r3, [r4, #0]
 8015150:	2302      	movs	r3, #2
 8015152:	6063      	str	r3, [r4, #4]
 8015154:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015156:	3302      	adds	r3, #2
 8015158:	9328      	str	r3, [sp, #160]	; 0xa0
 801515a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801515c:	3301      	adds	r3, #1
 801515e:	2b07      	cmp	r3, #7
 8015160:	9327      	str	r3, [sp, #156]	; 0x9c
 8015162:	f300 82db 	bgt.w	801571c <_svfprintf_r+0xcb4>
 8015166:	3408      	adds	r4, #8
 8015168:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801516a:	2b80      	cmp	r3, #128	; 0x80
 801516c:	d11f      	bne.n	80151ae <_svfprintf_r+0x746>
 801516e:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8015172:	1a9f      	subs	r7, r3, r2
 8015174:	2f00      	cmp	r7, #0
 8015176:	dd1a      	ble.n	80151ae <_svfprintf_r+0x746>
 8015178:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801517c:	4814      	ldr	r0, [pc, #80]	; (80151d0 <_svfprintf_r+0x768>)
 801517e:	6020      	str	r0, [r4, #0]
 8015180:	2f10      	cmp	r7, #16
 8015182:	f103 0301 	add.w	r3, r3, #1
 8015186:	f104 0108 	add.w	r1, r4, #8
 801518a:	f300 82d1 	bgt.w	8015730 <_svfprintf_r+0xcc8>
 801518e:	6067      	str	r7, [r4, #4]
 8015190:	2b07      	cmp	r3, #7
 8015192:	4417      	add	r7, r2
 8015194:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8015198:	f340 82dd 	ble.w	8015756 <_svfprintf_r+0xcee>
 801519c:	aa26      	add	r2, sp, #152	; 0x98
 801519e:	4641      	mov	r1, r8
 80151a0:	4650      	mov	r0, sl
 80151a2:	f002 f978 	bl	8017496 <__ssprint_r>
 80151a6:	2800      	cmp	r0, #0
 80151a8:	f040 85dc 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 80151ac:	ac29      	add	r4, sp, #164	; 0xa4
 80151ae:	9b08      	ldr	r3, [sp, #32]
 80151b0:	1af6      	subs	r6, r6, r3
 80151b2:	2e00      	cmp	r6, #0
 80151b4:	dd28      	ble.n	8015208 <_svfprintf_r+0x7a0>
 80151b6:	4f06      	ldr	r7, [pc, #24]	; (80151d0 <_svfprintf_r+0x768>)
 80151b8:	e00c      	b.n	80151d4 <_svfprintf_r+0x76c>
 80151ba:	bf00      	nop
 80151bc:	08019bfd 	.word	0x08019bfd
 80151c0:	08019bec 	.word	0x08019bec
 80151c4:	40300000 	.word	0x40300000
 80151c8:	3fe00000 	.word	0x3fe00000
 80151cc:	08019c10 	.word	0x08019c10
 80151d0:	08019c20 	.word	0x08019c20
 80151d4:	6027      	str	r7, [r4, #0]
 80151d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80151da:	2e10      	cmp	r6, #16
 80151dc:	f103 0301 	add.w	r3, r3, #1
 80151e0:	f104 0108 	add.w	r1, r4, #8
 80151e4:	f300 82b9 	bgt.w	801575a <_svfprintf_r+0xcf2>
 80151e8:	6066      	str	r6, [r4, #4]
 80151ea:	2b07      	cmp	r3, #7
 80151ec:	4416      	add	r6, r2
 80151ee:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80151f2:	f340 82c5 	ble.w	8015780 <_svfprintf_r+0xd18>
 80151f6:	aa26      	add	r2, sp, #152	; 0x98
 80151f8:	4641      	mov	r1, r8
 80151fa:	4650      	mov	r0, sl
 80151fc:	f002 f94b 	bl	8017496 <__ssprint_r>
 8015200:	2800      	cmp	r0, #0
 8015202:	f040 85af 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015206:	ac29      	add	r4, sp, #164	; 0xa4
 8015208:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801520c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801520e:	f040 82bd 	bne.w	801578c <_svfprintf_r+0xd24>
 8015212:	9b08      	ldr	r3, [sp, #32]
 8015214:	f8c4 9000 	str.w	r9, [r4]
 8015218:	441e      	add	r6, r3
 801521a:	6063      	str	r3, [r4, #4]
 801521c:	9628      	str	r6, [sp, #160]	; 0xa0
 801521e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015220:	3301      	adds	r3, #1
 8015222:	2b07      	cmp	r3, #7
 8015224:	9327      	str	r3, [sp, #156]	; 0x9c
 8015226:	f300 82f6 	bgt.w	8015816 <_svfprintf_r+0xdae>
 801522a:	3408      	adds	r4, #8
 801522c:	f01b 0f04 	tst.w	fp, #4
 8015230:	f040 857a 	bne.w	8015d28 <_svfprintf_r+0x12c0>
 8015234:	e9dd 2114 	ldrd	r2, r1, [sp, #80]	; 0x50
 8015238:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801523a:	428a      	cmp	r2, r1
 801523c:	bfac      	ite	ge
 801523e:	189b      	addge	r3, r3, r2
 8015240:	185b      	addlt	r3, r3, r1
 8015242:	9310      	str	r3, [sp, #64]	; 0x40
 8015244:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015246:	b13b      	cbz	r3, 8015258 <_svfprintf_r+0x7f0>
 8015248:	aa26      	add	r2, sp, #152	; 0x98
 801524a:	4641      	mov	r1, r8
 801524c:	4650      	mov	r0, sl
 801524e:	f002 f922 	bl	8017496 <__ssprint_r>
 8015252:	2800      	cmp	r0, #0
 8015254:	f040 8586 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015258:	2300      	movs	r3, #0
 801525a:	9327      	str	r3, [sp, #156]	; 0x9c
 801525c:	9b07      	ldr	r3, [sp, #28]
 801525e:	2b00      	cmp	r3, #0
 8015260:	f040 859c 	bne.w	8015d9c <_svfprintf_r+0x1334>
 8015264:	ac29      	add	r4, sp, #164	; 0xa4
 8015266:	e0ec      	b.n	8015442 <_svfprintf_r+0x9da>
 8015268:	9007      	str	r0, [sp, #28]
 801526a:	e630      	b.n	8014ece <_svfprintf_r+0x466>
 801526c:	9007      	str	r0, [sp, #28]
 801526e:	2306      	movs	r3, #6
 8015270:	e61e      	b.n	8014eb0 <_svfprintf_r+0x448>
 8015272:	9007      	str	r0, [sp, #28]
 8015274:	e62b      	b.n	8014ece <_svfprintf_r+0x466>
 8015276:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 801527a:	2300      	movs	r3, #0
 801527c:	eeb0 8a47 	vmov.f32	s16, s14
 8015280:	eef0 8a67 	vmov.f32	s17, s15
 8015284:	e633      	b.n	8014eee <_svfprintf_r+0x486>
 8015286:	f802 0c01 	strb.w	r0, [r2, #-1]
 801528a:	e691      	b.n	8014fb0 <_svfprintf_r+0x548>
 801528c:	f803 0b01 	strb.w	r0, [r3], #1
 8015290:	1aca      	subs	r2, r1, r3
 8015292:	2a00      	cmp	r2, #0
 8015294:	dafa      	bge.n	801528c <_svfprintf_r+0x824>
 8015296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801529a:	3201      	adds	r2, #1
 801529c:	f103 0301 	add.w	r3, r3, #1
 80152a0:	bfb8      	it	lt
 80152a2:	2300      	movlt	r3, #0
 80152a4:	441d      	add	r5, r3
 80152a6:	e693      	b.n	8014fd0 <_svfprintf_r+0x568>
 80152a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152aa:	462b      	mov	r3, r5
 80152ac:	18a9      	adds	r1, r5, r2
 80152ae:	2030      	movs	r0, #48	; 0x30
 80152b0:	e7ee      	b.n	8015290 <_svfprintf_r+0x828>
 80152b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152b4:	2b46      	cmp	r3, #70	; 0x46
 80152b6:	d005      	beq.n	80152c4 <_svfprintf_r+0x85c>
 80152b8:	2b45      	cmp	r3, #69	; 0x45
 80152ba:	d11b      	bne.n	80152f4 <_svfprintf_r+0x88c>
 80152bc:	9b08      	ldr	r3, [sp, #32]
 80152be:	1c5d      	adds	r5, r3, #1
 80152c0:	2302      	movs	r3, #2
 80152c2:	e001      	b.n	80152c8 <_svfprintf_r+0x860>
 80152c4:	9d08      	ldr	r5, [sp, #32]
 80152c6:	2303      	movs	r3, #3
 80152c8:	aa24      	add	r2, sp, #144	; 0x90
 80152ca:	9204      	str	r2, [sp, #16]
 80152cc:	aa21      	add	r2, sp, #132	; 0x84
 80152ce:	9203      	str	r2, [sp, #12]
 80152d0:	aa20      	add	r2, sp, #128	; 0x80
 80152d2:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80152d6:	9300      	str	r3, [sp, #0]
 80152d8:	4650      	mov	r0, sl
 80152da:	ec53 2b18 	vmov	r2, r3, d8
 80152de:	f000 fe4f 	bl	8015f80 <_dtoa_r>
 80152e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152e4:	2b47      	cmp	r3, #71	; 0x47
 80152e6:	4681      	mov	r9, r0
 80152e8:	d106      	bne.n	80152f8 <_svfprintf_r+0x890>
 80152ea:	f01b 0f01 	tst.w	fp, #1
 80152ee:	d103      	bne.n	80152f8 <_svfprintf_r+0x890>
 80152f0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80152f2:	e66d      	b.n	8014fd0 <_svfprintf_r+0x568>
 80152f4:	9d08      	ldr	r5, [sp, #32]
 80152f6:	e7e3      	b.n	80152c0 <_svfprintf_r+0x858>
 80152f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152fa:	2b46      	cmp	r3, #70	; 0x46
 80152fc:	eb09 0605 	add.w	r6, r9, r5
 8015300:	d10f      	bne.n	8015322 <_svfprintf_r+0x8ba>
 8015302:	f899 3000 	ldrb.w	r3, [r9]
 8015306:	2b30      	cmp	r3, #48	; 0x30
 8015308:	d109      	bne.n	801531e <_svfprintf_r+0x8b6>
 801530a:	ec51 0b18 	vmov	r0, r1, d8
 801530e:	2200      	movs	r2, #0
 8015310:	2300      	movs	r3, #0
 8015312:	f7eb fc31 	bl	8000b78 <__aeabi_dcmpeq>
 8015316:	b910      	cbnz	r0, 801531e <_svfprintf_r+0x8b6>
 8015318:	f1c5 0501 	rsb	r5, r5, #1
 801531c:	9520      	str	r5, [sp, #128]	; 0x80
 801531e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015320:	441e      	add	r6, r3
 8015322:	ec51 0b18 	vmov	r0, r1, d8
 8015326:	2200      	movs	r2, #0
 8015328:	2300      	movs	r3, #0
 801532a:	f7eb fc25 	bl	8000b78 <__aeabi_dcmpeq>
 801532e:	b100      	cbz	r0, 8015332 <_svfprintf_r+0x8ca>
 8015330:	9624      	str	r6, [sp, #144]	; 0x90
 8015332:	2230      	movs	r2, #48	; 0x30
 8015334:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015336:	429e      	cmp	r6, r3
 8015338:	d9da      	bls.n	80152f0 <_svfprintf_r+0x888>
 801533a:	1c59      	adds	r1, r3, #1
 801533c:	9124      	str	r1, [sp, #144]	; 0x90
 801533e:	701a      	strb	r2, [r3, #0]
 8015340:	e7f8      	b.n	8015334 <_svfprintf_r+0x8cc>
 8015342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015344:	2b46      	cmp	r3, #70	; 0x46
 8015346:	f47f ae54 	bne.w	8014ff2 <_svfprintf_r+0x58a>
 801534a:	9a08      	ldr	r2, [sp, #32]
 801534c:	f00b 0301 	and.w	r3, fp, #1
 8015350:	2d00      	cmp	r5, #0
 8015352:	ea43 0302 	orr.w	r3, r3, r2
 8015356:	dd1a      	ble.n	801538e <_svfprintf_r+0x926>
 8015358:	2b00      	cmp	r3, #0
 801535a:	d034      	beq.n	80153c6 <_svfprintf_r+0x95e>
 801535c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801535e:	18eb      	adds	r3, r5, r3
 8015360:	441a      	add	r2, r3
 8015362:	9208      	str	r2, [sp, #32]
 8015364:	2366      	movs	r3, #102	; 0x66
 8015366:	930a      	str	r3, [sp, #40]	; 0x28
 8015368:	e033      	b.n	80153d2 <_svfprintf_r+0x96a>
 801536a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801536e:	f802 6b01 	strb.w	r6, [r2], #1
 8015372:	e675      	b.n	8015060 <_svfprintf_r+0x5f8>
 8015374:	b941      	cbnz	r1, 8015388 <_svfprintf_r+0x920>
 8015376:	2230      	movs	r2, #48	; 0x30
 8015378:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801537c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8015380:	3330      	adds	r3, #48	; 0x30
 8015382:	f802 3b01 	strb.w	r3, [r2], #1
 8015386:	e677      	b.n	8015078 <_svfprintf_r+0x610>
 8015388:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801538c:	e7f8      	b.n	8015380 <_svfprintf_r+0x918>
 801538e:	b1e3      	cbz	r3, 80153ca <_svfprintf_r+0x962>
 8015390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015392:	9a08      	ldr	r2, [sp, #32]
 8015394:	3301      	adds	r3, #1
 8015396:	e7e3      	b.n	8015360 <_svfprintf_r+0x8f8>
 8015398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801539a:	429d      	cmp	r5, r3
 801539c:	db07      	blt.n	80153ae <_svfprintf_r+0x946>
 801539e:	f01b 0f01 	tst.w	fp, #1
 80153a2:	d02d      	beq.n	8015400 <_svfprintf_r+0x998>
 80153a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153a6:	18eb      	adds	r3, r5, r3
 80153a8:	9308      	str	r3, [sp, #32]
 80153aa:	2367      	movs	r3, #103	; 0x67
 80153ac:	e7db      	b.n	8015366 <_svfprintf_r+0x8fe>
 80153ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80153b2:	2d00      	cmp	r5, #0
 80153b4:	4413      	add	r3, r2
 80153b6:	9308      	str	r3, [sp, #32]
 80153b8:	dcf7      	bgt.n	80153aa <_svfprintf_r+0x942>
 80153ba:	9a08      	ldr	r2, [sp, #32]
 80153bc:	f1c5 0301 	rsb	r3, r5, #1
 80153c0:	441a      	add	r2, r3
 80153c2:	9208      	str	r2, [sp, #32]
 80153c4:	e7f1      	b.n	80153aa <_svfprintf_r+0x942>
 80153c6:	9508      	str	r5, [sp, #32]
 80153c8:	e7cc      	b.n	8015364 <_svfprintf_r+0x8fc>
 80153ca:	2366      	movs	r3, #102	; 0x66
 80153cc:	930a      	str	r3, [sp, #40]	; 0x28
 80153ce:	2301      	movs	r3, #1
 80153d0:	9308      	str	r3, [sp, #32]
 80153d2:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80153d6:	930d      	str	r3, [sp, #52]	; 0x34
 80153d8:	d025      	beq.n	8015426 <_svfprintf_r+0x9be>
 80153da:	2300      	movs	r3, #0
 80153dc:	2d00      	cmp	r5, #0
 80153de:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80153e2:	f77f ae61 	ble.w	80150a8 <_svfprintf_r+0x640>
 80153e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	2bff      	cmp	r3, #255	; 0xff
 80153ec:	d10a      	bne.n	8015404 <_svfprintf_r+0x99c>
 80153ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80153f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80153f4:	4413      	add	r3, r2
 80153f6:	9a08      	ldr	r2, [sp, #32]
 80153f8:	fb01 2303 	mla	r3, r1, r3, r2
 80153fc:	9308      	str	r3, [sp, #32]
 80153fe:	e653      	b.n	80150a8 <_svfprintf_r+0x640>
 8015400:	9508      	str	r5, [sp, #32]
 8015402:	e7d2      	b.n	80153aa <_svfprintf_r+0x942>
 8015404:	42ab      	cmp	r3, r5
 8015406:	daf2      	bge.n	80153ee <_svfprintf_r+0x986>
 8015408:	1aed      	subs	r5, r5, r3
 801540a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801540c:	785b      	ldrb	r3, [r3, #1]
 801540e:	b133      	cbz	r3, 801541e <_svfprintf_r+0x9b6>
 8015410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015412:	3301      	adds	r3, #1
 8015414:	930d      	str	r3, [sp, #52]	; 0x34
 8015416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015418:	3301      	adds	r3, #1
 801541a:	930e      	str	r3, [sp, #56]	; 0x38
 801541c:	e7e3      	b.n	80153e6 <_svfprintf_r+0x97e>
 801541e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015420:	3301      	adds	r3, #1
 8015422:	930c      	str	r3, [sp, #48]	; 0x30
 8015424:	e7df      	b.n	80153e6 <_svfprintf_r+0x97e>
 8015426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015428:	930c      	str	r3, [sp, #48]	; 0x30
 801542a:	e63d      	b.n	80150a8 <_svfprintf_r+0x640>
 801542c:	1d33      	adds	r3, r6, #4
 801542e:	f01b 0f20 	tst.w	fp, #32
 8015432:	930b      	str	r3, [sp, #44]	; 0x2c
 8015434:	d00a      	beq.n	801544c <_svfprintf_r+0x9e4>
 8015436:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015438:	6833      	ldr	r3, [r6, #0]
 801543a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801543c:	17d2      	asrs	r2, r2, #31
 801543e:	e9c3 1200 	strd	r1, r2, [r3]
 8015442:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015444:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8015448:	f7ff bb4e 	b.w	8014ae8 <_svfprintf_r+0x80>
 801544c:	f01b 0f10 	tst.w	fp, #16
 8015450:	d003      	beq.n	801545a <_svfprintf_r+0x9f2>
 8015452:	6833      	ldr	r3, [r6, #0]
 8015454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015456:	601a      	str	r2, [r3, #0]
 8015458:	e7f3      	b.n	8015442 <_svfprintf_r+0x9da>
 801545a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801545e:	d003      	beq.n	8015468 <_svfprintf_r+0xa00>
 8015460:	6833      	ldr	r3, [r6, #0]
 8015462:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015464:	801a      	strh	r2, [r3, #0]
 8015466:	e7ec      	b.n	8015442 <_svfprintf_r+0x9da>
 8015468:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801546c:	d0f1      	beq.n	8015452 <_svfprintf_r+0x9ea>
 801546e:	6833      	ldr	r3, [r6, #0]
 8015470:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015472:	701a      	strb	r2, [r3, #0]
 8015474:	e7e5      	b.n	8015442 <_svfprintf_r+0x9da>
 8015476:	f04b 0b10 	orr.w	fp, fp, #16
 801547a:	f01b 0320 	ands.w	r3, fp, #32
 801547e:	d01f      	beq.n	80154c0 <_svfprintf_r+0xa58>
 8015480:	1df3      	adds	r3, r6, #7
 8015482:	f023 0307 	bic.w	r3, r3, #7
 8015486:	461a      	mov	r2, r3
 8015488:	685d      	ldr	r5, [r3, #4]
 801548a:	f852 6b08 	ldr.w	r6, [r2], #8
 801548e:	920b      	str	r2, [sp, #44]	; 0x2c
 8015490:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8015494:	2300      	movs	r3, #0
 8015496:	2200      	movs	r2, #0
 8015498:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801549c:	9a08      	ldr	r2, [sp, #32]
 801549e:	3201      	adds	r2, #1
 80154a0:	f000 848d 	beq.w	8015dbe <_svfprintf_r+0x1356>
 80154a4:	ea56 0205 	orrs.w	r2, r6, r5
 80154a8:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80154ac:	f040 848c 	bne.w	8015dc8 <_svfprintf_r+0x1360>
 80154b0:	9a08      	ldr	r2, [sp, #32]
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	f000 80f9 	beq.w	80156aa <_svfprintf_r+0xc42>
 80154b8:	2b01      	cmp	r3, #1
 80154ba:	f040 8488 	bne.w	8015dce <_svfprintf_r+0x1366>
 80154be:	e09f      	b.n	8015600 <_svfprintf_r+0xb98>
 80154c0:	4632      	mov	r2, r6
 80154c2:	f01b 0510 	ands.w	r5, fp, #16
 80154c6:	f852 6b04 	ldr.w	r6, [r2], #4
 80154ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80154cc:	d001      	beq.n	80154d2 <_svfprintf_r+0xa6a>
 80154ce:	461d      	mov	r5, r3
 80154d0:	e7de      	b.n	8015490 <_svfprintf_r+0xa28>
 80154d2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80154d6:	d001      	beq.n	80154dc <_svfprintf_r+0xa74>
 80154d8:	b2b6      	uxth	r6, r6
 80154da:	e7d9      	b.n	8015490 <_svfprintf_r+0xa28>
 80154dc:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80154e0:	d0d6      	beq.n	8015490 <_svfprintf_r+0xa28>
 80154e2:	b2f6      	uxtb	r6, r6
 80154e4:	e7f3      	b.n	80154ce <_svfprintf_r+0xa66>
 80154e6:	4633      	mov	r3, r6
 80154e8:	2278      	movs	r2, #120	; 0x78
 80154ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80154ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80154f0:	2330      	movs	r3, #48	; 0x30
 80154f2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80154f6:	4ba3      	ldr	r3, [pc, #652]	; (8015784 <_svfprintf_r+0xd1c>)
 80154f8:	931a      	str	r3, [sp, #104]	; 0x68
 80154fa:	2500      	movs	r5, #0
 80154fc:	f04b 0b02 	orr.w	fp, fp, #2
 8015500:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8015504:	2302      	movs	r3, #2
 8015506:	920a      	str	r2, [sp, #40]	; 0x28
 8015508:	e7c5      	b.n	8015496 <_svfprintf_r+0xa2e>
 801550a:	4633      	mov	r3, r6
 801550c:	2500      	movs	r5, #0
 801550e:	f853 9b04 	ldr.w	r9, [r3], #4
 8015512:	930b      	str	r3, [sp, #44]	; 0x2c
 8015514:	9b08      	ldr	r3, [sp, #32]
 8015516:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801551a:	1c58      	adds	r0, r3, #1
 801551c:	d010      	beq.n	8015540 <_svfprintf_r+0xad8>
 801551e:	461a      	mov	r2, r3
 8015520:	4629      	mov	r1, r5
 8015522:	4648      	mov	r0, r9
 8015524:	f7ea feac 	bl	8000280 <memchr>
 8015528:	9007      	str	r0, [sp, #28]
 801552a:	2800      	cmp	r0, #0
 801552c:	f000 80d4 	beq.w	80156d8 <_svfprintf_r+0xc70>
 8015530:	eba0 0309 	sub.w	r3, r0, r9
 8015534:	e9cd 5307 	strd	r5, r3, [sp, #28]
 8015538:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 801553c:	462e      	mov	r6, r5
 801553e:	e5bb      	b.n	80150b8 <_svfprintf_r+0x650>
 8015540:	4648      	mov	r0, r9
 8015542:	f7ea feed 	bl	8000320 <strlen>
 8015546:	e9cd 5007 	strd	r5, r0, [sp, #28]
 801554a:	e463      	b.n	8014e14 <_svfprintf_r+0x3ac>
 801554c:	f04b 0b10 	orr.w	fp, fp, #16
 8015550:	f01b 0320 	ands.w	r3, fp, #32
 8015554:	d009      	beq.n	801556a <_svfprintf_r+0xb02>
 8015556:	1df3      	adds	r3, r6, #7
 8015558:	f023 0307 	bic.w	r3, r3, #7
 801555c:	461a      	mov	r2, r3
 801555e:	685d      	ldr	r5, [r3, #4]
 8015560:	f852 6b08 	ldr.w	r6, [r2], #8
 8015564:	920b      	str	r2, [sp, #44]	; 0x2c
 8015566:	2301      	movs	r3, #1
 8015568:	e795      	b.n	8015496 <_svfprintf_r+0xa2e>
 801556a:	4632      	mov	r2, r6
 801556c:	f01b 0510 	ands.w	r5, fp, #16
 8015570:	f852 6b04 	ldr.w	r6, [r2], #4
 8015574:	920b      	str	r2, [sp, #44]	; 0x2c
 8015576:	d001      	beq.n	801557c <_svfprintf_r+0xb14>
 8015578:	461d      	mov	r5, r3
 801557a:	e7f4      	b.n	8015566 <_svfprintf_r+0xafe>
 801557c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8015580:	d001      	beq.n	8015586 <_svfprintf_r+0xb1e>
 8015582:	b2b6      	uxth	r6, r6
 8015584:	e7ef      	b.n	8015566 <_svfprintf_r+0xafe>
 8015586:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801558a:	d0ec      	beq.n	8015566 <_svfprintf_r+0xafe>
 801558c:	b2f6      	uxtb	r6, r6
 801558e:	e7f3      	b.n	8015578 <_svfprintf_r+0xb10>
 8015590:	4b7d      	ldr	r3, [pc, #500]	; (8015788 <_svfprintf_r+0xd20>)
 8015592:	931a      	str	r3, [sp, #104]	; 0x68
 8015594:	f01b 0320 	ands.w	r3, fp, #32
 8015598:	d01b      	beq.n	80155d2 <_svfprintf_r+0xb6a>
 801559a:	1df3      	adds	r3, r6, #7
 801559c:	f023 0307 	bic.w	r3, r3, #7
 80155a0:	461a      	mov	r2, r3
 80155a2:	685d      	ldr	r5, [r3, #4]
 80155a4:	f852 6b08 	ldr.w	r6, [r2], #8
 80155a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80155aa:	f01b 0f01 	tst.w	fp, #1
 80155ae:	d00a      	beq.n	80155c6 <_svfprintf_r+0xb5e>
 80155b0:	ea56 0305 	orrs.w	r3, r6, r5
 80155b4:	d007      	beq.n	80155c6 <_svfprintf_r+0xb5e>
 80155b6:	2330      	movs	r3, #48	; 0x30
 80155b8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80155bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155be:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80155c2:	f04b 0b02 	orr.w	fp, fp, #2
 80155c6:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80155ca:	2302      	movs	r3, #2
 80155cc:	e763      	b.n	8015496 <_svfprintf_r+0xa2e>
 80155ce:	4b6d      	ldr	r3, [pc, #436]	; (8015784 <_svfprintf_r+0xd1c>)
 80155d0:	e7df      	b.n	8015592 <_svfprintf_r+0xb2a>
 80155d2:	4632      	mov	r2, r6
 80155d4:	f01b 0510 	ands.w	r5, fp, #16
 80155d8:	f852 6b04 	ldr.w	r6, [r2], #4
 80155dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80155de:	d001      	beq.n	80155e4 <_svfprintf_r+0xb7c>
 80155e0:	461d      	mov	r5, r3
 80155e2:	e7e2      	b.n	80155aa <_svfprintf_r+0xb42>
 80155e4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80155e8:	d001      	beq.n	80155ee <_svfprintf_r+0xb86>
 80155ea:	b2b6      	uxth	r6, r6
 80155ec:	e7dd      	b.n	80155aa <_svfprintf_r+0xb42>
 80155ee:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80155f2:	d0da      	beq.n	80155aa <_svfprintf_r+0xb42>
 80155f4:	b2f6      	uxtb	r6, r6
 80155f6:	e7f3      	b.n	80155e0 <_svfprintf_r+0xb78>
 80155f8:	2e0a      	cmp	r6, #10
 80155fa:	f175 0300 	sbcs.w	r3, r5, #0
 80155fe:	d205      	bcs.n	801560c <_svfprintf_r+0xba4>
 8015600:	3630      	adds	r6, #48	; 0x30
 8015602:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8015606:	f20d 1947 	addw	r9, sp, #327	; 0x147
 801560a:	e3fb      	b.n	8015e04 <_svfprintf_r+0x139c>
 801560c:	2300      	movs	r3, #0
 801560e:	9309      	str	r3, [sp, #36]	; 0x24
 8015610:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8015614:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8015618:	9307      	str	r3, [sp, #28]
 801561a:	220a      	movs	r2, #10
 801561c:	2300      	movs	r3, #0
 801561e:	4630      	mov	r0, r6
 8015620:	4629      	mov	r1, r5
 8015622:	f7eb fd97 	bl	8001154 <__aeabi_uldivmod>
 8015626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015628:	3301      	adds	r3, #1
 801562a:	9309      	str	r3, [sp, #36]	; 0x24
 801562c:	9b07      	ldr	r3, [sp, #28]
 801562e:	3230      	adds	r2, #48	; 0x30
 8015630:	f10b 39ff 	add.w	r9, fp, #4294967295
 8015634:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8015638:	b1d3      	cbz	r3, 8015670 <_svfprintf_r+0xc08>
 801563a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801563c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	429a      	cmp	r2, r3
 8015642:	d115      	bne.n	8015670 <_svfprintf_r+0xc08>
 8015644:	2aff      	cmp	r2, #255	; 0xff
 8015646:	d013      	beq.n	8015670 <_svfprintf_r+0xc08>
 8015648:	2e0a      	cmp	r6, #10
 801564a:	f175 0300 	sbcs.w	r3, r5, #0
 801564e:	d30f      	bcc.n	8015670 <_svfprintf_r+0xc08>
 8015650:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015652:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015654:	eba9 0903 	sub.w	r9, r9, r3
 8015658:	461a      	mov	r2, r3
 801565a:	4648      	mov	r0, r9
 801565c:	f001 ff08 	bl	8017470 <strncpy>
 8015660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015662:	785b      	ldrb	r3, [r3, #1]
 8015664:	b11b      	cbz	r3, 801566e <_svfprintf_r+0xc06>
 8015666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015668:	3301      	adds	r3, #1
 801566a:	930e      	str	r3, [sp, #56]	; 0x38
 801566c:	2300      	movs	r3, #0
 801566e:	9309      	str	r3, [sp, #36]	; 0x24
 8015670:	2300      	movs	r3, #0
 8015672:	220a      	movs	r2, #10
 8015674:	4630      	mov	r0, r6
 8015676:	4629      	mov	r1, r5
 8015678:	f7eb fd6c 	bl	8001154 <__aeabi_uldivmod>
 801567c:	2e0a      	cmp	r6, #10
 801567e:	f175 0300 	sbcs.w	r3, r5, #0
 8015682:	f0c0 83bf 	bcc.w	8015e04 <_svfprintf_r+0x139c>
 8015686:	4606      	mov	r6, r0
 8015688:	460d      	mov	r5, r1
 801568a:	46cb      	mov	fp, r9
 801568c:	e7c5      	b.n	801561a <_svfprintf_r+0xbb2>
 801568e:	f006 030f 	and.w	r3, r6, #15
 8015692:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015694:	0936      	lsrs	r6, r6, #4
 8015696:	5cd3      	ldrb	r3, [r2, r3]
 8015698:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801569c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80156a0:	092d      	lsrs	r5, r5, #4
 80156a2:	ea56 0305 	orrs.w	r3, r6, r5
 80156a6:	d1f2      	bne.n	801568e <_svfprintf_r+0xc26>
 80156a8:	e3ac      	b.n	8015e04 <_svfprintf_r+0x139c>
 80156aa:	b933      	cbnz	r3, 80156ba <_svfprintf_r+0xc52>
 80156ac:	f01b 0f01 	tst.w	fp, #1
 80156b0:	d003      	beq.n	80156ba <_svfprintf_r+0xc52>
 80156b2:	2330      	movs	r3, #48	; 0x30
 80156b4:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 80156b8:	e7a5      	b.n	8015606 <_svfprintf_r+0xb9e>
 80156ba:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80156be:	e3a1      	b.n	8015e04 <_svfprintf_r+0x139c>
 80156c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f000 8370 	beq.w	8015da8 <_svfprintf_r+0x1340>
 80156c8:	2000      	movs	r0, #0
 80156ca:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80156ce:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80156d2:	960b      	str	r6, [sp, #44]	; 0x2c
 80156d4:	f7ff bb2d 	b.w	8014d32 <_svfprintf_r+0x2ca>
 80156d8:	9e07      	ldr	r6, [sp, #28]
 80156da:	f7ff bb9c 	b.w	8014e16 <_svfprintf_r+0x3ae>
 80156de:	2010      	movs	r0, #16
 80156e0:	4402      	add	r2, r0
 80156e2:	2b07      	cmp	r3, #7
 80156e4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80156e8:	6060      	str	r0, [r4, #4]
 80156ea:	dd08      	ble.n	80156fe <_svfprintf_r+0xc96>
 80156ec:	aa26      	add	r2, sp, #152	; 0x98
 80156ee:	4641      	mov	r1, r8
 80156f0:	4650      	mov	r0, sl
 80156f2:	f001 fed0 	bl	8017496 <__ssprint_r>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	f040 8334 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 80156fc:	a929      	add	r1, sp, #164	; 0xa4
 80156fe:	3f10      	subs	r7, #16
 8015700:	460c      	mov	r4, r1
 8015702:	e4f4      	b.n	80150ee <_svfprintf_r+0x686>
 8015704:	460c      	mov	r4, r1
 8015706:	e50d      	b.n	8015124 <_svfprintf_r+0x6bc>
 8015708:	aa26      	add	r2, sp, #152	; 0x98
 801570a:	4641      	mov	r1, r8
 801570c:	4650      	mov	r0, sl
 801570e:	f001 fec2 	bl	8017496 <__ssprint_r>
 8015712:	2800      	cmp	r0, #0
 8015714:	f040 8326 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015718:	ac29      	add	r4, sp, #164	; 0xa4
 801571a:	e515      	b.n	8015148 <_svfprintf_r+0x6e0>
 801571c:	aa26      	add	r2, sp, #152	; 0x98
 801571e:	4641      	mov	r1, r8
 8015720:	4650      	mov	r0, sl
 8015722:	f001 feb8 	bl	8017496 <__ssprint_r>
 8015726:	2800      	cmp	r0, #0
 8015728:	f040 831c 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 801572c:	ac29      	add	r4, sp, #164	; 0xa4
 801572e:	e51b      	b.n	8015168 <_svfprintf_r+0x700>
 8015730:	2010      	movs	r0, #16
 8015732:	4402      	add	r2, r0
 8015734:	2b07      	cmp	r3, #7
 8015736:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801573a:	6060      	str	r0, [r4, #4]
 801573c:	dd08      	ble.n	8015750 <_svfprintf_r+0xce8>
 801573e:	aa26      	add	r2, sp, #152	; 0x98
 8015740:	4641      	mov	r1, r8
 8015742:	4650      	mov	r0, sl
 8015744:	f001 fea7 	bl	8017496 <__ssprint_r>
 8015748:	2800      	cmp	r0, #0
 801574a:	f040 830b 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 801574e:	a929      	add	r1, sp, #164	; 0xa4
 8015750:	3f10      	subs	r7, #16
 8015752:	460c      	mov	r4, r1
 8015754:	e510      	b.n	8015178 <_svfprintf_r+0x710>
 8015756:	460c      	mov	r4, r1
 8015758:	e529      	b.n	80151ae <_svfprintf_r+0x746>
 801575a:	2010      	movs	r0, #16
 801575c:	4402      	add	r2, r0
 801575e:	2b07      	cmp	r3, #7
 8015760:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015764:	6060      	str	r0, [r4, #4]
 8015766:	dd08      	ble.n	801577a <_svfprintf_r+0xd12>
 8015768:	aa26      	add	r2, sp, #152	; 0x98
 801576a:	4641      	mov	r1, r8
 801576c:	4650      	mov	r0, sl
 801576e:	f001 fe92 	bl	8017496 <__ssprint_r>
 8015772:	2800      	cmp	r0, #0
 8015774:	f040 82f6 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015778:	a929      	add	r1, sp, #164	; 0xa4
 801577a:	3e10      	subs	r6, #16
 801577c:	460c      	mov	r4, r1
 801577e:	e529      	b.n	80151d4 <_svfprintf_r+0x76c>
 8015780:	460c      	mov	r4, r1
 8015782:	e541      	b.n	8015208 <_svfprintf_r+0x7a0>
 8015784:	08019bec 	.word	0x08019bec
 8015788:	08019bfd 	.word	0x08019bfd
 801578c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801578e:	2b65      	cmp	r3, #101	; 0x65
 8015790:	f340 8230 	ble.w	8015bf4 <_svfprintf_r+0x118c>
 8015794:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8015798:	2200      	movs	r2, #0
 801579a:	2300      	movs	r3, #0
 801579c:	f7eb f9ec 	bl	8000b78 <__aeabi_dcmpeq>
 80157a0:	2800      	cmp	r0, #0
 80157a2:	d068      	beq.n	8015876 <_svfprintf_r+0xe0e>
 80157a4:	4b6d      	ldr	r3, [pc, #436]	; (801595c <_svfprintf_r+0xef4>)
 80157a6:	6023      	str	r3, [r4, #0]
 80157a8:	2301      	movs	r3, #1
 80157aa:	441e      	add	r6, r3
 80157ac:	6063      	str	r3, [r4, #4]
 80157ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80157b0:	9628      	str	r6, [sp, #160]	; 0xa0
 80157b2:	3301      	adds	r3, #1
 80157b4:	2b07      	cmp	r3, #7
 80157b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80157b8:	dc37      	bgt.n	801582a <_svfprintf_r+0xdc2>
 80157ba:	3408      	adds	r4, #8
 80157bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157c0:	4293      	cmp	r3, r2
 80157c2:	db03      	blt.n	80157cc <_svfprintf_r+0xd64>
 80157c4:	f01b 0f01 	tst.w	fp, #1
 80157c8:	f43f ad30 	beq.w	801522c <_svfprintf_r+0x7c4>
 80157cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157ce:	6023      	str	r3, [r4, #0]
 80157d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80157d4:	6063      	str	r3, [r4, #4]
 80157d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157d8:	4413      	add	r3, r2
 80157da:	9328      	str	r3, [sp, #160]	; 0xa0
 80157dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80157de:	3301      	adds	r3, #1
 80157e0:	2b07      	cmp	r3, #7
 80157e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80157e4:	dc2b      	bgt.n	801583e <_svfprintf_r+0xdd6>
 80157e6:	3408      	adds	r4, #8
 80157e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ea:	1e5d      	subs	r5, r3, #1
 80157ec:	2d00      	cmp	r5, #0
 80157ee:	f77f ad1d 	ble.w	801522c <_svfprintf_r+0x7c4>
 80157f2:	4e5b      	ldr	r6, [pc, #364]	; (8015960 <_svfprintf_r+0xef8>)
 80157f4:	2710      	movs	r7, #16
 80157f6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80157fa:	2d10      	cmp	r5, #16
 80157fc:	f103 0301 	add.w	r3, r3, #1
 8015800:	f104 0108 	add.w	r1, r4, #8
 8015804:	6026      	str	r6, [r4, #0]
 8015806:	dc24      	bgt.n	8015852 <_svfprintf_r+0xdea>
 8015808:	6065      	str	r5, [r4, #4]
 801580a:	2b07      	cmp	r3, #7
 801580c:	4415      	add	r5, r2
 801580e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015812:	f340 8286 	ble.w	8015d22 <_svfprintf_r+0x12ba>
 8015816:	aa26      	add	r2, sp, #152	; 0x98
 8015818:	4641      	mov	r1, r8
 801581a:	4650      	mov	r0, sl
 801581c:	f001 fe3b 	bl	8017496 <__ssprint_r>
 8015820:	2800      	cmp	r0, #0
 8015822:	f040 829f 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015826:	ac29      	add	r4, sp, #164	; 0xa4
 8015828:	e500      	b.n	801522c <_svfprintf_r+0x7c4>
 801582a:	aa26      	add	r2, sp, #152	; 0x98
 801582c:	4641      	mov	r1, r8
 801582e:	4650      	mov	r0, sl
 8015830:	f001 fe31 	bl	8017496 <__ssprint_r>
 8015834:	2800      	cmp	r0, #0
 8015836:	f040 8295 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 801583a:	ac29      	add	r4, sp, #164	; 0xa4
 801583c:	e7be      	b.n	80157bc <_svfprintf_r+0xd54>
 801583e:	aa26      	add	r2, sp, #152	; 0x98
 8015840:	4641      	mov	r1, r8
 8015842:	4650      	mov	r0, sl
 8015844:	f001 fe27 	bl	8017496 <__ssprint_r>
 8015848:	2800      	cmp	r0, #0
 801584a:	f040 828b 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 801584e:	ac29      	add	r4, sp, #164	; 0xa4
 8015850:	e7ca      	b.n	80157e8 <_svfprintf_r+0xd80>
 8015852:	3210      	adds	r2, #16
 8015854:	2b07      	cmp	r3, #7
 8015856:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801585a:	6067      	str	r7, [r4, #4]
 801585c:	dd08      	ble.n	8015870 <_svfprintf_r+0xe08>
 801585e:	aa26      	add	r2, sp, #152	; 0x98
 8015860:	4641      	mov	r1, r8
 8015862:	4650      	mov	r0, sl
 8015864:	f001 fe17 	bl	8017496 <__ssprint_r>
 8015868:	2800      	cmp	r0, #0
 801586a:	f040 827b 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 801586e:	a929      	add	r1, sp, #164	; 0xa4
 8015870:	3d10      	subs	r5, #16
 8015872:	460c      	mov	r4, r1
 8015874:	e7bf      	b.n	80157f6 <_svfprintf_r+0xd8e>
 8015876:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015878:	2b00      	cmp	r3, #0
 801587a:	dc73      	bgt.n	8015964 <_svfprintf_r+0xefc>
 801587c:	4b37      	ldr	r3, [pc, #220]	; (801595c <_svfprintf_r+0xef4>)
 801587e:	6023      	str	r3, [r4, #0]
 8015880:	2301      	movs	r3, #1
 8015882:	441e      	add	r6, r3
 8015884:	6063      	str	r3, [r4, #4]
 8015886:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015888:	9628      	str	r6, [sp, #160]	; 0xa0
 801588a:	3301      	adds	r3, #1
 801588c:	2b07      	cmp	r3, #7
 801588e:	9327      	str	r3, [sp, #156]	; 0x9c
 8015890:	dc3d      	bgt.n	801590e <_svfprintf_r+0xea6>
 8015892:	3408      	adds	r4, #8
 8015894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015896:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015898:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801589a:	430a      	orrs	r2, r1
 801589c:	f00b 0101 	and.w	r1, fp, #1
 80158a0:	430a      	orrs	r2, r1
 80158a2:	f43f acc3 	beq.w	801522c <_svfprintf_r+0x7c4>
 80158a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80158a8:	6022      	str	r2, [r4, #0]
 80158aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80158ac:	6062      	str	r2, [r4, #4]
 80158ae:	4413      	add	r3, r2
 80158b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80158b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80158b4:	3301      	adds	r3, #1
 80158b6:	2b07      	cmp	r3, #7
 80158b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80158ba:	dc32      	bgt.n	8015922 <_svfprintf_r+0xeba>
 80158bc:	3408      	adds	r4, #8
 80158be:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80158c0:	2d00      	cmp	r5, #0
 80158c2:	da1b      	bge.n	80158fc <_svfprintf_r+0xe94>
 80158c4:	4e26      	ldr	r6, [pc, #152]	; (8015960 <_svfprintf_r+0xef8>)
 80158c6:	426d      	negs	r5, r5
 80158c8:	4623      	mov	r3, r4
 80158ca:	2710      	movs	r7, #16
 80158cc:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80158d0:	2d10      	cmp	r5, #16
 80158d2:	f102 0201 	add.w	r2, r2, #1
 80158d6:	f104 0408 	add.w	r4, r4, #8
 80158da:	601e      	str	r6, [r3, #0]
 80158dc:	dc2b      	bgt.n	8015936 <_svfprintf_r+0xece>
 80158de:	605d      	str	r5, [r3, #4]
 80158e0:	2a07      	cmp	r2, #7
 80158e2:	440d      	add	r5, r1
 80158e4:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 80158e8:	dd08      	ble.n	80158fc <_svfprintf_r+0xe94>
 80158ea:	aa26      	add	r2, sp, #152	; 0x98
 80158ec:	4641      	mov	r1, r8
 80158ee:	4650      	mov	r0, sl
 80158f0:	f001 fdd1 	bl	8017496 <__ssprint_r>
 80158f4:	2800      	cmp	r0, #0
 80158f6:	f040 8235 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 80158fa:	ac29      	add	r4, sp, #164	; 0xa4
 80158fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015900:	6063      	str	r3, [r4, #4]
 8015902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015904:	f8c4 9000 	str.w	r9, [r4]
 8015908:	4413      	add	r3, r2
 801590a:	9328      	str	r3, [sp, #160]	; 0xa0
 801590c:	e487      	b.n	801521e <_svfprintf_r+0x7b6>
 801590e:	aa26      	add	r2, sp, #152	; 0x98
 8015910:	4641      	mov	r1, r8
 8015912:	4650      	mov	r0, sl
 8015914:	f001 fdbf 	bl	8017496 <__ssprint_r>
 8015918:	2800      	cmp	r0, #0
 801591a:	f040 8223 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 801591e:	ac29      	add	r4, sp, #164	; 0xa4
 8015920:	e7b8      	b.n	8015894 <_svfprintf_r+0xe2c>
 8015922:	aa26      	add	r2, sp, #152	; 0x98
 8015924:	4641      	mov	r1, r8
 8015926:	4650      	mov	r0, sl
 8015928:	f001 fdb5 	bl	8017496 <__ssprint_r>
 801592c:	2800      	cmp	r0, #0
 801592e:	f040 8219 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015932:	ac29      	add	r4, sp, #164	; 0xa4
 8015934:	e7c3      	b.n	80158be <_svfprintf_r+0xe56>
 8015936:	3110      	adds	r1, #16
 8015938:	2a07      	cmp	r2, #7
 801593a:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801593e:	605f      	str	r7, [r3, #4]
 8015940:	dd08      	ble.n	8015954 <_svfprintf_r+0xeec>
 8015942:	aa26      	add	r2, sp, #152	; 0x98
 8015944:	4641      	mov	r1, r8
 8015946:	4650      	mov	r0, sl
 8015948:	f001 fda5 	bl	8017496 <__ssprint_r>
 801594c:	2800      	cmp	r0, #0
 801594e:	f040 8209 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015952:	ac29      	add	r4, sp, #164	; 0xa4
 8015954:	3d10      	subs	r5, #16
 8015956:	4623      	mov	r3, r4
 8015958:	e7b8      	b.n	80158cc <_svfprintf_r+0xe64>
 801595a:	bf00      	nop
 801595c:	08019c0e 	.word	0x08019c0e
 8015960:	08019c20 	.word	0x08019c20
 8015964:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015966:	42af      	cmp	r7, r5
 8015968:	bfa8      	it	ge
 801596a:	462f      	movge	r7, r5
 801596c:	2f00      	cmp	r7, #0
 801596e:	dd0a      	ble.n	8015986 <_svfprintf_r+0xf1e>
 8015970:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015972:	3301      	adds	r3, #1
 8015974:	443e      	add	r6, r7
 8015976:	2b07      	cmp	r3, #7
 8015978:	e9c4 9700 	strd	r9, r7, [r4]
 801597c:	9628      	str	r6, [sp, #160]	; 0xa0
 801597e:	9327      	str	r3, [sp, #156]	; 0x9c
 8015980:	f300 8085 	bgt.w	8015a8e <_svfprintf_r+0x1026>
 8015984:	3408      	adds	r4, #8
 8015986:	2f00      	cmp	r7, #0
 8015988:	bfac      	ite	ge
 801598a:	1bee      	subge	r6, r5, r7
 801598c:	462e      	movlt	r6, r5
 801598e:	2e00      	cmp	r6, #0
 8015990:	dd19      	ble.n	80159c6 <_svfprintf_r+0xf5e>
 8015992:	4f97      	ldr	r7, [pc, #604]	; (8015bf0 <_svfprintf_r+0x1188>)
 8015994:	6027      	str	r7, [r4, #0]
 8015996:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801599a:	2e10      	cmp	r6, #16
 801599c:	f103 0301 	add.w	r3, r3, #1
 80159a0:	f104 0108 	add.w	r1, r4, #8
 80159a4:	dc7d      	bgt.n	8015aa2 <_svfprintf_r+0x103a>
 80159a6:	6066      	str	r6, [r4, #4]
 80159a8:	2b07      	cmp	r3, #7
 80159aa:	4416      	add	r6, r2
 80159ac:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80159b0:	f340 808a 	ble.w	8015ac8 <_svfprintf_r+0x1060>
 80159b4:	aa26      	add	r2, sp, #152	; 0x98
 80159b6:	4641      	mov	r1, r8
 80159b8:	4650      	mov	r0, sl
 80159ba:	f001 fd6c 	bl	8017496 <__ssprint_r>
 80159be:	2800      	cmp	r0, #0
 80159c0:	f040 81d0 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 80159c4:	ac29      	add	r4, sp, #164	; 0xa4
 80159c6:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80159ca:	444d      	add	r5, r9
 80159cc:	d00a      	beq.n	80159e4 <_svfprintf_r+0xf7c>
 80159ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d17b      	bne.n	8015acc <_svfprintf_r+0x1064>
 80159d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d17b      	bne.n	8015ad2 <_svfprintf_r+0x106a>
 80159da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159dc:	444b      	add	r3, r9
 80159de:	429d      	cmp	r5, r3
 80159e0:	bf28      	it	cs
 80159e2:	461d      	movcs	r5, r3
 80159e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80159e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159e8:	4293      	cmp	r3, r2
 80159ea:	db02      	blt.n	80159f2 <_svfprintf_r+0xf8a>
 80159ec:	f01b 0f01 	tst.w	fp, #1
 80159f0:	d00e      	beq.n	8015a10 <_svfprintf_r+0xfa8>
 80159f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80159f4:	6023      	str	r3, [r4, #0]
 80159f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80159f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80159fa:	6063      	str	r3, [r4, #4]
 80159fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80159fe:	4413      	add	r3, r2
 8015a00:	9328      	str	r3, [sp, #160]	; 0xa0
 8015a02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015a04:	3301      	adds	r3, #1
 8015a06:	2b07      	cmp	r3, #7
 8015a08:	9327      	str	r3, [sp, #156]	; 0x9c
 8015a0a:	f300 80dd 	bgt.w	8015bc8 <_svfprintf_r+0x1160>
 8015a0e:	3408      	adds	r4, #8
 8015a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a12:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015a14:	eb09 0203 	add.w	r2, r9, r3
 8015a18:	1b9e      	subs	r6, r3, r6
 8015a1a:	1b52      	subs	r2, r2, r5
 8015a1c:	4296      	cmp	r6, r2
 8015a1e:	bfa8      	it	ge
 8015a20:	4616      	movge	r6, r2
 8015a22:	2e00      	cmp	r6, #0
 8015a24:	dd0b      	ble.n	8015a3e <_svfprintf_r+0xfd6>
 8015a26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015a28:	4433      	add	r3, r6
 8015a2a:	9328      	str	r3, [sp, #160]	; 0xa0
 8015a2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015a2e:	3301      	adds	r3, #1
 8015a30:	2b07      	cmp	r3, #7
 8015a32:	e9c4 5600 	strd	r5, r6, [r4]
 8015a36:	9327      	str	r3, [sp, #156]	; 0x9c
 8015a38:	f300 80d0 	bgt.w	8015bdc <_svfprintf_r+0x1174>
 8015a3c:	3408      	adds	r4, #8
 8015a3e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a42:	2e00      	cmp	r6, #0
 8015a44:	eba3 0505 	sub.w	r5, r3, r5
 8015a48:	bfa8      	it	ge
 8015a4a:	1bad      	subge	r5, r5, r6
 8015a4c:	2d00      	cmp	r5, #0
 8015a4e:	f77f abed 	ble.w	801522c <_svfprintf_r+0x7c4>
 8015a52:	4e67      	ldr	r6, [pc, #412]	; (8015bf0 <_svfprintf_r+0x1188>)
 8015a54:	2710      	movs	r7, #16
 8015a56:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015a5a:	2d10      	cmp	r5, #16
 8015a5c:	f103 0301 	add.w	r3, r3, #1
 8015a60:	f104 0108 	add.w	r1, r4, #8
 8015a64:	6026      	str	r6, [r4, #0]
 8015a66:	f77f aecf 	ble.w	8015808 <_svfprintf_r+0xda0>
 8015a6a:	3210      	adds	r2, #16
 8015a6c:	2b07      	cmp	r3, #7
 8015a6e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015a72:	6067      	str	r7, [r4, #4]
 8015a74:	dd08      	ble.n	8015a88 <_svfprintf_r+0x1020>
 8015a76:	aa26      	add	r2, sp, #152	; 0x98
 8015a78:	4641      	mov	r1, r8
 8015a7a:	4650      	mov	r0, sl
 8015a7c:	f001 fd0b 	bl	8017496 <__ssprint_r>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	f040 816f 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015a86:	a929      	add	r1, sp, #164	; 0xa4
 8015a88:	3d10      	subs	r5, #16
 8015a8a:	460c      	mov	r4, r1
 8015a8c:	e7e3      	b.n	8015a56 <_svfprintf_r+0xfee>
 8015a8e:	aa26      	add	r2, sp, #152	; 0x98
 8015a90:	4641      	mov	r1, r8
 8015a92:	4650      	mov	r0, sl
 8015a94:	f001 fcff 	bl	8017496 <__ssprint_r>
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	f040 8163 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015a9e:	ac29      	add	r4, sp, #164	; 0xa4
 8015aa0:	e771      	b.n	8015986 <_svfprintf_r+0xf1e>
 8015aa2:	2010      	movs	r0, #16
 8015aa4:	4402      	add	r2, r0
 8015aa6:	2b07      	cmp	r3, #7
 8015aa8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015aac:	6060      	str	r0, [r4, #4]
 8015aae:	dd08      	ble.n	8015ac2 <_svfprintf_r+0x105a>
 8015ab0:	aa26      	add	r2, sp, #152	; 0x98
 8015ab2:	4641      	mov	r1, r8
 8015ab4:	4650      	mov	r0, sl
 8015ab6:	f001 fcee 	bl	8017496 <__ssprint_r>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f040 8152 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015ac0:	a929      	add	r1, sp, #164	; 0xa4
 8015ac2:	3e10      	subs	r6, #16
 8015ac4:	460c      	mov	r4, r1
 8015ac6:	e765      	b.n	8015994 <_svfprintf_r+0xf2c>
 8015ac8:	460c      	mov	r4, r1
 8015aca:	e77c      	b.n	80159c6 <_svfprintf_r+0xf5e>
 8015acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d04a      	beq.n	8015b68 <_svfprintf_r+0x1100>
 8015ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8015ad8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015ada:	6023      	str	r3, [r4, #0]
 8015adc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015ade:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015ae0:	6063      	str	r3, [r4, #4]
 8015ae2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015ae4:	4413      	add	r3, r2
 8015ae6:	9328      	str	r3, [sp, #160]	; 0xa0
 8015ae8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015aea:	3301      	adds	r3, #1
 8015aec:	2b07      	cmp	r3, #7
 8015aee:	9327      	str	r3, [sp, #156]	; 0x9c
 8015af0:	dc41      	bgt.n	8015b76 <_svfprintf_r+0x110e>
 8015af2:	3408      	adds	r4, #8
 8015af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015af8:	eb09 0703 	add.w	r7, r9, r3
 8015afc:	1b7b      	subs	r3, r7, r5
 8015afe:	7817      	ldrb	r7, [r2, #0]
 8015b00:	429f      	cmp	r7, r3
 8015b02:	bfa8      	it	ge
 8015b04:	461f      	movge	r7, r3
 8015b06:	2f00      	cmp	r7, #0
 8015b08:	dd0a      	ble.n	8015b20 <_svfprintf_r+0x10b8>
 8015b0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015b0c:	443b      	add	r3, r7
 8015b0e:	9328      	str	r3, [sp, #160]	; 0xa0
 8015b10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015b12:	3301      	adds	r3, #1
 8015b14:	2b07      	cmp	r3, #7
 8015b16:	e9c4 5700 	strd	r5, r7, [r4]
 8015b1a:	9327      	str	r3, [sp, #156]	; 0x9c
 8015b1c:	dc35      	bgt.n	8015b8a <_svfprintf_r+0x1122>
 8015b1e:	3408      	adds	r4, #8
 8015b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b22:	781e      	ldrb	r6, [r3, #0]
 8015b24:	2f00      	cmp	r7, #0
 8015b26:	bfa8      	it	ge
 8015b28:	1bf6      	subge	r6, r6, r7
 8015b2a:	2e00      	cmp	r6, #0
 8015b2c:	dd18      	ble.n	8015b60 <_svfprintf_r+0x10f8>
 8015b2e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015b32:	482f      	ldr	r0, [pc, #188]	; (8015bf0 <_svfprintf_r+0x1188>)
 8015b34:	6020      	str	r0, [r4, #0]
 8015b36:	2e10      	cmp	r6, #16
 8015b38:	f103 0301 	add.w	r3, r3, #1
 8015b3c:	f104 0108 	add.w	r1, r4, #8
 8015b40:	dc2d      	bgt.n	8015b9e <_svfprintf_r+0x1136>
 8015b42:	4432      	add	r2, r6
 8015b44:	2b07      	cmp	r3, #7
 8015b46:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015b4a:	6066      	str	r6, [r4, #4]
 8015b4c:	dd3a      	ble.n	8015bc4 <_svfprintf_r+0x115c>
 8015b4e:	aa26      	add	r2, sp, #152	; 0x98
 8015b50:	4641      	mov	r1, r8
 8015b52:	4650      	mov	r0, sl
 8015b54:	f001 fc9f 	bl	8017496 <__ssprint_r>
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	f040 8103 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015b5e:	ac29      	add	r4, sp, #164	; 0xa4
 8015b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	441d      	add	r5, r3
 8015b66:	e732      	b.n	80159ce <_svfprintf_r+0xf66>
 8015b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b6a:	3b01      	subs	r3, #1
 8015b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8015b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b70:	3b01      	subs	r3, #1
 8015b72:	930d      	str	r3, [sp, #52]	; 0x34
 8015b74:	e7b0      	b.n	8015ad8 <_svfprintf_r+0x1070>
 8015b76:	aa26      	add	r2, sp, #152	; 0x98
 8015b78:	4641      	mov	r1, r8
 8015b7a:	4650      	mov	r0, sl
 8015b7c:	f001 fc8b 	bl	8017496 <__ssprint_r>
 8015b80:	2800      	cmp	r0, #0
 8015b82:	f040 80ef 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015b86:	ac29      	add	r4, sp, #164	; 0xa4
 8015b88:	e7b4      	b.n	8015af4 <_svfprintf_r+0x108c>
 8015b8a:	aa26      	add	r2, sp, #152	; 0x98
 8015b8c:	4641      	mov	r1, r8
 8015b8e:	4650      	mov	r0, sl
 8015b90:	f001 fc81 	bl	8017496 <__ssprint_r>
 8015b94:	2800      	cmp	r0, #0
 8015b96:	f040 80e5 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015b9a:	ac29      	add	r4, sp, #164	; 0xa4
 8015b9c:	e7c0      	b.n	8015b20 <_svfprintf_r+0x10b8>
 8015b9e:	2010      	movs	r0, #16
 8015ba0:	4402      	add	r2, r0
 8015ba2:	2b07      	cmp	r3, #7
 8015ba4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015ba8:	6060      	str	r0, [r4, #4]
 8015baa:	dd08      	ble.n	8015bbe <_svfprintf_r+0x1156>
 8015bac:	aa26      	add	r2, sp, #152	; 0x98
 8015bae:	4641      	mov	r1, r8
 8015bb0:	4650      	mov	r0, sl
 8015bb2:	f001 fc70 	bl	8017496 <__ssprint_r>
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	f040 80d4 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015bbc:	a929      	add	r1, sp, #164	; 0xa4
 8015bbe:	3e10      	subs	r6, #16
 8015bc0:	460c      	mov	r4, r1
 8015bc2:	e7b4      	b.n	8015b2e <_svfprintf_r+0x10c6>
 8015bc4:	460c      	mov	r4, r1
 8015bc6:	e7cb      	b.n	8015b60 <_svfprintf_r+0x10f8>
 8015bc8:	aa26      	add	r2, sp, #152	; 0x98
 8015bca:	4641      	mov	r1, r8
 8015bcc:	4650      	mov	r0, sl
 8015bce:	f001 fc62 	bl	8017496 <__ssprint_r>
 8015bd2:	2800      	cmp	r0, #0
 8015bd4:	f040 80c6 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015bd8:	ac29      	add	r4, sp, #164	; 0xa4
 8015bda:	e719      	b.n	8015a10 <_svfprintf_r+0xfa8>
 8015bdc:	aa26      	add	r2, sp, #152	; 0x98
 8015bde:	4641      	mov	r1, r8
 8015be0:	4650      	mov	r0, sl
 8015be2:	f001 fc58 	bl	8017496 <__ssprint_r>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	f040 80bc 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015bec:	ac29      	add	r4, sp, #164	; 0xa4
 8015bee:	e726      	b.n	8015a3e <_svfprintf_r+0xfd6>
 8015bf0:	08019c20 	.word	0x08019c20
 8015bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015bf8:	2a01      	cmp	r2, #1
 8015bfa:	f106 0601 	add.w	r6, r6, #1
 8015bfe:	f103 0301 	add.w	r3, r3, #1
 8015c02:	f104 0508 	add.w	r5, r4, #8
 8015c06:	dc02      	bgt.n	8015c0e <_svfprintf_r+0x11a6>
 8015c08:	f01b 0f01 	tst.w	fp, #1
 8015c0c:	d07e      	beq.n	8015d0c <_svfprintf_r+0x12a4>
 8015c0e:	2201      	movs	r2, #1
 8015c10:	2b07      	cmp	r3, #7
 8015c12:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8015c16:	f8c4 9000 	str.w	r9, [r4]
 8015c1a:	6062      	str	r2, [r4, #4]
 8015c1c:	dd08      	ble.n	8015c30 <_svfprintf_r+0x11c8>
 8015c1e:	aa26      	add	r2, sp, #152	; 0x98
 8015c20:	4641      	mov	r1, r8
 8015c22:	4650      	mov	r0, sl
 8015c24:	f001 fc37 	bl	8017496 <__ssprint_r>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	f040 809b 	bne.w	8015d64 <_svfprintf_r+0x12fc>
 8015c2e:	ad29      	add	r5, sp, #164	; 0xa4
 8015c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c32:	602b      	str	r3, [r5, #0]
 8015c34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c38:	606b      	str	r3, [r5, #4]
 8015c3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c3c:	4413      	add	r3, r2
 8015c3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8015c40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015c42:	3301      	adds	r3, #1
 8015c44:	2b07      	cmp	r3, #7
 8015c46:	9327      	str	r3, [sp, #156]	; 0x9c
 8015c48:	dc32      	bgt.n	8015cb0 <_svfprintf_r+0x1248>
 8015c4a:	3508      	adds	r5, #8
 8015c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c4e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8015c52:	1e5c      	subs	r4, r3, #1
 8015c54:	2200      	movs	r2, #0
 8015c56:	2300      	movs	r3, #0
 8015c58:	f7ea ff8e 	bl	8000b78 <__aeabi_dcmpeq>
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	d130      	bne.n	8015cc2 <_svfprintf_r+0x125a>
 8015c60:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015c62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c66:	3101      	adds	r1, #1
 8015c68:	3b01      	subs	r3, #1
 8015c6a:	f109 0001 	add.w	r0, r9, #1
 8015c6e:	4413      	add	r3, r2
 8015c70:	2907      	cmp	r1, #7
 8015c72:	e9c5 0400 	strd	r0, r4, [r5]
 8015c76:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8015c7a:	dd50      	ble.n	8015d1e <_svfprintf_r+0x12b6>
 8015c7c:	aa26      	add	r2, sp, #152	; 0x98
 8015c7e:	4641      	mov	r1, r8
 8015c80:	4650      	mov	r0, sl
 8015c82:	f001 fc08 	bl	8017496 <__ssprint_r>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	d16c      	bne.n	8015d64 <_svfprintf_r+0x12fc>
 8015c8a:	ad29      	add	r5, sp, #164	; 0xa4
 8015c8c:	ab22      	add	r3, sp, #136	; 0x88
 8015c8e:	602b      	str	r3, [r5, #0]
 8015c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015c94:	606b      	str	r3, [r5, #4]
 8015c96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c98:	4413      	add	r3, r2
 8015c9a:	9328      	str	r3, [sp, #160]	; 0xa0
 8015c9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	2b07      	cmp	r3, #7
 8015ca2:	9327      	str	r3, [sp, #156]	; 0x9c
 8015ca4:	f73f adb7 	bgt.w	8015816 <_svfprintf_r+0xdae>
 8015ca8:	f105 0408 	add.w	r4, r5, #8
 8015cac:	f7ff babe 	b.w	801522c <_svfprintf_r+0x7c4>
 8015cb0:	aa26      	add	r2, sp, #152	; 0x98
 8015cb2:	4641      	mov	r1, r8
 8015cb4:	4650      	mov	r0, sl
 8015cb6:	f001 fbee 	bl	8017496 <__ssprint_r>
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	d152      	bne.n	8015d64 <_svfprintf_r+0x12fc>
 8015cbe:	ad29      	add	r5, sp, #164	; 0xa4
 8015cc0:	e7c4      	b.n	8015c4c <_svfprintf_r+0x11e4>
 8015cc2:	2c00      	cmp	r4, #0
 8015cc4:	dde2      	ble.n	8015c8c <_svfprintf_r+0x1224>
 8015cc6:	4e56      	ldr	r6, [pc, #344]	; (8015e20 <_svfprintf_r+0x13b8>)
 8015cc8:	2710      	movs	r7, #16
 8015cca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015cce:	2c10      	cmp	r4, #16
 8015cd0:	f103 0301 	add.w	r3, r3, #1
 8015cd4:	f105 0108 	add.w	r1, r5, #8
 8015cd8:	602e      	str	r6, [r5, #0]
 8015cda:	dc07      	bgt.n	8015cec <_svfprintf_r+0x1284>
 8015cdc:	606c      	str	r4, [r5, #4]
 8015cde:	2b07      	cmp	r3, #7
 8015ce0:	4414      	add	r4, r2
 8015ce2:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8015ce6:	dcc9      	bgt.n	8015c7c <_svfprintf_r+0x1214>
 8015ce8:	460d      	mov	r5, r1
 8015cea:	e7cf      	b.n	8015c8c <_svfprintf_r+0x1224>
 8015cec:	3210      	adds	r2, #16
 8015cee:	2b07      	cmp	r3, #7
 8015cf0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015cf4:	606f      	str	r7, [r5, #4]
 8015cf6:	dd06      	ble.n	8015d06 <_svfprintf_r+0x129e>
 8015cf8:	aa26      	add	r2, sp, #152	; 0x98
 8015cfa:	4641      	mov	r1, r8
 8015cfc:	4650      	mov	r0, sl
 8015cfe:	f001 fbca 	bl	8017496 <__ssprint_r>
 8015d02:	bb78      	cbnz	r0, 8015d64 <_svfprintf_r+0x12fc>
 8015d04:	a929      	add	r1, sp, #164	; 0xa4
 8015d06:	3c10      	subs	r4, #16
 8015d08:	460d      	mov	r5, r1
 8015d0a:	e7de      	b.n	8015cca <_svfprintf_r+0x1262>
 8015d0c:	2201      	movs	r2, #1
 8015d0e:	2b07      	cmp	r3, #7
 8015d10:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8015d14:	f8c4 9000 	str.w	r9, [r4]
 8015d18:	6062      	str	r2, [r4, #4]
 8015d1a:	ddb7      	ble.n	8015c8c <_svfprintf_r+0x1224>
 8015d1c:	e7ae      	b.n	8015c7c <_svfprintf_r+0x1214>
 8015d1e:	3508      	adds	r5, #8
 8015d20:	e7b4      	b.n	8015c8c <_svfprintf_r+0x1224>
 8015d22:	460c      	mov	r4, r1
 8015d24:	f7ff ba82 	b.w	801522c <_svfprintf_r+0x7c4>
 8015d28:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8015d2c:	1a9d      	subs	r5, r3, r2
 8015d2e:	2d00      	cmp	r5, #0
 8015d30:	f77f aa80 	ble.w	8015234 <_svfprintf_r+0x7cc>
 8015d34:	4e3b      	ldr	r6, [pc, #236]	; (8015e24 <_svfprintf_r+0x13bc>)
 8015d36:	2710      	movs	r7, #16
 8015d38:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015d3c:	2d10      	cmp	r5, #16
 8015d3e:	f103 0301 	add.w	r3, r3, #1
 8015d42:	6026      	str	r6, [r4, #0]
 8015d44:	dc18      	bgt.n	8015d78 <_svfprintf_r+0x1310>
 8015d46:	6065      	str	r5, [r4, #4]
 8015d48:	2b07      	cmp	r3, #7
 8015d4a:	4415      	add	r5, r2
 8015d4c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015d50:	f77f aa70 	ble.w	8015234 <_svfprintf_r+0x7cc>
 8015d54:	aa26      	add	r2, sp, #152	; 0x98
 8015d56:	4641      	mov	r1, r8
 8015d58:	4650      	mov	r0, sl
 8015d5a:	f001 fb9c 	bl	8017496 <__ssprint_r>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	f43f aa68 	beq.w	8015234 <_svfprintf_r+0x7cc>
 8015d64:	9b07      	ldr	r3, [sp, #28]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	f43f a88b 	beq.w	8014e82 <_svfprintf_r+0x41a>
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	4650      	mov	r0, sl
 8015d70:	f000 ff40 	bl	8016bf4 <_free_r>
 8015d74:	f7ff b885 	b.w	8014e82 <_svfprintf_r+0x41a>
 8015d78:	3210      	adds	r2, #16
 8015d7a:	2b07      	cmp	r3, #7
 8015d7c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015d80:	6067      	str	r7, [r4, #4]
 8015d82:	dc02      	bgt.n	8015d8a <_svfprintf_r+0x1322>
 8015d84:	3408      	adds	r4, #8
 8015d86:	3d10      	subs	r5, #16
 8015d88:	e7d6      	b.n	8015d38 <_svfprintf_r+0x12d0>
 8015d8a:	aa26      	add	r2, sp, #152	; 0x98
 8015d8c:	4641      	mov	r1, r8
 8015d8e:	4650      	mov	r0, sl
 8015d90:	f001 fb81 	bl	8017496 <__ssprint_r>
 8015d94:	2800      	cmp	r0, #0
 8015d96:	d1e5      	bne.n	8015d64 <_svfprintf_r+0x12fc>
 8015d98:	ac29      	add	r4, sp, #164	; 0xa4
 8015d9a:	e7f4      	b.n	8015d86 <_svfprintf_r+0x131e>
 8015d9c:	9907      	ldr	r1, [sp, #28]
 8015d9e:	4650      	mov	r0, sl
 8015da0:	f000 ff28 	bl	8016bf4 <_free_r>
 8015da4:	f7ff ba5e 	b.w	8015264 <_svfprintf_r+0x7fc>
 8015da8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	f43f a869 	beq.w	8014e82 <_svfprintf_r+0x41a>
 8015db0:	aa26      	add	r2, sp, #152	; 0x98
 8015db2:	4641      	mov	r1, r8
 8015db4:	4650      	mov	r0, sl
 8015db6:	f001 fb6e 	bl	8017496 <__ssprint_r>
 8015dba:	f7ff b862 	b.w	8014e82 <_svfprintf_r+0x41a>
 8015dbe:	ea56 0205 	orrs.w	r2, r6, r5
 8015dc2:	465f      	mov	r7, fp
 8015dc4:	f43f ab78 	beq.w	80154b8 <_svfprintf_r+0xa50>
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	f43f ac15 	beq.w	80155f8 <_svfprintf_r+0xb90>
 8015dce:	2b02      	cmp	r3, #2
 8015dd0:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8015dd4:	f43f ac5b 	beq.w	801568e <_svfprintf_r+0xc26>
 8015dd8:	f006 0307 	and.w	r3, r6, #7
 8015ddc:	08f6      	lsrs	r6, r6, #3
 8015dde:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8015de2:	08ed      	lsrs	r5, r5, #3
 8015de4:	3330      	adds	r3, #48	; 0x30
 8015de6:	ea56 0105 	orrs.w	r1, r6, r5
 8015dea:	464a      	mov	r2, r9
 8015dec:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8015df0:	d1f2      	bne.n	8015dd8 <_svfprintf_r+0x1370>
 8015df2:	07f9      	lsls	r1, r7, #31
 8015df4:	d506      	bpl.n	8015e04 <_svfprintf_r+0x139c>
 8015df6:	2b30      	cmp	r3, #48	; 0x30
 8015df8:	d004      	beq.n	8015e04 <_svfprintf_r+0x139c>
 8015dfa:	2330      	movs	r3, #48	; 0x30
 8015dfc:	f809 3c01 	strb.w	r3, [r9, #-1]
 8015e00:	f1a2 0902 	sub.w	r9, r2, #2
 8015e04:	ab52      	add	r3, sp, #328	; 0x148
 8015e06:	eba3 0309 	sub.w	r3, r3, r9
 8015e0a:	9e08      	ldr	r6, [sp, #32]
 8015e0c:	9308      	str	r3, [sp, #32]
 8015e0e:	2300      	movs	r3, #0
 8015e10:	46bb      	mov	fp, r7
 8015e12:	9307      	str	r3, [sp, #28]
 8015e14:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8015e18:	461d      	mov	r5, r3
 8015e1a:	f7ff b94d 	b.w	80150b8 <_svfprintf_r+0x650>
 8015e1e:	bf00      	nop
 8015e20:	08019c20 	.word	0x08019c20
 8015e24:	08019c10 	.word	0x08019c10

08015e28 <sysconf>:
 8015e28:	2808      	cmp	r0, #8
 8015e2a:	b508      	push	{r3, lr}
 8015e2c:	d006      	beq.n	8015e3c <sysconf+0x14>
 8015e2e:	f7fe fb45 	bl	80144bc <__errno>
 8015e32:	2316      	movs	r3, #22
 8015e34:	6003      	str	r3, [r0, #0]
 8015e36:	f04f 30ff 	mov.w	r0, #4294967295
 8015e3a:	bd08      	pop	{r3, pc}
 8015e3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015e40:	e7fb      	b.n	8015e3a <sysconf+0x12>
	...

08015e44 <register_fini>:
 8015e44:	4b02      	ldr	r3, [pc, #8]	; (8015e50 <register_fini+0xc>)
 8015e46:	b113      	cbz	r3, 8015e4e <register_fini+0xa>
 8015e48:	4802      	ldr	r0, [pc, #8]	; (8015e54 <register_fini+0x10>)
 8015e4a:	f000 b805 	b.w	8015e58 <atexit>
 8015e4e:	4770      	bx	lr
 8015e50:	00000000 	.word	0x00000000
 8015e54:	08016b25 	.word	0x08016b25

08015e58 <atexit>:
 8015e58:	2300      	movs	r3, #0
 8015e5a:	4601      	mov	r1, r0
 8015e5c:	461a      	mov	r2, r3
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f001 bb94 	b.w	801758c <__register_exitproc>

08015e64 <quorem>:
 8015e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e68:	6903      	ldr	r3, [r0, #16]
 8015e6a:	690c      	ldr	r4, [r1, #16]
 8015e6c:	42a3      	cmp	r3, r4
 8015e6e:	4607      	mov	r7, r0
 8015e70:	f2c0 8081 	blt.w	8015f76 <quorem+0x112>
 8015e74:	3c01      	subs	r4, #1
 8015e76:	f101 0814 	add.w	r8, r1, #20
 8015e7a:	f100 0514 	add.w	r5, r0, #20
 8015e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015e94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015e98:	fbb2 f6f3 	udiv	r6, r2, r3
 8015e9c:	d331      	bcc.n	8015f02 <quorem+0x9e>
 8015e9e:	f04f 0e00 	mov.w	lr, #0
 8015ea2:	4640      	mov	r0, r8
 8015ea4:	46ac      	mov	ip, r5
 8015ea6:	46f2      	mov	sl, lr
 8015ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8015eac:	b293      	uxth	r3, r2
 8015eae:	fb06 e303 	mla	r3, r6, r3, lr
 8015eb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015eb6:	b29b      	uxth	r3, r3
 8015eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8015ebc:	f8dc a000 	ldr.w	sl, [ip]
 8015ec0:	0c12      	lsrs	r2, r2, #16
 8015ec2:	fa13 f38a 	uxtah	r3, r3, sl
 8015ec6:	fb06 e202 	mla	r2, r6, r2, lr
 8015eca:	9300      	str	r3, [sp, #0]
 8015ecc:	9b00      	ldr	r3, [sp, #0]
 8015ece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ed2:	b292      	uxth	r2, r2
 8015ed4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015edc:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ee0:	4581      	cmp	r9, r0
 8015ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015ee6:	f84c 3b04 	str.w	r3, [ip], #4
 8015eea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015eee:	d2db      	bcs.n	8015ea8 <quorem+0x44>
 8015ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8015ef4:	b92b      	cbnz	r3, 8015f02 <quorem+0x9e>
 8015ef6:	9b01      	ldr	r3, [sp, #4]
 8015ef8:	3b04      	subs	r3, #4
 8015efa:	429d      	cmp	r5, r3
 8015efc:	461a      	mov	r2, r3
 8015efe:	d32e      	bcc.n	8015f5e <quorem+0xfa>
 8015f00:	613c      	str	r4, [r7, #16]
 8015f02:	4638      	mov	r0, r7
 8015f04:	f001 f980 	bl	8017208 <__mcmp>
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	db24      	blt.n	8015f56 <quorem+0xf2>
 8015f0c:	3601      	adds	r6, #1
 8015f0e:	4628      	mov	r0, r5
 8015f10:	f04f 0c00 	mov.w	ip, #0
 8015f14:	f858 2b04 	ldr.w	r2, [r8], #4
 8015f18:	f8d0 e000 	ldr.w	lr, [r0]
 8015f1c:	b293      	uxth	r3, r2
 8015f1e:	ebac 0303 	sub.w	r3, ip, r3
 8015f22:	0c12      	lsrs	r2, r2, #16
 8015f24:	fa13 f38e 	uxtah	r3, r3, lr
 8015f28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f36:	45c1      	cmp	r9, r8
 8015f38:	f840 3b04 	str.w	r3, [r0], #4
 8015f3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015f40:	d2e8      	bcs.n	8015f14 <quorem+0xb0>
 8015f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015f4a:	b922      	cbnz	r2, 8015f56 <quorem+0xf2>
 8015f4c:	3b04      	subs	r3, #4
 8015f4e:	429d      	cmp	r5, r3
 8015f50:	461a      	mov	r2, r3
 8015f52:	d30a      	bcc.n	8015f6a <quorem+0x106>
 8015f54:	613c      	str	r4, [r7, #16]
 8015f56:	4630      	mov	r0, r6
 8015f58:	b003      	add	sp, #12
 8015f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f5e:	6812      	ldr	r2, [r2, #0]
 8015f60:	3b04      	subs	r3, #4
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	d1cc      	bne.n	8015f00 <quorem+0x9c>
 8015f66:	3c01      	subs	r4, #1
 8015f68:	e7c7      	b.n	8015efa <quorem+0x96>
 8015f6a:	6812      	ldr	r2, [r2, #0]
 8015f6c:	3b04      	subs	r3, #4
 8015f6e:	2a00      	cmp	r2, #0
 8015f70:	d1f0      	bne.n	8015f54 <quorem+0xf0>
 8015f72:	3c01      	subs	r4, #1
 8015f74:	e7eb      	b.n	8015f4e <quorem+0xea>
 8015f76:	2000      	movs	r0, #0
 8015f78:	e7ee      	b.n	8015f58 <quorem+0xf4>
 8015f7a:	0000      	movs	r0, r0
 8015f7c:	0000      	movs	r0, r0
	...

08015f80 <_dtoa_r>:
 8015f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	ed2d 8b04 	vpush	{d8-d9}
 8015f88:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015f8a:	b093      	sub	sp, #76	; 0x4c
 8015f8c:	4604      	mov	r4, r0
 8015f8e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8015f90:	4616      	mov	r6, r2
 8015f92:	461f      	mov	r7, r3
 8015f94:	4692      	mov	sl, r2
 8015f96:	469b      	mov	fp, r3
 8015f98:	b141      	cbz	r1, 8015fac <_dtoa_r+0x2c>
 8015f9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015f9c:	604a      	str	r2, [r1, #4]
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	4093      	lsls	r3, r2
 8015fa2:	608b      	str	r3, [r1, #8]
 8015fa4:	f000 ff21 	bl	8016dea <_Bfree>
 8015fa8:	2300      	movs	r3, #0
 8015faa:	6423      	str	r3, [r4, #64]	; 0x40
 8015fac:	1e3b      	subs	r3, r7, #0
 8015fae:	bfaa      	itet	ge
 8015fb0:	2300      	movge	r3, #0
 8015fb2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015fb6:	602b      	strge	r3, [r5, #0]
 8015fb8:	4ba3      	ldr	r3, [pc, #652]	; (8016248 <_dtoa_r+0x2c8>)
 8015fba:	bfbc      	itt	lt
 8015fbc:	2201      	movlt	r2, #1
 8015fbe:	602a      	strlt	r2, [r5, #0]
 8015fc0:	ea33 030b 	bics.w	r3, r3, fp
 8015fc4:	d11b      	bne.n	8015ffe <_dtoa_r+0x7e>
 8015fc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015fc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8015fcc:	6013      	str	r3, [r2, #0]
 8015fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015fd2:	4333      	orrs	r3, r6
 8015fd4:	f000 8590 	beq.w	8016af8 <_dtoa_r+0xb78>
 8015fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015fda:	b90b      	cbnz	r3, 8015fe0 <_dtoa_r+0x60>
 8015fdc:	4b9b      	ldr	r3, [pc, #620]	; (801624c <_dtoa_r+0x2cc>)
 8015fde:	e022      	b.n	8016026 <_dtoa_r+0xa6>
 8015fe0:	4b9a      	ldr	r3, [pc, #616]	; (801624c <_dtoa_r+0x2cc>)
 8015fe2:	9304      	str	r3, [sp, #16]
 8015fe4:	3303      	adds	r3, #3
 8015fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015fe8:	6013      	str	r3, [r2, #0]
 8015fea:	9804      	ldr	r0, [sp, #16]
 8015fec:	b013      	add	sp, #76	; 0x4c
 8015fee:	ecbd 8b04 	vpop	{d8-d9}
 8015ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff6:	4b96      	ldr	r3, [pc, #600]	; (8016250 <_dtoa_r+0x2d0>)
 8015ff8:	9304      	str	r3, [sp, #16]
 8015ffa:	3308      	adds	r3, #8
 8015ffc:	e7f3      	b.n	8015fe6 <_dtoa_r+0x66>
 8015ffe:	2200      	movs	r2, #0
 8016000:	2300      	movs	r3, #0
 8016002:	4650      	mov	r0, sl
 8016004:	4659      	mov	r1, fp
 8016006:	f7ea fdb7 	bl	8000b78 <__aeabi_dcmpeq>
 801600a:	ec4b ab19 	vmov	d9, sl, fp
 801600e:	4680      	mov	r8, r0
 8016010:	b158      	cbz	r0, 801602a <_dtoa_r+0xaa>
 8016012:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016014:	2301      	movs	r3, #1
 8016016:	6013      	str	r3, [r2, #0]
 8016018:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801601a:	2b00      	cmp	r3, #0
 801601c:	f000 8569 	beq.w	8016af2 <_dtoa_r+0xb72>
 8016020:	488c      	ldr	r0, [pc, #560]	; (8016254 <_dtoa_r+0x2d4>)
 8016022:	6018      	str	r0, [r3, #0]
 8016024:	1e43      	subs	r3, r0, #1
 8016026:	9304      	str	r3, [sp, #16]
 8016028:	e7df      	b.n	8015fea <_dtoa_r+0x6a>
 801602a:	ab10      	add	r3, sp, #64	; 0x40
 801602c:	9301      	str	r3, [sp, #4]
 801602e:	ab11      	add	r3, sp, #68	; 0x44
 8016030:	9300      	str	r3, [sp, #0]
 8016032:	4652      	mov	r2, sl
 8016034:	465b      	mov	r3, fp
 8016036:	4620      	mov	r0, r4
 8016038:	f001 f98c 	bl	8017354 <__d2b>
 801603c:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016040:	ee08 0a10 	vmov	s16, r0
 8016044:	2d00      	cmp	r5, #0
 8016046:	f000 8082 	beq.w	801614e <_dtoa_r+0x1ce>
 801604a:	ee19 3a90 	vmov	r3, s19
 801604e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016052:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016056:	4656      	mov	r6, sl
 8016058:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801605c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016060:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016064:	4b7c      	ldr	r3, [pc, #496]	; (8016258 <_dtoa_r+0x2d8>)
 8016066:	2200      	movs	r2, #0
 8016068:	4630      	mov	r0, r6
 801606a:	4639      	mov	r1, r7
 801606c:	f7ea f964 	bl	8000338 <__aeabi_dsub>
 8016070:	a36f      	add	r3, pc, #444	; (adr r3, 8016230 <_dtoa_r+0x2b0>)
 8016072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016076:	f7ea fb17 	bl	80006a8 <__aeabi_dmul>
 801607a:	a36f      	add	r3, pc, #444	; (adr r3, 8016238 <_dtoa_r+0x2b8>)
 801607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016080:	f7ea f95c 	bl	800033c <__adddf3>
 8016084:	4606      	mov	r6, r0
 8016086:	4628      	mov	r0, r5
 8016088:	460f      	mov	r7, r1
 801608a:	f7ea faa3 	bl	80005d4 <__aeabi_i2d>
 801608e:	a36c      	add	r3, pc, #432	; (adr r3, 8016240 <_dtoa_r+0x2c0>)
 8016090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016094:	f7ea fb08 	bl	80006a8 <__aeabi_dmul>
 8016098:	4602      	mov	r2, r0
 801609a:	460b      	mov	r3, r1
 801609c:	4630      	mov	r0, r6
 801609e:	4639      	mov	r1, r7
 80160a0:	f7ea f94c 	bl	800033c <__adddf3>
 80160a4:	4606      	mov	r6, r0
 80160a6:	460f      	mov	r7, r1
 80160a8:	f7ea fdae 	bl	8000c08 <__aeabi_d2iz>
 80160ac:	2200      	movs	r2, #0
 80160ae:	9003      	str	r0, [sp, #12]
 80160b0:	2300      	movs	r3, #0
 80160b2:	4630      	mov	r0, r6
 80160b4:	4639      	mov	r1, r7
 80160b6:	f7ea fd69 	bl	8000b8c <__aeabi_dcmplt>
 80160ba:	b150      	cbz	r0, 80160d2 <_dtoa_r+0x152>
 80160bc:	9803      	ldr	r0, [sp, #12]
 80160be:	f7ea fa89 	bl	80005d4 <__aeabi_i2d>
 80160c2:	4632      	mov	r2, r6
 80160c4:	463b      	mov	r3, r7
 80160c6:	f7ea fd57 	bl	8000b78 <__aeabi_dcmpeq>
 80160ca:	b910      	cbnz	r0, 80160d2 <_dtoa_r+0x152>
 80160cc:	9b03      	ldr	r3, [sp, #12]
 80160ce:	3b01      	subs	r3, #1
 80160d0:	9303      	str	r3, [sp, #12]
 80160d2:	9b03      	ldr	r3, [sp, #12]
 80160d4:	2b16      	cmp	r3, #22
 80160d6:	d858      	bhi.n	801618a <_dtoa_r+0x20a>
 80160d8:	9a03      	ldr	r2, [sp, #12]
 80160da:	4b60      	ldr	r3, [pc, #384]	; (801625c <_dtoa_r+0x2dc>)
 80160dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e4:	ec51 0b19 	vmov	r0, r1, d9
 80160e8:	f7ea fd50 	bl	8000b8c <__aeabi_dcmplt>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d04e      	beq.n	801618e <_dtoa_r+0x20e>
 80160f0:	9b03      	ldr	r3, [sp, #12]
 80160f2:	3b01      	subs	r3, #1
 80160f4:	9303      	str	r3, [sp, #12]
 80160f6:	2300      	movs	r3, #0
 80160f8:	930c      	str	r3, [sp, #48]	; 0x30
 80160fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160fc:	1b5d      	subs	r5, r3, r5
 80160fe:	1e6b      	subs	r3, r5, #1
 8016100:	9308      	str	r3, [sp, #32]
 8016102:	bf45      	ittet	mi
 8016104:	f1c5 0301 	rsbmi	r3, r5, #1
 8016108:	9307      	strmi	r3, [sp, #28]
 801610a:	2300      	movpl	r3, #0
 801610c:	2300      	movmi	r3, #0
 801610e:	bf4c      	ite	mi
 8016110:	9308      	strmi	r3, [sp, #32]
 8016112:	9307      	strpl	r3, [sp, #28]
 8016114:	9b03      	ldr	r3, [sp, #12]
 8016116:	2b00      	cmp	r3, #0
 8016118:	db3b      	blt.n	8016192 <_dtoa_r+0x212>
 801611a:	9b08      	ldr	r3, [sp, #32]
 801611c:	9a03      	ldr	r2, [sp, #12]
 801611e:	920b      	str	r2, [sp, #44]	; 0x2c
 8016120:	4413      	add	r3, r2
 8016122:	9308      	str	r3, [sp, #32]
 8016124:	2300      	movs	r3, #0
 8016126:	9309      	str	r3, [sp, #36]	; 0x24
 8016128:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801612a:	2b09      	cmp	r3, #9
 801612c:	d869      	bhi.n	8016202 <_dtoa_r+0x282>
 801612e:	2b05      	cmp	r3, #5
 8016130:	bfc4      	itt	gt
 8016132:	3b04      	subgt	r3, #4
 8016134:	9320      	strgt	r3, [sp, #128]	; 0x80
 8016136:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016138:	f1a3 0302 	sub.w	r3, r3, #2
 801613c:	bfcc      	ite	gt
 801613e:	2500      	movgt	r5, #0
 8016140:	2501      	movle	r5, #1
 8016142:	2b03      	cmp	r3, #3
 8016144:	d868      	bhi.n	8016218 <_dtoa_r+0x298>
 8016146:	e8df f003 	tbb	[pc, r3]
 801614a:	3a2d      	.short	0x3a2d
 801614c:	5a38      	.short	0x5a38
 801614e:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016152:	441d      	add	r5, r3
 8016154:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016158:	2b20      	cmp	r3, #32
 801615a:	bfc1      	itttt	gt
 801615c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016160:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016164:	fa0b f303 	lslgt.w	r3, fp, r3
 8016168:	fa26 f000 	lsrgt.w	r0, r6, r0
 801616c:	bfda      	itte	le
 801616e:	f1c3 0320 	rsble	r3, r3, #32
 8016172:	fa06 f003 	lslle.w	r0, r6, r3
 8016176:	4318      	orrgt	r0, r3
 8016178:	f7ea fa1c 	bl	80005b4 <__aeabi_ui2d>
 801617c:	2301      	movs	r3, #1
 801617e:	4606      	mov	r6, r0
 8016180:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016184:	3d01      	subs	r5, #1
 8016186:	930e      	str	r3, [sp, #56]	; 0x38
 8016188:	e76c      	b.n	8016064 <_dtoa_r+0xe4>
 801618a:	2301      	movs	r3, #1
 801618c:	e7b4      	b.n	80160f8 <_dtoa_r+0x178>
 801618e:	900c      	str	r0, [sp, #48]	; 0x30
 8016190:	e7b3      	b.n	80160fa <_dtoa_r+0x17a>
 8016192:	9b07      	ldr	r3, [sp, #28]
 8016194:	9a03      	ldr	r2, [sp, #12]
 8016196:	1a9b      	subs	r3, r3, r2
 8016198:	9307      	str	r3, [sp, #28]
 801619a:	4253      	negs	r3, r2
 801619c:	9309      	str	r3, [sp, #36]	; 0x24
 801619e:	2300      	movs	r3, #0
 80161a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80161a2:	e7c1      	b.n	8016128 <_dtoa_r+0x1a8>
 80161a4:	2300      	movs	r3, #0
 80161a6:	930a      	str	r3, [sp, #40]	; 0x28
 80161a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	dc37      	bgt.n	801621e <_dtoa_r+0x29e>
 80161ae:	2301      	movs	r3, #1
 80161b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80161b4:	461a      	mov	r2, r3
 80161b6:	9221      	str	r2, [sp, #132]	; 0x84
 80161b8:	e00c      	b.n	80161d4 <_dtoa_r+0x254>
 80161ba:	2301      	movs	r3, #1
 80161bc:	e7f3      	b.n	80161a6 <_dtoa_r+0x226>
 80161be:	2300      	movs	r3, #0
 80161c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80161c2:	930a      	str	r3, [sp, #40]	; 0x28
 80161c4:	9b03      	ldr	r3, [sp, #12]
 80161c6:	4413      	add	r3, r2
 80161c8:	9305      	str	r3, [sp, #20]
 80161ca:	3301      	adds	r3, #1
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	9306      	str	r3, [sp, #24]
 80161d0:	bfb8      	it	lt
 80161d2:	2301      	movlt	r3, #1
 80161d4:	2200      	movs	r2, #0
 80161d6:	6462      	str	r2, [r4, #68]	; 0x44
 80161d8:	2204      	movs	r2, #4
 80161da:	f102 0014 	add.w	r0, r2, #20
 80161de:	4298      	cmp	r0, r3
 80161e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80161e2:	d920      	bls.n	8016226 <_dtoa_r+0x2a6>
 80161e4:	4620      	mov	r0, r4
 80161e6:	f000 fddb 	bl	8016da0 <_Balloc>
 80161ea:	9004      	str	r0, [sp, #16]
 80161ec:	2800      	cmp	r0, #0
 80161ee:	d13b      	bne.n	8016268 <_dtoa_r+0x2e8>
 80161f0:	4b1b      	ldr	r3, [pc, #108]	; (8016260 <_dtoa_r+0x2e0>)
 80161f2:	4602      	mov	r2, r0
 80161f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80161f8:	481a      	ldr	r0, [pc, #104]	; (8016264 <_dtoa_r+0x2e4>)
 80161fa:	f001 fa09 	bl	8017610 <__assert_func>
 80161fe:	2301      	movs	r3, #1
 8016200:	e7de      	b.n	80161c0 <_dtoa_r+0x240>
 8016202:	2501      	movs	r5, #1
 8016204:	2300      	movs	r3, #0
 8016206:	9320      	str	r3, [sp, #128]	; 0x80
 8016208:	950a      	str	r5, [sp, #40]	; 0x28
 801620a:	f04f 33ff 	mov.w	r3, #4294967295
 801620e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016212:	2200      	movs	r2, #0
 8016214:	2312      	movs	r3, #18
 8016216:	e7ce      	b.n	80161b6 <_dtoa_r+0x236>
 8016218:	2301      	movs	r3, #1
 801621a:	930a      	str	r3, [sp, #40]	; 0x28
 801621c:	e7f5      	b.n	801620a <_dtoa_r+0x28a>
 801621e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016220:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016224:	e7d6      	b.n	80161d4 <_dtoa_r+0x254>
 8016226:	3101      	adds	r1, #1
 8016228:	6461      	str	r1, [r4, #68]	; 0x44
 801622a:	0052      	lsls	r2, r2, #1
 801622c:	e7d5      	b.n	80161da <_dtoa_r+0x25a>
 801622e:	bf00      	nop
 8016230:	636f4361 	.word	0x636f4361
 8016234:	3fd287a7 	.word	0x3fd287a7
 8016238:	8b60c8b3 	.word	0x8b60c8b3
 801623c:	3fc68a28 	.word	0x3fc68a28
 8016240:	509f79fb 	.word	0x509f79fb
 8016244:	3fd34413 	.word	0x3fd34413
 8016248:	7ff00000 	.word	0x7ff00000
 801624c:	08019c30 	.word	0x08019c30
 8016250:	08019c34 	.word	0x08019c34
 8016254:	08019c0f 	.word	0x08019c0f
 8016258:	3ff80000 	.word	0x3ff80000
 801625c:	08019d30 	.word	0x08019d30
 8016260:	08019c3d 	.word	0x08019c3d
 8016264:	08019c4e 	.word	0x08019c4e
 8016268:	9b04      	ldr	r3, [sp, #16]
 801626a:	6423      	str	r3, [r4, #64]	; 0x40
 801626c:	9b06      	ldr	r3, [sp, #24]
 801626e:	2b0e      	cmp	r3, #14
 8016270:	f200 809d 	bhi.w	80163ae <_dtoa_r+0x42e>
 8016274:	2d00      	cmp	r5, #0
 8016276:	f000 809a 	beq.w	80163ae <_dtoa_r+0x42e>
 801627a:	9b03      	ldr	r3, [sp, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	dd32      	ble.n	80162e6 <_dtoa_r+0x366>
 8016280:	4ab7      	ldr	r2, [pc, #732]	; (8016560 <_dtoa_r+0x5e0>)
 8016282:	f003 030f 	and.w	r3, r3, #15
 8016286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801628a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801628e:	9b03      	ldr	r3, [sp, #12]
 8016290:	05d8      	lsls	r0, r3, #23
 8016292:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016296:	d516      	bpl.n	80162c6 <_dtoa_r+0x346>
 8016298:	4bb2      	ldr	r3, [pc, #712]	; (8016564 <_dtoa_r+0x5e4>)
 801629a:	ec51 0b19 	vmov	r0, r1, d9
 801629e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80162a2:	f7ea fb2b 	bl	80008fc <__aeabi_ddiv>
 80162a6:	f007 070f 	and.w	r7, r7, #15
 80162aa:	4682      	mov	sl, r0
 80162ac:	468b      	mov	fp, r1
 80162ae:	2503      	movs	r5, #3
 80162b0:	4eac      	ldr	r6, [pc, #688]	; (8016564 <_dtoa_r+0x5e4>)
 80162b2:	b957      	cbnz	r7, 80162ca <_dtoa_r+0x34a>
 80162b4:	4642      	mov	r2, r8
 80162b6:	464b      	mov	r3, r9
 80162b8:	4650      	mov	r0, sl
 80162ba:	4659      	mov	r1, fp
 80162bc:	f7ea fb1e 	bl	80008fc <__aeabi_ddiv>
 80162c0:	4682      	mov	sl, r0
 80162c2:	468b      	mov	fp, r1
 80162c4:	e028      	b.n	8016318 <_dtoa_r+0x398>
 80162c6:	2502      	movs	r5, #2
 80162c8:	e7f2      	b.n	80162b0 <_dtoa_r+0x330>
 80162ca:	07f9      	lsls	r1, r7, #31
 80162cc:	d508      	bpl.n	80162e0 <_dtoa_r+0x360>
 80162ce:	4640      	mov	r0, r8
 80162d0:	4649      	mov	r1, r9
 80162d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80162d6:	f7ea f9e7 	bl	80006a8 <__aeabi_dmul>
 80162da:	3501      	adds	r5, #1
 80162dc:	4680      	mov	r8, r0
 80162de:	4689      	mov	r9, r1
 80162e0:	107f      	asrs	r7, r7, #1
 80162e2:	3608      	adds	r6, #8
 80162e4:	e7e5      	b.n	80162b2 <_dtoa_r+0x332>
 80162e6:	f000 809b 	beq.w	8016420 <_dtoa_r+0x4a0>
 80162ea:	9b03      	ldr	r3, [sp, #12]
 80162ec:	4f9d      	ldr	r7, [pc, #628]	; (8016564 <_dtoa_r+0x5e4>)
 80162ee:	425e      	negs	r6, r3
 80162f0:	4b9b      	ldr	r3, [pc, #620]	; (8016560 <_dtoa_r+0x5e0>)
 80162f2:	f006 020f 	and.w	r2, r6, #15
 80162f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fe:	ec51 0b19 	vmov	r0, r1, d9
 8016302:	f7ea f9d1 	bl	80006a8 <__aeabi_dmul>
 8016306:	1136      	asrs	r6, r6, #4
 8016308:	4682      	mov	sl, r0
 801630a:	468b      	mov	fp, r1
 801630c:	2300      	movs	r3, #0
 801630e:	2502      	movs	r5, #2
 8016310:	2e00      	cmp	r6, #0
 8016312:	d17a      	bne.n	801640a <_dtoa_r+0x48a>
 8016314:	2b00      	cmp	r3, #0
 8016316:	d1d3      	bne.n	80162c0 <_dtoa_r+0x340>
 8016318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801631a:	2b00      	cmp	r3, #0
 801631c:	f000 8082 	beq.w	8016424 <_dtoa_r+0x4a4>
 8016320:	4b91      	ldr	r3, [pc, #580]	; (8016568 <_dtoa_r+0x5e8>)
 8016322:	2200      	movs	r2, #0
 8016324:	4650      	mov	r0, sl
 8016326:	4659      	mov	r1, fp
 8016328:	f7ea fc30 	bl	8000b8c <__aeabi_dcmplt>
 801632c:	2800      	cmp	r0, #0
 801632e:	d079      	beq.n	8016424 <_dtoa_r+0x4a4>
 8016330:	9b06      	ldr	r3, [sp, #24]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d076      	beq.n	8016424 <_dtoa_r+0x4a4>
 8016336:	9b05      	ldr	r3, [sp, #20]
 8016338:	2b00      	cmp	r3, #0
 801633a:	dd36      	ble.n	80163aa <_dtoa_r+0x42a>
 801633c:	9b03      	ldr	r3, [sp, #12]
 801633e:	4650      	mov	r0, sl
 8016340:	4659      	mov	r1, fp
 8016342:	1e5f      	subs	r7, r3, #1
 8016344:	2200      	movs	r2, #0
 8016346:	4b89      	ldr	r3, [pc, #548]	; (801656c <_dtoa_r+0x5ec>)
 8016348:	f7ea f9ae 	bl	80006a8 <__aeabi_dmul>
 801634c:	9e05      	ldr	r6, [sp, #20]
 801634e:	4682      	mov	sl, r0
 8016350:	468b      	mov	fp, r1
 8016352:	3501      	adds	r5, #1
 8016354:	4628      	mov	r0, r5
 8016356:	f7ea f93d 	bl	80005d4 <__aeabi_i2d>
 801635a:	4652      	mov	r2, sl
 801635c:	465b      	mov	r3, fp
 801635e:	f7ea f9a3 	bl	80006a8 <__aeabi_dmul>
 8016362:	4b83      	ldr	r3, [pc, #524]	; (8016570 <_dtoa_r+0x5f0>)
 8016364:	2200      	movs	r2, #0
 8016366:	f7e9 ffe9 	bl	800033c <__adddf3>
 801636a:	46d0      	mov	r8, sl
 801636c:	46d9      	mov	r9, fp
 801636e:	4682      	mov	sl, r0
 8016370:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016374:	2e00      	cmp	r6, #0
 8016376:	d158      	bne.n	801642a <_dtoa_r+0x4aa>
 8016378:	4b7e      	ldr	r3, [pc, #504]	; (8016574 <_dtoa_r+0x5f4>)
 801637a:	2200      	movs	r2, #0
 801637c:	4640      	mov	r0, r8
 801637e:	4649      	mov	r1, r9
 8016380:	f7e9 ffda 	bl	8000338 <__aeabi_dsub>
 8016384:	4652      	mov	r2, sl
 8016386:	465b      	mov	r3, fp
 8016388:	4680      	mov	r8, r0
 801638a:	4689      	mov	r9, r1
 801638c:	f7ea fc1c 	bl	8000bc8 <__aeabi_dcmpgt>
 8016390:	2800      	cmp	r0, #0
 8016392:	f040 8296 	bne.w	80168c2 <_dtoa_r+0x942>
 8016396:	4652      	mov	r2, sl
 8016398:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801639c:	4640      	mov	r0, r8
 801639e:	4649      	mov	r1, r9
 80163a0:	f7ea fbf4 	bl	8000b8c <__aeabi_dcmplt>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	f040 828a 	bne.w	80168be <_dtoa_r+0x93e>
 80163aa:	ec5b ab19 	vmov	sl, fp, d9
 80163ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	f2c0 8149 	blt.w	8016648 <_dtoa_r+0x6c8>
 80163b6:	9a03      	ldr	r2, [sp, #12]
 80163b8:	2a0e      	cmp	r2, #14
 80163ba:	f300 8145 	bgt.w	8016648 <_dtoa_r+0x6c8>
 80163be:	4b68      	ldr	r3, [pc, #416]	; (8016560 <_dtoa_r+0x5e0>)
 80163c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80163c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	f280 80d6 	bge.w	801657c <_dtoa_r+0x5fc>
 80163d0:	9b06      	ldr	r3, [sp, #24]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	f300 80d2 	bgt.w	801657c <_dtoa_r+0x5fc>
 80163d8:	f040 8270 	bne.w	80168bc <_dtoa_r+0x93c>
 80163dc:	4b65      	ldr	r3, [pc, #404]	; (8016574 <_dtoa_r+0x5f4>)
 80163de:	2200      	movs	r2, #0
 80163e0:	4640      	mov	r0, r8
 80163e2:	4649      	mov	r1, r9
 80163e4:	f7ea f960 	bl	80006a8 <__aeabi_dmul>
 80163e8:	4652      	mov	r2, sl
 80163ea:	465b      	mov	r3, fp
 80163ec:	f7ea fbe2 	bl	8000bb4 <__aeabi_dcmpge>
 80163f0:	9e06      	ldr	r6, [sp, #24]
 80163f2:	4637      	mov	r7, r6
 80163f4:	2800      	cmp	r0, #0
 80163f6:	f040 8246 	bne.w	8016886 <_dtoa_r+0x906>
 80163fa:	9d04      	ldr	r5, [sp, #16]
 80163fc:	2331      	movs	r3, #49	; 0x31
 80163fe:	f805 3b01 	strb.w	r3, [r5], #1
 8016402:	9b03      	ldr	r3, [sp, #12]
 8016404:	3301      	adds	r3, #1
 8016406:	9303      	str	r3, [sp, #12]
 8016408:	e241      	b.n	801688e <_dtoa_r+0x90e>
 801640a:	07f2      	lsls	r2, r6, #31
 801640c:	d505      	bpl.n	801641a <_dtoa_r+0x49a>
 801640e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016412:	f7ea f949 	bl	80006a8 <__aeabi_dmul>
 8016416:	3501      	adds	r5, #1
 8016418:	2301      	movs	r3, #1
 801641a:	1076      	asrs	r6, r6, #1
 801641c:	3708      	adds	r7, #8
 801641e:	e777      	b.n	8016310 <_dtoa_r+0x390>
 8016420:	2502      	movs	r5, #2
 8016422:	e779      	b.n	8016318 <_dtoa_r+0x398>
 8016424:	9f03      	ldr	r7, [sp, #12]
 8016426:	9e06      	ldr	r6, [sp, #24]
 8016428:	e794      	b.n	8016354 <_dtoa_r+0x3d4>
 801642a:	9904      	ldr	r1, [sp, #16]
 801642c:	4b4c      	ldr	r3, [pc, #304]	; (8016560 <_dtoa_r+0x5e0>)
 801642e:	4431      	add	r1, r6
 8016430:	910d      	str	r1, [sp, #52]	; 0x34
 8016432:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016434:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016438:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801643c:	2900      	cmp	r1, #0
 801643e:	d043      	beq.n	80164c8 <_dtoa_r+0x548>
 8016440:	494d      	ldr	r1, [pc, #308]	; (8016578 <_dtoa_r+0x5f8>)
 8016442:	2000      	movs	r0, #0
 8016444:	f7ea fa5a 	bl	80008fc <__aeabi_ddiv>
 8016448:	4652      	mov	r2, sl
 801644a:	465b      	mov	r3, fp
 801644c:	f7e9 ff74 	bl	8000338 <__aeabi_dsub>
 8016450:	9d04      	ldr	r5, [sp, #16]
 8016452:	4682      	mov	sl, r0
 8016454:	468b      	mov	fp, r1
 8016456:	4649      	mov	r1, r9
 8016458:	4640      	mov	r0, r8
 801645a:	f7ea fbd5 	bl	8000c08 <__aeabi_d2iz>
 801645e:	4606      	mov	r6, r0
 8016460:	f7ea f8b8 	bl	80005d4 <__aeabi_i2d>
 8016464:	4602      	mov	r2, r0
 8016466:	460b      	mov	r3, r1
 8016468:	4640      	mov	r0, r8
 801646a:	4649      	mov	r1, r9
 801646c:	f7e9 ff64 	bl	8000338 <__aeabi_dsub>
 8016470:	3630      	adds	r6, #48	; 0x30
 8016472:	f805 6b01 	strb.w	r6, [r5], #1
 8016476:	4652      	mov	r2, sl
 8016478:	465b      	mov	r3, fp
 801647a:	4680      	mov	r8, r0
 801647c:	4689      	mov	r9, r1
 801647e:	f7ea fb85 	bl	8000b8c <__aeabi_dcmplt>
 8016482:	2800      	cmp	r0, #0
 8016484:	d163      	bne.n	801654e <_dtoa_r+0x5ce>
 8016486:	4642      	mov	r2, r8
 8016488:	464b      	mov	r3, r9
 801648a:	4937      	ldr	r1, [pc, #220]	; (8016568 <_dtoa_r+0x5e8>)
 801648c:	2000      	movs	r0, #0
 801648e:	f7e9 ff53 	bl	8000338 <__aeabi_dsub>
 8016492:	4652      	mov	r2, sl
 8016494:	465b      	mov	r3, fp
 8016496:	f7ea fb79 	bl	8000b8c <__aeabi_dcmplt>
 801649a:	2800      	cmp	r0, #0
 801649c:	f040 80b6 	bne.w	801660c <_dtoa_r+0x68c>
 80164a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164a2:	429d      	cmp	r5, r3
 80164a4:	d081      	beq.n	80163aa <_dtoa_r+0x42a>
 80164a6:	4b31      	ldr	r3, [pc, #196]	; (801656c <_dtoa_r+0x5ec>)
 80164a8:	2200      	movs	r2, #0
 80164aa:	4650      	mov	r0, sl
 80164ac:	4659      	mov	r1, fp
 80164ae:	f7ea f8fb 	bl	80006a8 <__aeabi_dmul>
 80164b2:	4b2e      	ldr	r3, [pc, #184]	; (801656c <_dtoa_r+0x5ec>)
 80164b4:	4682      	mov	sl, r0
 80164b6:	468b      	mov	fp, r1
 80164b8:	4640      	mov	r0, r8
 80164ba:	4649      	mov	r1, r9
 80164bc:	2200      	movs	r2, #0
 80164be:	f7ea f8f3 	bl	80006a8 <__aeabi_dmul>
 80164c2:	4680      	mov	r8, r0
 80164c4:	4689      	mov	r9, r1
 80164c6:	e7c6      	b.n	8016456 <_dtoa_r+0x4d6>
 80164c8:	4650      	mov	r0, sl
 80164ca:	4659      	mov	r1, fp
 80164cc:	f7ea f8ec 	bl	80006a8 <__aeabi_dmul>
 80164d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164d2:	9d04      	ldr	r5, [sp, #16]
 80164d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80164d6:	4682      	mov	sl, r0
 80164d8:	468b      	mov	fp, r1
 80164da:	4649      	mov	r1, r9
 80164dc:	4640      	mov	r0, r8
 80164de:	f7ea fb93 	bl	8000c08 <__aeabi_d2iz>
 80164e2:	4606      	mov	r6, r0
 80164e4:	f7ea f876 	bl	80005d4 <__aeabi_i2d>
 80164e8:	3630      	adds	r6, #48	; 0x30
 80164ea:	4602      	mov	r2, r0
 80164ec:	460b      	mov	r3, r1
 80164ee:	4640      	mov	r0, r8
 80164f0:	4649      	mov	r1, r9
 80164f2:	f7e9 ff21 	bl	8000338 <__aeabi_dsub>
 80164f6:	f805 6b01 	strb.w	r6, [r5], #1
 80164fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164fc:	429d      	cmp	r5, r3
 80164fe:	4680      	mov	r8, r0
 8016500:	4689      	mov	r9, r1
 8016502:	f04f 0200 	mov.w	r2, #0
 8016506:	d124      	bne.n	8016552 <_dtoa_r+0x5d2>
 8016508:	4b1b      	ldr	r3, [pc, #108]	; (8016578 <_dtoa_r+0x5f8>)
 801650a:	4650      	mov	r0, sl
 801650c:	4659      	mov	r1, fp
 801650e:	f7e9 ff15 	bl	800033c <__adddf3>
 8016512:	4602      	mov	r2, r0
 8016514:	460b      	mov	r3, r1
 8016516:	4640      	mov	r0, r8
 8016518:	4649      	mov	r1, r9
 801651a:	f7ea fb55 	bl	8000bc8 <__aeabi_dcmpgt>
 801651e:	2800      	cmp	r0, #0
 8016520:	d174      	bne.n	801660c <_dtoa_r+0x68c>
 8016522:	4652      	mov	r2, sl
 8016524:	465b      	mov	r3, fp
 8016526:	4914      	ldr	r1, [pc, #80]	; (8016578 <_dtoa_r+0x5f8>)
 8016528:	2000      	movs	r0, #0
 801652a:	f7e9 ff05 	bl	8000338 <__aeabi_dsub>
 801652e:	4602      	mov	r2, r0
 8016530:	460b      	mov	r3, r1
 8016532:	4640      	mov	r0, r8
 8016534:	4649      	mov	r1, r9
 8016536:	f7ea fb29 	bl	8000b8c <__aeabi_dcmplt>
 801653a:	2800      	cmp	r0, #0
 801653c:	f43f af35 	beq.w	80163aa <_dtoa_r+0x42a>
 8016540:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016542:	1e6b      	subs	r3, r5, #1
 8016544:	930f      	str	r3, [sp, #60]	; 0x3c
 8016546:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801654a:	2b30      	cmp	r3, #48	; 0x30
 801654c:	d0f8      	beq.n	8016540 <_dtoa_r+0x5c0>
 801654e:	9703      	str	r7, [sp, #12]
 8016550:	e04a      	b.n	80165e8 <_dtoa_r+0x668>
 8016552:	4b06      	ldr	r3, [pc, #24]	; (801656c <_dtoa_r+0x5ec>)
 8016554:	f7ea f8a8 	bl	80006a8 <__aeabi_dmul>
 8016558:	4680      	mov	r8, r0
 801655a:	4689      	mov	r9, r1
 801655c:	e7bd      	b.n	80164da <_dtoa_r+0x55a>
 801655e:	bf00      	nop
 8016560:	08019d30 	.word	0x08019d30
 8016564:	08019d08 	.word	0x08019d08
 8016568:	3ff00000 	.word	0x3ff00000
 801656c:	40240000 	.word	0x40240000
 8016570:	401c0000 	.word	0x401c0000
 8016574:	40140000 	.word	0x40140000
 8016578:	3fe00000 	.word	0x3fe00000
 801657c:	9d04      	ldr	r5, [sp, #16]
 801657e:	4656      	mov	r6, sl
 8016580:	465f      	mov	r7, fp
 8016582:	4642      	mov	r2, r8
 8016584:	464b      	mov	r3, r9
 8016586:	4630      	mov	r0, r6
 8016588:	4639      	mov	r1, r7
 801658a:	f7ea f9b7 	bl	80008fc <__aeabi_ddiv>
 801658e:	f7ea fb3b 	bl	8000c08 <__aeabi_d2iz>
 8016592:	4682      	mov	sl, r0
 8016594:	f7ea f81e 	bl	80005d4 <__aeabi_i2d>
 8016598:	4642      	mov	r2, r8
 801659a:	464b      	mov	r3, r9
 801659c:	f7ea f884 	bl	80006a8 <__aeabi_dmul>
 80165a0:	4602      	mov	r2, r0
 80165a2:	460b      	mov	r3, r1
 80165a4:	4630      	mov	r0, r6
 80165a6:	4639      	mov	r1, r7
 80165a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80165ac:	f7e9 fec4 	bl	8000338 <__aeabi_dsub>
 80165b0:	f805 6b01 	strb.w	r6, [r5], #1
 80165b4:	9e04      	ldr	r6, [sp, #16]
 80165b6:	9f06      	ldr	r7, [sp, #24]
 80165b8:	1bae      	subs	r6, r5, r6
 80165ba:	42b7      	cmp	r7, r6
 80165bc:	4602      	mov	r2, r0
 80165be:	460b      	mov	r3, r1
 80165c0:	d135      	bne.n	801662e <_dtoa_r+0x6ae>
 80165c2:	f7e9 febb 	bl	800033c <__adddf3>
 80165c6:	4642      	mov	r2, r8
 80165c8:	464b      	mov	r3, r9
 80165ca:	4606      	mov	r6, r0
 80165cc:	460f      	mov	r7, r1
 80165ce:	f7ea fafb 	bl	8000bc8 <__aeabi_dcmpgt>
 80165d2:	b9d0      	cbnz	r0, 801660a <_dtoa_r+0x68a>
 80165d4:	4642      	mov	r2, r8
 80165d6:	464b      	mov	r3, r9
 80165d8:	4630      	mov	r0, r6
 80165da:	4639      	mov	r1, r7
 80165dc:	f7ea facc 	bl	8000b78 <__aeabi_dcmpeq>
 80165e0:	b110      	cbz	r0, 80165e8 <_dtoa_r+0x668>
 80165e2:	f01a 0f01 	tst.w	sl, #1
 80165e6:	d110      	bne.n	801660a <_dtoa_r+0x68a>
 80165e8:	4620      	mov	r0, r4
 80165ea:	ee18 1a10 	vmov	r1, s16
 80165ee:	f000 fbfc 	bl	8016dea <_Bfree>
 80165f2:	2300      	movs	r3, #0
 80165f4:	9803      	ldr	r0, [sp, #12]
 80165f6:	702b      	strb	r3, [r5, #0]
 80165f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80165fa:	3001      	adds	r0, #1
 80165fc:	6018      	str	r0, [r3, #0]
 80165fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016600:	2b00      	cmp	r3, #0
 8016602:	f43f acf2 	beq.w	8015fea <_dtoa_r+0x6a>
 8016606:	601d      	str	r5, [r3, #0]
 8016608:	e4ef      	b.n	8015fea <_dtoa_r+0x6a>
 801660a:	9f03      	ldr	r7, [sp, #12]
 801660c:	462b      	mov	r3, r5
 801660e:	461d      	mov	r5, r3
 8016610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016614:	2a39      	cmp	r2, #57	; 0x39
 8016616:	d106      	bne.n	8016626 <_dtoa_r+0x6a6>
 8016618:	9a04      	ldr	r2, [sp, #16]
 801661a:	429a      	cmp	r2, r3
 801661c:	d1f7      	bne.n	801660e <_dtoa_r+0x68e>
 801661e:	9904      	ldr	r1, [sp, #16]
 8016620:	2230      	movs	r2, #48	; 0x30
 8016622:	3701      	adds	r7, #1
 8016624:	700a      	strb	r2, [r1, #0]
 8016626:	781a      	ldrb	r2, [r3, #0]
 8016628:	3201      	adds	r2, #1
 801662a:	701a      	strb	r2, [r3, #0]
 801662c:	e78f      	b.n	801654e <_dtoa_r+0x5ce>
 801662e:	4ba6      	ldr	r3, [pc, #664]	; (80168c8 <_dtoa_r+0x948>)
 8016630:	2200      	movs	r2, #0
 8016632:	f7ea f839 	bl	80006a8 <__aeabi_dmul>
 8016636:	2200      	movs	r2, #0
 8016638:	2300      	movs	r3, #0
 801663a:	4606      	mov	r6, r0
 801663c:	460f      	mov	r7, r1
 801663e:	f7ea fa9b 	bl	8000b78 <__aeabi_dcmpeq>
 8016642:	2800      	cmp	r0, #0
 8016644:	d09d      	beq.n	8016582 <_dtoa_r+0x602>
 8016646:	e7cf      	b.n	80165e8 <_dtoa_r+0x668>
 8016648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801664a:	2a00      	cmp	r2, #0
 801664c:	f000 80d7 	beq.w	80167fe <_dtoa_r+0x87e>
 8016650:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016652:	2a01      	cmp	r2, #1
 8016654:	f300 80ba 	bgt.w	80167cc <_dtoa_r+0x84c>
 8016658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801665a:	2a00      	cmp	r2, #0
 801665c:	f000 80b2 	beq.w	80167c4 <_dtoa_r+0x844>
 8016660:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016664:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016666:	9d07      	ldr	r5, [sp, #28]
 8016668:	9a07      	ldr	r2, [sp, #28]
 801666a:	441a      	add	r2, r3
 801666c:	9207      	str	r2, [sp, #28]
 801666e:	9a08      	ldr	r2, [sp, #32]
 8016670:	2101      	movs	r1, #1
 8016672:	441a      	add	r2, r3
 8016674:	4620      	mov	r0, r4
 8016676:	9208      	str	r2, [sp, #32]
 8016678:	f000 fc56 	bl	8016f28 <__i2b>
 801667c:	4607      	mov	r7, r0
 801667e:	2d00      	cmp	r5, #0
 8016680:	dd0c      	ble.n	801669c <_dtoa_r+0x71c>
 8016682:	9b08      	ldr	r3, [sp, #32]
 8016684:	2b00      	cmp	r3, #0
 8016686:	dd09      	ble.n	801669c <_dtoa_r+0x71c>
 8016688:	42ab      	cmp	r3, r5
 801668a:	9a07      	ldr	r2, [sp, #28]
 801668c:	bfa8      	it	ge
 801668e:	462b      	movge	r3, r5
 8016690:	1ad2      	subs	r2, r2, r3
 8016692:	9207      	str	r2, [sp, #28]
 8016694:	9a08      	ldr	r2, [sp, #32]
 8016696:	1aed      	subs	r5, r5, r3
 8016698:	1ad3      	subs	r3, r2, r3
 801669a:	9308      	str	r3, [sp, #32]
 801669c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801669e:	b31b      	cbz	r3, 80166e8 <_dtoa_r+0x768>
 80166a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	f000 80af 	beq.w	8016806 <_dtoa_r+0x886>
 80166a8:	2e00      	cmp	r6, #0
 80166aa:	dd13      	ble.n	80166d4 <_dtoa_r+0x754>
 80166ac:	4639      	mov	r1, r7
 80166ae:	4632      	mov	r2, r6
 80166b0:	4620      	mov	r0, r4
 80166b2:	f000 fcf9 	bl	80170a8 <__pow5mult>
 80166b6:	ee18 2a10 	vmov	r2, s16
 80166ba:	4601      	mov	r1, r0
 80166bc:	4607      	mov	r7, r0
 80166be:	4620      	mov	r0, r4
 80166c0:	f000 fc48 	bl	8016f54 <__multiply>
 80166c4:	ee18 1a10 	vmov	r1, s16
 80166c8:	4680      	mov	r8, r0
 80166ca:	4620      	mov	r0, r4
 80166cc:	f000 fb8d 	bl	8016dea <_Bfree>
 80166d0:	ee08 8a10 	vmov	s16, r8
 80166d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166d6:	1b9a      	subs	r2, r3, r6
 80166d8:	d006      	beq.n	80166e8 <_dtoa_r+0x768>
 80166da:	ee18 1a10 	vmov	r1, s16
 80166de:	4620      	mov	r0, r4
 80166e0:	f000 fce2 	bl	80170a8 <__pow5mult>
 80166e4:	ee08 0a10 	vmov	s16, r0
 80166e8:	2101      	movs	r1, #1
 80166ea:	4620      	mov	r0, r4
 80166ec:	f000 fc1c 	bl	8016f28 <__i2b>
 80166f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	4606      	mov	r6, r0
 80166f6:	f340 8088 	ble.w	801680a <_dtoa_r+0x88a>
 80166fa:	461a      	mov	r2, r3
 80166fc:	4601      	mov	r1, r0
 80166fe:	4620      	mov	r0, r4
 8016700:	f000 fcd2 	bl	80170a8 <__pow5mult>
 8016704:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016706:	2b01      	cmp	r3, #1
 8016708:	4606      	mov	r6, r0
 801670a:	f340 8081 	ble.w	8016810 <_dtoa_r+0x890>
 801670e:	f04f 0800 	mov.w	r8, #0
 8016712:	6933      	ldr	r3, [r6, #16]
 8016714:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016718:	6918      	ldr	r0, [r3, #16]
 801671a:	f000 fbb5 	bl	8016e88 <__hi0bits>
 801671e:	f1c0 0020 	rsb	r0, r0, #32
 8016722:	9b08      	ldr	r3, [sp, #32]
 8016724:	4418      	add	r0, r3
 8016726:	f010 001f 	ands.w	r0, r0, #31
 801672a:	f000 8092 	beq.w	8016852 <_dtoa_r+0x8d2>
 801672e:	f1c0 0320 	rsb	r3, r0, #32
 8016732:	2b04      	cmp	r3, #4
 8016734:	f340 808a 	ble.w	801684c <_dtoa_r+0x8cc>
 8016738:	f1c0 001c 	rsb	r0, r0, #28
 801673c:	9b07      	ldr	r3, [sp, #28]
 801673e:	4403      	add	r3, r0
 8016740:	9307      	str	r3, [sp, #28]
 8016742:	9b08      	ldr	r3, [sp, #32]
 8016744:	4403      	add	r3, r0
 8016746:	4405      	add	r5, r0
 8016748:	9308      	str	r3, [sp, #32]
 801674a:	9b07      	ldr	r3, [sp, #28]
 801674c:	2b00      	cmp	r3, #0
 801674e:	dd07      	ble.n	8016760 <_dtoa_r+0x7e0>
 8016750:	ee18 1a10 	vmov	r1, s16
 8016754:	461a      	mov	r2, r3
 8016756:	4620      	mov	r0, r4
 8016758:	f000 fce6 	bl	8017128 <__lshift>
 801675c:	ee08 0a10 	vmov	s16, r0
 8016760:	9b08      	ldr	r3, [sp, #32]
 8016762:	2b00      	cmp	r3, #0
 8016764:	dd05      	ble.n	8016772 <_dtoa_r+0x7f2>
 8016766:	4631      	mov	r1, r6
 8016768:	461a      	mov	r2, r3
 801676a:	4620      	mov	r0, r4
 801676c:	f000 fcdc 	bl	8017128 <__lshift>
 8016770:	4606      	mov	r6, r0
 8016772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016774:	2b00      	cmp	r3, #0
 8016776:	d06e      	beq.n	8016856 <_dtoa_r+0x8d6>
 8016778:	ee18 0a10 	vmov	r0, s16
 801677c:	4631      	mov	r1, r6
 801677e:	f000 fd43 	bl	8017208 <__mcmp>
 8016782:	2800      	cmp	r0, #0
 8016784:	da67      	bge.n	8016856 <_dtoa_r+0x8d6>
 8016786:	9b03      	ldr	r3, [sp, #12]
 8016788:	3b01      	subs	r3, #1
 801678a:	ee18 1a10 	vmov	r1, s16
 801678e:	9303      	str	r3, [sp, #12]
 8016790:	220a      	movs	r2, #10
 8016792:	2300      	movs	r3, #0
 8016794:	4620      	mov	r0, r4
 8016796:	f000 fb31 	bl	8016dfc <__multadd>
 801679a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801679c:	ee08 0a10 	vmov	s16, r0
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	f000 81b0 	beq.w	8016b06 <_dtoa_r+0xb86>
 80167a6:	2300      	movs	r3, #0
 80167a8:	4639      	mov	r1, r7
 80167aa:	220a      	movs	r2, #10
 80167ac:	4620      	mov	r0, r4
 80167ae:	f000 fb25 	bl	8016dfc <__multadd>
 80167b2:	9b05      	ldr	r3, [sp, #20]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	4607      	mov	r7, r0
 80167b8:	f300 808e 	bgt.w	80168d8 <_dtoa_r+0x958>
 80167bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80167be:	2b02      	cmp	r3, #2
 80167c0:	dc51      	bgt.n	8016866 <_dtoa_r+0x8e6>
 80167c2:	e089      	b.n	80168d8 <_dtoa_r+0x958>
 80167c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80167ca:	e74b      	b.n	8016664 <_dtoa_r+0x6e4>
 80167cc:	9b06      	ldr	r3, [sp, #24]
 80167ce:	1e5e      	subs	r6, r3, #1
 80167d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167d2:	42b3      	cmp	r3, r6
 80167d4:	bfbf      	itttt	lt
 80167d6:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 80167d8:	9609      	strlt	r6, [sp, #36]	; 0x24
 80167da:	1af2      	sublt	r2, r6, r3
 80167dc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80167de:	bfb6      	itet	lt
 80167e0:	189b      	addlt	r3, r3, r2
 80167e2:	1b9e      	subge	r6, r3, r6
 80167e4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80167e6:	9b06      	ldr	r3, [sp, #24]
 80167e8:	bfb8      	it	lt
 80167ea:	2600      	movlt	r6, #0
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	bfb7      	itett	lt
 80167f0:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
 80167f4:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
 80167f8:	1a9d      	sublt	r5, r3, r2
 80167fa:	2300      	movlt	r3, #0
 80167fc:	e734      	b.n	8016668 <_dtoa_r+0x6e8>
 80167fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016800:	9d07      	ldr	r5, [sp, #28]
 8016802:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016804:	e73b      	b.n	801667e <_dtoa_r+0x6fe>
 8016806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016808:	e767      	b.n	80166da <_dtoa_r+0x75a>
 801680a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801680c:	2b01      	cmp	r3, #1
 801680e:	dc18      	bgt.n	8016842 <_dtoa_r+0x8c2>
 8016810:	f1ba 0f00 	cmp.w	sl, #0
 8016814:	d115      	bne.n	8016842 <_dtoa_r+0x8c2>
 8016816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801681a:	b993      	cbnz	r3, 8016842 <_dtoa_r+0x8c2>
 801681c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016820:	0d1b      	lsrs	r3, r3, #20
 8016822:	051b      	lsls	r3, r3, #20
 8016824:	b183      	cbz	r3, 8016848 <_dtoa_r+0x8c8>
 8016826:	9b07      	ldr	r3, [sp, #28]
 8016828:	3301      	adds	r3, #1
 801682a:	9307      	str	r3, [sp, #28]
 801682c:	9b08      	ldr	r3, [sp, #32]
 801682e:	3301      	adds	r3, #1
 8016830:	9308      	str	r3, [sp, #32]
 8016832:	f04f 0801 	mov.w	r8, #1
 8016836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016838:	2b00      	cmp	r3, #0
 801683a:	f47f af6a 	bne.w	8016712 <_dtoa_r+0x792>
 801683e:	2001      	movs	r0, #1
 8016840:	e76f      	b.n	8016722 <_dtoa_r+0x7a2>
 8016842:	f04f 0800 	mov.w	r8, #0
 8016846:	e7f6      	b.n	8016836 <_dtoa_r+0x8b6>
 8016848:	4698      	mov	r8, r3
 801684a:	e7f4      	b.n	8016836 <_dtoa_r+0x8b6>
 801684c:	f43f af7d 	beq.w	801674a <_dtoa_r+0x7ca>
 8016850:	4618      	mov	r0, r3
 8016852:	301c      	adds	r0, #28
 8016854:	e772      	b.n	801673c <_dtoa_r+0x7bc>
 8016856:	9b06      	ldr	r3, [sp, #24]
 8016858:	2b00      	cmp	r3, #0
 801685a:	dc37      	bgt.n	80168cc <_dtoa_r+0x94c>
 801685c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801685e:	2b02      	cmp	r3, #2
 8016860:	dd34      	ble.n	80168cc <_dtoa_r+0x94c>
 8016862:	9b06      	ldr	r3, [sp, #24]
 8016864:	9305      	str	r3, [sp, #20]
 8016866:	9b05      	ldr	r3, [sp, #20]
 8016868:	b96b      	cbnz	r3, 8016886 <_dtoa_r+0x906>
 801686a:	4631      	mov	r1, r6
 801686c:	2205      	movs	r2, #5
 801686e:	4620      	mov	r0, r4
 8016870:	f000 fac4 	bl	8016dfc <__multadd>
 8016874:	4601      	mov	r1, r0
 8016876:	4606      	mov	r6, r0
 8016878:	ee18 0a10 	vmov	r0, s16
 801687c:	f000 fcc4 	bl	8017208 <__mcmp>
 8016880:	2800      	cmp	r0, #0
 8016882:	f73f adba 	bgt.w	80163fa <_dtoa_r+0x47a>
 8016886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016888:	9d04      	ldr	r5, [sp, #16]
 801688a:	43db      	mvns	r3, r3
 801688c:	9303      	str	r3, [sp, #12]
 801688e:	f04f 0800 	mov.w	r8, #0
 8016892:	4631      	mov	r1, r6
 8016894:	4620      	mov	r0, r4
 8016896:	f000 faa8 	bl	8016dea <_Bfree>
 801689a:	2f00      	cmp	r7, #0
 801689c:	f43f aea4 	beq.w	80165e8 <_dtoa_r+0x668>
 80168a0:	f1b8 0f00 	cmp.w	r8, #0
 80168a4:	d005      	beq.n	80168b2 <_dtoa_r+0x932>
 80168a6:	45b8      	cmp	r8, r7
 80168a8:	d003      	beq.n	80168b2 <_dtoa_r+0x932>
 80168aa:	4641      	mov	r1, r8
 80168ac:	4620      	mov	r0, r4
 80168ae:	f000 fa9c 	bl	8016dea <_Bfree>
 80168b2:	4639      	mov	r1, r7
 80168b4:	4620      	mov	r0, r4
 80168b6:	f000 fa98 	bl	8016dea <_Bfree>
 80168ba:	e695      	b.n	80165e8 <_dtoa_r+0x668>
 80168bc:	2600      	movs	r6, #0
 80168be:	4637      	mov	r7, r6
 80168c0:	e7e1      	b.n	8016886 <_dtoa_r+0x906>
 80168c2:	9703      	str	r7, [sp, #12]
 80168c4:	4637      	mov	r7, r6
 80168c6:	e598      	b.n	80163fa <_dtoa_r+0x47a>
 80168c8:	40240000 	.word	0x40240000
 80168cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	f000 80c9 	beq.w	8016a66 <_dtoa_r+0xae6>
 80168d4:	9b06      	ldr	r3, [sp, #24]
 80168d6:	9305      	str	r3, [sp, #20]
 80168d8:	2d00      	cmp	r5, #0
 80168da:	dd05      	ble.n	80168e8 <_dtoa_r+0x968>
 80168dc:	4639      	mov	r1, r7
 80168de:	462a      	mov	r2, r5
 80168e0:	4620      	mov	r0, r4
 80168e2:	f000 fc21 	bl	8017128 <__lshift>
 80168e6:	4607      	mov	r7, r0
 80168e8:	f1b8 0f00 	cmp.w	r8, #0
 80168ec:	d05a      	beq.n	80169a4 <_dtoa_r+0xa24>
 80168ee:	6879      	ldr	r1, [r7, #4]
 80168f0:	4620      	mov	r0, r4
 80168f2:	f000 fa55 	bl	8016da0 <_Balloc>
 80168f6:	4605      	mov	r5, r0
 80168f8:	b920      	cbnz	r0, 8016904 <_dtoa_r+0x984>
 80168fa:	4b87      	ldr	r3, [pc, #540]	; (8016b18 <_dtoa_r+0xb98>)
 80168fc:	4602      	mov	r2, r0
 80168fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016902:	e479      	b.n	80161f8 <_dtoa_r+0x278>
 8016904:	693a      	ldr	r2, [r7, #16]
 8016906:	3202      	adds	r2, #2
 8016908:	0092      	lsls	r2, r2, #2
 801690a:	f107 010c 	add.w	r1, r7, #12
 801690e:	300c      	adds	r0, #12
 8016910:	f000 fa38 	bl	8016d84 <memcpy>
 8016914:	2201      	movs	r2, #1
 8016916:	4629      	mov	r1, r5
 8016918:	4620      	mov	r0, r4
 801691a:	f000 fc05 	bl	8017128 <__lshift>
 801691e:	9b04      	ldr	r3, [sp, #16]
 8016920:	f103 0901 	add.w	r9, r3, #1
 8016924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016928:	4413      	add	r3, r2
 801692a:	9308      	str	r3, [sp, #32]
 801692c:	f00a 0301 	and.w	r3, sl, #1
 8016930:	46b8      	mov	r8, r7
 8016932:	9307      	str	r3, [sp, #28]
 8016934:	4607      	mov	r7, r0
 8016936:	4631      	mov	r1, r6
 8016938:	ee18 0a10 	vmov	r0, s16
 801693c:	f7ff fa92 	bl	8015e64 <quorem>
 8016940:	4641      	mov	r1, r8
 8016942:	9005      	str	r0, [sp, #20]
 8016944:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016948:	ee18 0a10 	vmov	r0, s16
 801694c:	f000 fc5c 	bl	8017208 <__mcmp>
 8016950:	463a      	mov	r2, r7
 8016952:	9006      	str	r0, [sp, #24]
 8016954:	4631      	mov	r1, r6
 8016956:	4620      	mov	r0, r4
 8016958:	f000 fc72 	bl	8017240 <__mdiff>
 801695c:	68c2      	ldr	r2, [r0, #12]
 801695e:	f109 3bff 	add.w	fp, r9, #4294967295
 8016962:	4605      	mov	r5, r0
 8016964:	bb02      	cbnz	r2, 80169a8 <_dtoa_r+0xa28>
 8016966:	4601      	mov	r1, r0
 8016968:	ee18 0a10 	vmov	r0, s16
 801696c:	f000 fc4c 	bl	8017208 <__mcmp>
 8016970:	4602      	mov	r2, r0
 8016972:	4629      	mov	r1, r5
 8016974:	4620      	mov	r0, r4
 8016976:	9209      	str	r2, [sp, #36]	; 0x24
 8016978:	f000 fa37 	bl	8016dea <_Bfree>
 801697c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801697e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016980:	ea43 0102 	orr.w	r1, r3, r2
 8016984:	9b07      	ldr	r3, [sp, #28]
 8016986:	430b      	orrs	r3, r1
 8016988:	464d      	mov	r5, r9
 801698a:	d10f      	bne.n	80169ac <_dtoa_r+0xa2c>
 801698c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016990:	d02a      	beq.n	80169e8 <_dtoa_r+0xa68>
 8016992:	9b06      	ldr	r3, [sp, #24]
 8016994:	2b00      	cmp	r3, #0
 8016996:	dd02      	ble.n	801699e <_dtoa_r+0xa1e>
 8016998:	9b05      	ldr	r3, [sp, #20]
 801699a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801699e:	f88b a000 	strb.w	sl, [fp]
 80169a2:	e776      	b.n	8016892 <_dtoa_r+0x912>
 80169a4:	4638      	mov	r0, r7
 80169a6:	e7ba      	b.n	801691e <_dtoa_r+0x99e>
 80169a8:	2201      	movs	r2, #1
 80169aa:	e7e2      	b.n	8016972 <_dtoa_r+0x9f2>
 80169ac:	9b06      	ldr	r3, [sp, #24]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	db04      	blt.n	80169bc <_dtoa_r+0xa3c>
 80169b2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80169b4:	430b      	orrs	r3, r1
 80169b6:	9907      	ldr	r1, [sp, #28]
 80169b8:	430b      	orrs	r3, r1
 80169ba:	d122      	bne.n	8016a02 <_dtoa_r+0xa82>
 80169bc:	2a00      	cmp	r2, #0
 80169be:	ddee      	ble.n	801699e <_dtoa_r+0xa1e>
 80169c0:	ee18 1a10 	vmov	r1, s16
 80169c4:	2201      	movs	r2, #1
 80169c6:	4620      	mov	r0, r4
 80169c8:	f000 fbae 	bl	8017128 <__lshift>
 80169cc:	4631      	mov	r1, r6
 80169ce:	ee08 0a10 	vmov	s16, r0
 80169d2:	f000 fc19 	bl	8017208 <__mcmp>
 80169d6:	2800      	cmp	r0, #0
 80169d8:	dc03      	bgt.n	80169e2 <_dtoa_r+0xa62>
 80169da:	d1e0      	bne.n	801699e <_dtoa_r+0xa1e>
 80169dc:	f01a 0f01 	tst.w	sl, #1
 80169e0:	d0dd      	beq.n	801699e <_dtoa_r+0xa1e>
 80169e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80169e6:	d1d7      	bne.n	8016998 <_dtoa_r+0xa18>
 80169e8:	2339      	movs	r3, #57	; 0x39
 80169ea:	f88b 3000 	strb.w	r3, [fp]
 80169ee:	462b      	mov	r3, r5
 80169f0:	461d      	mov	r5, r3
 80169f2:	3b01      	subs	r3, #1
 80169f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80169f8:	2a39      	cmp	r2, #57	; 0x39
 80169fa:	d071      	beq.n	8016ae0 <_dtoa_r+0xb60>
 80169fc:	3201      	adds	r2, #1
 80169fe:	701a      	strb	r2, [r3, #0]
 8016a00:	e747      	b.n	8016892 <_dtoa_r+0x912>
 8016a02:	2a00      	cmp	r2, #0
 8016a04:	dd07      	ble.n	8016a16 <_dtoa_r+0xa96>
 8016a06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016a0a:	d0ed      	beq.n	80169e8 <_dtoa_r+0xa68>
 8016a0c:	f10a 0301 	add.w	r3, sl, #1
 8016a10:	f88b 3000 	strb.w	r3, [fp]
 8016a14:	e73d      	b.n	8016892 <_dtoa_r+0x912>
 8016a16:	9b08      	ldr	r3, [sp, #32]
 8016a18:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016a1c:	4599      	cmp	r9, r3
 8016a1e:	d047      	beq.n	8016ab0 <_dtoa_r+0xb30>
 8016a20:	ee18 1a10 	vmov	r1, s16
 8016a24:	2300      	movs	r3, #0
 8016a26:	220a      	movs	r2, #10
 8016a28:	4620      	mov	r0, r4
 8016a2a:	f000 f9e7 	bl	8016dfc <__multadd>
 8016a2e:	45b8      	cmp	r8, r7
 8016a30:	ee08 0a10 	vmov	s16, r0
 8016a34:	f04f 0300 	mov.w	r3, #0
 8016a38:	f04f 020a 	mov.w	r2, #10
 8016a3c:	4641      	mov	r1, r8
 8016a3e:	4620      	mov	r0, r4
 8016a40:	d106      	bne.n	8016a50 <_dtoa_r+0xad0>
 8016a42:	f000 f9db 	bl	8016dfc <__multadd>
 8016a46:	4680      	mov	r8, r0
 8016a48:	4607      	mov	r7, r0
 8016a4a:	f109 0901 	add.w	r9, r9, #1
 8016a4e:	e772      	b.n	8016936 <_dtoa_r+0x9b6>
 8016a50:	f000 f9d4 	bl	8016dfc <__multadd>
 8016a54:	4639      	mov	r1, r7
 8016a56:	4680      	mov	r8, r0
 8016a58:	2300      	movs	r3, #0
 8016a5a:	220a      	movs	r2, #10
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f000 f9cd 	bl	8016dfc <__multadd>
 8016a62:	4607      	mov	r7, r0
 8016a64:	e7f1      	b.n	8016a4a <_dtoa_r+0xaca>
 8016a66:	9b06      	ldr	r3, [sp, #24]
 8016a68:	9305      	str	r3, [sp, #20]
 8016a6a:	9d04      	ldr	r5, [sp, #16]
 8016a6c:	ee18 0a10 	vmov	r0, s16
 8016a70:	4631      	mov	r1, r6
 8016a72:	f7ff f9f7 	bl	8015e64 <quorem>
 8016a76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016a7a:	9b04      	ldr	r3, [sp, #16]
 8016a7c:	f805 ab01 	strb.w	sl, [r5], #1
 8016a80:	1aea      	subs	r2, r5, r3
 8016a82:	9b05      	ldr	r3, [sp, #20]
 8016a84:	4293      	cmp	r3, r2
 8016a86:	dd09      	ble.n	8016a9c <_dtoa_r+0xb1c>
 8016a88:	ee18 1a10 	vmov	r1, s16
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	220a      	movs	r2, #10
 8016a90:	4620      	mov	r0, r4
 8016a92:	f000 f9b3 	bl	8016dfc <__multadd>
 8016a96:	ee08 0a10 	vmov	s16, r0
 8016a9a:	e7e7      	b.n	8016a6c <_dtoa_r+0xaec>
 8016a9c:	9b05      	ldr	r3, [sp, #20]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	bfc8      	it	gt
 8016aa2:	461d      	movgt	r5, r3
 8016aa4:	9b04      	ldr	r3, [sp, #16]
 8016aa6:	bfd8      	it	le
 8016aa8:	2501      	movle	r5, #1
 8016aaa:	441d      	add	r5, r3
 8016aac:	f04f 0800 	mov.w	r8, #0
 8016ab0:	ee18 1a10 	vmov	r1, s16
 8016ab4:	2201      	movs	r2, #1
 8016ab6:	4620      	mov	r0, r4
 8016ab8:	f000 fb36 	bl	8017128 <__lshift>
 8016abc:	4631      	mov	r1, r6
 8016abe:	ee08 0a10 	vmov	s16, r0
 8016ac2:	f000 fba1 	bl	8017208 <__mcmp>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	dc91      	bgt.n	80169ee <_dtoa_r+0xa6e>
 8016aca:	d102      	bne.n	8016ad2 <_dtoa_r+0xb52>
 8016acc:	f01a 0f01 	tst.w	sl, #1
 8016ad0:	d18d      	bne.n	80169ee <_dtoa_r+0xa6e>
 8016ad2:	462b      	mov	r3, r5
 8016ad4:	461d      	mov	r5, r3
 8016ad6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ada:	2a30      	cmp	r2, #48	; 0x30
 8016adc:	d0fa      	beq.n	8016ad4 <_dtoa_r+0xb54>
 8016ade:	e6d8      	b.n	8016892 <_dtoa_r+0x912>
 8016ae0:	9a04      	ldr	r2, [sp, #16]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d184      	bne.n	80169f0 <_dtoa_r+0xa70>
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	9303      	str	r3, [sp, #12]
 8016aec:	2331      	movs	r3, #49	; 0x31
 8016aee:	7013      	strb	r3, [r2, #0]
 8016af0:	e6cf      	b.n	8016892 <_dtoa_r+0x912>
 8016af2:	4b0a      	ldr	r3, [pc, #40]	; (8016b1c <_dtoa_r+0xb9c>)
 8016af4:	f7ff ba97 	b.w	8016026 <_dtoa_r+0xa6>
 8016af8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	f47f aa7b 	bne.w	8015ff6 <_dtoa_r+0x76>
 8016b00:	4b07      	ldr	r3, [pc, #28]	; (8016b20 <_dtoa_r+0xba0>)
 8016b02:	f7ff ba90 	b.w	8016026 <_dtoa_r+0xa6>
 8016b06:	9b05      	ldr	r3, [sp, #20]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	dcae      	bgt.n	8016a6a <_dtoa_r+0xaea>
 8016b0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016b0e:	2b02      	cmp	r3, #2
 8016b10:	f73f aea9 	bgt.w	8016866 <_dtoa_r+0x8e6>
 8016b14:	e7a9      	b.n	8016a6a <_dtoa_r+0xaea>
 8016b16:	bf00      	nop
 8016b18:	08019c3d 	.word	0x08019c3d
 8016b1c:	08019c0e 	.word	0x08019c0e
 8016b20:	08019c34 	.word	0x08019c34

08016b24 <__libc_fini_array>:
 8016b24:	b538      	push	{r3, r4, r5, lr}
 8016b26:	4d07      	ldr	r5, [pc, #28]	; (8016b44 <__libc_fini_array+0x20>)
 8016b28:	4c07      	ldr	r4, [pc, #28]	; (8016b48 <__libc_fini_array+0x24>)
 8016b2a:	1b64      	subs	r4, r4, r5
 8016b2c:	10a4      	asrs	r4, r4, #2
 8016b2e:	b91c      	cbnz	r4, 8016b38 <__libc_fini_array+0x14>
 8016b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b34:	f002 bdf2 	b.w	801971c <_fini>
 8016b38:	3c01      	subs	r4, #1
 8016b3a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8016b3e:	4798      	blx	r3
 8016b40:	e7f5      	b.n	8016b2e <__libc_fini_array+0xa>
 8016b42:	bf00      	nop
 8016b44:	08019f94 	.word	0x08019f94
 8016b48:	08019f98 	.word	0x08019f98

08016b4c <_malloc_trim_r>:
 8016b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b50:	4606      	mov	r6, r0
 8016b52:	2008      	movs	r0, #8
 8016b54:	460c      	mov	r4, r1
 8016b56:	f7ff f967 	bl	8015e28 <sysconf>
 8016b5a:	4f23      	ldr	r7, [pc, #140]	; (8016be8 <_malloc_trim_r+0x9c>)
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	4630      	mov	r0, r6
 8016b60:	f7fd ff32 	bl	80149c8 <__malloc_lock>
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	685d      	ldr	r5, [r3, #4]
 8016b68:	f025 0503 	bic.w	r5, r5, #3
 8016b6c:	1b2c      	subs	r4, r5, r4
 8016b6e:	3c11      	subs	r4, #17
 8016b70:	4444      	add	r4, r8
 8016b72:	fbb4 f4f8 	udiv	r4, r4, r8
 8016b76:	3c01      	subs	r4, #1
 8016b78:	fb08 f404 	mul.w	r4, r8, r4
 8016b7c:	45a0      	cmp	r8, r4
 8016b7e:	dd05      	ble.n	8016b8c <_malloc_trim_r+0x40>
 8016b80:	4630      	mov	r0, r6
 8016b82:	f7fd ff27 	bl	80149d4 <__malloc_unlock>
 8016b86:	2000      	movs	r0, #0
 8016b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f7fd ff26 	bl	80149e0 <_sbrk_r>
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	442b      	add	r3, r5
 8016b98:	4298      	cmp	r0, r3
 8016b9a:	d1f1      	bne.n	8016b80 <_malloc_trim_r+0x34>
 8016b9c:	4261      	negs	r1, r4
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f7fd ff1e 	bl	80149e0 <_sbrk_r>
 8016ba4:	3001      	adds	r0, #1
 8016ba6:	d110      	bne.n	8016bca <_malloc_trim_r+0x7e>
 8016ba8:	2100      	movs	r1, #0
 8016baa:	4630      	mov	r0, r6
 8016bac:	f7fd ff18 	bl	80149e0 <_sbrk_r>
 8016bb0:	68ba      	ldr	r2, [r7, #8]
 8016bb2:	1a83      	subs	r3, r0, r2
 8016bb4:	2b0f      	cmp	r3, #15
 8016bb6:	dde3      	ble.n	8016b80 <_malloc_trim_r+0x34>
 8016bb8:	490c      	ldr	r1, [pc, #48]	; (8016bec <_malloc_trim_r+0xa0>)
 8016bba:	6809      	ldr	r1, [r1, #0]
 8016bbc:	1a40      	subs	r0, r0, r1
 8016bbe:	490c      	ldr	r1, [pc, #48]	; (8016bf0 <_malloc_trim_r+0xa4>)
 8016bc0:	f043 0301 	orr.w	r3, r3, #1
 8016bc4:	6008      	str	r0, [r1, #0]
 8016bc6:	6053      	str	r3, [r2, #4]
 8016bc8:	e7da      	b.n	8016b80 <_malloc_trim_r+0x34>
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	4a08      	ldr	r2, [pc, #32]	; (8016bf0 <_malloc_trim_r+0xa4>)
 8016bce:	1b2d      	subs	r5, r5, r4
 8016bd0:	f045 0501 	orr.w	r5, r5, #1
 8016bd4:	605d      	str	r5, [r3, #4]
 8016bd6:	6813      	ldr	r3, [r2, #0]
 8016bd8:	4630      	mov	r0, r6
 8016bda:	1b1b      	subs	r3, r3, r4
 8016bdc:	6013      	str	r3, [r2, #0]
 8016bde:	f7fd fef9 	bl	80149d4 <__malloc_unlock>
 8016be2:	2001      	movs	r0, #1
 8016be4:	e7d0      	b.n	8016b88 <_malloc_trim_r+0x3c>
 8016be6:	bf00      	nop
 8016be8:	200004c8 	.word	0x200004c8
 8016bec:	200008d0 	.word	0x200008d0
 8016bf0:	200011a0 	.word	0x200011a0

08016bf4 <_free_r>:
 8016bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	460f      	mov	r7, r1
 8016bfa:	2900      	cmp	r1, #0
 8016bfc:	f000 80b1 	beq.w	8016d62 <_free_r+0x16e>
 8016c00:	f7fd fee2 	bl	80149c8 <__malloc_lock>
 8016c04:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016c08:	4856      	ldr	r0, [pc, #344]	; (8016d64 <_free_r+0x170>)
 8016c0a:	f022 0401 	bic.w	r4, r2, #1
 8016c0e:	f1a7 0308 	sub.w	r3, r7, #8
 8016c12:	eb03 0c04 	add.w	ip, r3, r4
 8016c16:	6881      	ldr	r1, [r0, #8]
 8016c18:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8016c1c:	4561      	cmp	r1, ip
 8016c1e:	f026 0603 	bic.w	r6, r6, #3
 8016c22:	f002 0201 	and.w	r2, r2, #1
 8016c26:	d11b      	bne.n	8016c60 <_free_r+0x6c>
 8016c28:	4434      	add	r4, r6
 8016c2a:	b93a      	cbnz	r2, 8016c3c <_free_r+0x48>
 8016c2c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8016c30:	1a9b      	subs	r3, r3, r2
 8016c32:	4414      	add	r4, r2
 8016c34:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8016c38:	60ca      	str	r2, [r1, #12]
 8016c3a:	6091      	str	r1, [r2, #8]
 8016c3c:	f044 0201 	orr.w	r2, r4, #1
 8016c40:	605a      	str	r2, [r3, #4]
 8016c42:	6083      	str	r3, [r0, #8]
 8016c44:	4b48      	ldr	r3, [pc, #288]	; (8016d68 <_free_r+0x174>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	42a3      	cmp	r3, r4
 8016c4a:	d804      	bhi.n	8016c56 <_free_r+0x62>
 8016c4c:	4b47      	ldr	r3, [pc, #284]	; (8016d6c <_free_r+0x178>)
 8016c4e:	4628      	mov	r0, r5
 8016c50:	6819      	ldr	r1, [r3, #0]
 8016c52:	f7ff ff7b 	bl	8016b4c <_malloc_trim_r>
 8016c56:	4628      	mov	r0, r5
 8016c58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016c5c:	f7fd beba 	b.w	80149d4 <__malloc_unlock>
 8016c60:	f8cc 6004 	str.w	r6, [ip, #4]
 8016c64:	2a00      	cmp	r2, #0
 8016c66:	d138      	bne.n	8016cda <_free_r+0xe6>
 8016c68:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8016c6c:	1a5b      	subs	r3, r3, r1
 8016c6e:	440c      	add	r4, r1
 8016c70:	6899      	ldr	r1, [r3, #8]
 8016c72:	f100 0708 	add.w	r7, r0, #8
 8016c76:	42b9      	cmp	r1, r7
 8016c78:	d031      	beq.n	8016cde <_free_r+0xea>
 8016c7a:	68df      	ldr	r7, [r3, #12]
 8016c7c:	60cf      	str	r7, [r1, #12]
 8016c7e:	60b9      	str	r1, [r7, #8]
 8016c80:	eb0c 0106 	add.w	r1, ip, r6
 8016c84:	6849      	ldr	r1, [r1, #4]
 8016c86:	07c9      	lsls	r1, r1, #31
 8016c88:	d40b      	bmi.n	8016ca2 <_free_r+0xae>
 8016c8a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8016c8e:	4434      	add	r4, r6
 8016c90:	bb3a      	cbnz	r2, 8016ce2 <_free_r+0xee>
 8016c92:	4e37      	ldr	r6, [pc, #220]	; (8016d70 <_free_r+0x17c>)
 8016c94:	42b1      	cmp	r1, r6
 8016c96:	d124      	bne.n	8016ce2 <_free_r+0xee>
 8016c98:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c9c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	f044 0101 	orr.w	r1, r4, #1
 8016ca6:	6059      	str	r1, [r3, #4]
 8016ca8:	511c      	str	r4, [r3, r4]
 8016caa:	2a00      	cmp	r2, #0
 8016cac:	d1d3      	bne.n	8016c56 <_free_r+0x62>
 8016cae:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8016cb2:	d21b      	bcs.n	8016cec <_free_r+0xf8>
 8016cb4:	0961      	lsrs	r1, r4, #5
 8016cb6:	08e2      	lsrs	r2, r4, #3
 8016cb8:	2401      	movs	r4, #1
 8016cba:	408c      	lsls	r4, r1
 8016cbc:	6841      	ldr	r1, [r0, #4]
 8016cbe:	3201      	adds	r2, #1
 8016cc0:	430c      	orrs	r4, r1
 8016cc2:	6044      	str	r4, [r0, #4]
 8016cc4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8016cc8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8016ccc:	3908      	subs	r1, #8
 8016cce:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8016cd2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8016cd6:	60e3      	str	r3, [r4, #12]
 8016cd8:	e7bd      	b.n	8016c56 <_free_r+0x62>
 8016cda:	2200      	movs	r2, #0
 8016cdc:	e7d0      	b.n	8016c80 <_free_r+0x8c>
 8016cde:	2201      	movs	r2, #1
 8016ce0:	e7ce      	b.n	8016c80 <_free_r+0x8c>
 8016ce2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016ce6:	60ce      	str	r6, [r1, #12]
 8016ce8:	60b1      	str	r1, [r6, #8]
 8016cea:	e7da      	b.n	8016ca2 <_free_r+0xae>
 8016cec:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8016cf0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8016cf4:	d214      	bcs.n	8016d20 <_free_r+0x12c>
 8016cf6:	09a2      	lsrs	r2, r4, #6
 8016cf8:	3238      	adds	r2, #56	; 0x38
 8016cfa:	1c51      	adds	r1, r2, #1
 8016cfc:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8016d00:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8016d04:	428e      	cmp	r6, r1
 8016d06:	d125      	bne.n	8016d54 <_free_r+0x160>
 8016d08:	2401      	movs	r4, #1
 8016d0a:	1092      	asrs	r2, r2, #2
 8016d0c:	fa04 f202 	lsl.w	r2, r4, r2
 8016d10:	6844      	ldr	r4, [r0, #4]
 8016d12:	4322      	orrs	r2, r4
 8016d14:	6042      	str	r2, [r0, #4]
 8016d16:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8016d1a:	60b3      	str	r3, [r6, #8]
 8016d1c:	60cb      	str	r3, [r1, #12]
 8016d1e:	e79a      	b.n	8016c56 <_free_r+0x62>
 8016d20:	2a14      	cmp	r2, #20
 8016d22:	d801      	bhi.n	8016d28 <_free_r+0x134>
 8016d24:	325b      	adds	r2, #91	; 0x5b
 8016d26:	e7e8      	b.n	8016cfa <_free_r+0x106>
 8016d28:	2a54      	cmp	r2, #84	; 0x54
 8016d2a:	d802      	bhi.n	8016d32 <_free_r+0x13e>
 8016d2c:	0b22      	lsrs	r2, r4, #12
 8016d2e:	326e      	adds	r2, #110	; 0x6e
 8016d30:	e7e3      	b.n	8016cfa <_free_r+0x106>
 8016d32:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8016d36:	d802      	bhi.n	8016d3e <_free_r+0x14a>
 8016d38:	0be2      	lsrs	r2, r4, #15
 8016d3a:	3277      	adds	r2, #119	; 0x77
 8016d3c:	e7dd      	b.n	8016cfa <_free_r+0x106>
 8016d3e:	f240 5154 	movw	r1, #1364	; 0x554
 8016d42:	428a      	cmp	r2, r1
 8016d44:	bf9a      	itte	ls
 8016d46:	0ca2      	lsrls	r2, r4, #18
 8016d48:	327c      	addls	r2, #124	; 0x7c
 8016d4a:	227e      	movhi	r2, #126	; 0x7e
 8016d4c:	e7d5      	b.n	8016cfa <_free_r+0x106>
 8016d4e:	6889      	ldr	r1, [r1, #8]
 8016d50:	428e      	cmp	r6, r1
 8016d52:	d004      	beq.n	8016d5e <_free_r+0x16a>
 8016d54:	684a      	ldr	r2, [r1, #4]
 8016d56:	f022 0203 	bic.w	r2, r2, #3
 8016d5a:	42a2      	cmp	r2, r4
 8016d5c:	d8f7      	bhi.n	8016d4e <_free_r+0x15a>
 8016d5e:	68ce      	ldr	r6, [r1, #12]
 8016d60:	e7d9      	b.n	8016d16 <_free_r+0x122>
 8016d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d64:	200004c8 	.word	0x200004c8
 8016d68:	200008d4 	.word	0x200008d4
 8016d6c:	200011d0 	.word	0x200011d0
 8016d70:	200004d0 	.word	0x200004d0

08016d74 <_localeconv_r>:
 8016d74:	4800      	ldr	r0, [pc, #0]	; (8016d78 <_localeconv_r+0x4>)
 8016d76:	4770      	bx	lr
 8016d78:	200009cc 	.word	0x200009cc

08016d7c <__retarget_lock_init_recursive>:
 8016d7c:	4770      	bx	lr

08016d7e <__retarget_lock_close_recursive>:
 8016d7e:	4770      	bx	lr

08016d80 <__retarget_lock_acquire_recursive>:
 8016d80:	4770      	bx	lr

08016d82 <__retarget_lock_release_recursive>:
 8016d82:	4770      	bx	lr

08016d84 <memcpy>:
 8016d84:	440a      	add	r2, r1
 8016d86:	4291      	cmp	r1, r2
 8016d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d8c:	d100      	bne.n	8016d90 <memcpy+0xc>
 8016d8e:	4770      	bx	lr
 8016d90:	b510      	push	{r4, lr}
 8016d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d9a:	4291      	cmp	r1, r2
 8016d9c:	d1f9      	bne.n	8016d92 <memcpy+0xe>
 8016d9e:	bd10      	pop	{r4, pc}

08016da0 <_Balloc>:
 8016da0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016da2:	b570      	push	{r4, r5, r6, lr}
 8016da4:	4605      	mov	r5, r0
 8016da6:	460c      	mov	r4, r1
 8016da8:	b17b      	cbz	r3, 8016dca <_Balloc+0x2a>
 8016daa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016dac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016db0:	b9a0      	cbnz	r0, 8016ddc <_Balloc+0x3c>
 8016db2:	2101      	movs	r1, #1
 8016db4:	fa01 f604 	lsl.w	r6, r1, r4
 8016db8:	1d72      	adds	r2, r6, #5
 8016dba:	0092      	lsls	r2, r2, #2
 8016dbc:	4628      	mov	r0, r5
 8016dbe:	f000 fc45 	bl	801764c <_calloc_r>
 8016dc2:	b148      	cbz	r0, 8016dd8 <_Balloc+0x38>
 8016dc4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8016dc8:	e00b      	b.n	8016de2 <_Balloc+0x42>
 8016dca:	2221      	movs	r2, #33	; 0x21
 8016dcc:	2104      	movs	r1, #4
 8016dce:	f000 fc3d 	bl	801764c <_calloc_r>
 8016dd2:	64e8      	str	r0, [r5, #76]	; 0x4c
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	d1e8      	bne.n	8016daa <_Balloc+0xa>
 8016dd8:	2000      	movs	r0, #0
 8016dda:	bd70      	pop	{r4, r5, r6, pc}
 8016ddc:	6802      	ldr	r2, [r0, #0]
 8016dde:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8016de2:	2300      	movs	r3, #0
 8016de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016de8:	e7f7      	b.n	8016dda <_Balloc+0x3a>

08016dea <_Bfree>:
 8016dea:	b131      	cbz	r1, 8016dfa <_Bfree+0x10>
 8016dec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016dee:	684a      	ldr	r2, [r1, #4]
 8016df0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016df4:	6008      	str	r0, [r1, #0]
 8016df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016dfa:	4770      	bx	lr

08016dfc <__multadd>:
 8016dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e00:	690d      	ldr	r5, [r1, #16]
 8016e02:	4607      	mov	r7, r0
 8016e04:	460c      	mov	r4, r1
 8016e06:	461e      	mov	r6, r3
 8016e08:	f101 0c14 	add.w	ip, r1, #20
 8016e0c:	2000      	movs	r0, #0
 8016e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8016e12:	b299      	uxth	r1, r3
 8016e14:	fb02 6101 	mla	r1, r2, r1, r6
 8016e18:	0c1e      	lsrs	r6, r3, #16
 8016e1a:	0c0b      	lsrs	r3, r1, #16
 8016e1c:	fb02 3306 	mla	r3, r2, r6, r3
 8016e20:	b289      	uxth	r1, r1
 8016e22:	3001      	adds	r0, #1
 8016e24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016e28:	4285      	cmp	r5, r0
 8016e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8016e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016e32:	dcec      	bgt.n	8016e0e <__multadd+0x12>
 8016e34:	b30e      	cbz	r6, 8016e7a <__multadd+0x7e>
 8016e36:	68a3      	ldr	r3, [r4, #8]
 8016e38:	42ab      	cmp	r3, r5
 8016e3a:	dc19      	bgt.n	8016e70 <__multadd+0x74>
 8016e3c:	6861      	ldr	r1, [r4, #4]
 8016e3e:	4638      	mov	r0, r7
 8016e40:	3101      	adds	r1, #1
 8016e42:	f7ff ffad 	bl	8016da0 <_Balloc>
 8016e46:	4680      	mov	r8, r0
 8016e48:	b928      	cbnz	r0, 8016e56 <__multadd+0x5a>
 8016e4a:	4602      	mov	r2, r0
 8016e4c:	4b0c      	ldr	r3, [pc, #48]	; (8016e80 <__multadd+0x84>)
 8016e4e:	480d      	ldr	r0, [pc, #52]	; (8016e84 <__multadd+0x88>)
 8016e50:	21b5      	movs	r1, #181	; 0xb5
 8016e52:	f000 fbdd 	bl	8017610 <__assert_func>
 8016e56:	6922      	ldr	r2, [r4, #16]
 8016e58:	3202      	adds	r2, #2
 8016e5a:	f104 010c 	add.w	r1, r4, #12
 8016e5e:	0092      	lsls	r2, r2, #2
 8016e60:	300c      	adds	r0, #12
 8016e62:	f7ff ff8f 	bl	8016d84 <memcpy>
 8016e66:	4621      	mov	r1, r4
 8016e68:	4638      	mov	r0, r7
 8016e6a:	f7ff ffbe 	bl	8016dea <_Bfree>
 8016e6e:	4644      	mov	r4, r8
 8016e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016e74:	3501      	adds	r5, #1
 8016e76:	615e      	str	r6, [r3, #20]
 8016e78:	6125      	str	r5, [r4, #16]
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e80:	08019c3d 	.word	0x08019c3d
 8016e84:	08019ca9 	.word	0x08019ca9

08016e88 <__hi0bits>:
 8016e88:	0c03      	lsrs	r3, r0, #16
 8016e8a:	041b      	lsls	r3, r3, #16
 8016e8c:	b9d3      	cbnz	r3, 8016ec4 <__hi0bits+0x3c>
 8016e8e:	0400      	lsls	r0, r0, #16
 8016e90:	2310      	movs	r3, #16
 8016e92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016e96:	bf04      	itt	eq
 8016e98:	0200      	lsleq	r0, r0, #8
 8016e9a:	3308      	addeq	r3, #8
 8016e9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016ea0:	bf04      	itt	eq
 8016ea2:	0100      	lsleq	r0, r0, #4
 8016ea4:	3304      	addeq	r3, #4
 8016ea6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016eaa:	bf04      	itt	eq
 8016eac:	0080      	lsleq	r0, r0, #2
 8016eae:	3302      	addeq	r3, #2
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	db05      	blt.n	8016ec0 <__hi0bits+0x38>
 8016eb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016eb8:	f103 0301 	add.w	r3, r3, #1
 8016ebc:	bf08      	it	eq
 8016ebe:	2320      	moveq	r3, #32
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	4770      	bx	lr
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	e7e4      	b.n	8016e92 <__hi0bits+0xa>

08016ec8 <__lo0bits>:
 8016ec8:	6803      	ldr	r3, [r0, #0]
 8016eca:	f013 0207 	ands.w	r2, r3, #7
 8016ece:	4601      	mov	r1, r0
 8016ed0:	d00b      	beq.n	8016eea <__lo0bits+0x22>
 8016ed2:	07da      	lsls	r2, r3, #31
 8016ed4:	d423      	bmi.n	8016f1e <__lo0bits+0x56>
 8016ed6:	0798      	lsls	r0, r3, #30
 8016ed8:	bf49      	itett	mi
 8016eda:	085b      	lsrmi	r3, r3, #1
 8016edc:	089b      	lsrpl	r3, r3, #2
 8016ede:	2001      	movmi	r0, #1
 8016ee0:	600b      	strmi	r3, [r1, #0]
 8016ee2:	bf5c      	itt	pl
 8016ee4:	600b      	strpl	r3, [r1, #0]
 8016ee6:	2002      	movpl	r0, #2
 8016ee8:	4770      	bx	lr
 8016eea:	b298      	uxth	r0, r3
 8016eec:	b9a8      	cbnz	r0, 8016f1a <__lo0bits+0x52>
 8016eee:	0c1b      	lsrs	r3, r3, #16
 8016ef0:	2010      	movs	r0, #16
 8016ef2:	b2da      	uxtb	r2, r3
 8016ef4:	b90a      	cbnz	r2, 8016efa <__lo0bits+0x32>
 8016ef6:	3008      	adds	r0, #8
 8016ef8:	0a1b      	lsrs	r3, r3, #8
 8016efa:	071a      	lsls	r2, r3, #28
 8016efc:	bf04      	itt	eq
 8016efe:	091b      	lsreq	r3, r3, #4
 8016f00:	3004      	addeq	r0, #4
 8016f02:	079a      	lsls	r2, r3, #30
 8016f04:	bf04      	itt	eq
 8016f06:	089b      	lsreq	r3, r3, #2
 8016f08:	3002      	addeq	r0, #2
 8016f0a:	07da      	lsls	r2, r3, #31
 8016f0c:	d403      	bmi.n	8016f16 <__lo0bits+0x4e>
 8016f0e:	085b      	lsrs	r3, r3, #1
 8016f10:	f100 0001 	add.w	r0, r0, #1
 8016f14:	d005      	beq.n	8016f22 <__lo0bits+0x5a>
 8016f16:	600b      	str	r3, [r1, #0]
 8016f18:	4770      	bx	lr
 8016f1a:	4610      	mov	r0, r2
 8016f1c:	e7e9      	b.n	8016ef2 <__lo0bits+0x2a>
 8016f1e:	2000      	movs	r0, #0
 8016f20:	4770      	bx	lr
 8016f22:	2020      	movs	r0, #32
 8016f24:	4770      	bx	lr
	...

08016f28 <__i2b>:
 8016f28:	b510      	push	{r4, lr}
 8016f2a:	460c      	mov	r4, r1
 8016f2c:	2101      	movs	r1, #1
 8016f2e:	f7ff ff37 	bl	8016da0 <_Balloc>
 8016f32:	4602      	mov	r2, r0
 8016f34:	b928      	cbnz	r0, 8016f42 <__i2b+0x1a>
 8016f36:	4b05      	ldr	r3, [pc, #20]	; (8016f4c <__i2b+0x24>)
 8016f38:	4805      	ldr	r0, [pc, #20]	; (8016f50 <__i2b+0x28>)
 8016f3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016f3e:	f000 fb67 	bl	8017610 <__assert_func>
 8016f42:	2301      	movs	r3, #1
 8016f44:	6144      	str	r4, [r0, #20]
 8016f46:	6103      	str	r3, [r0, #16]
 8016f48:	bd10      	pop	{r4, pc}
 8016f4a:	bf00      	nop
 8016f4c:	08019c3d 	.word	0x08019c3d
 8016f50:	08019ca9 	.word	0x08019ca9

08016f54 <__multiply>:
 8016f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f58:	4691      	mov	r9, r2
 8016f5a:	690a      	ldr	r2, [r1, #16]
 8016f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f60:	429a      	cmp	r2, r3
 8016f62:	bfb8      	it	lt
 8016f64:	460b      	movlt	r3, r1
 8016f66:	460c      	mov	r4, r1
 8016f68:	bfbc      	itt	lt
 8016f6a:	464c      	movlt	r4, r9
 8016f6c:	4699      	movlt	r9, r3
 8016f6e:	6927      	ldr	r7, [r4, #16]
 8016f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016f74:	68a3      	ldr	r3, [r4, #8]
 8016f76:	6861      	ldr	r1, [r4, #4]
 8016f78:	eb07 060a 	add.w	r6, r7, sl
 8016f7c:	42b3      	cmp	r3, r6
 8016f7e:	b085      	sub	sp, #20
 8016f80:	bfb8      	it	lt
 8016f82:	3101      	addlt	r1, #1
 8016f84:	f7ff ff0c 	bl	8016da0 <_Balloc>
 8016f88:	b930      	cbnz	r0, 8016f98 <__multiply+0x44>
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	4b44      	ldr	r3, [pc, #272]	; (80170a0 <__multiply+0x14c>)
 8016f8e:	4845      	ldr	r0, [pc, #276]	; (80170a4 <__multiply+0x150>)
 8016f90:	f240 115d 	movw	r1, #349	; 0x15d
 8016f94:	f000 fb3c 	bl	8017610 <__assert_func>
 8016f98:	f100 0514 	add.w	r5, r0, #20
 8016f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016fa0:	462b      	mov	r3, r5
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	4543      	cmp	r3, r8
 8016fa6:	d321      	bcc.n	8016fec <__multiply+0x98>
 8016fa8:	f104 0314 	add.w	r3, r4, #20
 8016fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016fb0:	f109 0314 	add.w	r3, r9, #20
 8016fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016fb8:	9202      	str	r2, [sp, #8]
 8016fba:	1b3a      	subs	r2, r7, r4
 8016fbc:	3a15      	subs	r2, #21
 8016fbe:	f022 0203 	bic.w	r2, r2, #3
 8016fc2:	3204      	adds	r2, #4
 8016fc4:	f104 0115 	add.w	r1, r4, #21
 8016fc8:	428f      	cmp	r7, r1
 8016fca:	bf38      	it	cc
 8016fcc:	2204      	movcc	r2, #4
 8016fce:	9201      	str	r2, [sp, #4]
 8016fd0:	9a02      	ldr	r2, [sp, #8]
 8016fd2:	9303      	str	r3, [sp, #12]
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d80c      	bhi.n	8016ff2 <__multiply+0x9e>
 8016fd8:	2e00      	cmp	r6, #0
 8016fda:	dd03      	ble.n	8016fe4 <__multiply+0x90>
 8016fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d05a      	beq.n	801709a <__multiply+0x146>
 8016fe4:	6106      	str	r6, [r0, #16]
 8016fe6:	b005      	add	sp, #20
 8016fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fec:	f843 2b04 	str.w	r2, [r3], #4
 8016ff0:	e7d8      	b.n	8016fa4 <__multiply+0x50>
 8016ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8016ff6:	f1ba 0f00 	cmp.w	sl, #0
 8016ffa:	d024      	beq.n	8017046 <__multiply+0xf2>
 8016ffc:	f104 0e14 	add.w	lr, r4, #20
 8017000:	46a9      	mov	r9, r5
 8017002:	f04f 0c00 	mov.w	ip, #0
 8017006:	f85e 2b04 	ldr.w	r2, [lr], #4
 801700a:	f8d9 1000 	ldr.w	r1, [r9]
 801700e:	fa1f fb82 	uxth.w	fp, r2
 8017012:	b289      	uxth	r1, r1
 8017014:	fb0a 110b 	mla	r1, sl, fp, r1
 8017018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801701c:	f8d9 2000 	ldr.w	r2, [r9]
 8017020:	4461      	add	r1, ip
 8017022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017026:	fb0a c20b 	mla	r2, sl, fp, ip
 801702a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801702e:	b289      	uxth	r1, r1
 8017030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017034:	4577      	cmp	r7, lr
 8017036:	f849 1b04 	str.w	r1, [r9], #4
 801703a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801703e:	d8e2      	bhi.n	8017006 <__multiply+0xb2>
 8017040:	9a01      	ldr	r2, [sp, #4]
 8017042:	f845 c002 	str.w	ip, [r5, r2]
 8017046:	9a03      	ldr	r2, [sp, #12]
 8017048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801704c:	3304      	adds	r3, #4
 801704e:	f1b9 0f00 	cmp.w	r9, #0
 8017052:	d020      	beq.n	8017096 <__multiply+0x142>
 8017054:	6829      	ldr	r1, [r5, #0]
 8017056:	f104 0c14 	add.w	ip, r4, #20
 801705a:	46ae      	mov	lr, r5
 801705c:	f04f 0a00 	mov.w	sl, #0
 8017060:	f8bc b000 	ldrh.w	fp, [ip]
 8017064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017068:	fb09 220b 	mla	r2, r9, fp, r2
 801706c:	4492      	add	sl, r2
 801706e:	b289      	uxth	r1, r1
 8017070:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017074:	f84e 1b04 	str.w	r1, [lr], #4
 8017078:	f85c 2b04 	ldr.w	r2, [ip], #4
 801707c:	f8be 1000 	ldrh.w	r1, [lr]
 8017080:	0c12      	lsrs	r2, r2, #16
 8017082:	fb09 1102 	mla	r1, r9, r2, r1
 8017086:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801708a:	4567      	cmp	r7, ip
 801708c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017090:	d8e6      	bhi.n	8017060 <__multiply+0x10c>
 8017092:	9a01      	ldr	r2, [sp, #4]
 8017094:	50a9      	str	r1, [r5, r2]
 8017096:	3504      	adds	r5, #4
 8017098:	e79a      	b.n	8016fd0 <__multiply+0x7c>
 801709a:	3e01      	subs	r6, #1
 801709c:	e79c      	b.n	8016fd8 <__multiply+0x84>
 801709e:	bf00      	nop
 80170a0:	08019c3d 	.word	0x08019c3d
 80170a4:	08019ca9 	.word	0x08019ca9

080170a8 <__pow5mult>:
 80170a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170ac:	4615      	mov	r5, r2
 80170ae:	f012 0203 	ands.w	r2, r2, #3
 80170b2:	4606      	mov	r6, r0
 80170b4:	460f      	mov	r7, r1
 80170b6:	d007      	beq.n	80170c8 <__pow5mult+0x20>
 80170b8:	4c1a      	ldr	r4, [pc, #104]	; (8017124 <__pow5mult+0x7c>)
 80170ba:	3a01      	subs	r2, #1
 80170bc:	2300      	movs	r3, #0
 80170be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80170c2:	f7ff fe9b 	bl	8016dfc <__multadd>
 80170c6:	4607      	mov	r7, r0
 80170c8:	10ad      	asrs	r5, r5, #2
 80170ca:	d027      	beq.n	801711c <__pow5mult+0x74>
 80170cc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80170ce:	b944      	cbnz	r4, 80170e2 <__pow5mult+0x3a>
 80170d0:	f240 2171 	movw	r1, #625	; 0x271
 80170d4:	4630      	mov	r0, r6
 80170d6:	f7ff ff27 	bl	8016f28 <__i2b>
 80170da:	2300      	movs	r3, #0
 80170dc:	64b0      	str	r0, [r6, #72]	; 0x48
 80170de:	4604      	mov	r4, r0
 80170e0:	6003      	str	r3, [r0, #0]
 80170e2:	f04f 0900 	mov.w	r9, #0
 80170e6:	07eb      	lsls	r3, r5, #31
 80170e8:	d50a      	bpl.n	8017100 <__pow5mult+0x58>
 80170ea:	4639      	mov	r1, r7
 80170ec:	4622      	mov	r2, r4
 80170ee:	4630      	mov	r0, r6
 80170f0:	f7ff ff30 	bl	8016f54 <__multiply>
 80170f4:	4639      	mov	r1, r7
 80170f6:	4680      	mov	r8, r0
 80170f8:	4630      	mov	r0, r6
 80170fa:	f7ff fe76 	bl	8016dea <_Bfree>
 80170fe:	4647      	mov	r7, r8
 8017100:	106d      	asrs	r5, r5, #1
 8017102:	d00b      	beq.n	801711c <__pow5mult+0x74>
 8017104:	6820      	ldr	r0, [r4, #0]
 8017106:	b938      	cbnz	r0, 8017118 <__pow5mult+0x70>
 8017108:	4622      	mov	r2, r4
 801710a:	4621      	mov	r1, r4
 801710c:	4630      	mov	r0, r6
 801710e:	f7ff ff21 	bl	8016f54 <__multiply>
 8017112:	6020      	str	r0, [r4, #0]
 8017114:	f8c0 9000 	str.w	r9, [r0]
 8017118:	4604      	mov	r4, r0
 801711a:	e7e4      	b.n	80170e6 <__pow5mult+0x3e>
 801711c:	4638      	mov	r0, r7
 801711e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017122:	bf00      	nop
 8017124:	08019df8 	.word	0x08019df8

08017128 <__lshift>:
 8017128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801712c:	460c      	mov	r4, r1
 801712e:	6849      	ldr	r1, [r1, #4]
 8017130:	6923      	ldr	r3, [r4, #16]
 8017132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017136:	68a3      	ldr	r3, [r4, #8]
 8017138:	4607      	mov	r7, r0
 801713a:	4691      	mov	r9, r2
 801713c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017140:	f108 0601 	add.w	r6, r8, #1
 8017144:	42b3      	cmp	r3, r6
 8017146:	db0b      	blt.n	8017160 <__lshift+0x38>
 8017148:	4638      	mov	r0, r7
 801714a:	f7ff fe29 	bl	8016da0 <_Balloc>
 801714e:	4605      	mov	r5, r0
 8017150:	b948      	cbnz	r0, 8017166 <__lshift+0x3e>
 8017152:	4602      	mov	r2, r0
 8017154:	4b2a      	ldr	r3, [pc, #168]	; (8017200 <__lshift+0xd8>)
 8017156:	482b      	ldr	r0, [pc, #172]	; (8017204 <__lshift+0xdc>)
 8017158:	f240 11d9 	movw	r1, #473	; 0x1d9
 801715c:	f000 fa58 	bl	8017610 <__assert_func>
 8017160:	3101      	adds	r1, #1
 8017162:	005b      	lsls	r3, r3, #1
 8017164:	e7ee      	b.n	8017144 <__lshift+0x1c>
 8017166:	2300      	movs	r3, #0
 8017168:	f100 0114 	add.w	r1, r0, #20
 801716c:	f100 0210 	add.w	r2, r0, #16
 8017170:	4618      	mov	r0, r3
 8017172:	4553      	cmp	r3, sl
 8017174:	db37      	blt.n	80171e6 <__lshift+0xbe>
 8017176:	6920      	ldr	r0, [r4, #16]
 8017178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801717c:	f104 0314 	add.w	r3, r4, #20
 8017180:	f019 091f 	ands.w	r9, r9, #31
 8017184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017188:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801718c:	d02f      	beq.n	80171ee <__lshift+0xc6>
 801718e:	f1c9 0e20 	rsb	lr, r9, #32
 8017192:	468a      	mov	sl, r1
 8017194:	f04f 0c00 	mov.w	ip, #0
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	fa02 f209 	lsl.w	r2, r2, r9
 801719e:	ea42 020c 	orr.w	r2, r2, ip
 80171a2:	f84a 2b04 	str.w	r2, [sl], #4
 80171a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80171aa:	4298      	cmp	r0, r3
 80171ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80171b0:	d8f2      	bhi.n	8017198 <__lshift+0x70>
 80171b2:	1b03      	subs	r3, r0, r4
 80171b4:	3b15      	subs	r3, #21
 80171b6:	f023 0303 	bic.w	r3, r3, #3
 80171ba:	3304      	adds	r3, #4
 80171bc:	f104 0215 	add.w	r2, r4, #21
 80171c0:	4290      	cmp	r0, r2
 80171c2:	bf38      	it	cc
 80171c4:	2304      	movcc	r3, #4
 80171c6:	f841 c003 	str.w	ip, [r1, r3]
 80171ca:	f1bc 0f00 	cmp.w	ip, #0
 80171ce:	d001      	beq.n	80171d4 <__lshift+0xac>
 80171d0:	f108 0602 	add.w	r6, r8, #2
 80171d4:	3e01      	subs	r6, #1
 80171d6:	4638      	mov	r0, r7
 80171d8:	612e      	str	r6, [r5, #16]
 80171da:	4621      	mov	r1, r4
 80171dc:	f7ff fe05 	bl	8016dea <_Bfree>
 80171e0:	4628      	mov	r0, r5
 80171e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80171ea:	3301      	adds	r3, #1
 80171ec:	e7c1      	b.n	8017172 <__lshift+0x4a>
 80171ee:	3904      	subs	r1, #4
 80171f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80171f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80171f8:	4298      	cmp	r0, r3
 80171fa:	d8f9      	bhi.n	80171f0 <__lshift+0xc8>
 80171fc:	e7ea      	b.n	80171d4 <__lshift+0xac>
 80171fe:	bf00      	nop
 8017200:	08019c3d 	.word	0x08019c3d
 8017204:	08019ca9 	.word	0x08019ca9

08017208 <__mcmp>:
 8017208:	b530      	push	{r4, r5, lr}
 801720a:	6902      	ldr	r2, [r0, #16]
 801720c:	690c      	ldr	r4, [r1, #16]
 801720e:	1b12      	subs	r2, r2, r4
 8017210:	d10e      	bne.n	8017230 <__mcmp+0x28>
 8017212:	f100 0314 	add.w	r3, r0, #20
 8017216:	3114      	adds	r1, #20
 8017218:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801721c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017220:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017224:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017228:	42a5      	cmp	r5, r4
 801722a:	d003      	beq.n	8017234 <__mcmp+0x2c>
 801722c:	d305      	bcc.n	801723a <__mcmp+0x32>
 801722e:	2201      	movs	r2, #1
 8017230:	4610      	mov	r0, r2
 8017232:	bd30      	pop	{r4, r5, pc}
 8017234:	4283      	cmp	r3, r0
 8017236:	d3f3      	bcc.n	8017220 <__mcmp+0x18>
 8017238:	e7fa      	b.n	8017230 <__mcmp+0x28>
 801723a:	f04f 32ff 	mov.w	r2, #4294967295
 801723e:	e7f7      	b.n	8017230 <__mcmp+0x28>

08017240 <__mdiff>:
 8017240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017244:	460c      	mov	r4, r1
 8017246:	4606      	mov	r6, r0
 8017248:	4611      	mov	r1, r2
 801724a:	4620      	mov	r0, r4
 801724c:	4690      	mov	r8, r2
 801724e:	f7ff ffdb 	bl	8017208 <__mcmp>
 8017252:	1e05      	subs	r5, r0, #0
 8017254:	d110      	bne.n	8017278 <__mdiff+0x38>
 8017256:	4629      	mov	r1, r5
 8017258:	4630      	mov	r0, r6
 801725a:	f7ff fda1 	bl	8016da0 <_Balloc>
 801725e:	b930      	cbnz	r0, 801726e <__mdiff+0x2e>
 8017260:	4b3a      	ldr	r3, [pc, #232]	; (801734c <__mdiff+0x10c>)
 8017262:	4602      	mov	r2, r0
 8017264:	f240 2132 	movw	r1, #562	; 0x232
 8017268:	4839      	ldr	r0, [pc, #228]	; (8017350 <__mdiff+0x110>)
 801726a:	f000 f9d1 	bl	8017610 <__assert_func>
 801726e:	2301      	movs	r3, #1
 8017270:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017278:	bfa4      	itt	ge
 801727a:	4643      	movge	r3, r8
 801727c:	46a0      	movge	r8, r4
 801727e:	4630      	mov	r0, r6
 8017280:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017284:	bfa6      	itte	ge
 8017286:	461c      	movge	r4, r3
 8017288:	2500      	movge	r5, #0
 801728a:	2501      	movlt	r5, #1
 801728c:	f7ff fd88 	bl	8016da0 <_Balloc>
 8017290:	b920      	cbnz	r0, 801729c <__mdiff+0x5c>
 8017292:	4b2e      	ldr	r3, [pc, #184]	; (801734c <__mdiff+0x10c>)
 8017294:	4602      	mov	r2, r0
 8017296:	f44f 7110 	mov.w	r1, #576	; 0x240
 801729a:	e7e5      	b.n	8017268 <__mdiff+0x28>
 801729c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80172a0:	6926      	ldr	r6, [r4, #16]
 80172a2:	60c5      	str	r5, [r0, #12]
 80172a4:	f104 0914 	add.w	r9, r4, #20
 80172a8:	f108 0514 	add.w	r5, r8, #20
 80172ac:	f100 0e14 	add.w	lr, r0, #20
 80172b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80172b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80172b8:	f108 0210 	add.w	r2, r8, #16
 80172bc:	46f2      	mov	sl, lr
 80172be:	2100      	movs	r1, #0
 80172c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80172c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80172c8:	fa1f f883 	uxth.w	r8, r3
 80172cc:	fa11 f18b 	uxtah	r1, r1, fp
 80172d0:	0c1b      	lsrs	r3, r3, #16
 80172d2:	eba1 0808 	sub.w	r8, r1, r8
 80172d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80172da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80172de:	fa1f f888 	uxth.w	r8, r8
 80172e2:	1419      	asrs	r1, r3, #16
 80172e4:	454e      	cmp	r6, r9
 80172e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80172ea:	f84a 3b04 	str.w	r3, [sl], #4
 80172ee:	d8e7      	bhi.n	80172c0 <__mdiff+0x80>
 80172f0:	1b33      	subs	r3, r6, r4
 80172f2:	3b15      	subs	r3, #21
 80172f4:	f023 0303 	bic.w	r3, r3, #3
 80172f8:	3304      	adds	r3, #4
 80172fa:	3415      	adds	r4, #21
 80172fc:	42a6      	cmp	r6, r4
 80172fe:	bf38      	it	cc
 8017300:	2304      	movcc	r3, #4
 8017302:	441d      	add	r5, r3
 8017304:	4473      	add	r3, lr
 8017306:	469e      	mov	lr, r3
 8017308:	462e      	mov	r6, r5
 801730a:	4566      	cmp	r6, ip
 801730c:	d30e      	bcc.n	801732c <__mdiff+0xec>
 801730e:	f10c 0203 	add.w	r2, ip, #3
 8017312:	1b52      	subs	r2, r2, r5
 8017314:	f022 0203 	bic.w	r2, r2, #3
 8017318:	3d03      	subs	r5, #3
 801731a:	45ac      	cmp	ip, r5
 801731c:	bf38      	it	cc
 801731e:	2200      	movcc	r2, #0
 8017320:	441a      	add	r2, r3
 8017322:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017326:	b17b      	cbz	r3, 8017348 <__mdiff+0x108>
 8017328:	6107      	str	r7, [r0, #16]
 801732a:	e7a3      	b.n	8017274 <__mdiff+0x34>
 801732c:	f856 8b04 	ldr.w	r8, [r6], #4
 8017330:	fa11 f288 	uxtah	r2, r1, r8
 8017334:	1414      	asrs	r4, r2, #16
 8017336:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801733a:	b292      	uxth	r2, r2
 801733c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017340:	f84e 2b04 	str.w	r2, [lr], #4
 8017344:	1421      	asrs	r1, r4, #16
 8017346:	e7e0      	b.n	801730a <__mdiff+0xca>
 8017348:	3f01      	subs	r7, #1
 801734a:	e7ea      	b.n	8017322 <__mdiff+0xe2>
 801734c:	08019c3d 	.word	0x08019c3d
 8017350:	08019ca9 	.word	0x08019ca9

08017354 <__d2b>:
 8017354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017358:	2101      	movs	r1, #1
 801735a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 801735e:	4690      	mov	r8, r2
 8017360:	4699      	mov	r9, r3
 8017362:	f7ff fd1d 	bl	8016da0 <_Balloc>
 8017366:	4604      	mov	r4, r0
 8017368:	b930      	cbnz	r0, 8017378 <__d2b+0x24>
 801736a:	4602      	mov	r2, r0
 801736c:	4b24      	ldr	r3, [pc, #144]	; (8017400 <__d2b+0xac>)
 801736e:	4825      	ldr	r0, [pc, #148]	; (8017404 <__d2b+0xb0>)
 8017370:	f240 310a 	movw	r1, #778	; 0x30a
 8017374:	f000 f94c 	bl	8017610 <__assert_func>
 8017378:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801737c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017380:	bb2d      	cbnz	r5, 80173ce <__d2b+0x7a>
 8017382:	f1b8 0200 	subs.w	r2, r8, #0
 8017386:	9301      	str	r3, [sp, #4]
 8017388:	d026      	beq.n	80173d8 <__d2b+0x84>
 801738a:	4668      	mov	r0, sp
 801738c:	9200      	str	r2, [sp, #0]
 801738e:	f7ff fd9b 	bl	8016ec8 <__lo0bits>
 8017392:	9900      	ldr	r1, [sp, #0]
 8017394:	b1f0      	cbz	r0, 80173d4 <__d2b+0x80>
 8017396:	9a01      	ldr	r2, [sp, #4]
 8017398:	f1c0 0320 	rsb	r3, r0, #32
 801739c:	fa02 f303 	lsl.w	r3, r2, r3
 80173a0:	430b      	orrs	r3, r1
 80173a2:	40c2      	lsrs	r2, r0
 80173a4:	6163      	str	r3, [r4, #20]
 80173a6:	9201      	str	r2, [sp, #4]
 80173a8:	9b01      	ldr	r3, [sp, #4]
 80173aa:	61a3      	str	r3, [r4, #24]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	bf14      	ite	ne
 80173b0:	2202      	movne	r2, #2
 80173b2:	2201      	moveq	r2, #1
 80173b4:	6122      	str	r2, [r4, #16]
 80173b6:	b1c5      	cbz	r5, 80173ea <__d2b+0x96>
 80173b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80173bc:	4405      	add	r5, r0
 80173be:	603d      	str	r5, [r7, #0]
 80173c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80173c4:	6030      	str	r0, [r6, #0]
 80173c6:	4620      	mov	r0, r4
 80173c8:	b003      	add	sp, #12
 80173ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80173d2:	e7d6      	b.n	8017382 <__d2b+0x2e>
 80173d4:	6161      	str	r1, [r4, #20]
 80173d6:	e7e7      	b.n	80173a8 <__d2b+0x54>
 80173d8:	a801      	add	r0, sp, #4
 80173da:	f7ff fd75 	bl	8016ec8 <__lo0bits>
 80173de:	9b01      	ldr	r3, [sp, #4]
 80173e0:	6163      	str	r3, [r4, #20]
 80173e2:	2201      	movs	r2, #1
 80173e4:	6122      	str	r2, [r4, #16]
 80173e6:	3020      	adds	r0, #32
 80173e8:	e7e5      	b.n	80173b6 <__d2b+0x62>
 80173ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80173ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80173f2:	6038      	str	r0, [r7, #0]
 80173f4:	6918      	ldr	r0, [r3, #16]
 80173f6:	f7ff fd47 	bl	8016e88 <__hi0bits>
 80173fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80173fe:	e7e1      	b.n	80173c4 <__d2b+0x70>
 8017400:	08019c3d 	.word	0x08019c3d
 8017404:	08019ca9 	.word	0x08019ca9

08017408 <frexp>:
 8017408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801740a:	4617      	mov	r7, r2
 801740c:	2200      	movs	r2, #0
 801740e:	603a      	str	r2, [r7, #0]
 8017410:	4a14      	ldr	r2, [pc, #80]	; (8017464 <frexp+0x5c>)
 8017412:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017416:	4296      	cmp	r6, r2
 8017418:	4604      	mov	r4, r0
 801741a:	460d      	mov	r5, r1
 801741c:	460b      	mov	r3, r1
 801741e:	dc1e      	bgt.n	801745e <frexp+0x56>
 8017420:	4602      	mov	r2, r0
 8017422:	4332      	orrs	r2, r6
 8017424:	d01b      	beq.n	801745e <frexp+0x56>
 8017426:	4a10      	ldr	r2, [pc, #64]	; (8017468 <frexp+0x60>)
 8017428:	400a      	ands	r2, r1
 801742a:	b952      	cbnz	r2, 8017442 <frexp+0x3a>
 801742c:	4b0f      	ldr	r3, [pc, #60]	; (801746c <frexp+0x64>)
 801742e:	2200      	movs	r2, #0
 8017430:	f7e9 f93a 	bl	80006a8 <__aeabi_dmul>
 8017434:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8017438:	4604      	mov	r4, r0
 801743a:	460b      	mov	r3, r1
 801743c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017440:	603a      	str	r2, [r7, #0]
 8017442:	683a      	ldr	r2, [r7, #0]
 8017444:	1536      	asrs	r6, r6, #20
 8017446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801744a:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 801744e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017452:	4416      	add	r6, r2
 8017454:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8017458:	603e      	str	r6, [r7, #0]
 801745a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801745e:	4620      	mov	r0, r4
 8017460:	4629      	mov	r1, r5
 8017462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017464:	7fefffff 	.word	0x7fefffff
 8017468:	7ff00000 	.word	0x7ff00000
 801746c:	43500000 	.word	0x43500000

08017470 <strncpy>:
 8017470:	b510      	push	{r4, lr}
 8017472:	3901      	subs	r1, #1
 8017474:	4603      	mov	r3, r0
 8017476:	b132      	cbz	r2, 8017486 <strncpy+0x16>
 8017478:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801747c:	f803 4b01 	strb.w	r4, [r3], #1
 8017480:	3a01      	subs	r2, #1
 8017482:	2c00      	cmp	r4, #0
 8017484:	d1f7      	bne.n	8017476 <strncpy+0x6>
 8017486:	441a      	add	r2, r3
 8017488:	2100      	movs	r1, #0
 801748a:	4293      	cmp	r3, r2
 801748c:	d100      	bne.n	8017490 <strncpy+0x20>
 801748e:	bd10      	pop	{r4, pc}
 8017490:	f803 1b01 	strb.w	r1, [r3], #1
 8017494:	e7f9      	b.n	801748a <strncpy+0x1a>

08017496 <__ssprint_r>:
 8017496:	6893      	ldr	r3, [r2, #8]
 8017498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801749c:	4680      	mov	r8, r0
 801749e:	460c      	mov	r4, r1
 80174a0:	4617      	mov	r7, r2
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d061      	beq.n	801756a <__ssprint_r+0xd4>
 80174a6:	2300      	movs	r3, #0
 80174a8:	f8d2 a000 	ldr.w	sl, [r2]
 80174ac:	9301      	str	r3, [sp, #4]
 80174ae:	469b      	mov	fp, r3
 80174b0:	f1bb 0f00 	cmp.w	fp, #0
 80174b4:	d02b      	beq.n	801750e <__ssprint_r+0x78>
 80174b6:	68a6      	ldr	r6, [r4, #8]
 80174b8:	455e      	cmp	r6, fp
 80174ba:	d844      	bhi.n	8017546 <__ssprint_r+0xb0>
 80174bc:	89a2      	ldrh	r2, [r4, #12]
 80174be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80174c2:	d03e      	beq.n	8017542 <__ssprint_r+0xac>
 80174c4:	6820      	ldr	r0, [r4, #0]
 80174c6:	6921      	ldr	r1, [r4, #16]
 80174c8:	6965      	ldr	r5, [r4, #20]
 80174ca:	eba0 0901 	sub.w	r9, r0, r1
 80174ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80174d6:	f109 0001 	add.w	r0, r9, #1
 80174da:	106d      	asrs	r5, r5, #1
 80174dc:	4458      	add	r0, fp
 80174de:	4285      	cmp	r5, r0
 80174e0:	bf38      	it	cc
 80174e2:	4605      	movcc	r5, r0
 80174e4:	0553      	lsls	r3, r2, #21
 80174e6:	d545      	bpl.n	8017574 <__ssprint_r+0xde>
 80174e8:	4629      	mov	r1, r5
 80174ea:	4640      	mov	r0, r8
 80174ec:	f7fd f818 	bl	8014520 <_malloc_r>
 80174f0:	4606      	mov	r6, r0
 80174f2:	b9a0      	cbnz	r0, 801751e <__ssprint_r+0x88>
 80174f4:	230c      	movs	r3, #12
 80174f6:	f8c8 3000 	str.w	r3, [r8]
 80174fa:	89a3      	ldrh	r3, [r4, #12]
 80174fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017500:	81a3      	strh	r3, [r4, #12]
 8017502:	2300      	movs	r3, #0
 8017504:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8017508:	f04f 30ff 	mov.w	r0, #4294967295
 801750c:	e02f      	b.n	801756e <__ssprint_r+0xd8>
 801750e:	f8da 3000 	ldr.w	r3, [sl]
 8017512:	f8da b004 	ldr.w	fp, [sl, #4]
 8017516:	9301      	str	r3, [sp, #4]
 8017518:	f10a 0a08 	add.w	sl, sl, #8
 801751c:	e7c8      	b.n	80174b0 <__ssprint_r+0x1a>
 801751e:	464a      	mov	r2, r9
 8017520:	6921      	ldr	r1, [r4, #16]
 8017522:	f7ff fc2f 	bl	8016d84 <memcpy>
 8017526:	89a2      	ldrh	r2, [r4, #12]
 8017528:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801752c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017530:	81a2      	strh	r2, [r4, #12]
 8017532:	6126      	str	r6, [r4, #16]
 8017534:	6165      	str	r5, [r4, #20]
 8017536:	444e      	add	r6, r9
 8017538:	eba5 0509 	sub.w	r5, r5, r9
 801753c:	6026      	str	r6, [r4, #0]
 801753e:	60a5      	str	r5, [r4, #8]
 8017540:	465e      	mov	r6, fp
 8017542:	455e      	cmp	r6, fp
 8017544:	d900      	bls.n	8017548 <__ssprint_r+0xb2>
 8017546:	465e      	mov	r6, fp
 8017548:	4632      	mov	r2, r6
 801754a:	9901      	ldr	r1, [sp, #4]
 801754c:	6820      	ldr	r0, [r4, #0]
 801754e:	f000 f8dd 	bl	801770c <memmove>
 8017552:	68a2      	ldr	r2, [r4, #8]
 8017554:	1b92      	subs	r2, r2, r6
 8017556:	60a2      	str	r2, [r4, #8]
 8017558:	6822      	ldr	r2, [r4, #0]
 801755a:	4432      	add	r2, r6
 801755c:	6022      	str	r2, [r4, #0]
 801755e:	68ba      	ldr	r2, [r7, #8]
 8017560:	eba2 030b 	sub.w	r3, r2, fp
 8017564:	60bb      	str	r3, [r7, #8]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d1d1      	bne.n	801750e <__ssprint_r+0x78>
 801756a:	2000      	movs	r0, #0
 801756c:	6078      	str	r0, [r7, #4]
 801756e:	b003      	add	sp, #12
 8017570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017574:	462a      	mov	r2, r5
 8017576:	4640      	mov	r0, r8
 8017578:	f000 f8e2 	bl	8017740 <_realloc_r>
 801757c:	4606      	mov	r6, r0
 801757e:	2800      	cmp	r0, #0
 8017580:	d1d7      	bne.n	8017532 <__ssprint_r+0x9c>
 8017582:	6921      	ldr	r1, [r4, #16]
 8017584:	4640      	mov	r0, r8
 8017586:	f7ff fb35 	bl	8016bf4 <_free_r>
 801758a:	e7b3      	b.n	80174f4 <__ssprint_r+0x5e>

0801758c <__register_exitproc>:
 801758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017590:	f8df a078 	ldr.w	sl, [pc, #120]	; 801760c <__register_exitproc+0x80>
 8017594:	4606      	mov	r6, r0
 8017596:	f8da 0000 	ldr.w	r0, [sl]
 801759a:	4698      	mov	r8, r3
 801759c:	460f      	mov	r7, r1
 801759e:	4691      	mov	r9, r2
 80175a0:	f7ff fbee 	bl	8016d80 <__retarget_lock_acquire_recursive>
 80175a4:	4b18      	ldr	r3, [pc, #96]	; (8017608 <__register_exitproc+0x7c>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80175ac:	b91c      	cbnz	r4, 80175b6 <__register_exitproc+0x2a>
 80175ae:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80175b2:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80175b6:	6865      	ldr	r5, [r4, #4]
 80175b8:	f8da 0000 	ldr.w	r0, [sl]
 80175bc:	2d1f      	cmp	r5, #31
 80175be:	dd05      	ble.n	80175cc <__register_exitproc+0x40>
 80175c0:	f7ff fbdf 	bl	8016d82 <__retarget_lock_release_recursive>
 80175c4:	f04f 30ff 	mov.w	r0, #4294967295
 80175c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175cc:	b19e      	cbz	r6, 80175f6 <__register_exitproc+0x6a>
 80175ce:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80175d2:	2201      	movs	r2, #1
 80175d4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80175d8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80175dc:	40aa      	lsls	r2, r5
 80175de:	4313      	orrs	r3, r2
 80175e0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80175e4:	2e02      	cmp	r6, #2
 80175e6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80175ea:	bf02      	ittt	eq
 80175ec:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80175f0:	4313      	orreq	r3, r2
 80175f2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80175f6:	1c6b      	adds	r3, r5, #1
 80175f8:	3502      	adds	r5, #2
 80175fa:	6063      	str	r3, [r4, #4]
 80175fc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8017600:	f7ff fbbf 	bl	8016d82 <__retarget_lock_release_recursive>
 8017604:	2000      	movs	r0, #0
 8017606:	e7df      	b.n	80175c8 <__register_exitproc+0x3c>
 8017608:	08019bd8 	.word	0x08019bd8
 801760c:	200008d8 	.word	0x200008d8

08017610 <__assert_func>:
 8017610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017612:	4614      	mov	r4, r2
 8017614:	461a      	mov	r2, r3
 8017616:	4b09      	ldr	r3, [pc, #36]	; (801763c <__assert_func+0x2c>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	4605      	mov	r5, r0
 801761c:	68d8      	ldr	r0, [r3, #12]
 801761e:	b14c      	cbz	r4, 8017634 <__assert_func+0x24>
 8017620:	4b07      	ldr	r3, [pc, #28]	; (8017640 <__assert_func+0x30>)
 8017622:	9100      	str	r1, [sp, #0]
 8017624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017628:	4906      	ldr	r1, [pc, #24]	; (8017644 <__assert_func+0x34>)
 801762a:	462b      	mov	r3, r5
 801762c:	f000 f844 	bl	80176b8 <fiprintf>
 8017630:	f000 ff98 	bl	8018564 <abort>
 8017634:	4b04      	ldr	r3, [pc, #16]	; (8017648 <__assert_func+0x38>)
 8017636:	461c      	mov	r4, r3
 8017638:	e7f3      	b.n	8017622 <__assert_func+0x12>
 801763a:	bf00      	nop
 801763c:	20000098 	.word	0x20000098
 8017640:	08019e04 	.word	0x08019e04
 8017644:	08019e11 	.word	0x08019e11
 8017648:	08019e3f 	.word	0x08019e3f

0801764c <_calloc_r>:
 801764c:	b538      	push	{r3, r4, r5, lr}
 801764e:	fba1 1502 	umull	r1, r5, r1, r2
 8017652:	b92d      	cbnz	r5, 8017660 <_calloc_r+0x14>
 8017654:	f7fc ff64 	bl	8014520 <_malloc_r>
 8017658:	4604      	mov	r4, r0
 801765a:	b938      	cbnz	r0, 801766c <_calloc_r+0x20>
 801765c:	4620      	mov	r0, r4
 801765e:	bd38      	pop	{r3, r4, r5, pc}
 8017660:	f7fc ff2c 	bl	80144bc <__errno>
 8017664:	230c      	movs	r3, #12
 8017666:	6003      	str	r3, [r0, #0]
 8017668:	2400      	movs	r4, #0
 801766a:	e7f7      	b.n	801765c <_calloc_r+0x10>
 801766c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017670:	f022 0203 	bic.w	r2, r2, #3
 8017674:	3a04      	subs	r2, #4
 8017676:	2a24      	cmp	r2, #36	; 0x24
 8017678:	d819      	bhi.n	80176ae <_calloc_r+0x62>
 801767a:	2a13      	cmp	r2, #19
 801767c:	d915      	bls.n	80176aa <_calloc_r+0x5e>
 801767e:	2a1b      	cmp	r2, #27
 8017680:	e9c0 5500 	strd	r5, r5, [r0]
 8017684:	d806      	bhi.n	8017694 <_calloc_r+0x48>
 8017686:	f100 0308 	add.w	r3, r0, #8
 801768a:	2200      	movs	r2, #0
 801768c:	e9c3 2200 	strd	r2, r2, [r3]
 8017690:	609a      	str	r2, [r3, #8]
 8017692:	e7e3      	b.n	801765c <_calloc_r+0x10>
 8017694:	2a24      	cmp	r2, #36	; 0x24
 8017696:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801769a:	bf11      	iteee	ne
 801769c:	f100 0310 	addne.w	r3, r0, #16
 80176a0:	6105      	streq	r5, [r0, #16]
 80176a2:	f100 0318 	addeq.w	r3, r0, #24
 80176a6:	6145      	streq	r5, [r0, #20]
 80176a8:	e7ef      	b.n	801768a <_calloc_r+0x3e>
 80176aa:	4603      	mov	r3, r0
 80176ac:	e7ed      	b.n	801768a <_calloc_r+0x3e>
 80176ae:	4629      	mov	r1, r5
 80176b0:	f7fd f982 	bl	80149b8 <memset>
 80176b4:	e7d2      	b.n	801765c <_calloc_r+0x10>
	...

080176b8 <fiprintf>:
 80176b8:	b40e      	push	{r1, r2, r3}
 80176ba:	b503      	push	{r0, r1, lr}
 80176bc:	4601      	mov	r1, r0
 80176be:	ab03      	add	r3, sp, #12
 80176c0:	4805      	ldr	r0, [pc, #20]	; (80176d8 <fiprintf+0x20>)
 80176c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80176c6:	6800      	ldr	r0, [r0, #0]
 80176c8:	9301      	str	r3, [sp, #4]
 80176ca:	f000 fa0f 	bl	8017aec <_vfiprintf_r>
 80176ce:	b002      	add	sp, #8
 80176d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80176d4:	b003      	add	sp, #12
 80176d6:	4770      	bx	lr
 80176d8:	20000098 	.word	0x20000098

080176dc <__locale_mb_cur_max>:
 80176dc:	4b01      	ldr	r3, [pc, #4]	; (80176e4 <__locale_mb_cur_max+0x8>)
 80176de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80176e2:	4770      	bx	lr
 80176e4:	200008dc 	.word	0x200008dc

080176e8 <__ascii_mbtowc>:
 80176e8:	b082      	sub	sp, #8
 80176ea:	b901      	cbnz	r1, 80176ee <__ascii_mbtowc+0x6>
 80176ec:	a901      	add	r1, sp, #4
 80176ee:	b142      	cbz	r2, 8017702 <__ascii_mbtowc+0x1a>
 80176f0:	b14b      	cbz	r3, 8017706 <__ascii_mbtowc+0x1e>
 80176f2:	7813      	ldrb	r3, [r2, #0]
 80176f4:	600b      	str	r3, [r1, #0]
 80176f6:	7812      	ldrb	r2, [r2, #0]
 80176f8:	1e10      	subs	r0, r2, #0
 80176fa:	bf18      	it	ne
 80176fc:	2001      	movne	r0, #1
 80176fe:	b002      	add	sp, #8
 8017700:	4770      	bx	lr
 8017702:	4610      	mov	r0, r2
 8017704:	e7fb      	b.n	80176fe <__ascii_mbtowc+0x16>
 8017706:	f06f 0001 	mvn.w	r0, #1
 801770a:	e7f8      	b.n	80176fe <__ascii_mbtowc+0x16>

0801770c <memmove>:
 801770c:	4288      	cmp	r0, r1
 801770e:	b510      	push	{r4, lr}
 8017710:	eb01 0402 	add.w	r4, r1, r2
 8017714:	d902      	bls.n	801771c <memmove+0x10>
 8017716:	4284      	cmp	r4, r0
 8017718:	4623      	mov	r3, r4
 801771a:	d807      	bhi.n	801772c <memmove+0x20>
 801771c:	1e43      	subs	r3, r0, #1
 801771e:	42a1      	cmp	r1, r4
 8017720:	d008      	beq.n	8017734 <memmove+0x28>
 8017722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801772a:	e7f8      	b.n	801771e <memmove+0x12>
 801772c:	4402      	add	r2, r0
 801772e:	4601      	mov	r1, r0
 8017730:	428a      	cmp	r2, r1
 8017732:	d100      	bne.n	8017736 <memmove+0x2a>
 8017734:	bd10      	pop	{r4, pc}
 8017736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801773a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801773e:	e7f7      	b.n	8017730 <memmove+0x24>

08017740 <_realloc_r>:
 8017740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017744:	4681      	mov	r9, r0
 8017746:	460c      	mov	r4, r1
 8017748:	b929      	cbnz	r1, 8017756 <_realloc_r+0x16>
 801774a:	4611      	mov	r1, r2
 801774c:	b003      	add	sp, #12
 801774e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017752:	f7fc bee5 	b.w	8014520 <_malloc_r>
 8017756:	9201      	str	r2, [sp, #4]
 8017758:	f7fd f936 	bl	80149c8 <__malloc_lock>
 801775c:	9a01      	ldr	r2, [sp, #4]
 801775e:	f102 080b 	add.w	r8, r2, #11
 8017762:	f1b8 0f16 	cmp.w	r8, #22
 8017766:	d90b      	bls.n	8017780 <_realloc_r+0x40>
 8017768:	f038 0807 	bics.w	r8, r8, #7
 801776c:	d50a      	bpl.n	8017784 <_realloc_r+0x44>
 801776e:	230c      	movs	r3, #12
 8017770:	f8c9 3000 	str.w	r3, [r9]
 8017774:	f04f 0b00 	mov.w	fp, #0
 8017778:	4658      	mov	r0, fp
 801777a:	b003      	add	sp, #12
 801777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017780:	f04f 0810 	mov.w	r8, #16
 8017784:	4590      	cmp	r8, r2
 8017786:	d3f2      	bcc.n	801776e <_realloc_r+0x2e>
 8017788:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801778c:	f025 0603 	bic.w	r6, r5, #3
 8017790:	45b0      	cmp	r8, r6
 8017792:	f1a4 0a08 	sub.w	sl, r4, #8
 8017796:	f340 816e 	ble.w	8017a76 <_realloc_r+0x336>
 801779a:	499b      	ldr	r1, [pc, #620]	; (8017a08 <_realloc_r+0x2c8>)
 801779c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80177a0:	eb0a 0306 	add.w	r3, sl, r6
 80177a4:	459c      	cmp	ip, r3
 80177a6:	6859      	ldr	r1, [r3, #4]
 80177a8:	d005      	beq.n	80177b6 <_realloc_r+0x76>
 80177aa:	f021 0001 	bic.w	r0, r1, #1
 80177ae:	4418      	add	r0, r3
 80177b0:	6840      	ldr	r0, [r0, #4]
 80177b2:	07c7      	lsls	r7, r0, #31
 80177b4:	d427      	bmi.n	8017806 <_realloc_r+0xc6>
 80177b6:	f021 0103 	bic.w	r1, r1, #3
 80177ba:	459c      	cmp	ip, r3
 80177bc:	eb06 0701 	add.w	r7, r6, r1
 80177c0:	d119      	bne.n	80177f6 <_realloc_r+0xb6>
 80177c2:	f108 0010 	add.w	r0, r8, #16
 80177c6:	42b8      	cmp	r0, r7
 80177c8:	dc1f      	bgt.n	801780a <_realloc_r+0xca>
 80177ca:	eb0a 0308 	add.w	r3, sl, r8
 80177ce:	4a8e      	ldr	r2, [pc, #568]	; (8017a08 <_realloc_r+0x2c8>)
 80177d0:	eba7 0708 	sub.w	r7, r7, r8
 80177d4:	f047 0701 	orr.w	r7, r7, #1
 80177d8:	6093      	str	r3, [r2, #8]
 80177da:	605f      	str	r7, [r3, #4]
 80177dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80177e0:	f003 0301 	and.w	r3, r3, #1
 80177e4:	ea43 0308 	orr.w	r3, r3, r8
 80177e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80177ec:	4648      	mov	r0, r9
 80177ee:	f7fd f8f1 	bl	80149d4 <__malloc_unlock>
 80177f2:	46a3      	mov	fp, r4
 80177f4:	e7c0      	b.n	8017778 <_realloc_r+0x38>
 80177f6:	45b8      	cmp	r8, r7
 80177f8:	dc07      	bgt.n	801780a <_realloc_r+0xca>
 80177fa:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80177fe:	60da      	str	r2, [r3, #12]
 8017800:	6093      	str	r3, [r2, #8]
 8017802:	4655      	mov	r5, sl
 8017804:	e07f      	b.n	8017906 <_realloc_r+0x1c6>
 8017806:	2100      	movs	r1, #0
 8017808:	460b      	mov	r3, r1
 801780a:	07e8      	lsls	r0, r5, #31
 801780c:	f100 80e5 	bmi.w	80179da <_realloc_r+0x29a>
 8017810:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8017814:	ebaa 0505 	sub.w	r5, sl, r5
 8017818:	6868      	ldr	r0, [r5, #4]
 801781a:	f020 0003 	bic.w	r0, r0, #3
 801781e:	eb00 0b06 	add.w	fp, r0, r6
 8017822:	2b00      	cmp	r3, #0
 8017824:	f000 80a5 	beq.w	8017972 <_realloc_r+0x232>
 8017828:	459c      	cmp	ip, r3
 801782a:	eb01 070b 	add.w	r7, r1, fp
 801782e:	d14a      	bne.n	80178c6 <_realloc_r+0x186>
 8017830:	f108 0310 	add.w	r3, r8, #16
 8017834:	42bb      	cmp	r3, r7
 8017836:	f300 809c 	bgt.w	8017972 <_realloc_r+0x232>
 801783a:	46ab      	mov	fp, r5
 801783c:	68eb      	ldr	r3, [r5, #12]
 801783e:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8017842:	60d3      	str	r3, [r2, #12]
 8017844:	609a      	str	r2, [r3, #8]
 8017846:	1f32      	subs	r2, r6, #4
 8017848:	2a24      	cmp	r2, #36	; 0x24
 801784a:	d837      	bhi.n	80178bc <_realloc_r+0x17c>
 801784c:	2a13      	cmp	r2, #19
 801784e:	d933      	bls.n	80178b8 <_realloc_r+0x178>
 8017850:	6823      	ldr	r3, [r4, #0]
 8017852:	60ab      	str	r3, [r5, #8]
 8017854:	6863      	ldr	r3, [r4, #4]
 8017856:	60eb      	str	r3, [r5, #12]
 8017858:	2a1b      	cmp	r2, #27
 801785a:	d81b      	bhi.n	8017894 <_realloc_r+0x154>
 801785c:	3408      	adds	r4, #8
 801785e:	f105 0310 	add.w	r3, r5, #16
 8017862:	6822      	ldr	r2, [r4, #0]
 8017864:	601a      	str	r2, [r3, #0]
 8017866:	6862      	ldr	r2, [r4, #4]
 8017868:	605a      	str	r2, [r3, #4]
 801786a:	68a2      	ldr	r2, [r4, #8]
 801786c:	609a      	str	r2, [r3, #8]
 801786e:	eb05 0308 	add.w	r3, r5, r8
 8017872:	4a65      	ldr	r2, [pc, #404]	; (8017a08 <_realloc_r+0x2c8>)
 8017874:	eba7 0708 	sub.w	r7, r7, r8
 8017878:	f047 0701 	orr.w	r7, r7, #1
 801787c:	6093      	str	r3, [r2, #8]
 801787e:	605f      	str	r7, [r3, #4]
 8017880:	686b      	ldr	r3, [r5, #4]
 8017882:	f003 0301 	and.w	r3, r3, #1
 8017886:	ea43 0308 	orr.w	r3, r3, r8
 801788a:	606b      	str	r3, [r5, #4]
 801788c:	4648      	mov	r0, r9
 801788e:	f7fd f8a1 	bl	80149d4 <__malloc_unlock>
 8017892:	e771      	b.n	8017778 <_realloc_r+0x38>
 8017894:	68a3      	ldr	r3, [r4, #8]
 8017896:	612b      	str	r3, [r5, #16]
 8017898:	68e3      	ldr	r3, [r4, #12]
 801789a:	616b      	str	r3, [r5, #20]
 801789c:	2a24      	cmp	r2, #36	; 0x24
 801789e:	bf01      	itttt	eq
 80178a0:	6923      	ldreq	r3, [r4, #16]
 80178a2:	61ab      	streq	r3, [r5, #24]
 80178a4:	6962      	ldreq	r2, [r4, #20]
 80178a6:	61ea      	streq	r2, [r5, #28]
 80178a8:	bf19      	ittee	ne
 80178aa:	3410      	addne	r4, #16
 80178ac:	f105 0318 	addne.w	r3, r5, #24
 80178b0:	f105 0320 	addeq.w	r3, r5, #32
 80178b4:	3418      	addeq	r4, #24
 80178b6:	e7d4      	b.n	8017862 <_realloc_r+0x122>
 80178b8:	465b      	mov	r3, fp
 80178ba:	e7d2      	b.n	8017862 <_realloc_r+0x122>
 80178bc:	4621      	mov	r1, r4
 80178be:	4658      	mov	r0, fp
 80178c0:	f7ff ff24 	bl	801770c <memmove>
 80178c4:	e7d3      	b.n	801786e <_realloc_r+0x12e>
 80178c6:	45b8      	cmp	r8, r7
 80178c8:	dc53      	bgt.n	8017972 <_realloc_r+0x232>
 80178ca:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80178ce:	4628      	mov	r0, r5
 80178d0:	60da      	str	r2, [r3, #12]
 80178d2:	6093      	str	r3, [r2, #8]
 80178d4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80178d8:	68eb      	ldr	r3, [r5, #12]
 80178da:	60d3      	str	r3, [r2, #12]
 80178dc:	609a      	str	r2, [r3, #8]
 80178de:	1f32      	subs	r2, r6, #4
 80178e0:	2a24      	cmp	r2, #36	; 0x24
 80178e2:	d842      	bhi.n	801796a <_realloc_r+0x22a>
 80178e4:	2a13      	cmp	r2, #19
 80178e6:	d908      	bls.n	80178fa <_realloc_r+0x1ba>
 80178e8:	6823      	ldr	r3, [r4, #0]
 80178ea:	60ab      	str	r3, [r5, #8]
 80178ec:	6863      	ldr	r3, [r4, #4]
 80178ee:	60eb      	str	r3, [r5, #12]
 80178f0:	2a1b      	cmp	r2, #27
 80178f2:	d828      	bhi.n	8017946 <_realloc_r+0x206>
 80178f4:	3408      	adds	r4, #8
 80178f6:	f105 0010 	add.w	r0, r5, #16
 80178fa:	6823      	ldr	r3, [r4, #0]
 80178fc:	6003      	str	r3, [r0, #0]
 80178fe:	6863      	ldr	r3, [r4, #4]
 8017900:	6043      	str	r3, [r0, #4]
 8017902:	68a3      	ldr	r3, [r4, #8]
 8017904:	6083      	str	r3, [r0, #8]
 8017906:	686b      	ldr	r3, [r5, #4]
 8017908:	eba7 0008 	sub.w	r0, r7, r8
 801790c:	280f      	cmp	r0, #15
 801790e:	f003 0301 	and.w	r3, r3, #1
 8017912:	eb05 0207 	add.w	r2, r5, r7
 8017916:	f240 80b0 	bls.w	8017a7a <_realloc_r+0x33a>
 801791a:	eb05 0108 	add.w	r1, r5, r8
 801791e:	ea48 0303 	orr.w	r3, r8, r3
 8017922:	f040 0001 	orr.w	r0, r0, #1
 8017926:	606b      	str	r3, [r5, #4]
 8017928:	6048      	str	r0, [r1, #4]
 801792a:	6853      	ldr	r3, [r2, #4]
 801792c:	f043 0301 	orr.w	r3, r3, #1
 8017930:	6053      	str	r3, [r2, #4]
 8017932:	3108      	adds	r1, #8
 8017934:	4648      	mov	r0, r9
 8017936:	f7ff f95d 	bl	8016bf4 <_free_r>
 801793a:	4648      	mov	r0, r9
 801793c:	f7fd f84a 	bl	80149d4 <__malloc_unlock>
 8017940:	f105 0b08 	add.w	fp, r5, #8
 8017944:	e718      	b.n	8017778 <_realloc_r+0x38>
 8017946:	68a3      	ldr	r3, [r4, #8]
 8017948:	612b      	str	r3, [r5, #16]
 801794a:	68e3      	ldr	r3, [r4, #12]
 801794c:	616b      	str	r3, [r5, #20]
 801794e:	2a24      	cmp	r2, #36	; 0x24
 8017950:	bf01      	itttt	eq
 8017952:	6923      	ldreq	r3, [r4, #16]
 8017954:	61ab      	streq	r3, [r5, #24]
 8017956:	6963      	ldreq	r3, [r4, #20]
 8017958:	61eb      	streq	r3, [r5, #28]
 801795a:	bf19      	ittee	ne
 801795c:	3410      	addne	r4, #16
 801795e:	f105 0018 	addne.w	r0, r5, #24
 8017962:	f105 0020 	addeq.w	r0, r5, #32
 8017966:	3418      	addeq	r4, #24
 8017968:	e7c7      	b.n	80178fa <_realloc_r+0x1ba>
 801796a:	4621      	mov	r1, r4
 801796c:	f7ff fece 	bl	801770c <memmove>
 8017970:	e7c9      	b.n	8017906 <_realloc_r+0x1c6>
 8017972:	45d8      	cmp	r8, fp
 8017974:	dc31      	bgt.n	80179da <_realloc_r+0x29a>
 8017976:	4628      	mov	r0, r5
 8017978:	68eb      	ldr	r3, [r5, #12]
 801797a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801797e:	60d3      	str	r3, [r2, #12]
 8017980:	609a      	str	r2, [r3, #8]
 8017982:	1f32      	subs	r2, r6, #4
 8017984:	2a24      	cmp	r2, #36	; 0x24
 8017986:	d824      	bhi.n	80179d2 <_realloc_r+0x292>
 8017988:	2a13      	cmp	r2, #19
 801798a:	d908      	bls.n	801799e <_realloc_r+0x25e>
 801798c:	6823      	ldr	r3, [r4, #0]
 801798e:	60ab      	str	r3, [r5, #8]
 8017990:	6863      	ldr	r3, [r4, #4]
 8017992:	60eb      	str	r3, [r5, #12]
 8017994:	2a1b      	cmp	r2, #27
 8017996:	d80a      	bhi.n	80179ae <_realloc_r+0x26e>
 8017998:	3408      	adds	r4, #8
 801799a:	f105 0010 	add.w	r0, r5, #16
 801799e:	6823      	ldr	r3, [r4, #0]
 80179a0:	6003      	str	r3, [r0, #0]
 80179a2:	6863      	ldr	r3, [r4, #4]
 80179a4:	6043      	str	r3, [r0, #4]
 80179a6:	68a3      	ldr	r3, [r4, #8]
 80179a8:	6083      	str	r3, [r0, #8]
 80179aa:	465f      	mov	r7, fp
 80179ac:	e7ab      	b.n	8017906 <_realloc_r+0x1c6>
 80179ae:	68a3      	ldr	r3, [r4, #8]
 80179b0:	612b      	str	r3, [r5, #16]
 80179b2:	68e3      	ldr	r3, [r4, #12]
 80179b4:	616b      	str	r3, [r5, #20]
 80179b6:	2a24      	cmp	r2, #36	; 0x24
 80179b8:	bf01      	itttt	eq
 80179ba:	6923      	ldreq	r3, [r4, #16]
 80179bc:	61ab      	streq	r3, [r5, #24]
 80179be:	6963      	ldreq	r3, [r4, #20]
 80179c0:	61eb      	streq	r3, [r5, #28]
 80179c2:	bf19      	ittee	ne
 80179c4:	3410      	addne	r4, #16
 80179c6:	f105 0018 	addne.w	r0, r5, #24
 80179ca:	f105 0020 	addeq.w	r0, r5, #32
 80179ce:	3418      	addeq	r4, #24
 80179d0:	e7e5      	b.n	801799e <_realloc_r+0x25e>
 80179d2:	4621      	mov	r1, r4
 80179d4:	f7ff fe9a 	bl	801770c <memmove>
 80179d8:	e7e7      	b.n	80179aa <_realloc_r+0x26a>
 80179da:	4611      	mov	r1, r2
 80179dc:	4648      	mov	r0, r9
 80179de:	f7fc fd9f 	bl	8014520 <_malloc_r>
 80179e2:	4683      	mov	fp, r0
 80179e4:	2800      	cmp	r0, #0
 80179e6:	f43f af51 	beq.w	801788c <_realloc_r+0x14c>
 80179ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80179ee:	f023 0301 	bic.w	r3, r3, #1
 80179f2:	4453      	add	r3, sl
 80179f4:	f1a0 0208 	sub.w	r2, r0, #8
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d107      	bne.n	8017a0c <_realloc_r+0x2cc>
 80179fc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8017a00:	f027 0703 	bic.w	r7, r7, #3
 8017a04:	4437      	add	r7, r6
 8017a06:	e6fc      	b.n	8017802 <_realloc_r+0xc2>
 8017a08:	200004c8 	.word	0x200004c8
 8017a0c:	1f32      	subs	r2, r6, #4
 8017a0e:	2a24      	cmp	r2, #36	; 0x24
 8017a10:	d82d      	bhi.n	8017a6e <_realloc_r+0x32e>
 8017a12:	2a13      	cmp	r2, #19
 8017a14:	d928      	bls.n	8017a68 <_realloc_r+0x328>
 8017a16:	6823      	ldr	r3, [r4, #0]
 8017a18:	6003      	str	r3, [r0, #0]
 8017a1a:	6863      	ldr	r3, [r4, #4]
 8017a1c:	6043      	str	r3, [r0, #4]
 8017a1e:	2a1b      	cmp	r2, #27
 8017a20:	d80e      	bhi.n	8017a40 <_realloc_r+0x300>
 8017a22:	f104 0208 	add.w	r2, r4, #8
 8017a26:	f100 0308 	add.w	r3, r0, #8
 8017a2a:	6811      	ldr	r1, [r2, #0]
 8017a2c:	6019      	str	r1, [r3, #0]
 8017a2e:	6851      	ldr	r1, [r2, #4]
 8017a30:	6059      	str	r1, [r3, #4]
 8017a32:	6892      	ldr	r2, [r2, #8]
 8017a34:	609a      	str	r2, [r3, #8]
 8017a36:	4621      	mov	r1, r4
 8017a38:	4648      	mov	r0, r9
 8017a3a:	f7ff f8db 	bl	8016bf4 <_free_r>
 8017a3e:	e725      	b.n	801788c <_realloc_r+0x14c>
 8017a40:	68a3      	ldr	r3, [r4, #8]
 8017a42:	6083      	str	r3, [r0, #8]
 8017a44:	68e3      	ldr	r3, [r4, #12]
 8017a46:	60c3      	str	r3, [r0, #12]
 8017a48:	2a24      	cmp	r2, #36	; 0x24
 8017a4a:	bf01      	itttt	eq
 8017a4c:	6923      	ldreq	r3, [r4, #16]
 8017a4e:	6103      	streq	r3, [r0, #16]
 8017a50:	6961      	ldreq	r1, [r4, #20]
 8017a52:	6141      	streq	r1, [r0, #20]
 8017a54:	bf19      	ittee	ne
 8017a56:	f104 0210 	addne.w	r2, r4, #16
 8017a5a:	f100 0310 	addne.w	r3, r0, #16
 8017a5e:	f104 0218 	addeq.w	r2, r4, #24
 8017a62:	f100 0318 	addeq.w	r3, r0, #24
 8017a66:	e7e0      	b.n	8017a2a <_realloc_r+0x2ea>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	4622      	mov	r2, r4
 8017a6c:	e7dd      	b.n	8017a2a <_realloc_r+0x2ea>
 8017a6e:	4621      	mov	r1, r4
 8017a70:	f7ff fe4c 	bl	801770c <memmove>
 8017a74:	e7df      	b.n	8017a36 <_realloc_r+0x2f6>
 8017a76:	4637      	mov	r7, r6
 8017a78:	e6c3      	b.n	8017802 <_realloc_r+0xc2>
 8017a7a:	431f      	orrs	r7, r3
 8017a7c:	606f      	str	r7, [r5, #4]
 8017a7e:	6853      	ldr	r3, [r2, #4]
 8017a80:	f043 0301 	orr.w	r3, r3, #1
 8017a84:	6053      	str	r3, [r2, #4]
 8017a86:	e758      	b.n	801793a <_realloc_r+0x1fa>

08017a88 <__sprint_r>:
 8017a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a8c:	6893      	ldr	r3, [r2, #8]
 8017a8e:	4680      	mov	r8, r0
 8017a90:	460f      	mov	r7, r1
 8017a92:	4614      	mov	r4, r2
 8017a94:	b91b      	cbnz	r3, 8017a9e <__sprint_r+0x16>
 8017a96:	6053      	str	r3, [r2, #4]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8017aa0:	049d      	lsls	r5, r3, #18
 8017aa2:	d520      	bpl.n	8017ae6 <__sprint_r+0x5e>
 8017aa4:	6815      	ldr	r5, [r2, #0]
 8017aa6:	3508      	adds	r5, #8
 8017aa8:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8017aac:	f04f 0900 	mov.w	r9, #0
 8017ab0:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8017ab4:	45ca      	cmp	sl, r9
 8017ab6:	dc0b      	bgt.n	8017ad0 <__sprint_r+0x48>
 8017ab8:	68a3      	ldr	r3, [r4, #8]
 8017aba:	f026 0003 	bic.w	r0, r6, #3
 8017abe:	1a18      	subs	r0, r3, r0
 8017ac0:	60a0      	str	r0, [r4, #8]
 8017ac2:	3508      	adds	r5, #8
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	d1ef      	bne.n	8017aa8 <__sprint_r+0x20>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017ace:	e7e4      	b.n	8017a9a <__sprint_r+0x12>
 8017ad0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8017ad4:	463a      	mov	r2, r7
 8017ad6:	4640      	mov	r0, r8
 8017ad8:	f000 feaf 	bl	801883a <_fputwc_r>
 8017adc:	1c43      	adds	r3, r0, #1
 8017ade:	d0f3      	beq.n	8017ac8 <__sprint_r+0x40>
 8017ae0:	f109 0901 	add.w	r9, r9, #1
 8017ae4:	e7e6      	b.n	8017ab4 <__sprint_r+0x2c>
 8017ae6:	f000 fed3 	bl	8018890 <__sfvwrite_r>
 8017aea:	e7ed      	b.n	8017ac8 <__sprint_r+0x40>

08017aec <_vfiprintf_r>:
 8017aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af0:	ed2d 8b02 	vpush	{d8}
 8017af4:	b0b9      	sub	sp, #228	; 0xe4
 8017af6:	460f      	mov	r7, r1
 8017af8:	9201      	str	r2, [sp, #4]
 8017afa:	461d      	mov	r5, r3
 8017afc:	461c      	mov	r4, r3
 8017afe:	4681      	mov	r9, r0
 8017b00:	b118      	cbz	r0, 8017b0a <_vfiprintf_r+0x1e>
 8017b02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017b04:	b90b      	cbnz	r3, 8017b0a <_vfiprintf_r+0x1e>
 8017b06:	f000 fe2f 	bl	8018768 <__sinit>
 8017b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b0c:	07d8      	lsls	r0, r3, #31
 8017b0e:	d405      	bmi.n	8017b1c <_vfiprintf_r+0x30>
 8017b10:	89bb      	ldrh	r3, [r7, #12]
 8017b12:	0599      	lsls	r1, r3, #22
 8017b14:	d402      	bmi.n	8017b1c <_vfiprintf_r+0x30>
 8017b16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017b18:	f7ff f932 	bl	8016d80 <__retarget_lock_acquire_recursive>
 8017b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017b20:	049a      	lsls	r2, r3, #18
 8017b22:	d406      	bmi.n	8017b32 <_vfiprintf_r+0x46>
 8017b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017b28:	81bb      	strh	r3, [r7, #12]
 8017b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017b30:	667b      	str	r3, [r7, #100]	; 0x64
 8017b32:	89bb      	ldrh	r3, [r7, #12]
 8017b34:	071e      	lsls	r6, r3, #28
 8017b36:	d501      	bpl.n	8017b3c <_vfiprintf_r+0x50>
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	b9bb      	cbnz	r3, 8017b6c <_vfiprintf_r+0x80>
 8017b3c:	4639      	mov	r1, r7
 8017b3e:	4648      	mov	r0, r9
 8017b40:	f000 fcb8 	bl	80184b4 <__swsetup_r>
 8017b44:	b190      	cbz	r0, 8017b6c <_vfiprintf_r+0x80>
 8017b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b48:	07d8      	lsls	r0, r3, #31
 8017b4a:	d508      	bpl.n	8017b5e <_vfiprintf_r+0x72>
 8017b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b50:	9302      	str	r3, [sp, #8]
 8017b52:	9802      	ldr	r0, [sp, #8]
 8017b54:	b039      	add	sp, #228	; 0xe4
 8017b56:	ecbd 8b02 	vpop	{d8}
 8017b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b5e:	89bb      	ldrh	r3, [r7, #12]
 8017b60:	0599      	lsls	r1, r3, #22
 8017b62:	d4f3      	bmi.n	8017b4c <_vfiprintf_r+0x60>
 8017b64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017b66:	f7ff f90c 	bl	8016d82 <__retarget_lock_release_recursive>
 8017b6a:	e7ef      	b.n	8017b4c <_vfiprintf_r+0x60>
 8017b6c:	89bb      	ldrh	r3, [r7, #12]
 8017b6e:	f003 021a 	and.w	r2, r3, #26
 8017b72:	2a0a      	cmp	r2, #10
 8017b74:	d116      	bne.n	8017ba4 <_vfiprintf_r+0xb8>
 8017b76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017b7a:	2a00      	cmp	r2, #0
 8017b7c:	db12      	blt.n	8017ba4 <_vfiprintf_r+0xb8>
 8017b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017b80:	07d2      	lsls	r2, r2, #31
 8017b82:	d404      	bmi.n	8017b8e <_vfiprintf_r+0xa2>
 8017b84:	059e      	lsls	r6, r3, #22
 8017b86:	d402      	bmi.n	8017b8e <_vfiprintf_r+0xa2>
 8017b88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017b8a:	f7ff f8fa 	bl	8016d82 <__retarget_lock_release_recursive>
 8017b8e:	9a01      	ldr	r2, [sp, #4]
 8017b90:	462b      	mov	r3, r5
 8017b92:	4639      	mov	r1, r7
 8017b94:	4648      	mov	r0, r9
 8017b96:	b039      	add	sp, #228	; 0xe4
 8017b98:	ecbd 8b02 	vpop	{d8}
 8017b9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba0:	f000 bc3a 	b.w	8018418 <__sbprintf>
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8017baa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017bae:	ae0f      	add	r6, sp, #60	; 0x3c
 8017bb0:	ee08 3a10 	vmov	s16, r3
 8017bb4:	960c      	str	r6, [sp, #48]	; 0x30
 8017bb6:	9307      	str	r3, [sp, #28]
 8017bb8:	9302      	str	r3, [sp, #8]
 8017bba:	9b01      	ldr	r3, [sp, #4]
 8017bbc:	461d      	mov	r5, r3
 8017bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bc2:	b10a      	cbz	r2, 8017bc8 <_vfiprintf_r+0xdc>
 8017bc4:	2a25      	cmp	r2, #37	; 0x25
 8017bc6:	d1f9      	bne.n	8017bbc <_vfiprintf_r+0xd0>
 8017bc8:	9b01      	ldr	r3, [sp, #4]
 8017bca:	ebb5 0803 	subs.w	r8, r5, r3
 8017bce:	d00d      	beq.n	8017bec <_vfiprintf_r+0x100>
 8017bd0:	e9c6 3800 	strd	r3, r8, [r6]
 8017bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bd6:	4443      	add	r3, r8
 8017bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8017bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bdc:	3301      	adds	r3, #1
 8017bde:	2b07      	cmp	r3, #7
 8017be0:	930d      	str	r3, [sp, #52]	; 0x34
 8017be2:	dc75      	bgt.n	8017cd0 <_vfiprintf_r+0x1e4>
 8017be4:	3608      	adds	r6, #8
 8017be6:	9b02      	ldr	r3, [sp, #8]
 8017be8:	4443      	add	r3, r8
 8017bea:	9302      	str	r3, [sp, #8]
 8017bec:	782b      	ldrb	r3, [r5, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f000 83d6 	beq.w	80183a0 <_vfiprintf_r+0x8b4>
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8017bfa:	1c6a      	adds	r2, r5, #1
 8017bfc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017c00:	9100      	str	r1, [sp, #0]
 8017c02:	9303      	str	r3, [sp, #12]
 8017c04:	469a      	mov	sl, r3
 8017c06:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017c0a:	9201      	str	r2, [sp, #4]
 8017c0c:	f1a3 0220 	sub.w	r2, r3, #32
 8017c10:	2a5a      	cmp	r2, #90	; 0x5a
 8017c12:	f200 831f 	bhi.w	8018254 <_vfiprintf_r+0x768>
 8017c16:	e8df f012 	tbh	[pc, r2, lsl #1]
 8017c1a:	009b      	.short	0x009b
 8017c1c:	031d031d 	.word	0x031d031d
 8017c20:	031d00a3 	.word	0x031d00a3
 8017c24:	031d031d 	.word	0x031d031d
 8017c28:	031d0082 	.word	0x031d0082
 8017c2c:	00a6031d 	.word	0x00a6031d
 8017c30:	031d00b0 	.word	0x031d00b0
 8017c34:	00b200ad 	.word	0x00b200ad
 8017c38:	00cd031d 	.word	0x00cd031d
 8017c3c:	00d000d0 	.word	0x00d000d0
 8017c40:	00d000d0 	.word	0x00d000d0
 8017c44:	00d000d0 	.word	0x00d000d0
 8017c48:	00d000d0 	.word	0x00d000d0
 8017c4c:	031d00d0 	.word	0x031d00d0
 8017c50:	031d031d 	.word	0x031d031d
 8017c54:	031d031d 	.word	0x031d031d
 8017c58:	031d031d 	.word	0x031d031d
 8017c5c:	031d031d 	.word	0x031d031d
 8017c60:	010800fa 	.word	0x010800fa
 8017c64:	031d031d 	.word	0x031d031d
 8017c68:	031d031d 	.word	0x031d031d
 8017c6c:	031d031d 	.word	0x031d031d
 8017c70:	031d031d 	.word	0x031d031d
 8017c74:	031d031d 	.word	0x031d031d
 8017c78:	031d0158 	.word	0x031d0158
 8017c7c:	031d031d 	.word	0x031d031d
 8017c80:	031d01a1 	.word	0x031d01a1
 8017c84:	031d027e 	.word	0x031d027e
 8017c88:	029e031d 	.word	0x029e031d
 8017c8c:	031d031d 	.word	0x031d031d
 8017c90:	031d031d 	.word	0x031d031d
 8017c94:	031d031d 	.word	0x031d031d
 8017c98:	031d031d 	.word	0x031d031d
 8017c9c:	031d031d 	.word	0x031d031d
 8017ca0:	010a00fa 	.word	0x010a00fa
 8017ca4:	031d031d 	.word	0x031d031d
 8017ca8:	00e0031d 	.word	0x00e0031d
 8017cac:	00f4010a 	.word	0x00f4010a
 8017cb0:	00ed031d 	.word	0x00ed031d
 8017cb4:	0136031d 	.word	0x0136031d
 8017cb8:	018f015a 	.word	0x018f015a
 8017cbc:	031d00f4 	.word	0x031d00f4
 8017cc0:	009901a1 	.word	0x009901a1
 8017cc4:	031d0280 	.word	0x031d0280
 8017cc8:	0065031d 	.word	0x0065031d
 8017ccc:	0099031d 	.word	0x0099031d
 8017cd0:	aa0c      	add	r2, sp, #48	; 0x30
 8017cd2:	4639      	mov	r1, r7
 8017cd4:	4648      	mov	r0, r9
 8017cd6:	f7ff fed7 	bl	8017a88 <__sprint_r>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	f040 833f 	bne.w	801835e <_vfiprintf_r+0x872>
 8017ce0:	ae0f      	add	r6, sp, #60	; 0x3c
 8017ce2:	e780      	b.n	8017be6 <_vfiprintf_r+0xfa>
 8017ce4:	4a9c      	ldr	r2, [pc, #624]	; (8017f58 <_vfiprintf_r+0x46c>)
 8017ce6:	9205      	str	r2, [sp, #20]
 8017ce8:	f01a 0220 	ands.w	r2, sl, #32
 8017cec:	f000 8235 	beq.w	801815a <_vfiprintf_r+0x66e>
 8017cf0:	3407      	adds	r4, #7
 8017cf2:	f024 0207 	bic.w	r2, r4, #7
 8017cf6:	4693      	mov	fp, r2
 8017cf8:	6855      	ldr	r5, [r2, #4]
 8017cfa:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017cfe:	f01a 0f01 	tst.w	sl, #1
 8017d02:	d009      	beq.n	8017d18 <_vfiprintf_r+0x22c>
 8017d04:	ea54 0205 	orrs.w	r2, r4, r5
 8017d08:	bf1f      	itttt	ne
 8017d0a:	2230      	movne	r2, #48	; 0x30
 8017d0c:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8017d10:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8017d14:	f04a 0a02 	orrne.w	sl, sl, #2
 8017d18:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017d1c:	e11a      	b.n	8017f54 <_vfiprintf_r+0x468>
 8017d1e:	4648      	mov	r0, r9
 8017d20:	f7ff f828 	bl	8016d74 <_localeconv_r>
 8017d24:	6843      	ldr	r3, [r0, #4]
 8017d26:	4618      	mov	r0, r3
 8017d28:	ee08 3a10 	vmov	s16, r3
 8017d2c:	f7e8 faf8 	bl	8000320 <strlen>
 8017d30:	9007      	str	r0, [sp, #28]
 8017d32:	4648      	mov	r0, r9
 8017d34:	f7ff f81e 	bl	8016d74 <_localeconv_r>
 8017d38:	6883      	ldr	r3, [r0, #8]
 8017d3a:	9306      	str	r3, [sp, #24]
 8017d3c:	9b07      	ldr	r3, [sp, #28]
 8017d3e:	b12b      	cbz	r3, 8017d4c <_vfiprintf_r+0x260>
 8017d40:	9b06      	ldr	r3, [sp, #24]
 8017d42:	b11b      	cbz	r3, 8017d4c <_vfiprintf_r+0x260>
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	b10b      	cbz	r3, 8017d4c <_vfiprintf_r+0x260>
 8017d48:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8017d4c:	9a01      	ldr	r2, [sp, #4]
 8017d4e:	e75a      	b.n	8017c06 <_vfiprintf_r+0x11a>
 8017d50:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d1f9      	bne.n	8017d4c <_vfiprintf_r+0x260>
 8017d58:	2320      	movs	r3, #32
 8017d5a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017d5e:	e7f5      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017d60:	f04a 0a01 	orr.w	sl, sl, #1
 8017d64:	e7f2      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017d66:	f854 3b04 	ldr.w	r3, [r4], #4
 8017d6a:	9303      	str	r3, [sp, #12]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	daed      	bge.n	8017d4c <_vfiprintf_r+0x260>
 8017d70:	425b      	negs	r3, r3
 8017d72:	9303      	str	r3, [sp, #12]
 8017d74:	f04a 0a04 	orr.w	sl, sl, #4
 8017d78:	e7e8      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017d7a:	232b      	movs	r3, #43	; 0x2b
 8017d7c:	e7ed      	b.n	8017d5a <_vfiprintf_r+0x26e>
 8017d7e:	9a01      	ldr	r2, [sp, #4]
 8017d80:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017d84:	2b2a      	cmp	r3, #42	; 0x2a
 8017d86:	d112      	bne.n	8017dae <_vfiprintf_r+0x2c2>
 8017d88:	f854 0b04 	ldr.w	r0, [r4], #4
 8017d8c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8017d90:	e9cd 3200 	strd	r3, r2, [sp]
 8017d94:	e7da      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017d96:	9b00      	ldr	r3, [sp, #0]
 8017d98:	200a      	movs	r0, #10
 8017d9a:	fb00 1303 	mla	r3, r0, r3, r1
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017da4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017da8:	2909      	cmp	r1, #9
 8017daa:	d9f4      	bls.n	8017d96 <_vfiprintf_r+0x2aa>
 8017dac:	e72d      	b.n	8017c0a <_vfiprintf_r+0x11e>
 8017dae:	2100      	movs	r1, #0
 8017db0:	9100      	str	r1, [sp, #0]
 8017db2:	e7f7      	b.n	8017da4 <_vfiprintf_r+0x2b8>
 8017db4:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8017db8:	e7c8      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017dba:	2100      	movs	r1, #0
 8017dbc:	9a01      	ldr	r2, [sp, #4]
 8017dbe:	9103      	str	r1, [sp, #12]
 8017dc0:	9903      	ldr	r1, [sp, #12]
 8017dc2:	3b30      	subs	r3, #48	; 0x30
 8017dc4:	200a      	movs	r0, #10
 8017dc6:	fb00 3301 	mla	r3, r0, r1, r3
 8017dca:	9303      	str	r3, [sp, #12]
 8017dcc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017dd0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017dd4:	2909      	cmp	r1, #9
 8017dd6:	d9f3      	bls.n	8017dc0 <_vfiprintf_r+0x2d4>
 8017dd8:	e717      	b.n	8017c0a <_vfiprintf_r+0x11e>
 8017dda:	9b01      	ldr	r3, [sp, #4]
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	2b68      	cmp	r3, #104	; 0x68
 8017de0:	bf01      	itttt	eq
 8017de2:	9b01      	ldreq	r3, [sp, #4]
 8017de4:	3301      	addeq	r3, #1
 8017de6:	9301      	streq	r3, [sp, #4]
 8017de8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8017dec:	bf18      	it	ne
 8017dee:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8017df2:	e7ab      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017df4:	9b01      	ldr	r3, [sp, #4]
 8017df6:	781b      	ldrb	r3, [r3, #0]
 8017df8:	2b6c      	cmp	r3, #108	; 0x6c
 8017dfa:	d105      	bne.n	8017e08 <_vfiprintf_r+0x31c>
 8017dfc:	9b01      	ldr	r3, [sp, #4]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	9301      	str	r3, [sp, #4]
 8017e02:	f04a 0a20 	orr.w	sl, sl, #32
 8017e06:	e7a1      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017e08:	f04a 0a10 	orr.w	sl, sl, #16
 8017e0c:	e79e      	b.n	8017d4c <_vfiprintf_r+0x260>
 8017e0e:	46a3      	mov	fp, r4
 8017e10:	2100      	movs	r1, #0
 8017e12:	f85b 3b04 	ldr.w	r3, [fp], #4
 8017e16:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017e1a:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017e1e:	2301      	movs	r3, #1
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	460d      	mov	r5, r1
 8017e24:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8017e28:	e0ad      	b.n	8017f86 <_vfiprintf_r+0x49a>
 8017e2a:	f04a 0a10 	orr.w	sl, sl, #16
 8017e2e:	f01a 0f20 	tst.w	sl, #32
 8017e32:	d011      	beq.n	8017e58 <_vfiprintf_r+0x36c>
 8017e34:	3407      	adds	r4, #7
 8017e36:	f024 0307 	bic.w	r3, r4, #7
 8017e3a:	469b      	mov	fp, r3
 8017e3c:	685d      	ldr	r5, [r3, #4]
 8017e3e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017e42:	2d00      	cmp	r5, #0
 8017e44:	da06      	bge.n	8017e54 <_vfiprintf_r+0x368>
 8017e46:	4264      	negs	r4, r4
 8017e48:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017e4c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8017e50:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017e54:	2301      	movs	r3, #1
 8017e56:	e04a      	b.n	8017eee <_vfiprintf_r+0x402>
 8017e58:	46a3      	mov	fp, r4
 8017e5a:	f01a 0f10 	tst.w	sl, #16
 8017e5e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8017e62:	d002      	beq.n	8017e6a <_vfiprintf_r+0x37e>
 8017e64:	462c      	mov	r4, r5
 8017e66:	17ed      	asrs	r5, r5, #31
 8017e68:	e7eb      	b.n	8017e42 <_vfiprintf_r+0x356>
 8017e6a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017e6e:	d003      	beq.n	8017e78 <_vfiprintf_r+0x38c>
 8017e70:	b22c      	sxth	r4, r5
 8017e72:	f345 35c0 	sbfx	r5, r5, #15, #1
 8017e76:	e7e4      	b.n	8017e42 <_vfiprintf_r+0x356>
 8017e78:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017e7c:	d0f2      	beq.n	8017e64 <_vfiprintf_r+0x378>
 8017e7e:	b26c      	sxtb	r4, r5
 8017e80:	f345 15c0 	sbfx	r5, r5, #7, #1
 8017e84:	e7dd      	b.n	8017e42 <_vfiprintf_r+0x356>
 8017e86:	f01a 0f20 	tst.w	sl, #32
 8017e8a:	f104 0b04 	add.w	fp, r4, #4
 8017e8e:	d007      	beq.n	8017ea0 <_vfiprintf_r+0x3b4>
 8017e90:	9a02      	ldr	r2, [sp, #8]
 8017e92:	6823      	ldr	r3, [r4, #0]
 8017e94:	9902      	ldr	r1, [sp, #8]
 8017e96:	17d2      	asrs	r2, r2, #31
 8017e98:	e9c3 1200 	strd	r1, r2, [r3]
 8017e9c:	465c      	mov	r4, fp
 8017e9e:	e68c      	b.n	8017bba <_vfiprintf_r+0xce>
 8017ea0:	f01a 0f10 	tst.w	sl, #16
 8017ea4:	d003      	beq.n	8017eae <_vfiprintf_r+0x3c2>
 8017ea6:	6823      	ldr	r3, [r4, #0]
 8017ea8:	9a02      	ldr	r2, [sp, #8]
 8017eaa:	601a      	str	r2, [r3, #0]
 8017eac:	e7f6      	b.n	8017e9c <_vfiprintf_r+0x3b0>
 8017eae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017eb2:	d003      	beq.n	8017ebc <_vfiprintf_r+0x3d0>
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	9a02      	ldr	r2, [sp, #8]
 8017eb8:	801a      	strh	r2, [r3, #0]
 8017eba:	e7ef      	b.n	8017e9c <_vfiprintf_r+0x3b0>
 8017ebc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017ec0:	d0f1      	beq.n	8017ea6 <_vfiprintf_r+0x3ba>
 8017ec2:	6823      	ldr	r3, [r4, #0]
 8017ec4:	9a02      	ldr	r2, [sp, #8]
 8017ec6:	701a      	strb	r2, [r3, #0]
 8017ec8:	e7e8      	b.n	8017e9c <_vfiprintf_r+0x3b0>
 8017eca:	f04a 0a10 	orr.w	sl, sl, #16
 8017ece:	f01a 0320 	ands.w	r3, sl, #32
 8017ed2:	d01f      	beq.n	8017f14 <_vfiprintf_r+0x428>
 8017ed4:	3407      	adds	r4, #7
 8017ed6:	f024 0307 	bic.w	r3, r4, #7
 8017eda:	469b      	mov	fp, r3
 8017edc:	685d      	ldr	r5, [r3, #4]
 8017ede:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017ee2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	2200      	movs	r2, #0
 8017eea:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8017eee:	9a00      	ldr	r2, [sp, #0]
 8017ef0:	3201      	adds	r2, #1
 8017ef2:	f000 8262 	beq.w	80183ba <_vfiprintf_r+0x8ce>
 8017ef6:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8017efa:	9204      	str	r2, [sp, #16]
 8017efc:	ea54 0205 	orrs.w	r2, r4, r5
 8017f00:	f040 8261 	bne.w	80183c6 <_vfiprintf_r+0x8da>
 8017f04:	9a00      	ldr	r2, [sp, #0]
 8017f06:	2a00      	cmp	r2, #0
 8017f08:	f000 8199 	beq.w	801823e <_vfiprintf_r+0x752>
 8017f0c:	2b01      	cmp	r3, #1
 8017f0e:	f040 825d 	bne.w	80183cc <_vfiprintf_r+0x8e0>
 8017f12:	e139      	b.n	8018188 <_vfiprintf_r+0x69c>
 8017f14:	46a3      	mov	fp, r4
 8017f16:	f01a 0510 	ands.w	r5, sl, #16
 8017f1a:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017f1e:	d001      	beq.n	8017f24 <_vfiprintf_r+0x438>
 8017f20:	461d      	mov	r5, r3
 8017f22:	e7de      	b.n	8017ee2 <_vfiprintf_r+0x3f6>
 8017f24:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8017f28:	d001      	beq.n	8017f2e <_vfiprintf_r+0x442>
 8017f2a:	b2a4      	uxth	r4, r4
 8017f2c:	e7d9      	b.n	8017ee2 <_vfiprintf_r+0x3f6>
 8017f2e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8017f32:	d0d6      	beq.n	8017ee2 <_vfiprintf_r+0x3f6>
 8017f34:	b2e4      	uxtb	r4, r4
 8017f36:	e7f3      	b.n	8017f20 <_vfiprintf_r+0x434>
 8017f38:	2330      	movs	r3, #48	; 0x30
 8017f3a:	46a3      	mov	fp, r4
 8017f3c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017f40:	2378      	movs	r3, #120	; 0x78
 8017f42:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8017f46:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017f4a:	4b03      	ldr	r3, [pc, #12]	; (8017f58 <_vfiprintf_r+0x46c>)
 8017f4c:	9305      	str	r3, [sp, #20]
 8017f4e:	2500      	movs	r5, #0
 8017f50:	f04a 0a02 	orr.w	sl, sl, #2
 8017f54:	2302      	movs	r3, #2
 8017f56:	e7c7      	b.n	8017ee8 <_vfiprintf_r+0x3fc>
 8017f58:	08019bec 	.word	0x08019bec
 8017f5c:	9b00      	ldr	r3, [sp, #0]
 8017f5e:	46a3      	mov	fp, r4
 8017f60:	2500      	movs	r5, #0
 8017f62:	1c5c      	adds	r4, r3, #1
 8017f64:	f85b 8b04 	ldr.w	r8, [fp], #4
 8017f68:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017f6c:	f000 80ce 	beq.w	801810c <_vfiprintf_r+0x620>
 8017f70:	461a      	mov	r2, r3
 8017f72:	4629      	mov	r1, r5
 8017f74:	4640      	mov	r0, r8
 8017f76:	f7e8 f983 	bl	8000280 <memchr>
 8017f7a:	2800      	cmp	r0, #0
 8017f7c:	f000 8174 	beq.w	8018268 <_vfiprintf_r+0x77c>
 8017f80:	eba0 0308 	sub.w	r3, r0, r8
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	9b00      	ldr	r3, [sp, #0]
 8017f88:	42ab      	cmp	r3, r5
 8017f8a:	bfb8      	it	lt
 8017f8c:	462b      	movlt	r3, r5
 8017f8e:	9304      	str	r3, [sp, #16]
 8017f90:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017f94:	b113      	cbz	r3, 8017f9c <_vfiprintf_r+0x4b0>
 8017f96:	9b04      	ldr	r3, [sp, #16]
 8017f98:	3301      	adds	r3, #1
 8017f9a:	9304      	str	r3, [sp, #16]
 8017f9c:	f01a 0302 	ands.w	r3, sl, #2
 8017fa0:	9308      	str	r3, [sp, #32]
 8017fa2:	bf1e      	ittt	ne
 8017fa4:	9b04      	ldrne	r3, [sp, #16]
 8017fa6:	3302      	addne	r3, #2
 8017fa8:	9304      	strne	r3, [sp, #16]
 8017faa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8017fae:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb0:	d11f      	bne.n	8017ff2 <_vfiprintf_r+0x506>
 8017fb2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017fb6:	1a9c      	subs	r4, r3, r2
 8017fb8:	2c00      	cmp	r4, #0
 8017fba:	dd1a      	ble.n	8017ff2 <_vfiprintf_r+0x506>
 8017fbc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017fc0:	48aa      	ldr	r0, [pc, #680]	; (801826c <_vfiprintf_r+0x780>)
 8017fc2:	6030      	str	r0, [r6, #0]
 8017fc4:	2c10      	cmp	r4, #16
 8017fc6:	f103 0301 	add.w	r3, r3, #1
 8017fca:	f106 0108 	add.w	r1, r6, #8
 8017fce:	f300 8153 	bgt.w	8018278 <_vfiprintf_r+0x78c>
 8017fd2:	6074      	str	r4, [r6, #4]
 8017fd4:	2b07      	cmp	r3, #7
 8017fd6:	4414      	add	r4, r2
 8017fd8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017fdc:	f340 815e 	ble.w	801829c <_vfiprintf_r+0x7b0>
 8017fe0:	aa0c      	add	r2, sp, #48	; 0x30
 8017fe2:	4639      	mov	r1, r7
 8017fe4:	4648      	mov	r0, r9
 8017fe6:	f7ff fd4f 	bl	8017a88 <__sprint_r>
 8017fea:	2800      	cmp	r0, #0
 8017fec:	f040 81b7 	bne.w	801835e <_vfiprintf_r+0x872>
 8017ff0:	ae0f      	add	r6, sp, #60	; 0x3c
 8017ff2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017ff6:	b173      	cbz	r3, 8018016 <_vfiprintf_r+0x52a>
 8017ff8:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8017ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ffe:	6032      	str	r2, [r6, #0]
 8018000:	2201      	movs	r2, #1
 8018002:	6072      	str	r2, [r6, #4]
 8018004:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018006:	3301      	adds	r3, #1
 8018008:	3201      	adds	r2, #1
 801800a:	2b07      	cmp	r3, #7
 801800c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018010:	f300 8146 	bgt.w	80182a0 <_vfiprintf_r+0x7b4>
 8018014:	3608      	adds	r6, #8
 8018016:	9b08      	ldr	r3, [sp, #32]
 8018018:	b16b      	cbz	r3, 8018036 <_vfiprintf_r+0x54a>
 801801a:	aa0b      	add	r2, sp, #44	; 0x2c
 801801c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801801e:	6032      	str	r2, [r6, #0]
 8018020:	2202      	movs	r2, #2
 8018022:	6072      	str	r2, [r6, #4]
 8018024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018026:	3301      	adds	r3, #1
 8018028:	3202      	adds	r2, #2
 801802a:	2b07      	cmp	r3, #7
 801802c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018030:	f300 813f 	bgt.w	80182b2 <_vfiprintf_r+0x7c6>
 8018034:	3608      	adds	r6, #8
 8018036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018038:	2b80      	cmp	r3, #128	; 0x80
 801803a:	d11f      	bne.n	801807c <_vfiprintf_r+0x590>
 801803c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018040:	1a9c      	subs	r4, r3, r2
 8018042:	2c00      	cmp	r4, #0
 8018044:	dd1a      	ble.n	801807c <_vfiprintf_r+0x590>
 8018046:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801804a:	4889      	ldr	r0, [pc, #548]	; (8018270 <_vfiprintf_r+0x784>)
 801804c:	6030      	str	r0, [r6, #0]
 801804e:	2c10      	cmp	r4, #16
 8018050:	f103 0301 	add.w	r3, r3, #1
 8018054:	f106 0108 	add.w	r1, r6, #8
 8018058:	f300 8134 	bgt.w	80182c4 <_vfiprintf_r+0x7d8>
 801805c:	6074      	str	r4, [r6, #4]
 801805e:	2b07      	cmp	r3, #7
 8018060:	4414      	add	r4, r2
 8018062:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8018066:	f340 813f 	ble.w	80182e8 <_vfiprintf_r+0x7fc>
 801806a:	aa0c      	add	r2, sp, #48	; 0x30
 801806c:	4639      	mov	r1, r7
 801806e:	4648      	mov	r0, r9
 8018070:	f7ff fd0a 	bl	8017a88 <__sprint_r>
 8018074:	2800      	cmp	r0, #0
 8018076:	f040 8172 	bne.w	801835e <_vfiprintf_r+0x872>
 801807a:	ae0f      	add	r6, sp, #60	; 0x3c
 801807c:	9b00      	ldr	r3, [sp, #0]
 801807e:	1aec      	subs	r4, r5, r3
 8018080:	2c00      	cmp	r4, #0
 8018082:	dd1a      	ble.n	80180ba <_vfiprintf_r+0x5ce>
 8018084:	4d7a      	ldr	r5, [pc, #488]	; (8018270 <_vfiprintf_r+0x784>)
 8018086:	6035      	str	r5, [r6, #0]
 8018088:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 801808c:	2c10      	cmp	r4, #16
 801808e:	f103 0301 	add.w	r3, r3, #1
 8018092:	f106 0208 	add.w	r2, r6, #8
 8018096:	f300 8129 	bgt.w	80182ec <_vfiprintf_r+0x800>
 801809a:	6074      	str	r4, [r6, #4]
 801809c:	2b07      	cmp	r3, #7
 801809e:	440c      	add	r4, r1
 80180a0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80180a4:	f340 8133 	ble.w	801830e <_vfiprintf_r+0x822>
 80180a8:	aa0c      	add	r2, sp, #48	; 0x30
 80180aa:	4639      	mov	r1, r7
 80180ac:	4648      	mov	r0, r9
 80180ae:	f7ff fceb 	bl	8017a88 <__sprint_r>
 80180b2:	2800      	cmp	r0, #0
 80180b4:	f040 8153 	bne.w	801835e <_vfiprintf_r+0x872>
 80180b8:	ae0f      	add	r6, sp, #60	; 0x3c
 80180ba:	9b00      	ldr	r3, [sp, #0]
 80180bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80180be:	6073      	str	r3, [r6, #4]
 80180c0:	4418      	add	r0, r3
 80180c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180c4:	f8c6 8000 	str.w	r8, [r6]
 80180c8:	3301      	adds	r3, #1
 80180ca:	2b07      	cmp	r3, #7
 80180cc:	900e      	str	r0, [sp, #56]	; 0x38
 80180ce:	930d      	str	r3, [sp, #52]	; 0x34
 80180d0:	f300 811f 	bgt.w	8018312 <_vfiprintf_r+0x826>
 80180d4:	f106 0308 	add.w	r3, r6, #8
 80180d8:	f01a 0f04 	tst.w	sl, #4
 80180dc:	f040 8121 	bne.w	8018322 <_vfiprintf_r+0x836>
 80180e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80180e4:	9904      	ldr	r1, [sp, #16]
 80180e6:	428a      	cmp	r2, r1
 80180e8:	bfac      	ite	ge
 80180ea:	189b      	addge	r3, r3, r2
 80180ec:	185b      	addlt	r3, r3, r1
 80180ee:	9302      	str	r3, [sp, #8]
 80180f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180f2:	b13b      	cbz	r3, 8018104 <_vfiprintf_r+0x618>
 80180f4:	aa0c      	add	r2, sp, #48	; 0x30
 80180f6:	4639      	mov	r1, r7
 80180f8:	4648      	mov	r0, r9
 80180fa:	f7ff fcc5 	bl	8017a88 <__sprint_r>
 80180fe:	2800      	cmp	r0, #0
 8018100:	f040 812d 	bne.w	801835e <_vfiprintf_r+0x872>
 8018104:	2300      	movs	r3, #0
 8018106:	930d      	str	r3, [sp, #52]	; 0x34
 8018108:	ae0f      	add	r6, sp, #60	; 0x3c
 801810a:	e6c7      	b.n	8017e9c <_vfiprintf_r+0x3b0>
 801810c:	4640      	mov	r0, r8
 801810e:	f7e8 f907 	bl	8000320 <strlen>
 8018112:	9000      	str	r0, [sp, #0]
 8018114:	e737      	b.n	8017f86 <_vfiprintf_r+0x49a>
 8018116:	f04a 0a10 	orr.w	sl, sl, #16
 801811a:	f01a 0320 	ands.w	r3, sl, #32
 801811e:	d008      	beq.n	8018132 <_vfiprintf_r+0x646>
 8018120:	3407      	adds	r4, #7
 8018122:	f024 0307 	bic.w	r3, r4, #7
 8018126:	469b      	mov	fp, r3
 8018128:	685d      	ldr	r5, [r3, #4]
 801812a:	f85b 4b08 	ldr.w	r4, [fp], #8
 801812e:	2301      	movs	r3, #1
 8018130:	e6da      	b.n	8017ee8 <_vfiprintf_r+0x3fc>
 8018132:	46a3      	mov	fp, r4
 8018134:	f01a 0510 	ands.w	r5, sl, #16
 8018138:	f85b 4b04 	ldr.w	r4, [fp], #4
 801813c:	d001      	beq.n	8018142 <_vfiprintf_r+0x656>
 801813e:	461d      	mov	r5, r3
 8018140:	e7f5      	b.n	801812e <_vfiprintf_r+0x642>
 8018142:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8018146:	d001      	beq.n	801814c <_vfiprintf_r+0x660>
 8018148:	b2a4      	uxth	r4, r4
 801814a:	e7f0      	b.n	801812e <_vfiprintf_r+0x642>
 801814c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8018150:	d0ed      	beq.n	801812e <_vfiprintf_r+0x642>
 8018152:	b2e4      	uxtb	r4, r4
 8018154:	e7f3      	b.n	801813e <_vfiprintf_r+0x652>
 8018156:	4a47      	ldr	r2, [pc, #284]	; (8018274 <_vfiprintf_r+0x788>)
 8018158:	e5c5      	b.n	8017ce6 <_vfiprintf_r+0x1fa>
 801815a:	46a3      	mov	fp, r4
 801815c:	f01a 0510 	ands.w	r5, sl, #16
 8018160:	f85b 4b04 	ldr.w	r4, [fp], #4
 8018164:	d001      	beq.n	801816a <_vfiprintf_r+0x67e>
 8018166:	4615      	mov	r5, r2
 8018168:	e5c9      	b.n	8017cfe <_vfiprintf_r+0x212>
 801816a:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 801816e:	d001      	beq.n	8018174 <_vfiprintf_r+0x688>
 8018170:	b2a4      	uxth	r4, r4
 8018172:	e5c4      	b.n	8017cfe <_vfiprintf_r+0x212>
 8018174:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8018178:	f43f adc1 	beq.w	8017cfe <_vfiprintf_r+0x212>
 801817c:	b2e4      	uxtb	r4, r4
 801817e:	e7f2      	b.n	8018166 <_vfiprintf_r+0x67a>
 8018180:	2c0a      	cmp	r4, #10
 8018182:	f175 0300 	sbcs.w	r3, r5, #0
 8018186:	d205      	bcs.n	8018194 <_vfiprintf_r+0x6a8>
 8018188:	3430      	adds	r4, #48	; 0x30
 801818a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 801818e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8018192:	e137      	b.n	8018404 <_vfiprintf_r+0x918>
 8018194:	ab38      	add	r3, sp, #224	; 0xe0
 8018196:	9308      	str	r3, [sp, #32]
 8018198:	9b04      	ldr	r3, [sp, #16]
 801819a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801819e:	f04f 0a00 	mov.w	sl, #0
 80181a2:	9309      	str	r3, [sp, #36]	; 0x24
 80181a4:	9b08      	ldr	r3, [sp, #32]
 80181a6:	220a      	movs	r2, #10
 80181a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80181ac:	4620      	mov	r0, r4
 80181ae:	2300      	movs	r3, #0
 80181b0:	4629      	mov	r1, r5
 80181b2:	f7e8 ffcf 	bl	8001154 <__aeabi_uldivmod>
 80181b6:	9b08      	ldr	r3, [sp, #32]
 80181b8:	3230      	adds	r2, #48	; 0x30
 80181ba:	f803 2c01 	strb.w	r2, [r3, #-1]
 80181be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181c0:	f10a 0a01 	add.w	sl, sl, #1
 80181c4:	b1db      	cbz	r3, 80181fe <_vfiprintf_r+0x712>
 80181c6:	9b06      	ldr	r3, [sp, #24]
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	4553      	cmp	r3, sl
 80181cc:	d117      	bne.n	80181fe <_vfiprintf_r+0x712>
 80181ce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80181d2:	d014      	beq.n	80181fe <_vfiprintf_r+0x712>
 80181d4:	2c0a      	cmp	r4, #10
 80181d6:	f175 0300 	sbcs.w	r3, r5, #0
 80181da:	d310      	bcc.n	80181fe <_vfiprintf_r+0x712>
 80181dc:	9b07      	ldr	r3, [sp, #28]
 80181de:	eba8 0803 	sub.w	r8, r8, r3
 80181e2:	461a      	mov	r2, r3
 80181e4:	ee18 1a10 	vmov	r1, s16
 80181e8:	4640      	mov	r0, r8
 80181ea:	f7ff f941 	bl	8017470 <strncpy>
 80181ee:	9b06      	ldr	r3, [sp, #24]
 80181f0:	785b      	ldrb	r3, [r3, #1]
 80181f2:	b1a3      	cbz	r3, 801821e <_vfiprintf_r+0x732>
 80181f4:	9b06      	ldr	r3, [sp, #24]
 80181f6:	3301      	adds	r3, #1
 80181f8:	9306      	str	r3, [sp, #24]
 80181fa:	f04f 0a00 	mov.w	sl, #0
 80181fe:	2300      	movs	r3, #0
 8018200:	220a      	movs	r2, #10
 8018202:	4620      	mov	r0, r4
 8018204:	4629      	mov	r1, r5
 8018206:	f7e8 ffa5 	bl	8001154 <__aeabi_uldivmod>
 801820a:	2c0a      	cmp	r4, #10
 801820c:	f175 0300 	sbcs.w	r3, r5, #0
 8018210:	f0c0 80f8 	bcc.w	8018404 <_vfiprintf_r+0x918>
 8018214:	4604      	mov	r4, r0
 8018216:	460d      	mov	r5, r1
 8018218:	f8cd 8020 	str.w	r8, [sp, #32]
 801821c:	e7c2      	b.n	80181a4 <_vfiprintf_r+0x6b8>
 801821e:	469a      	mov	sl, r3
 8018220:	e7ed      	b.n	80181fe <_vfiprintf_r+0x712>
 8018222:	f004 030f 	and.w	r3, r4, #15
 8018226:	9a05      	ldr	r2, [sp, #20]
 8018228:	0924      	lsrs	r4, r4, #4
 801822a:	5cd3      	ldrb	r3, [r2, r3]
 801822c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8018230:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8018234:	092d      	lsrs	r5, r5, #4
 8018236:	ea54 0305 	orrs.w	r3, r4, r5
 801823a:	d1f2      	bne.n	8018222 <_vfiprintf_r+0x736>
 801823c:	e0e2      	b.n	8018404 <_vfiprintf_r+0x918>
 801823e:	b933      	cbnz	r3, 801824e <_vfiprintf_r+0x762>
 8018240:	f01a 0f01 	tst.w	sl, #1
 8018244:	d003      	beq.n	801824e <_vfiprintf_r+0x762>
 8018246:	2330      	movs	r3, #48	; 0x30
 8018248:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 801824c:	e79f      	b.n	801818e <_vfiprintf_r+0x6a2>
 801824e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8018252:	e0d7      	b.n	8018404 <_vfiprintf_r+0x918>
 8018254:	2b00      	cmp	r3, #0
 8018256:	f000 80a3 	beq.w	80183a0 <_vfiprintf_r+0x8b4>
 801825a:	2100      	movs	r1, #0
 801825c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8018260:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018264:	46a3      	mov	fp, r4
 8018266:	e5da      	b.n	8017e1e <_vfiprintf_r+0x332>
 8018268:	4605      	mov	r5, r0
 801826a:	e68c      	b.n	8017f86 <_vfiprintf_r+0x49a>
 801826c:	08019e4a 	.word	0x08019e4a
 8018270:	08019e5a 	.word	0x08019e5a
 8018274:	08019bfd 	.word	0x08019bfd
 8018278:	2010      	movs	r0, #16
 801827a:	4402      	add	r2, r0
 801827c:	2b07      	cmp	r3, #7
 801827e:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018282:	6070      	str	r0, [r6, #4]
 8018284:	dd07      	ble.n	8018296 <_vfiprintf_r+0x7aa>
 8018286:	aa0c      	add	r2, sp, #48	; 0x30
 8018288:	4639      	mov	r1, r7
 801828a:	4648      	mov	r0, r9
 801828c:	f7ff fbfc 	bl	8017a88 <__sprint_r>
 8018290:	2800      	cmp	r0, #0
 8018292:	d164      	bne.n	801835e <_vfiprintf_r+0x872>
 8018294:	a90f      	add	r1, sp, #60	; 0x3c
 8018296:	3c10      	subs	r4, #16
 8018298:	460e      	mov	r6, r1
 801829a:	e68f      	b.n	8017fbc <_vfiprintf_r+0x4d0>
 801829c:	460e      	mov	r6, r1
 801829e:	e6a8      	b.n	8017ff2 <_vfiprintf_r+0x506>
 80182a0:	aa0c      	add	r2, sp, #48	; 0x30
 80182a2:	4639      	mov	r1, r7
 80182a4:	4648      	mov	r0, r9
 80182a6:	f7ff fbef 	bl	8017a88 <__sprint_r>
 80182aa:	2800      	cmp	r0, #0
 80182ac:	d157      	bne.n	801835e <_vfiprintf_r+0x872>
 80182ae:	ae0f      	add	r6, sp, #60	; 0x3c
 80182b0:	e6b1      	b.n	8018016 <_vfiprintf_r+0x52a>
 80182b2:	aa0c      	add	r2, sp, #48	; 0x30
 80182b4:	4639      	mov	r1, r7
 80182b6:	4648      	mov	r0, r9
 80182b8:	f7ff fbe6 	bl	8017a88 <__sprint_r>
 80182bc:	2800      	cmp	r0, #0
 80182be:	d14e      	bne.n	801835e <_vfiprintf_r+0x872>
 80182c0:	ae0f      	add	r6, sp, #60	; 0x3c
 80182c2:	e6b8      	b.n	8018036 <_vfiprintf_r+0x54a>
 80182c4:	2010      	movs	r0, #16
 80182c6:	4402      	add	r2, r0
 80182c8:	2b07      	cmp	r3, #7
 80182ca:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80182ce:	6070      	str	r0, [r6, #4]
 80182d0:	dd07      	ble.n	80182e2 <_vfiprintf_r+0x7f6>
 80182d2:	aa0c      	add	r2, sp, #48	; 0x30
 80182d4:	4639      	mov	r1, r7
 80182d6:	4648      	mov	r0, r9
 80182d8:	f7ff fbd6 	bl	8017a88 <__sprint_r>
 80182dc:	2800      	cmp	r0, #0
 80182de:	d13e      	bne.n	801835e <_vfiprintf_r+0x872>
 80182e0:	a90f      	add	r1, sp, #60	; 0x3c
 80182e2:	3c10      	subs	r4, #16
 80182e4:	460e      	mov	r6, r1
 80182e6:	e6ae      	b.n	8018046 <_vfiprintf_r+0x55a>
 80182e8:	460e      	mov	r6, r1
 80182ea:	e6c7      	b.n	801807c <_vfiprintf_r+0x590>
 80182ec:	2010      	movs	r0, #16
 80182ee:	4401      	add	r1, r0
 80182f0:	2b07      	cmp	r3, #7
 80182f2:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80182f6:	6070      	str	r0, [r6, #4]
 80182f8:	dd06      	ble.n	8018308 <_vfiprintf_r+0x81c>
 80182fa:	aa0c      	add	r2, sp, #48	; 0x30
 80182fc:	4639      	mov	r1, r7
 80182fe:	4648      	mov	r0, r9
 8018300:	f7ff fbc2 	bl	8017a88 <__sprint_r>
 8018304:	bb58      	cbnz	r0, 801835e <_vfiprintf_r+0x872>
 8018306:	aa0f      	add	r2, sp, #60	; 0x3c
 8018308:	3c10      	subs	r4, #16
 801830a:	4616      	mov	r6, r2
 801830c:	e6bb      	b.n	8018086 <_vfiprintf_r+0x59a>
 801830e:	4616      	mov	r6, r2
 8018310:	e6d3      	b.n	80180ba <_vfiprintf_r+0x5ce>
 8018312:	aa0c      	add	r2, sp, #48	; 0x30
 8018314:	4639      	mov	r1, r7
 8018316:	4648      	mov	r0, r9
 8018318:	f7ff fbb6 	bl	8017a88 <__sprint_r>
 801831c:	b9f8      	cbnz	r0, 801835e <_vfiprintf_r+0x872>
 801831e:	ab0f      	add	r3, sp, #60	; 0x3c
 8018320:	e6da      	b.n	80180d8 <_vfiprintf_r+0x5ec>
 8018322:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8018326:	1a54      	subs	r4, r2, r1
 8018328:	2c00      	cmp	r4, #0
 801832a:	f77f aed9 	ble.w	80180e0 <_vfiprintf_r+0x5f4>
 801832e:	4d39      	ldr	r5, [pc, #228]	; (8018414 <_vfiprintf_r+0x928>)
 8018330:	2610      	movs	r6, #16
 8018332:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8018336:	2c10      	cmp	r4, #16
 8018338:	f102 0201 	add.w	r2, r2, #1
 801833c:	601d      	str	r5, [r3, #0]
 801833e:	dc1d      	bgt.n	801837c <_vfiprintf_r+0x890>
 8018340:	605c      	str	r4, [r3, #4]
 8018342:	2a07      	cmp	r2, #7
 8018344:	440c      	add	r4, r1
 8018346:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801834a:	f77f aec9 	ble.w	80180e0 <_vfiprintf_r+0x5f4>
 801834e:	aa0c      	add	r2, sp, #48	; 0x30
 8018350:	4639      	mov	r1, r7
 8018352:	4648      	mov	r0, r9
 8018354:	f7ff fb98 	bl	8017a88 <__sprint_r>
 8018358:	2800      	cmp	r0, #0
 801835a:	f43f aec1 	beq.w	80180e0 <_vfiprintf_r+0x5f4>
 801835e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018360:	07d9      	lsls	r1, r3, #31
 8018362:	d405      	bmi.n	8018370 <_vfiprintf_r+0x884>
 8018364:	89bb      	ldrh	r3, [r7, #12]
 8018366:	059a      	lsls	r2, r3, #22
 8018368:	d402      	bmi.n	8018370 <_vfiprintf_r+0x884>
 801836a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801836c:	f7fe fd09 	bl	8016d82 <__retarget_lock_release_recursive>
 8018370:	89bb      	ldrh	r3, [r7, #12]
 8018372:	065b      	lsls	r3, r3, #25
 8018374:	f57f abed 	bpl.w	8017b52 <_vfiprintf_r+0x66>
 8018378:	f7ff bbe8 	b.w	8017b4c <_vfiprintf_r+0x60>
 801837c:	3110      	adds	r1, #16
 801837e:	2a07      	cmp	r2, #7
 8018380:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8018384:	605e      	str	r6, [r3, #4]
 8018386:	dc02      	bgt.n	801838e <_vfiprintf_r+0x8a2>
 8018388:	3308      	adds	r3, #8
 801838a:	3c10      	subs	r4, #16
 801838c:	e7d1      	b.n	8018332 <_vfiprintf_r+0x846>
 801838e:	aa0c      	add	r2, sp, #48	; 0x30
 8018390:	4639      	mov	r1, r7
 8018392:	4648      	mov	r0, r9
 8018394:	f7ff fb78 	bl	8017a88 <__sprint_r>
 8018398:	2800      	cmp	r0, #0
 801839a:	d1e0      	bne.n	801835e <_vfiprintf_r+0x872>
 801839c:	ab0f      	add	r3, sp, #60	; 0x3c
 801839e:	e7f4      	b.n	801838a <_vfiprintf_r+0x89e>
 80183a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183a2:	b913      	cbnz	r3, 80183aa <_vfiprintf_r+0x8be>
 80183a4:	2300      	movs	r3, #0
 80183a6:	930d      	str	r3, [sp, #52]	; 0x34
 80183a8:	e7d9      	b.n	801835e <_vfiprintf_r+0x872>
 80183aa:	aa0c      	add	r2, sp, #48	; 0x30
 80183ac:	4639      	mov	r1, r7
 80183ae:	4648      	mov	r0, r9
 80183b0:	f7ff fb6a 	bl	8017a88 <__sprint_r>
 80183b4:	2800      	cmp	r0, #0
 80183b6:	d0f5      	beq.n	80183a4 <_vfiprintf_r+0x8b8>
 80183b8:	e7d1      	b.n	801835e <_vfiprintf_r+0x872>
 80183ba:	ea54 0205 	orrs.w	r2, r4, r5
 80183be:	f8cd a010 	str.w	sl, [sp, #16]
 80183c2:	f43f ada3 	beq.w	8017f0c <_vfiprintf_r+0x420>
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	f43f aeda 	beq.w	8018180 <_vfiprintf_r+0x694>
 80183cc:	2b02      	cmp	r3, #2
 80183ce:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80183d2:	f43f af26 	beq.w	8018222 <_vfiprintf_r+0x736>
 80183d6:	f004 0307 	and.w	r3, r4, #7
 80183da:	08e4      	lsrs	r4, r4, #3
 80183dc:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80183e0:	08ed      	lsrs	r5, r5, #3
 80183e2:	3330      	adds	r3, #48	; 0x30
 80183e4:	ea54 0105 	orrs.w	r1, r4, r5
 80183e8:	4642      	mov	r2, r8
 80183ea:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80183ee:	d1f2      	bne.n	80183d6 <_vfiprintf_r+0x8ea>
 80183f0:	9904      	ldr	r1, [sp, #16]
 80183f2:	07c8      	lsls	r0, r1, #31
 80183f4:	d506      	bpl.n	8018404 <_vfiprintf_r+0x918>
 80183f6:	2b30      	cmp	r3, #48	; 0x30
 80183f8:	d004      	beq.n	8018404 <_vfiprintf_r+0x918>
 80183fa:	2330      	movs	r3, #48	; 0x30
 80183fc:	f808 3c01 	strb.w	r3, [r8, #-1]
 8018400:	f1a2 0802 	sub.w	r8, r2, #2
 8018404:	ab38      	add	r3, sp, #224	; 0xe0
 8018406:	eba3 0308 	sub.w	r3, r3, r8
 801840a:	9d00      	ldr	r5, [sp, #0]
 801840c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018410:	9300      	str	r3, [sp, #0]
 8018412:	e5b8      	b.n	8017f86 <_vfiprintf_r+0x49a>
 8018414:	08019e4a 	.word	0x08019e4a

08018418 <__sbprintf>:
 8018418:	b570      	push	{r4, r5, r6, lr}
 801841a:	460c      	mov	r4, r1
 801841c:	8989      	ldrh	r1, [r1, #12]
 801841e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8018422:	f021 0102 	bic.w	r1, r1, #2
 8018426:	f8ad 1014 	strh.w	r1, [sp, #20]
 801842a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801842c:	911b      	str	r1, [sp, #108]	; 0x6c
 801842e:	89e1      	ldrh	r1, [r4, #14]
 8018430:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018434:	69e1      	ldr	r1, [r4, #28]
 8018436:	9109      	str	r1, [sp, #36]	; 0x24
 8018438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801843a:	910b      	str	r1, [sp, #44]	; 0x2c
 801843c:	a91c      	add	r1, sp, #112	; 0x70
 801843e:	9102      	str	r1, [sp, #8]
 8018440:	9106      	str	r1, [sp, #24]
 8018442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018446:	4606      	mov	r6, r0
 8018448:	9104      	str	r1, [sp, #16]
 801844a:	9107      	str	r1, [sp, #28]
 801844c:	a818      	add	r0, sp, #96	; 0x60
 801844e:	2100      	movs	r1, #0
 8018450:	e9cd 3200 	strd	r3, r2, [sp]
 8018454:	9108      	str	r1, [sp, #32]
 8018456:	f7fe fc91 	bl	8016d7c <__retarget_lock_init_recursive>
 801845a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801845e:	a902      	add	r1, sp, #8
 8018460:	4630      	mov	r0, r6
 8018462:	f7ff fb43 	bl	8017aec <_vfiprintf_r>
 8018466:	1e05      	subs	r5, r0, #0
 8018468:	db07      	blt.n	801847a <__sbprintf+0x62>
 801846a:	a902      	add	r1, sp, #8
 801846c:	4630      	mov	r0, r6
 801846e:	f000 f90f 	bl	8018690 <_fflush_r>
 8018472:	2800      	cmp	r0, #0
 8018474:	bf18      	it	ne
 8018476:	f04f 35ff 	movne.w	r5, #4294967295
 801847a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801847e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018480:	065b      	lsls	r3, r3, #25
 8018482:	bf42      	ittt	mi
 8018484:	89a3      	ldrhmi	r3, [r4, #12]
 8018486:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801848a:	81a3      	strhmi	r3, [r4, #12]
 801848c:	f7fe fc77 	bl	8016d7e <__retarget_lock_close_recursive>
 8018490:	4628      	mov	r0, r5
 8018492:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8018496:	bd70      	pop	{r4, r5, r6, pc}

08018498 <__ascii_wctomb>:
 8018498:	b149      	cbz	r1, 80184ae <__ascii_wctomb+0x16>
 801849a:	2aff      	cmp	r2, #255	; 0xff
 801849c:	bf85      	ittet	hi
 801849e:	238a      	movhi	r3, #138	; 0x8a
 80184a0:	6003      	strhi	r3, [r0, #0]
 80184a2:	700a      	strbls	r2, [r1, #0]
 80184a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80184a8:	bf98      	it	ls
 80184aa:	2001      	movls	r0, #1
 80184ac:	4770      	bx	lr
 80184ae:	4608      	mov	r0, r1
 80184b0:	4770      	bx	lr
	...

080184b4 <__swsetup_r>:
 80184b4:	b538      	push	{r3, r4, r5, lr}
 80184b6:	4b2a      	ldr	r3, [pc, #168]	; (8018560 <__swsetup_r+0xac>)
 80184b8:	4605      	mov	r5, r0
 80184ba:	6818      	ldr	r0, [r3, #0]
 80184bc:	460c      	mov	r4, r1
 80184be:	b118      	cbz	r0, 80184c8 <__swsetup_r+0x14>
 80184c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80184c2:	b90b      	cbnz	r3, 80184c8 <__swsetup_r+0x14>
 80184c4:	f000 f950 	bl	8018768 <__sinit>
 80184c8:	89a3      	ldrh	r3, [r4, #12]
 80184ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80184ce:	0718      	lsls	r0, r3, #28
 80184d0:	d422      	bmi.n	8018518 <__swsetup_r+0x64>
 80184d2:	06d9      	lsls	r1, r3, #27
 80184d4:	d407      	bmi.n	80184e6 <__swsetup_r+0x32>
 80184d6:	2309      	movs	r3, #9
 80184d8:	602b      	str	r3, [r5, #0]
 80184da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80184de:	81a3      	strh	r3, [r4, #12]
 80184e0:	f04f 30ff 	mov.w	r0, #4294967295
 80184e4:	e034      	b.n	8018550 <__swsetup_r+0x9c>
 80184e6:	0758      	lsls	r0, r3, #29
 80184e8:	d512      	bpl.n	8018510 <__swsetup_r+0x5c>
 80184ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80184ec:	b141      	cbz	r1, 8018500 <__swsetup_r+0x4c>
 80184ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80184f2:	4299      	cmp	r1, r3
 80184f4:	d002      	beq.n	80184fc <__swsetup_r+0x48>
 80184f6:	4628      	mov	r0, r5
 80184f8:	f7fe fb7c 	bl	8016bf4 <_free_r>
 80184fc:	2300      	movs	r3, #0
 80184fe:	6323      	str	r3, [r4, #48]	; 0x30
 8018500:	89a3      	ldrh	r3, [r4, #12]
 8018502:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018506:	81a3      	strh	r3, [r4, #12]
 8018508:	2300      	movs	r3, #0
 801850a:	6063      	str	r3, [r4, #4]
 801850c:	6923      	ldr	r3, [r4, #16]
 801850e:	6023      	str	r3, [r4, #0]
 8018510:	89a3      	ldrh	r3, [r4, #12]
 8018512:	f043 0308 	orr.w	r3, r3, #8
 8018516:	81a3      	strh	r3, [r4, #12]
 8018518:	6923      	ldr	r3, [r4, #16]
 801851a:	b94b      	cbnz	r3, 8018530 <__swsetup_r+0x7c>
 801851c:	89a3      	ldrh	r3, [r4, #12]
 801851e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018526:	d003      	beq.n	8018530 <__swsetup_r+0x7c>
 8018528:	4621      	mov	r1, r4
 801852a:	4628      	mov	r0, r5
 801852c:	f000 fb46 	bl	8018bbc <__smakebuf_r>
 8018530:	89a0      	ldrh	r0, [r4, #12]
 8018532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018536:	f010 0301 	ands.w	r3, r0, #1
 801853a:	d00a      	beq.n	8018552 <__swsetup_r+0x9e>
 801853c:	2300      	movs	r3, #0
 801853e:	60a3      	str	r3, [r4, #8]
 8018540:	6963      	ldr	r3, [r4, #20]
 8018542:	425b      	negs	r3, r3
 8018544:	61a3      	str	r3, [r4, #24]
 8018546:	6923      	ldr	r3, [r4, #16]
 8018548:	b943      	cbnz	r3, 801855c <__swsetup_r+0xa8>
 801854a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801854e:	d1c4      	bne.n	80184da <__swsetup_r+0x26>
 8018550:	bd38      	pop	{r3, r4, r5, pc}
 8018552:	0781      	lsls	r1, r0, #30
 8018554:	bf58      	it	pl
 8018556:	6963      	ldrpl	r3, [r4, #20]
 8018558:	60a3      	str	r3, [r4, #8]
 801855a:	e7f4      	b.n	8018546 <__swsetup_r+0x92>
 801855c:	2000      	movs	r0, #0
 801855e:	e7f7      	b.n	8018550 <__swsetup_r+0x9c>
 8018560:	20000098 	.word	0x20000098

08018564 <abort>:
 8018564:	b508      	push	{r3, lr}
 8018566:	2006      	movs	r0, #6
 8018568:	f000 fb92 	bl	8018c90 <raise>
 801856c:	2001      	movs	r0, #1
 801856e:	f001 f8a5 	bl	80196bc <_exit>
	...

08018574 <__sflush_r>:
 8018574:	898b      	ldrh	r3, [r1, #12]
 8018576:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801857e:	4605      	mov	r5, r0
 8018580:	0718      	lsls	r0, r3, #28
 8018582:	460c      	mov	r4, r1
 8018584:	d45f      	bmi.n	8018646 <__sflush_r+0xd2>
 8018586:	684b      	ldr	r3, [r1, #4]
 8018588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801858c:	2b00      	cmp	r3, #0
 801858e:	818a      	strh	r2, [r1, #12]
 8018590:	dc05      	bgt.n	801859e <__sflush_r+0x2a>
 8018592:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8018594:	2b00      	cmp	r3, #0
 8018596:	dc02      	bgt.n	801859e <__sflush_r+0x2a>
 8018598:	2000      	movs	r0, #0
 801859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801859e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80185a0:	2e00      	cmp	r6, #0
 80185a2:	d0f9      	beq.n	8018598 <__sflush_r+0x24>
 80185a4:	2300      	movs	r3, #0
 80185a6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80185aa:	682f      	ldr	r7, [r5, #0]
 80185ac:	602b      	str	r3, [r5, #0]
 80185ae:	d036      	beq.n	801861e <__sflush_r+0xaa>
 80185b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80185b2:	89a3      	ldrh	r3, [r4, #12]
 80185b4:	075a      	lsls	r2, r3, #29
 80185b6:	d505      	bpl.n	80185c4 <__sflush_r+0x50>
 80185b8:	6863      	ldr	r3, [r4, #4]
 80185ba:	1ac0      	subs	r0, r0, r3
 80185bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80185be:	b10b      	cbz	r3, 80185c4 <__sflush_r+0x50>
 80185c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80185c2:	1ac0      	subs	r0, r0, r3
 80185c4:	2300      	movs	r3, #0
 80185c6:	4602      	mov	r2, r0
 80185c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80185ca:	69e1      	ldr	r1, [r4, #28]
 80185cc:	4628      	mov	r0, r5
 80185ce:	47b0      	blx	r6
 80185d0:	1c43      	adds	r3, r0, #1
 80185d2:	89a3      	ldrh	r3, [r4, #12]
 80185d4:	d106      	bne.n	80185e4 <__sflush_r+0x70>
 80185d6:	6829      	ldr	r1, [r5, #0]
 80185d8:	291d      	cmp	r1, #29
 80185da:	d830      	bhi.n	801863e <__sflush_r+0xca>
 80185dc:	4a2b      	ldr	r2, [pc, #172]	; (801868c <__sflush_r+0x118>)
 80185de:	40ca      	lsrs	r2, r1
 80185e0:	07d6      	lsls	r6, r2, #31
 80185e2:	d52c      	bpl.n	801863e <__sflush_r+0xca>
 80185e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80185e8:	b21b      	sxth	r3, r3
 80185ea:	2200      	movs	r2, #0
 80185ec:	6062      	str	r2, [r4, #4]
 80185ee:	04d9      	lsls	r1, r3, #19
 80185f0:	6922      	ldr	r2, [r4, #16]
 80185f2:	81a3      	strh	r3, [r4, #12]
 80185f4:	6022      	str	r2, [r4, #0]
 80185f6:	d504      	bpl.n	8018602 <__sflush_r+0x8e>
 80185f8:	1c42      	adds	r2, r0, #1
 80185fa:	d101      	bne.n	8018600 <__sflush_r+0x8c>
 80185fc:	682b      	ldr	r3, [r5, #0]
 80185fe:	b903      	cbnz	r3, 8018602 <__sflush_r+0x8e>
 8018600:	6520      	str	r0, [r4, #80]	; 0x50
 8018602:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018604:	602f      	str	r7, [r5, #0]
 8018606:	2900      	cmp	r1, #0
 8018608:	d0c6      	beq.n	8018598 <__sflush_r+0x24>
 801860a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801860e:	4299      	cmp	r1, r3
 8018610:	d002      	beq.n	8018618 <__sflush_r+0xa4>
 8018612:	4628      	mov	r0, r5
 8018614:	f7fe faee 	bl	8016bf4 <_free_r>
 8018618:	2000      	movs	r0, #0
 801861a:	6320      	str	r0, [r4, #48]	; 0x30
 801861c:	e7bd      	b.n	801859a <__sflush_r+0x26>
 801861e:	69e1      	ldr	r1, [r4, #28]
 8018620:	2301      	movs	r3, #1
 8018622:	4628      	mov	r0, r5
 8018624:	47b0      	blx	r6
 8018626:	1c41      	adds	r1, r0, #1
 8018628:	d1c3      	bne.n	80185b2 <__sflush_r+0x3e>
 801862a:	682b      	ldr	r3, [r5, #0]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d0c0      	beq.n	80185b2 <__sflush_r+0x3e>
 8018630:	2b1d      	cmp	r3, #29
 8018632:	d001      	beq.n	8018638 <__sflush_r+0xc4>
 8018634:	2b16      	cmp	r3, #22
 8018636:	d101      	bne.n	801863c <__sflush_r+0xc8>
 8018638:	602f      	str	r7, [r5, #0]
 801863a:	e7ad      	b.n	8018598 <__sflush_r+0x24>
 801863c:	89a3      	ldrh	r3, [r4, #12]
 801863e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018642:	81a3      	strh	r3, [r4, #12]
 8018644:	e7a9      	b.n	801859a <__sflush_r+0x26>
 8018646:	690f      	ldr	r7, [r1, #16]
 8018648:	2f00      	cmp	r7, #0
 801864a:	d0a5      	beq.n	8018598 <__sflush_r+0x24>
 801864c:	079b      	lsls	r3, r3, #30
 801864e:	680e      	ldr	r6, [r1, #0]
 8018650:	bf08      	it	eq
 8018652:	694b      	ldreq	r3, [r1, #20]
 8018654:	600f      	str	r7, [r1, #0]
 8018656:	bf18      	it	ne
 8018658:	2300      	movne	r3, #0
 801865a:	eba6 0807 	sub.w	r8, r6, r7
 801865e:	608b      	str	r3, [r1, #8]
 8018660:	f1b8 0f00 	cmp.w	r8, #0
 8018664:	dd98      	ble.n	8018598 <__sflush_r+0x24>
 8018666:	69e1      	ldr	r1, [r4, #28]
 8018668:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801866a:	4643      	mov	r3, r8
 801866c:	463a      	mov	r2, r7
 801866e:	4628      	mov	r0, r5
 8018670:	47b0      	blx	r6
 8018672:	2800      	cmp	r0, #0
 8018674:	dc06      	bgt.n	8018684 <__sflush_r+0x110>
 8018676:	89a3      	ldrh	r3, [r4, #12]
 8018678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801867c:	81a3      	strh	r3, [r4, #12]
 801867e:	f04f 30ff 	mov.w	r0, #4294967295
 8018682:	e78a      	b.n	801859a <__sflush_r+0x26>
 8018684:	4407      	add	r7, r0
 8018686:	eba8 0800 	sub.w	r8, r8, r0
 801868a:	e7e9      	b.n	8018660 <__sflush_r+0xec>
 801868c:	20400001 	.word	0x20400001

08018690 <_fflush_r>:
 8018690:	b538      	push	{r3, r4, r5, lr}
 8018692:	460c      	mov	r4, r1
 8018694:	4605      	mov	r5, r0
 8018696:	b118      	cbz	r0, 80186a0 <_fflush_r+0x10>
 8018698:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801869a:	b90b      	cbnz	r3, 80186a0 <_fflush_r+0x10>
 801869c:	f000 f864 	bl	8018768 <__sinit>
 80186a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186a4:	b1bb      	cbz	r3, 80186d6 <_fflush_r+0x46>
 80186a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80186a8:	07d0      	lsls	r0, r2, #31
 80186aa:	d404      	bmi.n	80186b6 <_fflush_r+0x26>
 80186ac:	0599      	lsls	r1, r3, #22
 80186ae:	d402      	bmi.n	80186b6 <_fflush_r+0x26>
 80186b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186b2:	f7fe fb65 	bl	8016d80 <__retarget_lock_acquire_recursive>
 80186b6:	4628      	mov	r0, r5
 80186b8:	4621      	mov	r1, r4
 80186ba:	f7ff ff5b 	bl	8018574 <__sflush_r>
 80186be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80186c0:	07da      	lsls	r2, r3, #31
 80186c2:	4605      	mov	r5, r0
 80186c4:	d405      	bmi.n	80186d2 <_fflush_r+0x42>
 80186c6:	89a3      	ldrh	r3, [r4, #12]
 80186c8:	059b      	lsls	r3, r3, #22
 80186ca:	d402      	bmi.n	80186d2 <_fflush_r+0x42>
 80186cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186ce:	f7fe fb58 	bl	8016d82 <__retarget_lock_release_recursive>
 80186d2:	4628      	mov	r0, r5
 80186d4:	bd38      	pop	{r3, r4, r5, pc}
 80186d6:	461d      	mov	r5, r3
 80186d8:	e7fb      	b.n	80186d2 <_fflush_r+0x42>
	...

080186dc <std>:
 80186dc:	2300      	movs	r3, #0
 80186de:	b510      	push	{r4, lr}
 80186e0:	4604      	mov	r4, r0
 80186e2:	e9c0 3300 	strd	r3, r3, [r0]
 80186e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80186ea:	6083      	str	r3, [r0, #8]
 80186ec:	8181      	strh	r1, [r0, #12]
 80186ee:	6643      	str	r3, [r0, #100]	; 0x64
 80186f0:	81c2      	strh	r2, [r0, #14]
 80186f2:	6183      	str	r3, [r0, #24]
 80186f4:	4619      	mov	r1, r3
 80186f6:	2208      	movs	r2, #8
 80186f8:	305c      	adds	r0, #92	; 0x5c
 80186fa:	f7fc f95d 	bl	80149b8 <memset>
 80186fe:	4b07      	ldr	r3, [pc, #28]	; (801871c <std+0x40>)
 8018700:	6223      	str	r3, [r4, #32]
 8018702:	4b07      	ldr	r3, [pc, #28]	; (8018720 <std+0x44>)
 8018704:	6263      	str	r3, [r4, #36]	; 0x24
 8018706:	4b07      	ldr	r3, [pc, #28]	; (8018724 <std+0x48>)
 8018708:	62a3      	str	r3, [r4, #40]	; 0x28
 801870a:	4b07      	ldr	r3, [pc, #28]	; (8018728 <std+0x4c>)
 801870c:	61e4      	str	r4, [r4, #28]
 801870e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018710:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018718:	f7fe bb30 	b.w	8016d7c <__retarget_lock_init_recursive>
 801871c:	08018cc9 	.word	0x08018cc9
 8018720:	08018ceb 	.word	0x08018ceb
 8018724:	08018d23 	.word	0x08018d23
 8018728:	08018d47 	.word	0x08018d47

0801872c <_cleanup_r>:
 801872c:	4901      	ldr	r1, [pc, #4]	; (8018734 <_cleanup_r+0x8>)
 801872e:	f000 b9f9 	b.w	8018b24 <_fwalk_reent>
 8018732:	bf00      	nop
 8018734:	08018e51 	.word	0x08018e51

08018738 <__sfp_lock_acquire>:
 8018738:	4801      	ldr	r0, [pc, #4]	; (8018740 <__sfp_lock_acquire+0x8>)
 801873a:	f7fe bb21 	b.w	8016d80 <__retarget_lock_acquire_recursive>
 801873e:	bf00      	nop
 8018740:	200011d6 	.word	0x200011d6

08018744 <__sfp_lock_release>:
 8018744:	4801      	ldr	r0, [pc, #4]	; (801874c <__sfp_lock_release+0x8>)
 8018746:	f7fe bb1c 	b.w	8016d82 <__retarget_lock_release_recursive>
 801874a:	bf00      	nop
 801874c:	200011d6 	.word	0x200011d6

08018750 <__sinit_lock_acquire>:
 8018750:	4801      	ldr	r0, [pc, #4]	; (8018758 <__sinit_lock_acquire+0x8>)
 8018752:	f7fe bb15 	b.w	8016d80 <__retarget_lock_acquire_recursive>
 8018756:	bf00      	nop
 8018758:	200011d7 	.word	0x200011d7

0801875c <__sinit_lock_release>:
 801875c:	4801      	ldr	r0, [pc, #4]	; (8018764 <__sinit_lock_release+0x8>)
 801875e:	f7fe bb10 	b.w	8016d82 <__retarget_lock_release_recursive>
 8018762:	bf00      	nop
 8018764:	200011d7 	.word	0x200011d7

08018768 <__sinit>:
 8018768:	b510      	push	{r4, lr}
 801876a:	4604      	mov	r4, r0
 801876c:	f7ff fff0 	bl	8018750 <__sinit_lock_acquire>
 8018770:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018772:	b11a      	cbz	r2, 801877c <__sinit+0x14>
 8018774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018778:	f7ff bff0 	b.w	801875c <__sinit_lock_release>
 801877c:	4b0d      	ldr	r3, [pc, #52]	; (80187b4 <__sinit+0x4c>)
 801877e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018780:	2303      	movs	r3, #3
 8018782:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8018786:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801878a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801878e:	6860      	ldr	r0, [r4, #4]
 8018790:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8018794:	2104      	movs	r1, #4
 8018796:	f7ff ffa1 	bl	80186dc <std>
 801879a:	68a0      	ldr	r0, [r4, #8]
 801879c:	2201      	movs	r2, #1
 801879e:	2109      	movs	r1, #9
 80187a0:	f7ff ff9c 	bl	80186dc <std>
 80187a4:	68e0      	ldr	r0, [r4, #12]
 80187a6:	2202      	movs	r2, #2
 80187a8:	2112      	movs	r1, #18
 80187aa:	f7ff ff97 	bl	80186dc <std>
 80187ae:	2301      	movs	r3, #1
 80187b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80187b2:	e7df      	b.n	8018774 <__sinit+0xc>
 80187b4:	0801872d 	.word	0x0801872d

080187b8 <__fputwc>:
 80187b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80187bc:	4680      	mov	r8, r0
 80187be:	460e      	mov	r6, r1
 80187c0:	4615      	mov	r5, r2
 80187c2:	f7fe ff8b 	bl	80176dc <__locale_mb_cur_max>
 80187c6:	2801      	cmp	r0, #1
 80187c8:	d11c      	bne.n	8018804 <__fputwc+0x4c>
 80187ca:	1e73      	subs	r3, r6, #1
 80187cc:	2bfe      	cmp	r3, #254	; 0xfe
 80187ce:	d819      	bhi.n	8018804 <__fputwc+0x4c>
 80187d0:	f88d 6004 	strb.w	r6, [sp, #4]
 80187d4:	4604      	mov	r4, r0
 80187d6:	2700      	movs	r7, #0
 80187d8:	f10d 0904 	add.w	r9, sp, #4
 80187dc:	42a7      	cmp	r7, r4
 80187de:	d020      	beq.n	8018822 <__fputwc+0x6a>
 80187e0:	68ab      	ldr	r3, [r5, #8]
 80187e2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80187e6:	3b01      	subs	r3, #1
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	60ab      	str	r3, [r5, #8]
 80187ec:	da04      	bge.n	80187f8 <__fputwc+0x40>
 80187ee:	69aa      	ldr	r2, [r5, #24]
 80187f0:	4293      	cmp	r3, r2
 80187f2:	db1a      	blt.n	801882a <__fputwc+0x72>
 80187f4:	290a      	cmp	r1, #10
 80187f6:	d018      	beq.n	801882a <__fputwc+0x72>
 80187f8:	682b      	ldr	r3, [r5, #0]
 80187fa:	1c5a      	adds	r2, r3, #1
 80187fc:	602a      	str	r2, [r5, #0]
 80187fe:	7019      	strb	r1, [r3, #0]
 8018800:	3701      	adds	r7, #1
 8018802:	e7eb      	b.n	80187dc <__fputwc+0x24>
 8018804:	a901      	add	r1, sp, #4
 8018806:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801880a:	4632      	mov	r2, r6
 801880c:	4640      	mov	r0, r8
 801880e:	f000 fae7 	bl	8018de0 <_wcrtomb_r>
 8018812:	1c41      	adds	r1, r0, #1
 8018814:	4604      	mov	r4, r0
 8018816:	d1de      	bne.n	80187d6 <__fputwc+0x1e>
 8018818:	89ab      	ldrh	r3, [r5, #12]
 801881a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801881e:	81ab      	strh	r3, [r5, #12]
 8018820:	4606      	mov	r6, r0
 8018822:	4630      	mov	r0, r6
 8018824:	b003      	add	sp, #12
 8018826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801882a:	462a      	mov	r2, r5
 801882c:	4640      	mov	r0, r8
 801882e:	f000 fa8e 	bl	8018d4e <__swbuf_r>
 8018832:	1c42      	adds	r2, r0, #1
 8018834:	d1e4      	bne.n	8018800 <__fputwc+0x48>
 8018836:	4606      	mov	r6, r0
 8018838:	e7f3      	b.n	8018822 <__fputwc+0x6a>

0801883a <_fputwc_r>:
 801883a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801883c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801883e:	4614      	mov	r4, r2
 8018840:	07da      	lsls	r2, r3, #31
 8018842:	4605      	mov	r5, r0
 8018844:	d407      	bmi.n	8018856 <_fputwc_r+0x1c>
 8018846:	89a3      	ldrh	r3, [r4, #12]
 8018848:	059b      	lsls	r3, r3, #22
 801884a:	d404      	bmi.n	8018856 <_fputwc_r+0x1c>
 801884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801884e:	9101      	str	r1, [sp, #4]
 8018850:	f7fe fa96 	bl	8016d80 <__retarget_lock_acquire_recursive>
 8018854:	9901      	ldr	r1, [sp, #4]
 8018856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801885a:	0498      	lsls	r0, r3, #18
 801885c:	d406      	bmi.n	801886c <_fputwc_r+0x32>
 801885e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018862:	81a3      	strh	r3, [r4, #12]
 8018864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801886a:	6663      	str	r3, [r4, #100]	; 0x64
 801886c:	4622      	mov	r2, r4
 801886e:	4628      	mov	r0, r5
 8018870:	f7ff ffa2 	bl	80187b8 <__fputwc>
 8018874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018876:	07da      	lsls	r2, r3, #31
 8018878:	4605      	mov	r5, r0
 801887a:	d405      	bmi.n	8018888 <_fputwc_r+0x4e>
 801887c:	89a3      	ldrh	r3, [r4, #12]
 801887e:	059b      	lsls	r3, r3, #22
 8018880:	d402      	bmi.n	8018888 <_fputwc_r+0x4e>
 8018882:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018884:	f7fe fa7d 	bl	8016d82 <__retarget_lock_release_recursive>
 8018888:	4628      	mov	r0, r5
 801888a:	b003      	add	sp, #12
 801888c:	bd30      	pop	{r4, r5, pc}
	...

08018890 <__sfvwrite_r>:
 8018890:	6893      	ldr	r3, [r2, #8]
 8018892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018896:	4606      	mov	r6, r0
 8018898:	460c      	mov	r4, r1
 801889a:	4690      	mov	r8, r2
 801889c:	b91b      	cbnz	r3, 80188a6 <__sfvwrite_r+0x16>
 801889e:	2000      	movs	r0, #0
 80188a0:	b003      	add	sp, #12
 80188a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188a6:	898b      	ldrh	r3, [r1, #12]
 80188a8:	0718      	lsls	r0, r3, #28
 80188aa:	d550      	bpl.n	801894e <__sfvwrite_r+0xbe>
 80188ac:	690b      	ldr	r3, [r1, #16]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d04d      	beq.n	801894e <__sfvwrite_r+0xbe>
 80188b2:	89a3      	ldrh	r3, [r4, #12]
 80188b4:	f8d8 7000 	ldr.w	r7, [r8]
 80188b8:	f013 0902 	ands.w	r9, r3, #2
 80188bc:	d16c      	bne.n	8018998 <__sfvwrite_r+0x108>
 80188be:	f013 0301 	ands.w	r3, r3, #1
 80188c2:	f000 809c 	beq.w	80189fe <__sfvwrite_r+0x16e>
 80188c6:	4648      	mov	r0, r9
 80188c8:	46ca      	mov	sl, r9
 80188ca:	46cb      	mov	fp, r9
 80188cc:	f1bb 0f00 	cmp.w	fp, #0
 80188d0:	f000 8103 	beq.w	8018ada <__sfvwrite_r+0x24a>
 80188d4:	b950      	cbnz	r0, 80188ec <__sfvwrite_r+0x5c>
 80188d6:	465a      	mov	r2, fp
 80188d8:	210a      	movs	r1, #10
 80188da:	4650      	mov	r0, sl
 80188dc:	f7e7 fcd0 	bl	8000280 <memchr>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	f000 80ff 	beq.w	8018ae4 <__sfvwrite_r+0x254>
 80188e6:	3001      	adds	r0, #1
 80188e8:	eba0 090a 	sub.w	r9, r0, sl
 80188ec:	6820      	ldr	r0, [r4, #0]
 80188ee:	6921      	ldr	r1, [r4, #16]
 80188f0:	6963      	ldr	r3, [r4, #20]
 80188f2:	45d9      	cmp	r9, fp
 80188f4:	464a      	mov	r2, r9
 80188f6:	bf28      	it	cs
 80188f8:	465a      	movcs	r2, fp
 80188fa:	4288      	cmp	r0, r1
 80188fc:	f240 80f5 	bls.w	8018aea <__sfvwrite_r+0x25a>
 8018900:	68a5      	ldr	r5, [r4, #8]
 8018902:	441d      	add	r5, r3
 8018904:	42aa      	cmp	r2, r5
 8018906:	f340 80f0 	ble.w	8018aea <__sfvwrite_r+0x25a>
 801890a:	4651      	mov	r1, sl
 801890c:	462a      	mov	r2, r5
 801890e:	f7fe fefd 	bl	801770c <memmove>
 8018912:	6823      	ldr	r3, [r4, #0]
 8018914:	442b      	add	r3, r5
 8018916:	6023      	str	r3, [r4, #0]
 8018918:	4621      	mov	r1, r4
 801891a:	4630      	mov	r0, r6
 801891c:	f7ff feb8 	bl	8018690 <_fflush_r>
 8018920:	2800      	cmp	r0, #0
 8018922:	d167      	bne.n	80189f4 <__sfvwrite_r+0x164>
 8018924:	ebb9 0905 	subs.w	r9, r9, r5
 8018928:	f040 80f7 	bne.w	8018b1a <__sfvwrite_r+0x28a>
 801892c:	4621      	mov	r1, r4
 801892e:	4630      	mov	r0, r6
 8018930:	f7ff feae 	bl	8018690 <_fflush_r>
 8018934:	2800      	cmp	r0, #0
 8018936:	d15d      	bne.n	80189f4 <__sfvwrite_r+0x164>
 8018938:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801893c:	44aa      	add	sl, r5
 801893e:	ebab 0b05 	sub.w	fp, fp, r5
 8018942:	1b55      	subs	r5, r2, r5
 8018944:	f8c8 5008 	str.w	r5, [r8, #8]
 8018948:	2d00      	cmp	r5, #0
 801894a:	d1bf      	bne.n	80188cc <__sfvwrite_r+0x3c>
 801894c:	e7a7      	b.n	801889e <__sfvwrite_r+0xe>
 801894e:	4621      	mov	r1, r4
 8018950:	4630      	mov	r0, r6
 8018952:	f7ff fdaf 	bl	80184b4 <__swsetup_r>
 8018956:	2800      	cmp	r0, #0
 8018958:	d0ab      	beq.n	80188b2 <__sfvwrite_r+0x22>
 801895a:	f04f 30ff 	mov.w	r0, #4294967295
 801895e:	e79f      	b.n	80188a0 <__sfvwrite_r+0x10>
 8018960:	e9d7 b900 	ldrd	fp, r9, [r7]
 8018964:	3708      	adds	r7, #8
 8018966:	f1b9 0f00 	cmp.w	r9, #0
 801896a:	d0f9      	beq.n	8018960 <__sfvwrite_r+0xd0>
 801896c:	45d1      	cmp	r9, sl
 801896e:	464b      	mov	r3, r9
 8018970:	69e1      	ldr	r1, [r4, #28]
 8018972:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018974:	bf28      	it	cs
 8018976:	4653      	movcs	r3, sl
 8018978:	465a      	mov	r2, fp
 801897a:	4630      	mov	r0, r6
 801897c:	47a8      	blx	r5
 801897e:	2800      	cmp	r0, #0
 8018980:	dd38      	ble.n	80189f4 <__sfvwrite_r+0x164>
 8018982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018986:	4483      	add	fp, r0
 8018988:	eba9 0900 	sub.w	r9, r9, r0
 801898c:	1a18      	subs	r0, r3, r0
 801898e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018992:	2800      	cmp	r0, #0
 8018994:	d1e7      	bne.n	8018966 <__sfvwrite_r+0xd6>
 8018996:	e782      	b.n	801889e <__sfvwrite_r+0xe>
 8018998:	f04f 0b00 	mov.w	fp, #0
 801899c:	f8df a180 	ldr.w	sl, [pc, #384]	; 8018b20 <__sfvwrite_r+0x290>
 80189a0:	46d9      	mov	r9, fp
 80189a2:	e7e0      	b.n	8018966 <__sfvwrite_r+0xd6>
 80189a4:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80189a8:	3708      	adds	r7, #8
 80189aa:	f1ba 0f00 	cmp.w	sl, #0
 80189ae:	d0f9      	beq.n	80189a4 <__sfvwrite_r+0x114>
 80189b0:	89a3      	ldrh	r3, [r4, #12]
 80189b2:	6820      	ldr	r0, [r4, #0]
 80189b4:	68a2      	ldr	r2, [r4, #8]
 80189b6:	0599      	lsls	r1, r3, #22
 80189b8:	d563      	bpl.n	8018a82 <__sfvwrite_r+0x1f2>
 80189ba:	4552      	cmp	r2, sl
 80189bc:	d836      	bhi.n	8018a2c <__sfvwrite_r+0x19c>
 80189be:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80189c2:	d033      	beq.n	8018a2c <__sfvwrite_r+0x19c>
 80189c4:	6921      	ldr	r1, [r4, #16]
 80189c6:	6965      	ldr	r5, [r4, #20]
 80189c8:	eba0 0b01 	sub.w	fp, r0, r1
 80189cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80189d4:	f10b 0201 	add.w	r2, fp, #1
 80189d8:	106d      	asrs	r5, r5, #1
 80189da:	4452      	add	r2, sl
 80189dc:	4295      	cmp	r5, r2
 80189de:	bf38      	it	cc
 80189e0:	4615      	movcc	r5, r2
 80189e2:	055b      	lsls	r3, r3, #21
 80189e4:	d53d      	bpl.n	8018a62 <__sfvwrite_r+0x1d2>
 80189e6:	4629      	mov	r1, r5
 80189e8:	4630      	mov	r0, r6
 80189ea:	f7fb fd99 	bl	8014520 <_malloc_r>
 80189ee:	b948      	cbnz	r0, 8018a04 <__sfvwrite_r+0x174>
 80189f0:	230c      	movs	r3, #12
 80189f2:	6033      	str	r3, [r6, #0]
 80189f4:	89a3      	ldrh	r3, [r4, #12]
 80189f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189fa:	81a3      	strh	r3, [r4, #12]
 80189fc:	e7ad      	b.n	801895a <__sfvwrite_r+0xca>
 80189fe:	4699      	mov	r9, r3
 8018a00:	469a      	mov	sl, r3
 8018a02:	e7d2      	b.n	80189aa <__sfvwrite_r+0x11a>
 8018a04:	465a      	mov	r2, fp
 8018a06:	6921      	ldr	r1, [r4, #16]
 8018a08:	9001      	str	r0, [sp, #4]
 8018a0a:	f7fe f9bb 	bl	8016d84 <memcpy>
 8018a0e:	89a2      	ldrh	r2, [r4, #12]
 8018a10:	9b01      	ldr	r3, [sp, #4]
 8018a12:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8018a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018a1a:	81a2      	strh	r2, [r4, #12]
 8018a1c:	6123      	str	r3, [r4, #16]
 8018a1e:	6165      	str	r5, [r4, #20]
 8018a20:	445b      	add	r3, fp
 8018a22:	eba5 050b 	sub.w	r5, r5, fp
 8018a26:	6023      	str	r3, [r4, #0]
 8018a28:	4652      	mov	r2, sl
 8018a2a:	60a5      	str	r5, [r4, #8]
 8018a2c:	4552      	cmp	r2, sl
 8018a2e:	bf28      	it	cs
 8018a30:	4652      	movcs	r2, sl
 8018a32:	6820      	ldr	r0, [r4, #0]
 8018a34:	9201      	str	r2, [sp, #4]
 8018a36:	4649      	mov	r1, r9
 8018a38:	f7fe fe68 	bl	801770c <memmove>
 8018a3c:	68a3      	ldr	r3, [r4, #8]
 8018a3e:	9a01      	ldr	r2, [sp, #4]
 8018a40:	1a9b      	subs	r3, r3, r2
 8018a42:	60a3      	str	r3, [r4, #8]
 8018a44:	6823      	ldr	r3, [r4, #0]
 8018a46:	441a      	add	r2, r3
 8018a48:	4655      	mov	r5, sl
 8018a4a:	6022      	str	r2, [r4, #0]
 8018a4c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018a50:	44a9      	add	r9, r5
 8018a52:	ebaa 0a05 	sub.w	sl, sl, r5
 8018a56:	1b45      	subs	r5, r0, r5
 8018a58:	f8c8 5008 	str.w	r5, [r8, #8]
 8018a5c:	2d00      	cmp	r5, #0
 8018a5e:	d1a4      	bne.n	80189aa <__sfvwrite_r+0x11a>
 8018a60:	e71d      	b.n	801889e <__sfvwrite_r+0xe>
 8018a62:	462a      	mov	r2, r5
 8018a64:	4630      	mov	r0, r6
 8018a66:	f7fe fe6b 	bl	8017740 <_realloc_r>
 8018a6a:	4603      	mov	r3, r0
 8018a6c:	2800      	cmp	r0, #0
 8018a6e:	d1d5      	bne.n	8018a1c <__sfvwrite_r+0x18c>
 8018a70:	6921      	ldr	r1, [r4, #16]
 8018a72:	4630      	mov	r0, r6
 8018a74:	f7fe f8be 	bl	8016bf4 <_free_r>
 8018a78:	89a3      	ldrh	r3, [r4, #12]
 8018a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018a7e:	81a3      	strh	r3, [r4, #12]
 8018a80:	e7b6      	b.n	80189f0 <__sfvwrite_r+0x160>
 8018a82:	6923      	ldr	r3, [r4, #16]
 8018a84:	4283      	cmp	r3, r0
 8018a86:	d302      	bcc.n	8018a8e <__sfvwrite_r+0x1fe>
 8018a88:	6961      	ldr	r1, [r4, #20]
 8018a8a:	4551      	cmp	r1, sl
 8018a8c:	d915      	bls.n	8018aba <__sfvwrite_r+0x22a>
 8018a8e:	4552      	cmp	r2, sl
 8018a90:	bf28      	it	cs
 8018a92:	4652      	movcs	r2, sl
 8018a94:	4649      	mov	r1, r9
 8018a96:	4615      	mov	r5, r2
 8018a98:	f7fe fe38 	bl	801770c <memmove>
 8018a9c:	68a3      	ldr	r3, [r4, #8]
 8018a9e:	6822      	ldr	r2, [r4, #0]
 8018aa0:	1b5b      	subs	r3, r3, r5
 8018aa2:	442a      	add	r2, r5
 8018aa4:	60a3      	str	r3, [r4, #8]
 8018aa6:	6022      	str	r2, [r4, #0]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d1cf      	bne.n	8018a4c <__sfvwrite_r+0x1bc>
 8018aac:	4621      	mov	r1, r4
 8018aae:	4630      	mov	r0, r6
 8018ab0:	f7ff fdee 	bl	8018690 <_fflush_r>
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d0c9      	beq.n	8018a4c <__sfvwrite_r+0x1bc>
 8018ab8:	e79c      	b.n	80189f4 <__sfvwrite_r+0x164>
 8018aba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018abe:	459a      	cmp	sl, r3
 8018ac0:	bf38      	it	cc
 8018ac2:	4653      	movcc	r3, sl
 8018ac4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018ac6:	fb93 f3f1 	sdiv	r3, r3, r1
 8018aca:	464a      	mov	r2, r9
 8018acc:	434b      	muls	r3, r1
 8018ace:	4630      	mov	r0, r6
 8018ad0:	69e1      	ldr	r1, [r4, #28]
 8018ad2:	47a8      	blx	r5
 8018ad4:	1e05      	subs	r5, r0, #0
 8018ad6:	dcb9      	bgt.n	8018a4c <__sfvwrite_r+0x1bc>
 8018ad8:	e78c      	b.n	80189f4 <__sfvwrite_r+0x164>
 8018ada:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018ade:	2000      	movs	r0, #0
 8018ae0:	3708      	adds	r7, #8
 8018ae2:	e6f3      	b.n	80188cc <__sfvwrite_r+0x3c>
 8018ae4:	f10b 0901 	add.w	r9, fp, #1
 8018ae8:	e700      	b.n	80188ec <__sfvwrite_r+0x5c>
 8018aea:	4293      	cmp	r3, r2
 8018aec:	dc08      	bgt.n	8018b00 <__sfvwrite_r+0x270>
 8018aee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018af0:	69e1      	ldr	r1, [r4, #28]
 8018af2:	4652      	mov	r2, sl
 8018af4:	4630      	mov	r0, r6
 8018af6:	47a8      	blx	r5
 8018af8:	1e05      	subs	r5, r0, #0
 8018afa:	f73f af13 	bgt.w	8018924 <__sfvwrite_r+0x94>
 8018afe:	e779      	b.n	80189f4 <__sfvwrite_r+0x164>
 8018b00:	4651      	mov	r1, sl
 8018b02:	9201      	str	r2, [sp, #4]
 8018b04:	f7fe fe02 	bl	801770c <memmove>
 8018b08:	9a01      	ldr	r2, [sp, #4]
 8018b0a:	68a3      	ldr	r3, [r4, #8]
 8018b0c:	1a9b      	subs	r3, r3, r2
 8018b0e:	60a3      	str	r3, [r4, #8]
 8018b10:	6823      	ldr	r3, [r4, #0]
 8018b12:	4413      	add	r3, r2
 8018b14:	6023      	str	r3, [r4, #0]
 8018b16:	4615      	mov	r5, r2
 8018b18:	e704      	b.n	8018924 <__sfvwrite_r+0x94>
 8018b1a:	2001      	movs	r0, #1
 8018b1c:	e70c      	b.n	8018938 <__sfvwrite_r+0xa8>
 8018b1e:	bf00      	nop
 8018b20:	7ffffc00 	.word	0x7ffffc00

08018b24 <_fwalk_reent>:
 8018b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b28:	4606      	mov	r6, r0
 8018b2a:	4688      	mov	r8, r1
 8018b2c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8018b30:	2700      	movs	r7, #0
 8018b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018b36:	f1b9 0901 	subs.w	r9, r9, #1
 8018b3a:	d505      	bpl.n	8018b48 <_fwalk_reent+0x24>
 8018b3c:	6824      	ldr	r4, [r4, #0]
 8018b3e:	2c00      	cmp	r4, #0
 8018b40:	d1f7      	bne.n	8018b32 <_fwalk_reent+0xe>
 8018b42:	4638      	mov	r0, r7
 8018b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b48:	89ab      	ldrh	r3, [r5, #12]
 8018b4a:	2b01      	cmp	r3, #1
 8018b4c:	d907      	bls.n	8018b5e <_fwalk_reent+0x3a>
 8018b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b52:	3301      	adds	r3, #1
 8018b54:	d003      	beq.n	8018b5e <_fwalk_reent+0x3a>
 8018b56:	4629      	mov	r1, r5
 8018b58:	4630      	mov	r0, r6
 8018b5a:	47c0      	blx	r8
 8018b5c:	4307      	orrs	r7, r0
 8018b5e:	3568      	adds	r5, #104	; 0x68
 8018b60:	e7e9      	b.n	8018b36 <_fwalk_reent+0x12>

08018b62 <__swhatbuf_r>:
 8018b62:	b570      	push	{r4, r5, r6, lr}
 8018b64:	460e      	mov	r6, r1
 8018b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b6a:	2900      	cmp	r1, #0
 8018b6c:	b096      	sub	sp, #88	; 0x58
 8018b6e:	4614      	mov	r4, r2
 8018b70:	461d      	mov	r5, r3
 8018b72:	da0a      	bge.n	8018b8a <__swhatbuf_r+0x28>
 8018b74:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8018b78:	2300      	movs	r3, #0
 8018b7a:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8018b7e:	602b      	str	r3, [r5, #0]
 8018b80:	d116      	bne.n	8018bb0 <__swhatbuf_r+0x4e>
 8018b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b86:	6023      	str	r3, [r4, #0]
 8018b88:	e015      	b.n	8018bb6 <__swhatbuf_r+0x54>
 8018b8a:	466a      	mov	r2, sp
 8018b8c:	f000 f9b8 	bl	8018f00 <_fstat_r>
 8018b90:	2800      	cmp	r0, #0
 8018b92:	dbef      	blt.n	8018b74 <__swhatbuf_r+0x12>
 8018b94:	9a01      	ldr	r2, [sp, #4]
 8018b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018b9e:	425a      	negs	r2, r3
 8018ba0:	415a      	adcs	r2, r3
 8018ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ba6:	602a      	str	r2, [r5, #0]
 8018ba8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018bac:	6023      	str	r3, [r4, #0]
 8018bae:	e002      	b.n	8018bb6 <__swhatbuf_r+0x54>
 8018bb0:	2240      	movs	r2, #64	; 0x40
 8018bb2:	6022      	str	r2, [r4, #0]
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	b016      	add	sp, #88	; 0x58
 8018bb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08018bbc <__smakebuf_r>:
 8018bbc:	898b      	ldrh	r3, [r1, #12]
 8018bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018bc0:	079d      	lsls	r5, r3, #30
 8018bc2:	4606      	mov	r6, r0
 8018bc4:	460c      	mov	r4, r1
 8018bc6:	d507      	bpl.n	8018bd8 <__smakebuf_r+0x1c>
 8018bc8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8018bcc:	6023      	str	r3, [r4, #0]
 8018bce:	6123      	str	r3, [r4, #16]
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	6163      	str	r3, [r4, #20]
 8018bd4:	b002      	add	sp, #8
 8018bd6:	bd70      	pop	{r4, r5, r6, pc}
 8018bd8:	ab01      	add	r3, sp, #4
 8018bda:	466a      	mov	r2, sp
 8018bdc:	f7ff ffc1 	bl	8018b62 <__swhatbuf_r>
 8018be0:	9900      	ldr	r1, [sp, #0]
 8018be2:	4605      	mov	r5, r0
 8018be4:	4630      	mov	r0, r6
 8018be6:	f7fb fc9b 	bl	8014520 <_malloc_r>
 8018bea:	b948      	cbnz	r0, 8018c00 <__smakebuf_r+0x44>
 8018bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bf0:	059a      	lsls	r2, r3, #22
 8018bf2:	d4ef      	bmi.n	8018bd4 <__smakebuf_r+0x18>
 8018bf4:	f023 0303 	bic.w	r3, r3, #3
 8018bf8:	f043 0302 	orr.w	r3, r3, #2
 8018bfc:	81a3      	strh	r3, [r4, #12]
 8018bfe:	e7e3      	b.n	8018bc8 <__smakebuf_r+0xc>
 8018c00:	4b0d      	ldr	r3, [pc, #52]	; (8018c38 <__smakebuf_r+0x7c>)
 8018c02:	63f3      	str	r3, [r6, #60]	; 0x3c
 8018c04:	89a3      	ldrh	r3, [r4, #12]
 8018c06:	6020      	str	r0, [r4, #0]
 8018c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c0c:	81a3      	strh	r3, [r4, #12]
 8018c0e:	9b00      	ldr	r3, [sp, #0]
 8018c10:	6163      	str	r3, [r4, #20]
 8018c12:	9b01      	ldr	r3, [sp, #4]
 8018c14:	6120      	str	r0, [r4, #16]
 8018c16:	b15b      	cbz	r3, 8018c30 <__smakebuf_r+0x74>
 8018c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c1c:	4630      	mov	r0, r6
 8018c1e:	f000 f981 	bl	8018f24 <_isatty_r>
 8018c22:	b128      	cbz	r0, 8018c30 <__smakebuf_r+0x74>
 8018c24:	89a3      	ldrh	r3, [r4, #12]
 8018c26:	f023 0303 	bic.w	r3, r3, #3
 8018c2a:	f043 0301 	orr.w	r3, r3, #1
 8018c2e:	81a3      	strh	r3, [r4, #12]
 8018c30:	89a0      	ldrh	r0, [r4, #12]
 8018c32:	4305      	orrs	r5, r0
 8018c34:	81a5      	strh	r5, [r4, #12]
 8018c36:	e7cd      	b.n	8018bd4 <__smakebuf_r+0x18>
 8018c38:	0801872d 	.word	0x0801872d

08018c3c <_raise_r>:
 8018c3c:	291f      	cmp	r1, #31
 8018c3e:	b538      	push	{r3, r4, r5, lr}
 8018c40:	4604      	mov	r4, r0
 8018c42:	460d      	mov	r5, r1
 8018c44:	d904      	bls.n	8018c50 <_raise_r+0x14>
 8018c46:	2316      	movs	r3, #22
 8018c48:	6003      	str	r3, [r0, #0]
 8018c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c4e:	bd38      	pop	{r3, r4, r5, pc}
 8018c50:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8018c54:	b112      	cbz	r2, 8018c5c <_raise_r+0x20>
 8018c56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c5a:	b94b      	cbnz	r3, 8018c70 <_raise_r+0x34>
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	f000 f831 	bl	8018cc4 <_getpid_r>
 8018c62:	462a      	mov	r2, r5
 8018c64:	4601      	mov	r1, r0
 8018c66:	4620      	mov	r0, r4
 8018c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c6c:	f000 b818 	b.w	8018ca0 <_kill_r>
 8018c70:	2b01      	cmp	r3, #1
 8018c72:	d00a      	beq.n	8018c8a <_raise_r+0x4e>
 8018c74:	1c59      	adds	r1, r3, #1
 8018c76:	d103      	bne.n	8018c80 <_raise_r+0x44>
 8018c78:	2316      	movs	r3, #22
 8018c7a:	6003      	str	r3, [r0, #0]
 8018c7c:	2001      	movs	r0, #1
 8018c7e:	e7e6      	b.n	8018c4e <_raise_r+0x12>
 8018c80:	2400      	movs	r4, #0
 8018c82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018c86:	4628      	mov	r0, r5
 8018c88:	4798      	blx	r3
 8018c8a:	2000      	movs	r0, #0
 8018c8c:	e7df      	b.n	8018c4e <_raise_r+0x12>
	...

08018c90 <raise>:
 8018c90:	4b02      	ldr	r3, [pc, #8]	; (8018c9c <raise+0xc>)
 8018c92:	4601      	mov	r1, r0
 8018c94:	6818      	ldr	r0, [r3, #0]
 8018c96:	f7ff bfd1 	b.w	8018c3c <_raise_r>
 8018c9a:	bf00      	nop
 8018c9c:	20000098 	.word	0x20000098

08018ca0 <_kill_r>:
 8018ca0:	b538      	push	{r3, r4, r5, lr}
 8018ca2:	4d07      	ldr	r5, [pc, #28]	; (8018cc0 <_kill_r+0x20>)
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	4608      	mov	r0, r1
 8018caa:	4611      	mov	r1, r2
 8018cac:	602b      	str	r3, [r5, #0]
 8018cae:	f000 fd23 	bl	80196f8 <_kill>
 8018cb2:	1c43      	adds	r3, r0, #1
 8018cb4:	d102      	bne.n	8018cbc <_kill_r+0x1c>
 8018cb6:	682b      	ldr	r3, [r5, #0]
 8018cb8:	b103      	cbz	r3, 8018cbc <_kill_r+0x1c>
 8018cba:	6023      	str	r3, [r4, #0]
 8018cbc:	bd38      	pop	{r3, r4, r5, pc}
 8018cbe:	bf00      	nop
 8018cc0:	200011d8 	.word	0x200011d8

08018cc4 <_getpid_r>:
 8018cc4:	f000 bbb4 	b.w	8019430 <_getpid>

08018cc8 <__sread>:
 8018cc8:	b510      	push	{r4, lr}
 8018cca:	460c      	mov	r4, r1
 8018ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cd0:	f000 f94a 	bl	8018f68 <_read_r>
 8018cd4:	2800      	cmp	r0, #0
 8018cd6:	bfab      	itete	ge
 8018cd8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8018cda:	89a3      	ldrhlt	r3, [r4, #12]
 8018cdc:	181b      	addge	r3, r3, r0
 8018cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ce2:	bfac      	ite	ge
 8018ce4:	6523      	strge	r3, [r4, #80]	; 0x50
 8018ce6:	81a3      	strhlt	r3, [r4, #12]
 8018ce8:	bd10      	pop	{r4, pc}

08018cea <__swrite>:
 8018cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cee:	461f      	mov	r7, r3
 8018cf0:	898b      	ldrh	r3, [r1, #12]
 8018cf2:	05db      	lsls	r3, r3, #23
 8018cf4:	4605      	mov	r5, r0
 8018cf6:	460c      	mov	r4, r1
 8018cf8:	4616      	mov	r6, r2
 8018cfa:	d505      	bpl.n	8018d08 <__swrite+0x1e>
 8018cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d00:	2302      	movs	r3, #2
 8018d02:	2200      	movs	r2, #0
 8018d04:	f000 f91e 	bl	8018f44 <_lseek_r>
 8018d08:	89a3      	ldrh	r3, [r4, #12]
 8018d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d12:	81a3      	strh	r3, [r4, #12]
 8018d14:	4632      	mov	r2, r6
 8018d16:	463b      	mov	r3, r7
 8018d18:	4628      	mov	r0, r5
 8018d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1e:	f000 b875 	b.w	8018e0c <_write_r>

08018d22 <__sseek>:
 8018d22:	b510      	push	{r4, lr}
 8018d24:	460c      	mov	r4, r1
 8018d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d2a:	f000 f90b 	bl	8018f44 <_lseek_r>
 8018d2e:	1c43      	adds	r3, r0, #1
 8018d30:	89a3      	ldrh	r3, [r4, #12]
 8018d32:	bf15      	itete	ne
 8018d34:	6520      	strne	r0, [r4, #80]	; 0x50
 8018d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018d3e:	81a3      	strheq	r3, [r4, #12]
 8018d40:	bf18      	it	ne
 8018d42:	81a3      	strhne	r3, [r4, #12]
 8018d44:	bd10      	pop	{r4, pc}

08018d46 <__sclose>:
 8018d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d4a:	f000 b871 	b.w	8018e30 <_close_r>

08018d4e <__swbuf_r>:
 8018d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d50:	460e      	mov	r6, r1
 8018d52:	4614      	mov	r4, r2
 8018d54:	4605      	mov	r5, r0
 8018d56:	b118      	cbz	r0, 8018d60 <__swbuf_r+0x12>
 8018d58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018d5a:	b90b      	cbnz	r3, 8018d60 <__swbuf_r+0x12>
 8018d5c:	f7ff fd04 	bl	8018768 <__sinit>
 8018d60:	69a3      	ldr	r3, [r4, #24]
 8018d62:	60a3      	str	r3, [r4, #8]
 8018d64:	89a3      	ldrh	r3, [r4, #12]
 8018d66:	0719      	lsls	r1, r3, #28
 8018d68:	d529      	bpl.n	8018dbe <__swbuf_r+0x70>
 8018d6a:	6923      	ldr	r3, [r4, #16]
 8018d6c:	b33b      	cbz	r3, 8018dbe <__swbuf_r+0x70>
 8018d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d72:	b2f6      	uxtb	r6, r6
 8018d74:	049a      	lsls	r2, r3, #18
 8018d76:	4637      	mov	r7, r6
 8018d78:	d52a      	bpl.n	8018dd0 <__swbuf_r+0x82>
 8018d7a:	6823      	ldr	r3, [r4, #0]
 8018d7c:	6920      	ldr	r0, [r4, #16]
 8018d7e:	1a18      	subs	r0, r3, r0
 8018d80:	6963      	ldr	r3, [r4, #20]
 8018d82:	4283      	cmp	r3, r0
 8018d84:	dc04      	bgt.n	8018d90 <__swbuf_r+0x42>
 8018d86:	4621      	mov	r1, r4
 8018d88:	4628      	mov	r0, r5
 8018d8a:	f7ff fc81 	bl	8018690 <_fflush_r>
 8018d8e:	b9e0      	cbnz	r0, 8018dca <__swbuf_r+0x7c>
 8018d90:	68a3      	ldr	r3, [r4, #8]
 8018d92:	3b01      	subs	r3, #1
 8018d94:	60a3      	str	r3, [r4, #8]
 8018d96:	6823      	ldr	r3, [r4, #0]
 8018d98:	1c5a      	adds	r2, r3, #1
 8018d9a:	6022      	str	r2, [r4, #0]
 8018d9c:	701e      	strb	r6, [r3, #0]
 8018d9e:	6962      	ldr	r2, [r4, #20]
 8018da0:	1c43      	adds	r3, r0, #1
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d004      	beq.n	8018db0 <__swbuf_r+0x62>
 8018da6:	89a3      	ldrh	r3, [r4, #12]
 8018da8:	07db      	lsls	r3, r3, #31
 8018daa:	d506      	bpl.n	8018dba <__swbuf_r+0x6c>
 8018dac:	2e0a      	cmp	r6, #10
 8018dae:	d104      	bne.n	8018dba <__swbuf_r+0x6c>
 8018db0:	4621      	mov	r1, r4
 8018db2:	4628      	mov	r0, r5
 8018db4:	f7ff fc6c 	bl	8018690 <_fflush_r>
 8018db8:	b938      	cbnz	r0, 8018dca <__swbuf_r+0x7c>
 8018dba:	4638      	mov	r0, r7
 8018dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	4628      	mov	r0, r5
 8018dc2:	f7ff fb77 	bl	80184b4 <__swsetup_r>
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d0d1      	beq.n	8018d6e <__swbuf_r+0x20>
 8018dca:	f04f 37ff 	mov.w	r7, #4294967295
 8018dce:	e7f4      	b.n	8018dba <__swbuf_r+0x6c>
 8018dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018dd4:	81a3      	strh	r3, [r4, #12]
 8018dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018ddc:	6663      	str	r3, [r4, #100]	; 0x64
 8018dde:	e7cc      	b.n	8018d7a <__swbuf_r+0x2c>

08018de0 <_wcrtomb_r>:
 8018de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018de2:	4c09      	ldr	r4, [pc, #36]	; (8018e08 <_wcrtomb_r+0x28>)
 8018de4:	b085      	sub	sp, #20
 8018de6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8018dea:	4605      	mov	r5, r0
 8018dec:	461e      	mov	r6, r3
 8018dee:	b909      	cbnz	r1, 8018df4 <_wcrtomb_r+0x14>
 8018df0:	460a      	mov	r2, r1
 8018df2:	a901      	add	r1, sp, #4
 8018df4:	47b8      	blx	r7
 8018df6:	1c43      	adds	r3, r0, #1
 8018df8:	bf01      	itttt	eq
 8018dfa:	2300      	moveq	r3, #0
 8018dfc:	6033      	streq	r3, [r6, #0]
 8018dfe:	238a      	moveq	r3, #138	; 0x8a
 8018e00:	602b      	streq	r3, [r5, #0]
 8018e02:	b005      	add	sp, #20
 8018e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e06:	bf00      	nop
 8018e08:	200008dc 	.word	0x200008dc

08018e0c <_write_r>:
 8018e0c:	b538      	push	{r3, r4, r5, lr}
 8018e0e:	4d07      	ldr	r5, [pc, #28]	; (8018e2c <_write_r+0x20>)
 8018e10:	4604      	mov	r4, r0
 8018e12:	4608      	mov	r0, r1
 8018e14:	4611      	mov	r1, r2
 8018e16:	2200      	movs	r2, #0
 8018e18:	602a      	str	r2, [r5, #0]
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	f000 fab1 	bl	8019382 <_write>
 8018e20:	1c43      	adds	r3, r0, #1
 8018e22:	d102      	bne.n	8018e2a <_write_r+0x1e>
 8018e24:	682b      	ldr	r3, [r5, #0]
 8018e26:	b103      	cbz	r3, 8018e2a <_write_r+0x1e>
 8018e28:	6023      	str	r3, [r4, #0]
 8018e2a:	bd38      	pop	{r3, r4, r5, pc}
 8018e2c:	200011d8 	.word	0x200011d8

08018e30 <_close_r>:
 8018e30:	b538      	push	{r3, r4, r5, lr}
 8018e32:	4d06      	ldr	r5, [pc, #24]	; (8018e4c <_close_r+0x1c>)
 8018e34:	2300      	movs	r3, #0
 8018e36:	4604      	mov	r4, r0
 8018e38:	4608      	mov	r0, r1
 8018e3a:	602b      	str	r3, [r5, #0]
 8018e3c:	f000 fad2 	bl	80193e4 <_close>
 8018e40:	1c43      	adds	r3, r0, #1
 8018e42:	d102      	bne.n	8018e4a <_close_r+0x1a>
 8018e44:	682b      	ldr	r3, [r5, #0]
 8018e46:	b103      	cbz	r3, 8018e4a <_close_r+0x1a>
 8018e48:	6023      	str	r3, [r4, #0]
 8018e4a:	bd38      	pop	{r3, r4, r5, pc}
 8018e4c:	200011d8 	.word	0x200011d8

08018e50 <_fclose_r>:
 8018e50:	b570      	push	{r4, r5, r6, lr}
 8018e52:	4606      	mov	r6, r0
 8018e54:	460c      	mov	r4, r1
 8018e56:	b911      	cbnz	r1, 8018e5e <_fclose_r+0xe>
 8018e58:	2500      	movs	r5, #0
 8018e5a:	4628      	mov	r0, r5
 8018e5c:	bd70      	pop	{r4, r5, r6, pc}
 8018e5e:	b118      	cbz	r0, 8018e68 <_fclose_r+0x18>
 8018e60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018e62:	b90b      	cbnz	r3, 8018e68 <_fclose_r+0x18>
 8018e64:	f7ff fc80 	bl	8018768 <__sinit>
 8018e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e6a:	07d8      	lsls	r0, r3, #31
 8018e6c:	d405      	bmi.n	8018e7a <_fclose_r+0x2a>
 8018e6e:	89a3      	ldrh	r3, [r4, #12]
 8018e70:	0599      	lsls	r1, r3, #22
 8018e72:	d402      	bmi.n	8018e7a <_fclose_r+0x2a>
 8018e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e76:	f7fd ff83 	bl	8016d80 <__retarget_lock_acquire_recursive>
 8018e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e7e:	b93b      	cbnz	r3, 8018e90 <_fclose_r+0x40>
 8018e80:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8018e82:	f015 0501 	ands.w	r5, r5, #1
 8018e86:	d1e7      	bne.n	8018e58 <_fclose_r+0x8>
 8018e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e8a:	f7fd ff7a 	bl	8016d82 <__retarget_lock_release_recursive>
 8018e8e:	e7e4      	b.n	8018e5a <_fclose_r+0xa>
 8018e90:	4621      	mov	r1, r4
 8018e92:	4630      	mov	r0, r6
 8018e94:	f7ff fb6e 	bl	8018574 <__sflush_r>
 8018e98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018e9a:	4605      	mov	r5, r0
 8018e9c:	b133      	cbz	r3, 8018eac <_fclose_r+0x5c>
 8018e9e:	69e1      	ldr	r1, [r4, #28]
 8018ea0:	4630      	mov	r0, r6
 8018ea2:	4798      	blx	r3
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	bfb8      	it	lt
 8018ea8:	f04f 35ff 	movlt.w	r5, #4294967295
 8018eac:	89a3      	ldrh	r3, [r4, #12]
 8018eae:	061a      	lsls	r2, r3, #24
 8018eb0:	d503      	bpl.n	8018eba <_fclose_r+0x6a>
 8018eb2:	6921      	ldr	r1, [r4, #16]
 8018eb4:	4630      	mov	r0, r6
 8018eb6:	f7fd fe9d 	bl	8016bf4 <_free_r>
 8018eba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018ebc:	b141      	cbz	r1, 8018ed0 <_fclose_r+0x80>
 8018ebe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018ec2:	4299      	cmp	r1, r3
 8018ec4:	d002      	beq.n	8018ecc <_fclose_r+0x7c>
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f7fd fe94 	bl	8016bf4 <_free_r>
 8018ecc:	2300      	movs	r3, #0
 8018ece:	6323      	str	r3, [r4, #48]	; 0x30
 8018ed0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018ed2:	b121      	cbz	r1, 8018ede <_fclose_r+0x8e>
 8018ed4:	4630      	mov	r0, r6
 8018ed6:	f7fd fe8d 	bl	8016bf4 <_free_r>
 8018eda:	2300      	movs	r3, #0
 8018edc:	6463      	str	r3, [r4, #68]	; 0x44
 8018ede:	f7ff fc2b 	bl	8018738 <__sfp_lock_acquire>
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	81a3      	strh	r3, [r4, #12]
 8018ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ee8:	07db      	lsls	r3, r3, #31
 8018eea:	d402      	bmi.n	8018ef2 <_fclose_r+0xa2>
 8018eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018eee:	f7fd ff48 	bl	8016d82 <__retarget_lock_release_recursive>
 8018ef2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ef4:	f7fd ff43 	bl	8016d7e <__retarget_lock_close_recursive>
 8018ef8:	f7ff fc24 	bl	8018744 <__sfp_lock_release>
 8018efc:	e7ad      	b.n	8018e5a <_fclose_r+0xa>
	...

08018f00 <_fstat_r>:
 8018f00:	b538      	push	{r3, r4, r5, lr}
 8018f02:	4d07      	ldr	r5, [pc, #28]	; (8018f20 <_fstat_r+0x20>)
 8018f04:	2300      	movs	r3, #0
 8018f06:	4604      	mov	r4, r0
 8018f08:	4608      	mov	r0, r1
 8018f0a:	4611      	mov	r1, r2
 8018f0c:	602b      	str	r3, [r5, #0]
 8018f0e:	f000 fab2 	bl	8019476 <_fstat>
 8018f12:	1c43      	adds	r3, r0, #1
 8018f14:	d102      	bne.n	8018f1c <_fstat_r+0x1c>
 8018f16:	682b      	ldr	r3, [r5, #0]
 8018f18:	b103      	cbz	r3, 8018f1c <_fstat_r+0x1c>
 8018f1a:	6023      	str	r3, [r4, #0]
 8018f1c:	bd38      	pop	{r3, r4, r5, pc}
 8018f1e:	bf00      	nop
 8018f20:	200011d8 	.word	0x200011d8

08018f24 <_isatty_r>:
 8018f24:	b538      	push	{r3, r4, r5, lr}
 8018f26:	4d06      	ldr	r5, [pc, #24]	; (8018f40 <_isatty_r+0x1c>)
 8018f28:	2300      	movs	r3, #0
 8018f2a:	4604      	mov	r4, r0
 8018f2c:	4608      	mov	r0, r1
 8018f2e:	602b      	str	r3, [r5, #0]
 8018f30:	f000 fba8 	bl	8019684 <_isatty>
 8018f34:	1c43      	adds	r3, r0, #1
 8018f36:	d102      	bne.n	8018f3e <_isatty_r+0x1a>
 8018f38:	682b      	ldr	r3, [r5, #0]
 8018f3a:	b103      	cbz	r3, 8018f3e <_isatty_r+0x1a>
 8018f3c:	6023      	str	r3, [r4, #0]
 8018f3e:	bd38      	pop	{r3, r4, r5, pc}
 8018f40:	200011d8 	.word	0x200011d8

08018f44 <_lseek_r>:
 8018f44:	b538      	push	{r3, r4, r5, lr}
 8018f46:	4d07      	ldr	r5, [pc, #28]	; (8018f64 <_lseek_r+0x20>)
 8018f48:	4604      	mov	r4, r0
 8018f4a:	4608      	mov	r0, r1
 8018f4c:	4611      	mov	r1, r2
 8018f4e:	2200      	movs	r2, #0
 8018f50:	602a      	str	r2, [r5, #0]
 8018f52:	461a      	mov	r2, r3
 8018f54:	f000 fa03 	bl	801935e <_lseek>
 8018f58:	1c43      	adds	r3, r0, #1
 8018f5a:	d102      	bne.n	8018f62 <_lseek_r+0x1e>
 8018f5c:	682b      	ldr	r3, [r5, #0]
 8018f5e:	b103      	cbz	r3, 8018f62 <_lseek_r+0x1e>
 8018f60:	6023      	str	r3, [r4, #0]
 8018f62:	bd38      	pop	{r3, r4, r5, pc}
 8018f64:	200011d8 	.word	0x200011d8

08018f68 <_read_r>:
 8018f68:	b538      	push	{r3, r4, r5, lr}
 8018f6a:	4d07      	ldr	r5, [pc, #28]	; (8018f88 <_read_r+0x20>)
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	4608      	mov	r0, r1
 8018f70:	4611      	mov	r1, r2
 8018f72:	2200      	movs	r2, #0
 8018f74:	602a      	str	r2, [r5, #0]
 8018f76:	461a      	mov	r2, r3
 8018f78:	f000 f999 	bl	80192ae <_read>
 8018f7c:	1c43      	adds	r3, r0, #1
 8018f7e:	d102      	bne.n	8018f86 <_read_r+0x1e>
 8018f80:	682b      	ldr	r3, [r5, #0]
 8018f82:	b103      	cbz	r3, 8018f86 <_read_r+0x1e>
 8018f84:	6023      	str	r3, [r4, #0]
 8018f86:	bd38      	pop	{r3, r4, r5, pc}
 8018f88:	200011d8 	.word	0x200011d8
 8018f8c:	00000000 	.word	0x00000000

08018f90 <floor>:
 8018f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f94:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018f98:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018f9c:	2e13      	cmp	r6, #19
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	4605      	mov	r5, r0
 8018fa6:	4680      	mov	r8, r0
 8018fa8:	dc33      	bgt.n	8019012 <floor+0x82>
 8018faa:	2e00      	cmp	r6, #0
 8018fac:	da14      	bge.n	8018fd8 <floor+0x48>
 8018fae:	a334      	add	r3, pc, #208	; (adr r3, 8019080 <floor+0xf0>)
 8018fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fb4:	f7e7 f9c2 	bl	800033c <__adddf3>
 8018fb8:	2200      	movs	r2, #0
 8018fba:	2300      	movs	r3, #0
 8018fbc:	f7e7 fe04 	bl	8000bc8 <__aeabi_dcmpgt>
 8018fc0:	b138      	cbz	r0, 8018fd2 <floor+0x42>
 8018fc2:	2c00      	cmp	r4, #0
 8018fc4:	da57      	bge.n	8019076 <floor+0xe6>
 8018fc6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018fca:	431d      	orrs	r5, r3
 8018fcc:	d001      	beq.n	8018fd2 <floor+0x42>
 8018fce:	4c2e      	ldr	r4, [pc, #184]	; (8019088 <floor+0xf8>)
 8018fd0:	2500      	movs	r5, #0
 8018fd2:	4623      	mov	r3, r4
 8018fd4:	462a      	mov	r2, r5
 8018fd6:	e025      	b.n	8019024 <floor+0x94>
 8018fd8:	4f2c      	ldr	r7, [pc, #176]	; (801908c <floor+0xfc>)
 8018fda:	4137      	asrs	r7, r6
 8018fdc:	ea01 0c07 	and.w	ip, r1, r7
 8018fe0:	ea5c 0c00 	orrs.w	ip, ip, r0
 8018fe4:	d01e      	beq.n	8019024 <floor+0x94>
 8018fe6:	a326      	add	r3, pc, #152	; (adr r3, 8019080 <floor+0xf0>)
 8018fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fec:	f7e7 f9a6 	bl	800033c <__adddf3>
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	f7e7 fde8 	bl	8000bc8 <__aeabi_dcmpgt>
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d0ea      	beq.n	8018fd2 <floor+0x42>
 8018ffc:	2c00      	cmp	r4, #0
 8018ffe:	bfbe      	ittt	lt
 8019000:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019004:	fa43 f606 	asrlt.w	r6, r3, r6
 8019008:	19a4      	addlt	r4, r4, r6
 801900a:	ea24 0407 	bic.w	r4, r4, r7
 801900e:	2500      	movs	r5, #0
 8019010:	e7df      	b.n	8018fd2 <floor+0x42>
 8019012:	2e33      	cmp	r6, #51	; 0x33
 8019014:	dd0a      	ble.n	801902c <floor+0x9c>
 8019016:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801901a:	d103      	bne.n	8019024 <floor+0x94>
 801901c:	f7e7 f98e 	bl	800033c <__adddf3>
 8019020:	4602      	mov	r2, r0
 8019022:	460b      	mov	r3, r1
 8019024:	4610      	mov	r0, r2
 8019026:	4619      	mov	r1, r3
 8019028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801902c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019030:	f04f 3cff 	mov.w	ip, #4294967295
 8019034:	fa2c f707 	lsr.w	r7, ip, r7
 8019038:	4207      	tst	r7, r0
 801903a:	d0f3      	beq.n	8019024 <floor+0x94>
 801903c:	a310      	add	r3, pc, #64	; (adr r3, 8019080 <floor+0xf0>)
 801903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019042:	f7e7 f97b 	bl	800033c <__adddf3>
 8019046:	2200      	movs	r2, #0
 8019048:	2300      	movs	r3, #0
 801904a:	f7e7 fdbd 	bl	8000bc8 <__aeabi_dcmpgt>
 801904e:	2800      	cmp	r0, #0
 8019050:	d0bf      	beq.n	8018fd2 <floor+0x42>
 8019052:	2c00      	cmp	r4, #0
 8019054:	da02      	bge.n	801905c <floor+0xcc>
 8019056:	2e14      	cmp	r6, #20
 8019058:	d103      	bne.n	8019062 <floor+0xd2>
 801905a:	3401      	adds	r4, #1
 801905c:	ea25 0507 	bic.w	r5, r5, r7
 8019060:	e7b7      	b.n	8018fd2 <floor+0x42>
 8019062:	2301      	movs	r3, #1
 8019064:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019068:	fa03 f606 	lsl.w	r6, r3, r6
 801906c:	4435      	add	r5, r6
 801906e:	4545      	cmp	r5, r8
 8019070:	bf38      	it	cc
 8019072:	18e4      	addcc	r4, r4, r3
 8019074:	e7f2      	b.n	801905c <floor+0xcc>
 8019076:	2500      	movs	r5, #0
 8019078:	462c      	mov	r4, r5
 801907a:	e7aa      	b.n	8018fd2 <floor+0x42>
 801907c:	f3af 8000 	nop.w
 8019080:	8800759c 	.word	0x8800759c
 8019084:	7e37e43c 	.word	0x7e37e43c
 8019088:	bff00000 	.word	0xbff00000
 801908c:	000fffff 	.word	0x000fffff

08019090 <sqrt>:
 8019090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019092:	4606      	mov	r6, r0
 8019094:	460f      	mov	r7, r1
 8019096:	f000 f81f 	bl	80190d8 <__ieee754_sqrt>
 801909a:	4632      	mov	r2, r6
 801909c:	4604      	mov	r4, r0
 801909e:	460d      	mov	r5, r1
 80190a0:	463b      	mov	r3, r7
 80190a2:	4630      	mov	r0, r6
 80190a4:	4639      	mov	r1, r7
 80190a6:	f7e7 fd99 	bl	8000bdc <__aeabi_dcmpun>
 80190aa:	b990      	cbnz	r0, 80190d2 <sqrt+0x42>
 80190ac:	2200      	movs	r2, #0
 80190ae:	2300      	movs	r3, #0
 80190b0:	4630      	mov	r0, r6
 80190b2:	4639      	mov	r1, r7
 80190b4:	f7e7 fd6a 	bl	8000b8c <__aeabi_dcmplt>
 80190b8:	b158      	cbz	r0, 80190d2 <sqrt+0x42>
 80190ba:	f7fb f9ff 	bl	80144bc <__errno>
 80190be:	2321      	movs	r3, #33	; 0x21
 80190c0:	6003      	str	r3, [r0, #0]
 80190c2:	2200      	movs	r2, #0
 80190c4:	2300      	movs	r3, #0
 80190c6:	4610      	mov	r0, r2
 80190c8:	4619      	mov	r1, r3
 80190ca:	f7e7 fc17 	bl	80008fc <__aeabi_ddiv>
 80190ce:	4604      	mov	r4, r0
 80190d0:	460d      	mov	r5, r1
 80190d2:	4620      	mov	r0, r4
 80190d4:	4629      	mov	r1, r5
 80190d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080190d8 <__ieee754_sqrt>:
 80190d8:	f8df c154 	ldr.w	ip, [pc, #340]	; 8019230 <__ieee754_sqrt+0x158>
 80190dc:	ea3c 0c01 	bics.w	ip, ip, r1
 80190e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e4:	460a      	mov	r2, r1
 80190e6:	4604      	mov	r4, r0
 80190e8:	460d      	mov	r5, r1
 80190ea:	460e      	mov	r6, r1
 80190ec:	4607      	mov	r7, r0
 80190ee:	4603      	mov	r3, r0
 80190f0:	d10f      	bne.n	8019112 <__ieee754_sqrt+0x3a>
 80190f2:	4602      	mov	r2, r0
 80190f4:	460b      	mov	r3, r1
 80190f6:	f7e7 fad7 	bl	80006a8 <__aeabi_dmul>
 80190fa:	4602      	mov	r2, r0
 80190fc:	460b      	mov	r3, r1
 80190fe:	4620      	mov	r0, r4
 8019100:	4629      	mov	r1, r5
 8019102:	f7e7 f91b 	bl	800033c <__adddf3>
 8019106:	4604      	mov	r4, r0
 8019108:	460d      	mov	r5, r1
 801910a:	4620      	mov	r0, r4
 801910c:	4629      	mov	r1, r5
 801910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019112:	2900      	cmp	r1, #0
 8019114:	dc0e      	bgt.n	8019134 <__ieee754_sqrt+0x5c>
 8019116:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801911a:	ea5c 0707 	orrs.w	r7, ip, r7
 801911e:	d0f4      	beq.n	801910a <__ieee754_sqrt+0x32>
 8019120:	b141      	cbz	r1, 8019134 <__ieee754_sqrt+0x5c>
 8019122:	4602      	mov	r2, r0
 8019124:	460b      	mov	r3, r1
 8019126:	f7e7 f907 	bl	8000338 <__aeabi_dsub>
 801912a:	4602      	mov	r2, r0
 801912c:	460b      	mov	r3, r1
 801912e:	f7e7 fbe5 	bl	80008fc <__aeabi_ddiv>
 8019132:	e7e8      	b.n	8019106 <__ieee754_sqrt+0x2e>
 8019134:	1531      	asrs	r1, r6, #20
 8019136:	d074      	beq.n	8019222 <__ieee754_sqrt+0x14a>
 8019138:	07cc      	lsls	r4, r1, #31
 801913a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801913e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8019142:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019146:	bf5e      	ittt	pl
 8019148:	0fd9      	lsrpl	r1, r3, #31
 801914a:	005b      	lslpl	r3, r3, #1
 801914c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8019150:	2400      	movs	r4, #0
 8019152:	0fd9      	lsrs	r1, r3, #31
 8019154:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8019158:	107f      	asrs	r7, r7, #1
 801915a:	005b      	lsls	r3, r3, #1
 801915c:	2516      	movs	r5, #22
 801915e:	4620      	mov	r0, r4
 8019160:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019164:	1846      	adds	r6, r0, r1
 8019166:	4296      	cmp	r6, r2
 8019168:	bfde      	ittt	le
 801916a:	1b92      	suble	r2, r2, r6
 801916c:	1870      	addle	r0, r6, r1
 801916e:	1864      	addle	r4, r4, r1
 8019170:	0052      	lsls	r2, r2, #1
 8019172:	3d01      	subs	r5, #1
 8019174:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019178:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801917c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019180:	d1f0      	bne.n	8019164 <__ieee754_sqrt+0x8c>
 8019182:	4629      	mov	r1, r5
 8019184:	f04f 0e20 	mov.w	lr, #32
 8019188:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801918c:	4282      	cmp	r2, r0
 801918e:	eb06 0c05 	add.w	ip, r6, r5
 8019192:	dc02      	bgt.n	801919a <__ieee754_sqrt+0xc2>
 8019194:	d113      	bne.n	80191be <__ieee754_sqrt+0xe6>
 8019196:	459c      	cmp	ip, r3
 8019198:	d811      	bhi.n	80191be <__ieee754_sqrt+0xe6>
 801919a:	f1bc 0f00 	cmp.w	ip, #0
 801919e:	eb0c 0506 	add.w	r5, ip, r6
 80191a2:	da43      	bge.n	801922c <__ieee754_sqrt+0x154>
 80191a4:	2d00      	cmp	r5, #0
 80191a6:	db41      	blt.n	801922c <__ieee754_sqrt+0x154>
 80191a8:	f100 0801 	add.w	r8, r0, #1
 80191ac:	1a12      	subs	r2, r2, r0
 80191ae:	459c      	cmp	ip, r3
 80191b0:	bf88      	it	hi
 80191b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80191b6:	eba3 030c 	sub.w	r3, r3, ip
 80191ba:	4431      	add	r1, r6
 80191bc:	4640      	mov	r0, r8
 80191be:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80191c2:	f1be 0e01 	subs.w	lr, lr, #1
 80191c6:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80191ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80191ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80191d2:	d1db      	bne.n	801918c <__ieee754_sqrt+0xb4>
 80191d4:	4313      	orrs	r3, r2
 80191d6:	d006      	beq.n	80191e6 <__ieee754_sqrt+0x10e>
 80191d8:	1c48      	adds	r0, r1, #1
 80191da:	bf13      	iteet	ne
 80191dc:	3101      	addne	r1, #1
 80191de:	3401      	addeq	r4, #1
 80191e0:	4671      	moveq	r1, lr
 80191e2:	f021 0101 	bicne.w	r1, r1, #1
 80191e6:	1063      	asrs	r3, r4, #1
 80191e8:	0849      	lsrs	r1, r1, #1
 80191ea:	07e2      	lsls	r2, r4, #31
 80191ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80191f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80191f4:	bf48      	it	mi
 80191f6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80191fa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80191fe:	460c      	mov	r4, r1
 8019200:	e783      	b.n	801910a <__ieee754_sqrt+0x32>
 8019202:	0ada      	lsrs	r2, r3, #11
 8019204:	3815      	subs	r0, #21
 8019206:	055b      	lsls	r3, r3, #21
 8019208:	2a00      	cmp	r2, #0
 801920a:	d0fa      	beq.n	8019202 <__ieee754_sqrt+0x12a>
 801920c:	02d5      	lsls	r5, r2, #11
 801920e:	d50a      	bpl.n	8019226 <__ieee754_sqrt+0x14e>
 8019210:	f1c1 0420 	rsb	r4, r1, #32
 8019214:	fa23 f404 	lsr.w	r4, r3, r4
 8019218:	1e4d      	subs	r5, r1, #1
 801921a:	408b      	lsls	r3, r1
 801921c:	4322      	orrs	r2, r4
 801921e:	1b41      	subs	r1, r0, r5
 8019220:	e78a      	b.n	8019138 <__ieee754_sqrt+0x60>
 8019222:	4608      	mov	r0, r1
 8019224:	e7f0      	b.n	8019208 <__ieee754_sqrt+0x130>
 8019226:	0052      	lsls	r2, r2, #1
 8019228:	3101      	adds	r1, #1
 801922a:	e7ef      	b.n	801920c <__ieee754_sqrt+0x134>
 801922c:	4680      	mov	r8, r0
 801922e:	e7bd      	b.n	80191ac <__ieee754_sqrt+0xd4>
 8019230:	7ff00000 	.word	0x7ff00000

08019234 <findslot>:
 8019234:	4b0a      	ldr	r3, [pc, #40]	; (8019260 <findslot+0x2c>)
 8019236:	b510      	push	{r4, lr}
 8019238:	4604      	mov	r4, r0
 801923a:	6818      	ldr	r0, [r3, #0]
 801923c:	b118      	cbz	r0, 8019246 <findslot+0x12>
 801923e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019240:	b90b      	cbnz	r3, 8019246 <findslot+0x12>
 8019242:	f7ff fa91 	bl	8018768 <__sinit>
 8019246:	2c13      	cmp	r4, #19
 8019248:	d807      	bhi.n	801925a <findslot+0x26>
 801924a:	4806      	ldr	r0, [pc, #24]	; (8019264 <findslot+0x30>)
 801924c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8019250:	3201      	adds	r2, #1
 8019252:	d002      	beq.n	801925a <findslot+0x26>
 8019254:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8019258:	bd10      	pop	{r4, pc}
 801925a:	2000      	movs	r0, #0
 801925c:	e7fc      	b.n	8019258 <findslot+0x24>
 801925e:	bf00      	nop
 8019260:	20000098 	.word	0x20000098
 8019264:	200011dc 	.word	0x200011dc

08019268 <error>:
 8019268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801926a:	4604      	mov	r4, r0
 801926c:	f7fb f926 	bl	80144bc <__errno>
 8019270:	2613      	movs	r6, #19
 8019272:	4605      	mov	r5, r0
 8019274:	2700      	movs	r7, #0
 8019276:	4630      	mov	r0, r6
 8019278:	4639      	mov	r1, r7
 801927a:	beab      	bkpt	0x00ab
 801927c:	4606      	mov	r6, r0
 801927e:	602e      	str	r6, [r5, #0]
 8019280:	4620      	mov	r0, r4
 8019282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019284 <checkerror>:
 8019284:	1c43      	adds	r3, r0, #1
 8019286:	d101      	bne.n	801928c <checkerror+0x8>
 8019288:	f7ff bfee 	b.w	8019268 <error>
 801928c:	4770      	bx	lr

0801928e <_swiread>:
 801928e:	b530      	push	{r4, r5, lr}
 8019290:	b085      	sub	sp, #20
 8019292:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8019296:	9203      	str	r2, [sp, #12]
 8019298:	2406      	movs	r4, #6
 801929a:	ad01      	add	r5, sp, #4
 801929c:	4620      	mov	r0, r4
 801929e:	4629      	mov	r1, r5
 80192a0:	beab      	bkpt	0x00ab
 80192a2:	4604      	mov	r4, r0
 80192a4:	4620      	mov	r0, r4
 80192a6:	f7ff ffed 	bl	8019284 <checkerror>
 80192aa:	b005      	add	sp, #20
 80192ac:	bd30      	pop	{r4, r5, pc}

080192ae <_read>:
 80192ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192b0:	4615      	mov	r5, r2
 80192b2:	9101      	str	r1, [sp, #4]
 80192b4:	f7ff ffbe 	bl	8019234 <findslot>
 80192b8:	9901      	ldr	r1, [sp, #4]
 80192ba:	4604      	mov	r4, r0
 80192bc:	b938      	cbnz	r0, 80192ce <_read+0x20>
 80192be:	f7fb f8fd 	bl	80144bc <__errno>
 80192c2:	2309      	movs	r3, #9
 80192c4:	6003      	str	r3, [r0, #0]
 80192c6:	f04f 30ff 	mov.w	r0, #4294967295
 80192ca:	b003      	add	sp, #12
 80192cc:	bd30      	pop	{r4, r5, pc}
 80192ce:	6800      	ldr	r0, [r0, #0]
 80192d0:	462a      	mov	r2, r5
 80192d2:	f7ff ffdc 	bl	801928e <_swiread>
 80192d6:	1c43      	adds	r3, r0, #1
 80192d8:	d0f7      	beq.n	80192ca <_read+0x1c>
 80192da:	6863      	ldr	r3, [r4, #4]
 80192dc:	1a2a      	subs	r2, r5, r0
 80192de:	4413      	add	r3, r2
 80192e0:	6063      	str	r3, [r4, #4]
 80192e2:	4610      	mov	r0, r2
 80192e4:	e7f1      	b.n	80192ca <_read+0x1c>

080192e6 <_swilseek>:
 80192e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192e8:	460c      	mov	r4, r1
 80192ea:	4616      	mov	r6, r2
 80192ec:	f7ff ffa2 	bl	8019234 <findslot>
 80192f0:	4605      	mov	r5, r0
 80192f2:	b940      	cbnz	r0, 8019306 <_swilseek+0x20>
 80192f4:	f7fb f8e2 	bl	80144bc <__errno>
 80192f8:	2309      	movs	r3, #9
 80192fa:	6003      	str	r3, [r0, #0]
 80192fc:	f04f 34ff 	mov.w	r4, #4294967295
 8019300:	4620      	mov	r0, r4
 8019302:	b003      	add	sp, #12
 8019304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019306:	2e02      	cmp	r6, #2
 8019308:	d903      	bls.n	8019312 <_swilseek+0x2c>
 801930a:	f7fb f8d7 	bl	80144bc <__errno>
 801930e:	2316      	movs	r3, #22
 8019310:	e7f3      	b.n	80192fa <_swilseek+0x14>
 8019312:	2e01      	cmp	r6, #1
 8019314:	d112      	bne.n	801933c <_swilseek+0x56>
 8019316:	6843      	ldr	r3, [r0, #4]
 8019318:	18e4      	adds	r4, r4, r3
 801931a:	d4f6      	bmi.n	801930a <_swilseek+0x24>
 801931c:	682b      	ldr	r3, [r5, #0]
 801931e:	260a      	movs	r6, #10
 8019320:	e9cd 3400 	strd	r3, r4, [sp]
 8019324:	466f      	mov	r7, sp
 8019326:	4630      	mov	r0, r6
 8019328:	4639      	mov	r1, r7
 801932a:	beab      	bkpt	0x00ab
 801932c:	4606      	mov	r6, r0
 801932e:	4630      	mov	r0, r6
 8019330:	f7ff ffa8 	bl	8019284 <checkerror>
 8019334:	2800      	cmp	r0, #0
 8019336:	dbe1      	blt.n	80192fc <_swilseek+0x16>
 8019338:	606c      	str	r4, [r5, #4]
 801933a:	e7e1      	b.n	8019300 <_swilseek+0x1a>
 801933c:	2e02      	cmp	r6, #2
 801933e:	d1ed      	bne.n	801931c <_swilseek+0x36>
 8019340:	6803      	ldr	r3, [r0, #0]
 8019342:	9300      	str	r3, [sp, #0]
 8019344:	260c      	movs	r6, #12
 8019346:	466f      	mov	r7, sp
 8019348:	4630      	mov	r0, r6
 801934a:	4639      	mov	r1, r7
 801934c:	beab      	bkpt	0x00ab
 801934e:	4606      	mov	r6, r0
 8019350:	4630      	mov	r0, r6
 8019352:	f7ff ff97 	bl	8019284 <checkerror>
 8019356:	1c43      	adds	r3, r0, #1
 8019358:	d0d0      	beq.n	80192fc <_swilseek+0x16>
 801935a:	4404      	add	r4, r0
 801935c:	e7de      	b.n	801931c <_swilseek+0x36>

0801935e <_lseek>:
 801935e:	f7ff bfc2 	b.w	80192e6 <_swilseek>

08019362 <_swiwrite>:
 8019362:	b530      	push	{r4, r5, lr}
 8019364:	b085      	sub	sp, #20
 8019366:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801936a:	9203      	str	r2, [sp, #12]
 801936c:	2405      	movs	r4, #5
 801936e:	ad01      	add	r5, sp, #4
 8019370:	4620      	mov	r0, r4
 8019372:	4629      	mov	r1, r5
 8019374:	beab      	bkpt	0x00ab
 8019376:	4604      	mov	r4, r0
 8019378:	4620      	mov	r0, r4
 801937a:	f7ff ff83 	bl	8019284 <checkerror>
 801937e:	b005      	add	sp, #20
 8019380:	bd30      	pop	{r4, r5, pc}

08019382 <_write>:
 8019382:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019384:	4615      	mov	r5, r2
 8019386:	9101      	str	r1, [sp, #4]
 8019388:	f7ff ff54 	bl	8019234 <findslot>
 801938c:	9901      	ldr	r1, [sp, #4]
 801938e:	4604      	mov	r4, r0
 8019390:	b930      	cbnz	r0, 80193a0 <_write+0x1e>
 8019392:	f7fb f893 	bl	80144bc <__errno>
 8019396:	2309      	movs	r3, #9
 8019398:	6003      	str	r3, [r0, #0]
 801939a:	f04f 30ff 	mov.w	r0, #4294967295
 801939e:	e012      	b.n	80193c6 <_write+0x44>
 80193a0:	6800      	ldr	r0, [r0, #0]
 80193a2:	462a      	mov	r2, r5
 80193a4:	f7ff ffdd 	bl	8019362 <_swiwrite>
 80193a8:	2800      	cmp	r0, #0
 80193aa:	dbf6      	blt.n	801939a <_write+0x18>
 80193ac:	6862      	ldr	r2, [r4, #4]
 80193ae:	1a2b      	subs	r3, r5, r0
 80193b0:	441a      	add	r2, r3
 80193b2:	42a8      	cmp	r0, r5
 80193b4:	6062      	str	r2, [r4, #4]
 80193b6:	d105      	bne.n	80193c4 <_write+0x42>
 80193b8:	2000      	movs	r0, #0
 80193ba:	b003      	add	sp, #12
 80193bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193c0:	f7ff bf52 	b.w	8019268 <error>
 80193c4:	4618      	mov	r0, r3
 80193c6:	b003      	add	sp, #12
 80193c8:	bd30      	pop	{r4, r5, pc}

080193ca <_swiclose>:
 80193ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80193cc:	2402      	movs	r4, #2
 80193ce:	9001      	str	r0, [sp, #4]
 80193d0:	ad01      	add	r5, sp, #4
 80193d2:	4620      	mov	r0, r4
 80193d4:	4629      	mov	r1, r5
 80193d6:	beab      	bkpt	0x00ab
 80193d8:	4604      	mov	r4, r0
 80193da:	4620      	mov	r0, r4
 80193dc:	f7ff ff52 	bl	8019284 <checkerror>
 80193e0:	b003      	add	sp, #12
 80193e2:	bd30      	pop	{r4, r5, pc}

080193e4 <_close>:
 80193e4:	b538      	push	{r3, r4, r5, lr}
 80193e6:	4605      	mov	r5, r0
 80193e8:	f7ff ff24 	bl	8019234 <findslot>
 80193ec:	4604      	mov	r4, r0
 80193ee:	b930      	cbnz	r0, 80193fe <_close+0x1a>
 80193f0:	f7fb f864 	bl	80144bc <__errno>
 80193f4:	2309      	movs	r3, #9
 80193f6:	6003      	str	r3, [r0, #0]
 80193f8:	f04f 30ff 	mov.w	r0, #4294967295
 80193fc:	bd38      	pop	{r3, r4, r5, pc}
 80193fe:	3d01      	subs	r5, #1
 8019400:	2d01      	cmp	r5, #1
 8019402:	d809      	bhi.n	8019418 <_close+0x34>
 8019404:	4b09      	ldr	r3, [pc, #36]	; (801942c <_close+0x48>)
 8019406:	689a      	ldr	r2, [r3, #8]
 8019408:	691b      	ldr	r3, [r3, #16]
 801940a:	429a      	cmp	r2, r3
 801940c:	d104      	bne.n	8019418 <_close+0x34>
 801940e:	f04f 33ff 	mov.w	r3, #4294967295
 8019412:	6003      	str	r3, [r0, #0]
 8019414:	2000      	movs	r0, #0
 8019416:	e7f1      	b.n	80193fc <_close+0x18>
 8019418:	6820      	ldr	r0, [r4, #0]
 801941a:	f7ff ffd6 	bl	80193ca <_swiclose>
 801941e:	2800      	cmp	r0, #0
 8019420:	d1ec      	bne.n	80193fc <_close+0x18>
 8019422:	f04f 33ff 	mov.w	r3, #4294967295
 8019426:	6023      	str	r3, [r4, #0]
 8019428:	e7e8      	b.n	80193fc <_close+0x18>
 801942a:	bf00      	nop
 801942c:	200011dc 	.word	0x200011dc

08019430 <_getpid>:
 8019430:	2001      	movs	r0, #1
 8019432:	4770      	bx	lr

08019434 <_swistat>:
 8019434:	b570      	push	{r4, r5, r6, lr}
 8019436:	460c      	mov	r4, r1
 8019438:	f7ff fefc 	bl	8019234 <findslot>
 801943c:	4605      	mov	r5, r0
 801943e:	b930      	cbnz	r0, 801944e <_swistat+0x1a>
 8019440:	f7fb f83c 	bl	80144bc <__errno>
 8019444:	2309      	movs	r3, #9
 8019446:	6003      	str	r3, [r0, #0]
 8019448:	f04f 30ff 	mov.w	r0, #4294967295
 801944c:	bd70      	pop	{r4, r5, r6, pc}
 801944e:	6863      	ldr	r3, [r4, #4]
 8019450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019454:	6063      	str	r3, [r4, #4]
 8019456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801945a:	64a3      	str	r3, [r4, #72]	; 0x48
 801945c:	260c      	movs	r6, #12
 801945e:	4630      	mov	r0, r6
 8019460:	4629      	mov	r1, r5
 8019462:	beab      	bkpt	0x00ab
 8019464:	4605      	mov	r5, r0
 8019466:	4628      	mov	r0, r5
 8019468:	f7ff ff0c 	bl	8019284 <checkerror>
 801946c:	1c43      	adds	r3, r0, #1
 801946e:	bf1c      	itt	ne
 8019470:	6120      	strne	r0, [r4, #16]
 8019472:	2000      	movne	r0, #0
 8019474:	e7ea      	b.n	801944c <_swistat+0x18>

08019476 <_fstat>:
 8019476:	460b      	mov	r3, r1
 8019478:	b510      	push	{r4, lr}
 801947a:	2100      	movs	r1, #0
 801947c:	4604      	mov	r4, r0
 801947e:	2258      	movs	r2, #88	; 0x58
 8019480:	4618      	mov	r0, r3
 8019482:	f7fb fa99 	bl	80149b8 <memset>
 8019486:	4601      	mov	r1, r0
 8019488:	4620      	mov	r0, r4
 801948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801948e:	f7ff bfd1 	b.w	8019434 <_swistat>

08019492 <_stat>:
 8019492:	b538      	push	{r3, r4, r5, lr}
 8019494:	460d      	mov	r5, r1
 8019496:	4604      	mov	r4, r0
 8019498:	2258      	movs	r2, #88	; 0x58
 801949a:	2100      	movs	r1, #0
 801949c:	4628      	mov	r0, r5
 801949e:	f7fb fa8b 	bl	80149b8 <memset>
 80194a2:	4620      	mov	r0, r4
 80194a4:	2100      	movs	r1, #0
 80194a6:	f000 f811 	bl	80194cc <_swiopen>
 80194aa:	1c43      	adds	r3, r0, #1
 80194ac:	4604      	mov	r4, r0
 80194ae:	d00b      	beq.n	80194c8 <_stat+0x36>
 80194b0:	686b      	ldr	r3, [r5, #4]
 80194b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80194b6:	606b      	str	r3, [r5, #4]
 80194b8:	4629      	mov	r1, r5
 80194ba:	f7ff ffbb 	bl	8019434 <_swistat>
 80194be:	4605      	mov	r5, r0
 80194c0:	4620      	mov	r0, r4
 80194c2:	f7ff ff8f 	bl	80193e4 <_close>
 80194c6:	462c      	mov	r4, r5
 80194c8:	4620      	mov	r0, r4
 80194ca:	bd38      	pop	{r3, r4, r5, pc}

080194cc <_swiopen>:
 80194cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194d0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 801957c <_swiopen+0xb0>
 80194d4:	b097      	sub	sp, #92	; 0x5c
 80194d6:	4607      	mov	r7, r0
 80194d8:	460e      	mov	r6, r1
 80194da:	2500      	movs	r5, #0
 80194dc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80194e0:	1c61      	adds	r1, r4, #1
 80194e2:	d037      	beq.n	8019554 <_swiopen+0x88>
 80194e4:	3501      	adds	r5, #1
 80194e6:	2d14      	cmp	r5, #20
 80194e8:	d1f8      	bne.n	80194dc <_swiopen+0x10>
 80194ea:	f7fa ffe7 	bl	80144bc <__errno>
 80194ee:	2318      	movs	r3, #24
 80194f0:	6003      	str	r3, [r0, #0]
 80194f2:	f04f 34ff 	mov.w	r4, #4294967295
 80194f6:	e03d      	b.n	8019574 <_swiopen+0xa8>
 80194f8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80194fc:	f240 6301 	movw	r3, #1537	; 0x601
 8019500:	07b2      	lsls	r2, r6, #30
 8019502:	bf48      	it	mi
 8019504:	f044 0402 	orrmi.w	r4, r4, #2
 8019508:	421e      	tst	r6, r3
 801950a:	bf18      	it	ne
 801950c:	f044 0404 	orrne.w	r4, r4, #4
 8019510:	0733      	lsls	r3, r6, #28
 8019512:	bf48      	it	mi
 8019514:	f024 0404 	bicmi.w	r4, r4, #4
 8019518:	4638      	mov	r0, r7
 801951a:	bf48      	it	mi
 801951c:	f044 0408 	orrmi.w	r4, r4, #8
 8019520:	9700      	str	r7, [sp, #0]
 8019522:	f7e6 fefd 	bl	8000320 <strlen>
 8019526:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801952a:	2401      	movs	r4, #1
 801952c:	4620      	mov	r0, r4
 801952e:	4649      	mov	r1, r9
 8019530:	beab      	bkpt	0x00ab
 8019532:	4604      	mov	r4, r0
 8019534:	2c00      	cmp	r4, #0
 8019536:	db08      	blt.n	801954a <_swiopen+0x7e>
 8019538:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 801953c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8019540:	2300      	movs	r3, #0
 8019542:	f8c8 3004 	str.w	r3, [r8, #4]
 8019546:	462c      	mov	r4, r5
 8019548:	e014      	b.n	8019574 <_swiopen+0xa8>
 801954a:	4620      	mov	r0, r4
 801954c:	f7ff fe8c 	bl	8019268 <error>
 8019550:	4604      	mov	r4, r0
 8019552:	e00f      	b.n	8019574 <_swiopen+0xa8>
 8019554:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8019558:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 801955c:	46e9      	mov	r9, sp
 801955e:	d1cb      	bne.n	80194f8 <_swiopen+0x2c>
 8019560:	4649      	mov	r1, r9
 8019562:	4638      	mov	r0, r7
 8019564:	f7ff ff95 	bl	8019492 <_stat>
 8019568:	3001      	adds	r0, #1
 801956a:	d0c5      	beq.n	80194f8 <_swiopen+0x2c>
 801956c:	f7fa ffa6 	bl	80144bc <__errno>
 8019570:	2311      	movs	r3, #17
 8019572:	6003      	str	r3, [r0, #0]
 8019574:	4620      	mov	r0, r4
 8019576:	b017      	add	sp, #92	; 0x5c
 8019578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801957c:	200011dc 	.word	0x200011dc

08019580 <_get_semihosting_exts>:
 8019580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019584:	4606      	mov	r6, r0
 8019586:	460f      	mov	r7, r1
 8019588:	482a      	ldr	r0, [pc, #168]	; (8019634 <_get_semihosting_exts+0xb4>)
 801958a:	2100      	movs	r1, #0
 801958c:	4615      	mov	r5, r2
 801958e:	f7ff ff9d 	bl	80194cc <_swiopen>
 8019592:	462a      	mov	r2, r5
 8019594:	4604      	mov	r4, r0
 8019596:	2100      	movs	r1, #0
 8019598:	4630      	mov	r0, r6
 801959a:	f7fb fa0d 	bl	80149b8 <memset>
 801959e:	1c63      	adds	r3, r4, #1
 80195a0:	d016      	beq.n	80195d0 <_get_semihosting_exts+0x50>
 80195a2:	4620      	mov	r0, r4
 80195a4:	f7ff fe46 	bl	8019234 <findslot>
 80195a8:	f04f 090c 	mov.w	r9, #12
 80195ac:	4680      	mov	r8, r0
 80195ae:	4648      	mov	r0, r9
 80195b0:	4641      	mov	r1, r8
 80195b2:	beab      	bkpt	0x00ab
 80195b4:	4680      	mov	r8, r0
 80195b6:	4640      	mov	r0, r8
 80195b8:	f7ff fe64 	bl	8019284 <checkerror>
 80195bc:	2803      	cmp	r0, #3
 80195be:	dd02      	ble.n	80195c6 <_get_semihosting_exts+0x46>
 80195c0:	1ec3      	subs	r3, r0, #3
 80195c2:	42ab      	cmp	r3, r5
 80195c4:	dc08      	bgt.n	80195d8 <_get_semihosting_exts+0x58>
 80195c6:	4620      	mov	r0, r4
 80195c8:	f7ff ff0c 	bl	80193e4 <_close>
 80195cc:	f04f 34ff 	mov.w	r4, #4294967295
 80195d0:	4620      	mov	r0, r4
 80195d2:	b003      	add	sp, #12
 80195d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195d8:	2204      	movs	r2, #4
 80195da:	eb0d 0102 	add.w	r1, sp, r2
 80195de:	4620      	mov	r0, r4
 80195e0:	f7ff fe65 	bl	80192ae <_read>
 80195e4:	2803      	cmp	r0, #3
 80195e6:	ddee      	ble.n	80195c6 <_get_semihosting_exts+0x46>
 80195e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80195ec:	2b53      	cmp	r3, #83	; 0x53
 80195ee:	d1ea      	bne.n	80195c6 <_get_semihosting_exts+0x46>
 80195f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80195f4:	2b48      	cmp	r3, #72	; 0x48
 80195f6:	d1e6      	bne.n	80195c6 <_get_semihosting_exts+0x46>
 80195f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80195fc:	2b46      	cmp	r3, #70	; 0x46
 80195fe:	d1e2      	bne.n	80195c6 <_get_semihosting_exts+0x46>
 8019600:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019604:	2b42      	cmp	r3, #66	; 0x42
 8019606:	d1de      	bne.n	80195c6 <_get_semihosting_exts+0x46>
 8019608:	2201      	movs	r2, #1
 801960a:	4639      	mov	r1, r7
 801960c:	4620      	mov	r0, r4
 801960e:	f7ff fe6a 	bl	80192e6 <_swilseek>
 8019612:	2800      	cmp	r0, #0
 8019614:	dbd7      	blt.n	80195c6 <_get_semihosting_exts+0x46>
 8019616:	462a      	mov	r2, r5
 8019618:	4631      	mov	r1, r6
 801961a:	4620      	mov	r0, r4
 801961c:	f7ff fe47 	bl	80192ae <_read>
 8019620:	4605      	mov	r5, r0
 8019622:	4620      	mov	r0, r4
 8019624:	f7ff fede 	bl	80193e4 <_close>
 8019628:	4628      	mov	r0, r5
 801962a:	f7ff fe2b 	bl	8019284 <checkerror>
 801962e:	4604      	mov	r4, r0
 8019630:	e7ce      	b.n	80195d0 <_get_semihosting_exts+0x50>
 8019632:	bf00      	nop
 8019634:	08019f6b 	.word	0x08019f6b

08019638 <initialise_semihosting_exts>:
 8019638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801963a:	4d0a      	ldr	r5, [pc, #40]	; (8019664 <initialise_semihosting_exts+0x2c>)
 801963c:	4c0a      	ldr	r4, [pc, #40]	; (8019668 <initialise_semihosting_exts+0x30>)
 801963e:	2100      	movs	r1, #0
 8019640:	2201      	movs	r2, #1
 8019642:	a801      	add	r0, sp, #4
 8019644:	6029      	str	r1, [r5, #0]
 8019646:	6022      	str	r2, [r4, #0]
 8019648:	f7ff ff9a 	bl	8019580 <_get_semihosting_exts>
 801964c:	2800      	cmp	r0, #0
 801964e:	dd07      	ble.n	8019660 <initialise_semihosting_exts+0x28>
 8019650:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019654:	f003 0201 	and.w	r2, r3, #1
 8019658:	f003 0302 	and.w	r3, r3, #2
 801965c:	602a      	str	r2, [r5, #0]
 801965e:	6023      	str	r3, [r4, #0]
 8019660:	b003      	add	sp, #12
 8019662:	bd30      	pop	{r4, r5, pc}
 8019664:	20000a48 	.word	0x20000a48
 8019668:	20000a4c 	.word	0x20000a4c

0801966c <_has_ext_exit_extended>:
 801966c:	b510      	push	{r4, lr}
 801966e:	4c04      	ldr	r4, [pc, #16]	; (8019680 <_has_ext_exit_extended+0x14>)
 8019670:	6823      	ldr	r3, [r4, #0]
 8019672:	2b00      	cmp	r3, #0
 8019674:	da01      	bge.n	801967a <_has_ext_exit_extended+0xe>
 8019676:	f7ff ffdf 	bl	8019638 <initialise_semihosting_exts>
 801967a:	6820      	ldr	r0, [r4, #0]
 801967c:	bd10      	pop	{r4, pc}
 801967e:	bf00      	nop
 8019680:	20000a48 	.word	0x20000a48

08019684 <_isatty>:
 8019684:	b570      	push	{r4, r5, r6, lr}
 8019686:	f7ff fdd5 	bl	8019234 <findslot>
 801968a:	2509      	movs	r5, #9
 801968c:	4604      	mov	r4, r0
 801968e:	b920      	cbnz	r0, 801969a <_isatty+0x16>
 8019690:	f7fa ff14 	bl	80144bc <__errno>
 8019694:	6005      	str	r5, [r0, #0]
 8019696:	4620      	mov	r0, r4
 8019698:	bd70      	pop	{r4, r5, r6, pc}
 801969a:	4628      	mov	r0, r5
 801969c:	4621      	mov	r1, r4
 801969e:	beab      	bkpt	0x00ab
 80196a0:	4604      	mov	r4, r0
 80196a2:	2c01      	cmp	r4, #1
 80196a4:	d0f7      	beq.n	8019696 <_isatty+0x12>
 80196a6:	f7fa ff09 	bl	80144bc <__errno>
 80196aa:	2400      	movs	r4, #0
 80196ac:	4605      	mov	r5, r0
 80196ae:	2613      	movs	r6, #19
 80196b0:	4630      	mov	r0, r6
 80196b2:	4621      	mov	r1, r4
 80196b4:	beab      	bkpt	0x00ab
 80196b6:	4606      	mov	r6, r0
 80196b8:	602e      	str	r6, [r5, #0]
 80196ba:	e7ec      	b.n	8019696 <_isatty+0x12>

080196bc <_exit>:
 80196bc:	4601      	mov	r1, r0
 80196be:	b508      	push	{r3, lr}
 80196c0:	4a02      	ldr	r2, [pc, #8]	; (80196cc <_exit+0x10>)
 80196c2:	f04f 30ff 	mov.w	r0, #4294967295
 80196c6:	f000 f803 	bl	80196d0 <_kill_shared>
 80196ca:	bf00      	nop
 80196cc:	00020026 	.word	0x00020026

080196d0 <_kill_shared>:
 80196d0:	b507      	push	{r0, r1, r2, lr}
 80196d2:	e9cd 2100 	strd	r2, r1, [sp]
 80196d6:	f7ff ffc9 	bl	801966c <_has_ext_exit_extended>
 80196da:	2800      	cmp	r0, #0
 80196dc:	bf14      	ite	ne
 80196de:	2420      	movne	r4, #32
 80196e0:	2418      	moveq	r4, #24
 80196e2:	f7ff ffc3 	bl	801966c <_has_ext_exit_extended>
 80196e6:	b120      	cbz	r0, 80196f2 <_kill_shared+0x22>
 80196e8:	466d      	mov	r5, sp
 80196ea:	4620      	mov	r0, r4
 80196ec:	4629      	mov	r1, r5
 80196ee:	beab      	bkpt	0x00ab
 80196f0:	4604      	mov	r4, r0
 80196f2:	9d00      	ldr	r5, [sp, #0]
 80196f4:	e7f9      	b.n	80196ea <_kill_shared+0x1a>
	...

080196f8 <_kill>:
 80196f8:	2906      	cmp	r1, #6
 80196fa:	b508      	push	{r3, lr}
 80196fc:	bf0c      	ite	eq
 80196fe:	4a02      	ldreq	r2, [pc, #8]	; (8019708 <_kill+0x10>)
 8019700:	4a02      	ldrne	r2, [pc, #8]	; (801970c <_kill+0x14>)
 8019702:	f7ff ffe5 	bl	80196d0 <_kill_shared>
 8019706:	bf00      	nop
 8019708:	00020023 	.word	0x00020023
 801970c:	00020026 	.word	0x00020026

08019710 <_init>:
 8019710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019712:	bf00      	nop
 8019714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019716:	bc08      	pop	{r3}
 8019718:	469e      	mov	lr, r3
 801971a:	4770      	bx	lr

0801971c <_fini>:
 801971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801971e:	bf00      	nop
 8019720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019722:	bc08      	pop	{r3}
 8019724:	469e      	mov	lr, r3
 8019726:	4770      	bx	lr
